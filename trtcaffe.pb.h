// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: trtcaffe.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_trtcaffe_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_trtcaffe_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_trtcaffe_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_trtcaffe_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[69]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_trtcaffe_2eproto;
namespace trtcaffe {
class AccuracyParameter;
class AccuracyParameterDefaultTypeInternal;
extern AccuracyParameterDefaultTypeInternal _AccuracyParameter_default_instance_;
class ArgMaxParameter;
class ArgMaxParameterDefaultTypeInternal;
extern ArgMaxParameterDefaultTypeInternal _ArgMaxParameter_default_instance_;
class BatchNormParameter;
class BatchNormParameterDefaultTypeInternal;
extern BatchNormParameterDefaultTypeInternal _BatchNormParameter_default_instance_;
class BiasParameter;
class BiasParameterDefaultTypeInternal;
extern BiasParameterDefaultTypeInternal _BiasParameter_default_instance_;
class BlobProto;
class BlobProtoDefaultTypeInternal;
extern BlobProtoDefaultTypeInternal _BlobProto_default_instance_;
class BlobProtoVector;
class BlobProtoVectorDefaultTypeInternal;
extern BlobProtoVectorDefaultTypeInternal _BlobProtoVector_default_instance_;
class BlobShape;
class BlobShapeDefaultTypeInternal;
extern BlobShapeDefaultTypeInternal _BlobShape_default_instance_;
class ClipParameter;
class ClipParameterDefaultTypeInternal;
extern ClipParameterDefaultTypeInternal _ClipParameter_default_instance_;
class ConcatParameter;
class ConcatParameterDefaultTypeInternal;
extern ConcatParameterDefaultTypeInternal _ConcatParameter_default_instance_;
class ContrastiveLossParameter;
class ContrastiveLossParameterDefaultTypeInternal;
extern ContrastiveLossParameterDefaultTypeInternal _ContrastiveLossParameter_default_instance_;
class ConvolutionParameter;
class ConvolutionParameterDefaultTypeInternal;
extern ConvolutionParameterDefaultTypeInternal _ConvolutionParameter_default_instance_;
class CropParameter;
class CropParameterDefaultTypeInternal;
extern CropParameterDefaultTypeInternal _CropParameter_default_instance_;
class DataParameter;
class DataParameterDefaultTypeInternal;
extern DataParameterDefaultTypeInternal _DataParameter_default_instance_;
class Datum;
class DatumDefaultTypeInternal;
extern DatumDefaultTypeInternal _Datum_default_instance_;
class DetectionOutputParameter;
class DetectionOutputParameterDefaultTypeInternal;
extern DetectionOutputParameterDefaultTypeInternal _DetectionOutputParameter_default_instance_;
class DropoutParameter;
class DropoutParameterDefaultTypeInternal;
extern DropoutParameterDefaultTypeInternal _DropoutParameter_default_instance_;
class DummyDataParameter;
class DummyDataParameterDefaultTypeInternal;
extern DummyDataParameterDefaultTypeInternal _DummyDataParameter_default_instance_;
class ELUParameter;
class ELUParameterDefaultTypeInternal;
extern ELUParameterDefaultTypeInternal _ELUParameter_default_instance_;
class EltwiseParameter;
class EltwiseParameterDefaultTypeInternal;
extern EltwiseParameterDefaultTypeInternal _EltwiseParameter_default_instance_;
class EmbedParameter;
class EmbedParameterDefaultTypeInternal;
extern EmbedParameterDefaultTypeInternal _EmbedParameter_default_instance_;
class ExpParameter;
class ExpParameterDefaultTypeInternal;
extern ExpParameterDefaultTypeInternal _ExpParameter_default_instance_;
class FillerParameter;
class FillerParameterDefaultTypeInternal;
extern FillerParameterDefaultTypeInternal _FillerParameter_default_instance_;
class FlattenParameter;
class FlattenParameterDefaultTypeInternal;
extern FlattenParameterDefaultTypeInternal _FlattenParameter_default_instance_;
class HDF5DataParameter;
class HDF5DataParameterDefaultTypeInternal;
extern HDF5DataParameterDefaultTypeInternal _HDF5DataParameter_default_instance_;
class HDF5OutputParameter;
class HDF5OutputParameterDefaultTypeInternal;
extern HDF5OutputParameterDefaultTypeInternal _HDF5OutputParameter_default_instance_;
class HingeLossParameter;
class HingeLossParameterDefaultTypeInternal;
extern HingeLossParameterDefaultTypeInternal _HingeLossParameter_default_instance_;
class ImageDataParameter;
class ImageDataParameterDefaultTypeInternal;
extern ImageDataParameterDefaultTypeInternal _ImageDataParameter_default_instance_;
class InfogainLossParameter;
class InfogainLossParameterDefaultTypeInternal;
extern InfogainLossParameterDefaultTypeInternal _InfogainLossParameter_default_instance_;
class InnerProductParameter;
class InnerProductParameterDefaultTypeInternal;
extern InnerProductParameterDefaultTypeInternal _InnerProductParameter_default_instance_;
class InputParameter;
class InputParameterDefaultTypeInternal;
extern InputParameterDefaultTypeInternal _InputParameter_default_instance_;
class LRNParameter;
class LRNParameterDefaultTypeInternal;
extern LRNParameterDefaultTypeInternal _LRNParameter_default_instance_;
class LayerParameter;
class LayerParameterDefaultTypeInternal;
extern LayerParameterDefaultTypeInternal _LayerParameter_default_instance_;
class LogParameter;
class LogParameterDefaultTypeInternal;
extern LogParameterDefaultTypeInternal _LogParameter_default_instance_;
class LossParameter;
class LossParameterDefaultTypeInternal;
extern LossParameterDefaultTypeInternal _LossParameter_default_instance_;
class MVNParameter;
class MVNParameterDefaultTypeInternal;
extern MVNParameterDefaultTypeInternal _MVNParameter_default_instance_;
class MemoryDataParameter;
class MemoryDataParameterDefaultTypeInternal;
extern MemoryDataParameterDefaultTypeInternal _MemoryDataParameter_default_instance_;
class NetParameter;
class NetParameterDefaultTypeInternal;
extern NetParameterDefaultTypeInternal _NetParameter_default_instance_;
class NetState;
class NetStateDefaultTypeInternal;
extern NetStateDefaultTypeInternal _NetState_default_instance_;
class NetStateRule;
class NetStateRuleDefaultTypeInternal;
extern NetStateRuleDefaultTypeInternal _NetStateRule_default_instance_;
class NonMaximumSuppressionParameter;
class NonMaximumSuppressionParameterDefaultTypeInternal;
extern NonMaximumSuppressionParameterDefaultTypeInternal _NonMaximumSuppressionParameter_default_instance_;
class NormalizeParameter;
class NormalizeParameterDefaultTypeInternal;
extern NormalizeParameterDefaultTypeInternal _NormalizeParameter_default_instance_;
class PReLUParameter;
class PReLUParameterDefaultTypeInternal;
extern PReLUParameterDefaultTypeInternal _PReLUParameter_default_instance_;
class ParamSpec;
class ParamSpecDefaultTypeInternal;
extern ParamSpecDefaultTypeInternal _ParamSpec_default_instance_;
class PermuteParameter;
class PermuteParameterDefaultTypeInternal;
extern PermuteParameterDefaultTypeInternal _PermuteParameter_default_instance_;
class PoolingParameter;
class PoolingParameterDefaultTypeInternal;
extern PoolingParameterDefaultTypeInternal _PoolingParameter_default_instance_;
class PowerParameter;
class PowerParameterDefaultTypeInternal;
extern PowerParameterDefaultTypeInternal _PowerParameter_default_instance_;
class PriorBoxParameter;
class PriorBoxParameterDefaultTypeInternal;
extern PriorBoxParameterDefaultTypeInternal _PriorBoxParameter_default_instance_;
class PythonParameter;
class PythonParameterDefaultTypeInternal;
extern PythonParameterDefaultTypeInternal _PythonParameter_default_instance_;
class ROIPoolingParameter;
class ROIPoolingParameterDefaultTypeInternal;
extern ROIPoolingParameterDefaultTypeInternal _ROIPoolingParameter_default_instance_;
class ReLUParameter;
class ReLUParameterDefaultTypeInternal;
extern ReLUParameterDefaultTypeInternal _ReLUParameter_default_instance_;
class ReductionParameter;
class ReductionParameterDefaultTypeInternal;
extern ReductionParameterDefaultTypeInternal _ReductionParameter_default_instance_;
class RegionProposalParameter;
class RegionProposalParameterDefaultTypeInternal;
extern RegionProposalParameterDefaultTypeInternal _RegionProposalParameter_default_instance_;
class ReshapeParameter;
class ReshapeParameterDefaultTypeInternal;
extern ReshapeParameterDefaultTypeInternal _ReshapeParameter_default_instance_;
class ResizeParameter;
class ResizeParameterDefaultTypeInternal;
extern ResizeParameterDefaultTypeInternal _ResizeParameter_default_instance_;
class SPPParameter;
class SPPParameterDefaultTypeInternal;
extern SPPParameterDefaultTypeInternal _SPPParameter_default_instance_;
class SaveOutputParameter;
class SaveOutputParameterDefaultTypeInternal;
extern SaveOutputParameterDefaultTypeInternal _SaveOutputParameter_default_instance_;
class ScaleParameter;
class ScaleParameterDefaultTypeInternal;
extern ScaleParameterDefaultTypeInternal _ScaleParameter_default_instance_;
class SigmoidParameter;
class SigmoidParameterDefaultTypeInternal;
extern SigmoidParameterDefaultTypeInternal _SigmoidParameter_default_instance_;
class SliceParameter;
class SliceParameterDefaultTypeInternal;
extern SliceParameterDefaultTypeInternal _SliceParameter_default_instance_;
class SoftmaxParameter;
class SoftmaxParameterDefaultTypeInternal;
extern SoftmaxParameterDefaultTypeInternal _SoftmaxParameter_default_instance_;
class SolverParameter;
class SolverParameterDefaultTypeInternal;
extern SolverParameterDefaultTypeInternal _SolverParameter_default_instance_;
class SolverState;
class SolverStateDefaultTypeInternal;
extern SolverStateDefaultTypeInternal _SolverState_default_instance_;
class TanHParameter;
class TanHParameterDefaultTypeInternal;
extern TanHParameterDefaultTypeInternal _TanHParameter_default_instance_;
class ThresholdParameter;
class ThresholdParameterDefaultTypeInternal;
extern ThresholdParameterDefaultTypeInternal _ThresholdParameter_default_instance_;
class TileParameter;
class TileParameterDefaultTypeInternal;
extern TileParameterDefaultTypeInternal _TileParameter_default_instance_;
class TransformationParameter;
class TransformationParameterDefaultTypeInternal;
extern TransformationParameterDefaultTypeInternal _TransformationParameter_default_instance_;
class V0LayerParameter;
class V0LayerParameterDefaultTypeInternal;
extern V0LayerParameterDefaultTypeInternal _V0LayerParameter_default_instance_;
class V1LayerParameter;
class V1LayerParameterDefaultTypeInternal;
extern V1LayerParameterDefaultTypeInternal _V1LayerParameter_default_instance_;
class WindowDataParameter;
class WindowDataParameterDefaultTypeInternal;
extern WindowDataParameterDefaultTypeInternal _WindowDataParameter_default_instance_;
}  // namespace trtcaffe
PROTOBUF_NAMESPACE_OPEN
template<> ::trtcaffe::AccuracyParameter* Arena::CreateMaybeMessage<::trtcaffe::AccuracyParameter>(Arena*);
template<> ::trtcaffe::ArgMaxParameter* Arena::CreateMaybeMessage<::trtcaffe::ArgMaxParameter>(Arena*);
template<> ::trtcaffe::BatchNormParameter* Arena::CreateMaybeMessage<::trtcaffe::BatchNormParameter>(Arena*);
template<> ::trtcaffe::BiasParameter* Arena::CreateMaybeMessage<::trtcaffe::BiasParameter>(Arena*);
template<> ::trtcaffe::BlobProto* Arena::CreateMaybeMessage<::trtcaffe::BlobProto>(Arena*);
template<> ::trtcaffe::BlobProtoVector* Arena::CreateMaybeMessage<::trtcaffe::BlobProtoVector>(Arena*);
template<> ::trtcaffe::BlobShape* Arena::CreateMaybeMessage<::trtcaffe::BlobShape>(Arena*);
template<> ::trtcaffe::ClipParameter* Arena::CreateMaybeMessage<::trtcaffe::ClipParameter>(Arena*);
template<> ::trtcaffe::ConcatParameter* Arena::CreateMaybeMessage<::trtcaffe::ConcatParameter>(Arena*);
template<> ::trtcaffe::ContrastiveLossParameter* Arena::CreateMaybeMessage<::trtcaffe::ContrastiveLossParameter>(Arena*);
template<> ::trtcaffe::ConvolutionParameter* Arena::CreateMaybeMessage<::trtcaffe::ConvolutionParameter>(Arena*);
template<> ::trtcaffe::CropParameter* Arena::CreateMaybeMessage<::trtcaffe::CropParameter>(Arena*);
template<> ::trtcaffe::DataParameter* Arena::CreateMaybeMessage<::trtcaffe::DataParameter>(Arena*);
template<> ::trtcaffe::Datum* Arena::CreateMaybeMessage<::trtcaffe::Datum>(Arena*);
template<> ::trtcaffe::DetectionOutputParameter* Arena::CreateMaybeMessage<::trtcaffe::DetectionOutputParameter>(Arena*);
template<> ::trtcaffe::DropoutParameter* Arena::CreateMaybeMessage<::trtcaffe::DropoutParameter>(Arena*);
template<> ::trtcaffe::DummyDataParameter* Arena::CreateMaybeMessage<::trtcaffe::DummyDataParameter>(Arena*);
template<> ::trtcaffe::ELUParameter* Arena::CreateMaybeMessage<::trtcaffe::ELUParameter>(Arena*);
template<> ::trtcaffe::EltwiseParameter* Arena::CreateMaybeMessage<::trtcaffe::EltwiseParameter>(Arena*);
template<> ::trtcaffe::EmbedParameter* Arena::CreateMaybeMessage<::trtcaffe::EmbedParameter>(Arena*);
template<> ::trtcaffe::ExpParameter* Arena::CreateMaybeMessage<::trtcaffe::ExpParameter>(Arena*);
template<> ::trtcaffe::FillerParameter* Arena::CreateMaybeMessage<::trtcaffe::FillerParameter>(Arena*);
template<> ::trtcaffe::FlattenParameter* Arena::CreateMaybeMessage<::trtcaffe::FlattenParameter>(Arena*);
template<> ::trtcaffe::HDF5DataParameter* Arena::CreateMaybeMessage<::trtcaffe::HDF5DataParameter>(Arena*);
template<> ::trtcaffe::HDF5OutputParameter* Arena::CreateMaybeMessage<::trtcaffe::HDF5OutputParameter>(Arena*);
template<> ::trtcaffe::HingeLossParameter* Arena::CreateMaybeMessage<::trtcaffe::HingeLossParameter>(Arena*);
template<> ::trtcaffe::ImageDataParameter* Arena::CreateMaybeMessage<::trtcaffe::ImageDataParameter>(Arena*);
template<> ::trtcaffe::InfogainLossParameter* Arena::CreateMaybeMessage<::trtcaffe::InfogainLossParameter>(Arena*);
template<> ::trtcaffe::InnerProductParameter* Arena::CreateMaybeMessage<::trtcaffe::InnerProductParameter>(Arena*);
template<> ::trtcaffe::InputParameter* Arena::CreateMaybeMessage<::trtcaffe::InputParameter>(Arena*);
template<> ::trtcaffe::LRNParameter* Arena::CreateMaybeMessage<::trtcaffe::LRNParameter>(Arena*);
template<> ::trtcaffe::LayerParameter* Arena::CreateMaybeMessage<::trtcaffe::LayerParameter>(Arena*);
template<> ::trtcaffe::LogParameter* Arena::CreateMaybeMessage<::trtcaffe::LogParameter>(Arena*);
template<> ::trtcaffe::LossParameter* Arena::CreateMaybeMessage<::trtcaffe::LossParameter>(Arena*);
template<> ::trtcaffe::MVNParameter* Arena::CreateMaybeMessage<::trtcaffe::MVNParameter>(Arena*);
template<> ::trtcaffe::MemoryDataParameter* Arena::CreateMaybeMessage<::trtcaffe::MemoryDataParameter>(Arena*);
template<> ::trtcaffe::NetParameter* Arena::CreateMaybeMessage<::trtcaffe::NetParameter>(Arena*);
template<> ::trtcaffe::NetState* Arena::CreateMaybeMessage<::trtcaffe::NetState>(Arena*);
template<> ::trtcaffe::NetStateRule* Arena::CreateMaybeMessage<::trtcaffe::NetStateRule>(Arena*);
template<> ::trtcaffe::NonMaximumSuppressionParameter* Arena::CreateMaybeMessage<::trtcaffe::NonMaximumSuppressionParameter>(Arena*);
template<> ::trtcaffe::NormalizeParameter* Arena::CreateMaybeMessage<::trtcaffe::NormalizeParameter>(Arena*);
template<> ::trtcaffe::PReLUParameter* Arena::CreateMaybeMessage<::trtcaffe::PReLUParameter>(Arena*);
template<> ::trtcaffe::ParamSpec* Arena::CreateMaybeMessage<::trtcaffe::ParamSpec>(Arena*);
template<> ::trtcaffe::PermuteParameter* Arena::CreateMaybeMessage<::trtcaffe::PermuteParameter>(Arena*);
template<> ::trtcaffe::PoolingParameter* Arena::CreateMaybeMessage<::trtcaffe::PoolingParameter>(Arena*);
template<> ::trtcaffe::PowerParameter* Arena::CreateMaybeMessage<::trtcaffe::PowerParameter>(Arena*);
template<> ::trtcaffe::PriorBoxParameter* Arena::CreateMaybeMessage<::trtcaffe::PriorBoxParameter>(Arena*);
template<> ::trtcaffe::PythonParameter* Arena::CreateMaybeMessage<::trtcaffe::PythonParameter>(Arena*);
template<> ::trtcaffe::ROIPoolingParameter* Arena::CreateMaybeMessage<::trtcaffe::ROIPoolingParameter>(Arena*);
template<> ::trtcaffe::ReLUParameter* Arena::CreateMaybeMessage<::trtcaffe::ReLUParameter>(Arena*);
template<> ::trtcaffe::ReductionParameter* Arena::CreateMaybeMessage<::trtcaffe::ReductionParameter>(Arena*);
template<> ::trtcaffe::RegionProposalParameter* Arena::CreateMaybeMessage<::trtcaffe::RegionProposalParameter>(Arena*);
template<> ::trtcaffe::ReshapeParameter* Arena::CreateMaybeMessage<::trtcaffe::ReshapeParameter>(Arena*);
template<> ::trtcaffe::ResizeParameter* Arena::CreateMaybeMessage<::trtcaffe::ResizeParameter>(Arena*);
template<> ::trtcaffe::SPPParameter* Arena::CreateMaybeMessage<::trtcaffe::SPPParameter>(Arena*);
template<> ::trtcaffe::SaveOutputParameter* Arena::CreateMaybeMessage<::trtcaffe::SaveOutputParameter>(Arena*);
template<> ::trtcaffe::ScaleParameter* Arena::CreateMaybeMessage<::trtcaffe::ScaleParameter>(Arena*);
template<> ::trtcaffe::SigmoidParameter* Arena::CreateMaybeMessage<::trtcaffe::SigmoidParameter>(Arena*);
template<> ::trtcaffe::SliceParameter* Arena::CreateMaybeMessage<::trtcaffe::SliceParameter>(Arena*);
template<> ::trtcaffe::SoftmaxParameter* Arena::CreateMaybeMessage<::trtcaffe::SoftmaxParameter>(Arena*);
template<> ::trtcaffe::SolverParameter* Arena::CreateMaybeMessage<::trtcaffe::SolverParameter>(Arena*);
template<> ::trtcaffe::SolverState* Arena::CreateMaybeMessage<::trtcaffe::SolverState>(Arena*);
template<> ::trtcaffe::TanHParameter* Arena::CreateMaybeMessage<::trtcaffe::TanHParameter>(Arena*);
template<> ::trtcaffe::ThresholdParameter* Arena::CreateMaybeMessage<::trtcaffe::ThresholdParameter>(Arena*);
template<> ::trtcaffe::TileParameter* Arena::CreateMaybeMessage<::trtcaffe::TileParameter>(Arena*);
template<> ::trtcaffe::TransformationParameter* Arena::CreateMaybeMessage<::trtcaffe::TransformationParameter>(Arena*);
template<> ::trtcaffe::V0LayerParameter* Arena::CreateMaybeMessage<::trtcaffe::V0LayerParameter>(Arena*);
template<> ::trtcaffe::V1LayerParameter* Arena::CreateMaybeMessage<::trtcaffe::V1LayerParameter>(Arena*);
template<> ::trtcaffe::WindowDataParameter* Arena::CreateMaybeMessage<::trtcaffe::WindowDataParameter>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace trtcaffe {

enum FillerParameter_VarianceNorm : int {
  FillerParameter_VarianceNorm_FAN_IN = 0,
  FillerParameter_VarianceNorm_FAN_OUT = 1,
  FillerParameter_VarianceNorm_AVERAGE = 2
};
bool FillerParameter_VarianceNorm_IsValid(int value);
constexpr FillerParameter_VarianceNorm FillerParameter_VarianceNorm_VarianceNorm_MIN = FillerParameter_VarianceNorm_FAN_IN;
constexpr FillerParameter_VarianceNorm FillerParameter_VarianceNorm_VarianceNorm_MAX = FillerParameter_VarianceNorm_AVERAGE;
constexpr int FillerParameter_VarianceNorm_VarianceNorm_ARRAYSIZE = FillerParameter_VarianceNorm_VarianceNorm_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* FillerParameter_VarianceNorm_descriptor();
template<typename T>
inline const std::string& FillerParameter_VarianceNorm_Name(T enum_t_value) {
  static_assert(::std::is_same<T, FillerParameter_VarianceNorm>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function FillerParameter_VarianceNorm_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    FillerParameter_VarianceNorm_descriptor(), enum_t_value);
}
inline bool FillerParameter_VarianceNorm_Parse(
    const std::string& name, FillerParameter_VarianceNorm* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<FillerParameter_VarianceNorm>(
    FillerParameter_VarianceNorm_descriptor(), name, value);
}
enum SolverParameter_SnapshotFormat : int {
  SolverParameter_SnapshotFormat_HDF5 = 0,
  SolverParameter_SnapshotFormat_BINARYPROTO = 1
};
bool SolverParameter_SnapshotFormat_IsValid(int value);
constexpr SolverParameter_SnapshotFormat SolverParameter_SnapshotFormat_SnapshotFormat_MIN = SolverParameter_SnapshotFormat_HDF5;
constexpr SolverParameter_SnapshotFormat SolverParameter_SnapshotFormat_SnapshotFormat_MAX = SolverParameter_SnapshotFormat_BINARYPROTO;
constexpr int SolverParameter_SnapshotFormat_SnapshotFormat_ARRAYSIZE = SolverParameter_SnapshotFormat_SnapshotFormat_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SolverParameter_SnapshotFormat_descriptor();
template<typename T>
inline const std::string& SolverParameter_SnapshotFormat_Name(T enum_t_value) {
  static_assert(::std::is_same<T, SolverParameter_SnapshotFormat>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function SolverParameter_SnapshotFormat_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    SolverParameter_SnapshotFormat_descriptor(), enum_t_value);
}
inline bool SolverParameter_SnapshotFormat_Parse(
    const std::string& name, SolverParameter_SnapshotFormat* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<SolverParameter_SnapshotFormat>(
    SolverParameter_SnapshotFormat_descriptor(), name, value);
}
enum SolverParameter_SolverMode : int {
  SolverParameter_SolverMode_CPU = 0,
  SolverParameter_SolverMode_GPU = 1
};
bool SolverParameter_SolverMode_IsValid(int value);
constexpr SolverParameter_SolverMode SolverParameter_SolverMode_SolverMode_MIN = SolverParameter_SolverMode_CPU;
constexpr SolverParameter_SolverMode SolverParameter_SolverMode_SolverMode_MAX = SolverParameter_SolverMode_GPU;
constexpr int SolverParameter_SolverMode_SolverMode_ARRAYSIZE = SolverParameter_SolverMode_SolverMode_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SolverParameter_SolverMode_descriptor();
template<typename T>
inline const std::string& SolverParameter_SolverMode_Name(T enum_t_value) {
  static_assert(::std::is_same<T, SolverParameter_SolverMode>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function SolverParameter_SolverMode_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    SolverParameter_SolverMode_descriptor(), enum_t_value);
}
inline bool SolverParameter_SolverMode_Parse(
    const std::string& name, SolverParameter_SolverMode* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<SolverParameter_SolverMode>(
    SolverParameter_SolverMode_descriptor(), name, value);
}
enum SolverParameter_SolverType : int {
  SolverParameter_SolverType_SGD = 0,
  SolverParameter_SolverType_NESTEROV = 1,
  SolverParameter_SolverType_ADAGRAD = 2,
  SolverParameter_SolverType_RMSPROP = 3,
  SolverParameter_SolverType_ADADELTA = 4,
  SolverParameter_SolverType_ADAM = 5
};
bool SolverParameter_SolverType_IsValid(int value);
constexpr SolverParameter_SolverType SolverParameter_SolverType_SolverType_MIN = SolverParameter_SolverType_SGD;
constexpr SolverParameter_SolverType SolverParameter_SolverType_SolverType_MAX = SolverParameter_SolverType_ADAM;
constexpr int SolverParameter_SolverType_SolverType_ARRAYSIZE = SolverParameter_SolverType_SolverType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SolverParameter_SolverType_descriptor();
template<typename T>
inline const std::string& SolverParameter_SolverType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, SolverParameter_SolverType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function SolverParameter_SolverType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    SolverParameter_SolverType_descriptor(), enum_t_value);
}
inline bool SolverParameter_SolverType_Parse(
    const std::string& name, SolverParameter_SolverType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<SolverParameter_SolverType>(
    SolverParameter_SolverType_descriptor(), name, value);
}
enum ParamSpec_DimCheckMode : int {
  ParamSpec_DimCheckMode_STRICT = 0,
  ParamSpec_DimCheckMode_PERMISSIVE = 1
};
bool ParamSpec_DimCheckMode_IsValid(int value);
constexpr ParamSpec_DimCheckMode ParamSpec_DimCheckMode_DimCheckMode_MIN = ParamSpec_DimCheckMode_STRICT;
constexpr ParamSpec_DimCheckMode ParamSpec_DimCheckMode_DimCheckMode_MAX = ParamSpec_DimCheckMode_PERMISSIVE;
constexpr int ParamSpec_DimCheckMode_DimCheckMode_ARRAYSIZE = ParamSpec_DimCheckMode_DimCheckMode_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ParamSpec_DimCheckMode_descriptor();
template<typename T>
inline const std::string& ParamSpec_DimCheckMode_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ParamSpec_DimCheckMode>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ParamSpec_DimCheckMode_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ParamSpec_DimCheckMode_descriptor(), enum_t_value);
}
inline bool ParamSpec_DimCheckMode_Parse(
    const std::string& name, ParamSpec_DimCheckMode* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ParamSpec_DimCheckMode>(
    ParamSpec_DimCheckMode_descriptor(), name, value);
}
enum TransformationParameter_InterpolationAlgo : int {
  TransformationParameter_InterpolationAlgo_INTER_NEAREST = 0,
  TransformationParameter_InterpolationAlgo_INTER_LINEAR = 1,
  TransformationParameter_InterpolationAlgo_INTER_CUBIC = 2,
  TransformationParameter_InterpolationAlgo_INTER_AREA = 3
};
bool TransformationParameter_InterpolationAlgo_IsValid(int value);
constexpr TransformationParameter_InterpolationAlgo TransformationParameter_InterpolationAlgo_InterpolationAlgo_MIN = TransformationParameter_InterpolationAlgo_INTER_NEAREST;
constexpr TransformationParameter_InterpolationAlgo TransformationParameter_InterpolationAlgo_InterpolationAlgo_MAX = TransformationParameter_InterpolationAlgo_INTER_AREA;
constexpr int TransformationParameter_InterpolationAlgo_InterpolationAlgo_ARRAYSIZE = TransformationParameter_InterpolationAlgo_InterpolationAlgo_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TransformationParameter_InterpolationAlgo_descriptor();
template<typename T>
inline const std::string& TransformationParameter_InterpolationAlgo_Name(T enum_t_value) {
  static_assert(::std::is_same<T, TransformationParameter_InterpolationAlgo>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function TransformationParameter_InterpolationAlgo_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    TransformationParameter_InterpolationAlgo_descriptor(), enum_t_value);
}
inline bool TransformationParameter_InterpolationAlgo_Parse(
    const std::string& name, TransformationParameter_InterpolationAlgo* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<TransformationParameter_InterpolationAlgo>(
    TransformationParameter_InterpolationAlgo_descriptor(), name, value);
}
enum LossParameter_NormalizationMode : int {
  LossParameter_NormalizationMode_FULL = 0,
  LossParameter_NormalizationMode_VALID = 1,
  LossParameter_NormalizationMode_BATCH_SIZE = 2,
  LossParameter_NormalizationMode_NONE = 3
};
bool LossParameter_NormalizationMode_IsValid(int value);
constexpr LossParameter_NormalizationMode LossParameter_NormalizationMode_NormalizationMode_MIN = LossParameter_NormalizationMode_FULL;
constexpr LossParameter_NormalizationMode LossParameter_NormalizationMode_NormalizationMode_MAX = LossParameter_NormalizationMode_NONE;
constexpr int LossParameter_NormalizationMode_NormalizationMode_ARRAYSIZE = LossParameter_NormalizationMode_NormalizationMode_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* LossParameter_NormalizationMode_descriptor();
template<typename T>
inline const std::string& LossParameter_NormalizationMode_Name(T enum_t_value) {
  static_assert(::std::is_same<T, LossParameter_NormalizationMode>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function LossParameter_NormalizationMode_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    LossParameter_NormalizationMode_descriptor(), enum_t_value);
}
inline bool LossParameter_NormalizationMode_Parse(
    const std::string& name, LossParameter_NormalizationMode* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<LossParameter_NormalizationMode>(
    LossParameter_NormalizationMode_descriptor(), name, value);
}
enum BatchNormParameter_Engine : int {
  BatchNormParameter_Engine_DEFAULT = 0,
  BatchNormParameter_Engine_CAFFE = 1,
  BatchNormParameter_Engine_CUDNN = 2
};
bool BatchNormParameter_Engine_IsValid(int value);
constexpr BatchNormParameter_Engine BatchNormParameter_Engine_Engine_MIN = BatchNormParameter_Engine_DEFAULT;
constexpr BatchNormParameter_Engine BatchNormParameter_Engine_Engine_MAX = BatchNormParameter_Engine_CUDNN;
constexpr int BatchNormParameter_Engine_Engine_ARRAYSIZE = BatchNormParameter_Engine_Engine_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* BatchNormParameter_Engine_descriptor();
template<typename T>
inline const std::string& BatchNormParameter_Engine_Name(T enum_t_value) {
  static_assert(::std::is_same<T, BatchNormParameter_Engine>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function BatchNormParameter_Engine_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    BatchNormParameter_Engine_descriptor(), enum_t_value);
}
inline bool BatchNormParameter_Engine_Parse(
    const std::string& name, BatchNormParameter_Engine* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<BatchNormParameter_Engine>(
    BatchNormParameter_Engine_descriptor(), name, value);
}
enum ConvolutionParameter_Engine : int {
  ConvolutionParameter_Engine_DEFAULT = 0,
  ConvolutionParameter_Engine_CAFFE = 1,
  ConvolutionParameter_Engine_CUDNN = 2
};
bool ConvolutionParameter_Engine_IsValid(int value);
constexpr ConvolutionParameter_Engine ConvolutionParameter_Engine_Engine_MIN = ConvolutionParameter_Engine_DEFAULT;
constexpr ConvolutionParameter_Engine ConvolutionParameter_Engine_Engine_MAX = ConvolutionParameter_Engine_CUDNN;
constexpr int ConvolutionParameter_Engine_Engine_ARRAYSIZE = ConvolutionParameter_Engine_Engine_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ConvolutionParameter_Engine_descriptor();
template<typename T>
inline const std::string& ConvolutionParameter_Engine_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ConvolutionParameter_Engine>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ConvolutionParameter_Engine_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ConvolutionParameter_Engine_descriptor(), enum_t_value);
}
inline bool ConvolutionParameter_Engine_Parse(
    const std::string& name, ConvolutionParameter_Engine* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ConvolutionParameter_Engine>(
    ConvolutionParameter_Engine_descriptor(), name, value);
}
enum ConvolutionParameter_CuDNNConvolutionAlgorithmSeeker : int {
  ConvolutionParameter_CuDNNConvolutionAlgorithmSeeker_GET = 0,
  ConvolutionParameter_CuDNNConvolutionAlgorithmSeeker_FINDEX = 1
};
bool ConvolutionParameter_CuDNNConvolutionAlgorithmSeeker_IsValid(int value);
constexpr ConvolutionParameter_CuDNNConvolutionAlgorithmSeeker ConvolutionParameter_CuDNNConvolutionAlgorithmSeeker_CuDNNConvolutionAlgorithmSeeker_MIN = ConvolutionParameter_CuDNNConvolutionAlgorithmSeeker_GET;
constexpr ConvolutionParameter_CuDNNConvolutionAlgorithmSeeker ConvolutionParameter_CuDNNConvolutionAlgorithmSeeker_CuDNNConvolutionAlgorithmSeeker_MAX = ConvolutionParameter_CuDNNConvolutionAlgorithmSeeker_FINDEX;
constexpr int ConvolutionParameter_CuDNNConvolutionAlgorithmSeeker_CuDNNConvolutionAlgorithmSeeker_ARRAYSIZE = ConvolutionParameter_CuDNNConvolutionAlgorithmSeeker_CuDNNConvolutionAlgorithmSeeker_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ConvolutionParameter_CuDNNConvolutionAlgorithmSeeker_descriptor();
template<typename T>
inline const std::string& ConvolutionParameter_CuDNNConvolutionAlgorithmSeeker_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ConvolutionParameter_CuDNNConvolutionAlgorithmSeeker>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ConvolutionParameter_CuDNNConvolutionAlgorithmSeeker_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ConvolutionParameter_CuDNNConvolutionAlgorithmSeeker_descriptor(), enum_t_value);
}
inline bool ConvolutionParameter_CuDNNConvolutionAlgorithmSeeker_Parse(
    const std::string& name, ConvolutionParameter_CuDNNConvolutionAlgorithmSeeker* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ConvolutionParameter_CuDNNConvolutionAlgorithmSeeker>(
    ConvolutionParameter_CuDNNConvolutionAlgorithmSeeker_descriptor(), name, value);
}
enum DataParameter_DB : int {
  DataParameter_DB_LEVELDB = 0,
  DataParameter_DB_LMDB = 1
};
bool DataParameter_DB_IsValid(int value);
constexpr DataParameter_DB DataParameter_DB_DB_MIN = DataParameter_DB_LEVELDB;
constexpr DataParameter_DB DataParameter_DB_DB_MAX = DataParameter_DB_LMDB;
constexpr int DataParameter_DB_DB_ARRAYSIZE = DataParameter_DB_DB_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* DataParameter_DB_descriptor();
template<typename T>
inline const std::string& DataParameter_DB_Name(T enum_t_value) {
  static_assert(::std::is_same<T, DataParameter_DB>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function DataParameter_DB_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    DataParameter_DB_descriptor(), enum_t_value);
}
inline bool DataParameter_DB_Parse(
    const std::string& name, DataParameter_DB* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<DataParameter_DB>(
    DataParameter_DB_descriptor(), name, value);
}
enum ResizeParameter_Resize_mode : int {
  ResizeParameter_Resize_mode_WARP = 1,
  ResizeParameter_Resize_mode_FIT_SMALL_SIZE = 2,
  ResizeParameter_Resize_mode_FIT_LARGE_SIZE_AND_PAD = 3
};
bool ResizeParameter_Resize_mode_IsValid(int value);
constexpr ResizeParameter_Resize_mode ResizeParameter_Resize_mode_Resize_mode_MIN = ResizeParameter_Resize_mode_WARP;
constexpr ResizeParameter_Resize_mode ResizeParameter_Resize_mode_Resize_mode_MAX = ResizeParameter_Resize_mode_FIT_LARGE_SIZE_AND_PAD;
constexpr int ResizeParameter_Resize_mode_Resize_mode_ARRAYSIZE = ResizeParameter_Resize_mode_Resize_mode_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ResizeParameter_Resize_mode_descriptor();
template<typename T>
inline const std::string& ResizeParameter_Resize_mode_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ResizeParameter_Resize_mode>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ResizeParameter_Resize_mode_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ResizeParameter_Resize_mode_descriptor(), enum_t_value);
}
inline bool ResizeParameter_Resize_mode_Parse(
    const std::string& name, ResizeParameter_Resize_mode* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ResizeParameter_Resize_mode>(
    ResizeParameter_Resize_mode_descriptor(), name, value);
}
enum ResizeParameter_Pad_mode : int {
  ResizeParameter_Pad_mode_CONSTANT = 1,
  ResizeParameter_Pad_mode_MIRRORED = 2,
  ResizeParameter_Pad_mode_REPEAT_NEAREST = 3
};
bool ResizeParameter_Pad_mode_IsValid(int value);
constexpr ResizeParameter_Pad_mode ResizeParameter_Pad_mode_Pad_mode_MIN = ResizeParameter_Pad_mode_CONSTANT;
constexpr ResizeParameter_Pad_mode ResizeParameter_Pad_mode_Pad_mode_MAX = ResizeParameter_Pad_mode_REPEAT_NEAREST;
constexpr int ResizeParameter_Pad_mode_Pad_mode_ARRAYSIZE = ResizeParameter_Pad_mode_Pad_mode_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ResizeParameter_Pad_mode_descriptor();
template<typename T>
inline const std::string& ResizeParameter_Pad_mode_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ResizeParameter_Pad_mode>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ResizeParameter_Pad_mode_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ResizeParameter_Pad_mode_descriptor(), enum_t_value);
}
inline bool ResizeParameter_Pad_mode_Parse(
    const std::string& name, ResizeParameter_Pad_mode* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ResizeParameter_Pad_mode>(
    ResizeParameter_Pad_mode_descriptor(), name, value);
}
enum ResizeParameter_Interp_mode : int {
  ResizeParameter_Interp_mode_LINEAR = 1,
  ResizeParameter_Interp_mode_AREA = 2,
  ResizeParameter_Interp_mode_NEAREST = 3,
  ResizeParameter_Interp_mode_CUBIC = 4,
  ResizeParameter_Interp_mode_LANCZOS4 = 5
};
bool ResizeParameter_Interp_mode_IsValid(int value);
constexpr ResizeParameter_Interp_mode ResizeParameter_Interp_mode_Interp_mode_MIN = ResizeParameter_Interp_mode_LINEAR;
constexpr ResizeParameter_Interp_mode ResizeParameter_Interp_mode_Interp_mode_MAX = ResizeParameter_Interp_mode_LANCZOS4;
constexpr int ResizeParameter_Interp_mode_Interp_mode_ARRAYSIZE = ResizeParameter_Interp_mode_Interp_mode_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ResizeParameter_Interp_mode_descriptor();
template<typename T>
inline const std::string& ResizeParameter_Interp_mode_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ResizeParameter_Interp_mode>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ResizeParameter_Interp_mode_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ResizeParameter_Interp_mode_descriptor(), enum_t_value);
}
inline bool ResizeParameter_Interp_mode_Parse(
    const std::string& name, ResizeParameter_Interp_mode* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ResizeParameter_Interp_mode>(
    ResizeParameter_Interp_mode_descriptor(), name, value);
}
enum DropoutParameter_Engine : int {
  DropoutParameter_Engine_DEFAULT = 0,
  DropoutParameter_Engine_CAFFE = 1,
  DropoutParameter_Engine_CUDNN = 2
};
bool DropoutParameter_Engine_IsValid(int value);
constexpr DropoutParameter_Engine DropoutParameter_Engine_Engine_MIN = DropoutParameter_Engine_DEFAULT;
constexpr DropoutParameter_Engine DropoutParameter_Engine_Engine_MAX = DropoutParameter_Engine_CUDNN;
constexpr int DropoutParameter_Engine_Engine_ARRAYSIZE = DropoutParameter_Engine_Engine_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* DropoutParameter_Engine_descriptor();
template<typename T>
inline const std::string& DropoutParameter_Engine_Name(T enum_t_value) {
  static_assert(::std::is_same<T, DropoutParameter_Engine>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function DropoutParameter_Engine_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    DropoutParameter_Engine_descriptor(), enum_t_value);
}
inline bool DropoutParameter_Engine_Parse(
    const std::string& name, DropoutParameter_Engine* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<DropoutParameter_Engine>(
    DropoutParameter_Engine_descriptor(), name, value);
}
enum EltwiseParameter_EltwiseOp : int {
  EltwiseParameter_EltwiseOp_PROD = 0,
  EltwiseParameter_EltwiseOp_SUM = 1,
  EltwiseParameter_EltwiseOp_MAX = 2
};
bool EltwiseParameter_EltwiseOp_IsValid(int value);
constexpr EltwiseParameter_EltwiseOp EltwiseParameter_EltwiseOp_EltwiseOp_MIN = EltwiseParameter_EltwiseOp_PROD;
constexpr EltwiseParameter_EltwiseOp EltwiseParameter_EltwiseOp_EltwiseOp_MAX = EltwiseParameter_EltwiseOp_MAX;
constexpr int EltwiseParameter_EltwiseOp_EltwiseOp_ARRAYSIZE = EltwiseParameter_EltwiseOp_EltwiseOp_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EltwiseParameter_EltwiseOp_descriptor();
template<typename T>
inline const std::string& EltwiseParameter_EltwiseOp_Name(T enum_t_value) {
  static_assert(::std::is_same<T, EltwiseParameter_EltwiseOp>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function EltwiseParameter_EltwiseOp_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    EltwiseParameter_EltwiseOp_descriptor(), enum_t_value);
}
inline bool EltwiseParameter_EltwiseOp_Parse(
    const std::string& name, EltwiseParameter_EltwiseOp* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<EltwiseParameter_EltwiseOp>(
    EltwiseParameter_EltwiseOp_descriptor(), name, value);
}
enum HingeLossParameter_Norm : int {
  HingeLossParameter_Norm_L1 = 1,
  HingeLossParameter_Norm_L2 = 2
};
bool HingeLossParameter_Norm_IsValid(int value);
constexpr HingeLossParameter_Norm HingeLossParameter_Norm_Norm_MIN = HingeLossParameter_Norm_L1;
constexpr HingeLossParameter_Norm HingeLossParameter_Norm_Norm_MAX = HingeLossParameter_Norm_L2;
constexpr int HingeLossParameter_Norm_Norm_ARRAYSIZE = HingeLossParameter_Norm_Norm_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* HingeLossParameter_Norm_descriptor();
template<typename T>
inline const std::string& HingeLossParameter_Norm_Name(T enum_t_value) {
  static_assert(::std::is_same<T, HingeLossParameter_Norm>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function HingeLossParameter_Norm_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    HingeLossParameter_Norm_descriptor(), enum_t_value);
}
inline bool HingeLossParameter_Norm_Parse(
    const std::string& name, HingeLossParameter_Norm* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<HingeLossParameter_Norm>(
    HingeLossParameter_Norm_descriptor(), name, value);
}
enum LRNParameter_NormRegion : int {
  LRNParameter_NormRegion_ACROSS_CHANNELS = 0,
  LRNParameter_NormRegion_WITHIN_CHANNEL = 1
};
bool LRNParameter_NormRegion_IsValid(int value);
constexpr LRNParameter_NormRegion LRNParameter_NormRegion_NormRegion_MIN = LRNParameter_NormRegion_ACROSS_CHANNELS;
constexpr LRNParameter_NormRegion LRNParameter_NormRegion_NormRegion_MAX = LRNParameter_NormRegion_WITHIN_CHANNEL;
constexpr int LRNParameter_NormRegion_NormRegion_ARRAYSIZE = LRNParameter_NormRegion_NormRegion_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* LRNParameter_NormRegion_descriptor();
template<typename T>
inline const std::string& LRNParameter_NormRegion_Name(T enum_t_value) {
  static_assert(::std::is_same<T, LRNParameter_NormRegion>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function LRNParameter_NormRegion_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    LRNParameter_NormRegion_descriptor(), enum_t_value);
}
inline bool LRNParameter_NormRegion_Parse(
    const std::string& name, LRNParameter_NormRegion* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<LRNParameter_NormRegion>(
    LRNParameter_NormRegion_descriptor(), name, value);
}
enum LRNParameter_Engine : int {
  LRNParameter_Engine_DEFAULT = 0,
  LRNParameter_Engine_CAFFE = 1,
  LRNParameter_Engine_CUDNN = 2
};
bool LRNParameter_Engine_IsValid(int value);
constexpr LRNParameter_Engine LRNParameter_Engine_Engine_MIN = LRNParameter_Engine_DEFAULT;
constexpr LRNParameter_Engine LRNParameter_Engine_Engine_MAX = LRNParameter_Engine_CUDNN;
constexpr int LRNParameter_Engine_Engine_ARRAYSIZE = LRNParameter_Engine_Engine_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* LRNParameter_Engine_descriptor();
template<typename T>
inline const std::string& LRNParameter_Engine_Name(T enum_t_value) {
  static_assert(::std::is_same<T, LRNParameter_Engine>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function LRNParameter_Engine_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    LRNParameter_Engine_descriptor(), enum_t_value);
}
inline bool LRNParameter_Engine_Parse(
    const std::string& name, LRNParameter_Engine* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<LRNParameter_Engine>(
    LRNParameter_Engine_descriptor(), name, value);
}
enum PoolingParameter_PoolMethod : int {
  PoolingParameter_PoolMethod_MAX = 0,
  PoolingParameter_PoolMethod_AVE = 1,
  PoolingParameter_PoolMethod_STOCHASTIC = 2
};
bool PoolingParameter_PoolMethod_IsValid(int value);
constexpr PoolingParameter_PoolMethod PoolingParameter_PoolMethod_PoolMethod_MIN = PoolingParameter_PoolMethod_MAX;
constexpr PoolingParameter_PoolMethod PoolingParameter_PoolMethod_PoolMethod_MAX = PoolingParameter_PoolMethod_STOCHASTIC;
constexpr int PoolingParameter_PoolMethod_PoolMethod_ARRAYSIZE = PoolingParameter_PoolMethod_PoolMethod_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PoolingParameter_PoolMethod_descriptor();
template<typename T>
inline const std::string& PoolingParameter_PoolMethod_Name(T enum_t_value) {
  static_assert(::std::is_same<T, PoolingParameter_PoolMethod>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function PoolingParameter_PoolMethod_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    PoolingParameter_PoolMethod_descriptor(), enum_t_value);
}
inline bool PoolingParameter_PoolMethod_Parse(
    const std::string& name, PoolingParameter_PoolMethod* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<PoolingParameter_PoolMethod>(
    PoolingParameter_PoolMethod_descriptor(), name, value);
}
enum PoolingParameter_Engine : int {
  PoolingParameter_Engine_DEFAULT = 0,
  PoolingParameter_Engine_CAFFE = 1,
  PoolingParameter_Engine_CUDNN = 2
};
bool PoolingParameter_Engine_IsValid(int value);
constexpr PoolingParameter_Engine PoolingParameter_Engine_Engine_MIN = PoolingParameter_Engine_DEFAULT;
constexpr PoolingParameter_Engine PoolingParameter_Engine_Engine_MAX = PoolingParameter_Engine_CUDNN;
constexpr int PoolingParameter_Engine_Engine_ARRAYSIZE = PoolingParameter_Engine_Engine_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PoolingParameter_Engine_descriptor();
template<typename T>
inline const std::string& PoolingParameter_Engine_Name(T enum_t_value) {
  static_assert(::std::is_same<T, PoolingParameter_Engine>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function PoolingParameter_Engine_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    PoolingParameter_Engine_descriptor(), enum_t_value);
}
inline bool PoolingParameter_Engine_Parse(
    const std::string& name, PoolingParameter_Engine* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<PoolingParameter_Engine>(
    PoolingParameter_Engine_descriptor(), name, value);
}
enum PriorBoxParameter_CodeType : int {
  PriorBoxParameter_CodeType_CORNER = 1,
  PriorBoxParameter_CodeType_CENTER_SIZE = 2,
  PriorBoxParameter_CodeType_CORNER_SIZE = 3
};
bool PriorBoxParameter_CodeType_IsValid(int value);
constexpr PriorBoxParameter_CodeType PriorBoxParameter_CodeType_CodeType_MIN = PriorBoxParameter_CodeType_CORNER;
constexpr PriorBoxParameter_CodeType PriorBoxParameter_CodeType_CodeType_MAX = PriorBoxParameter_CodeType_CORNER_SIZE;
constexpr int PriorBoxParameter_CodeType_CodeType_ARRAYSIZE = PriorBoxParameter_CodeType_CodeType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PriorBoxParameter_CodeType_descriptor();
template<typename T>
inline const std::string& PriorBoxParameter_CodeType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, PriorBoxParameter_CodeType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function PriorBoxParameter_CodeType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    PriorBoxParameter_CodeType_descriptor(), enum_t_value);
}
inline bool PriorBoxParameter_CodeType_Parse(
    const std::string& name, PriorBoxParameter_CodeType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<PriorBoxParameter_CodeType>(
    PriorBoxParameter_CodeType_descriptor(), name, value);
}
enum ReductionParameter_ReductionOp : int {
  ReductionParameter_ReductionOp_SUM = 1,
  ReductionParameter_ReductionOp_ASUM = 2,
  ReductionParameter_ReductionOp_SUMSQ = 3,
  ReductionParameter_ReductionOp_MEAN = 4
};
bool ReductionParameter_ReductionOp_IsValid(int value);
constexpr ReductionParameter_ReductionOp ReductionParameter_ReductionOp_ReductionOp_MIN = ReductionParameter_ReductionOp_SUM;
constexpr ReductionParameter_ReductionOp ReductionParameter_ReductionOp_ReductionOp_MAX = ReductionParameter_ReductionOp_MEAN;
constexpr int ReductionParameter_ReductionOp_ReductionOp_ARRAYSIZE = ReductionParameter_ReductionOp_ReductionOp_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ReductionParameter_ReductionOp_descriptor();
template<typename T>
inline const std::string& ReductionParameter_ReductionOp_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ReductionParameter_ReductionOp>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ReductionParameter_ReductionOp_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ReductionParameter_ReductionOp_descriptor(), enum_t_value);
}
inline bool ReductionParameter_ReductionOp_Parse(
    const std::string& name, ReductionParameter_ReductionOp* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ReductionParameter_ReductionOp>(
    ReductionParameter_ReductionOp_descriptor(), name, value);
}
enum ReLUParameter_Engine : int {
  ReLUParameter_Engine_DEFAULT = 0,
  ReLUParameter_Engine_CAFFE = 1,
  ReLUParameter_Engine_CUDNN = 2
};
bool ReLUParameter_Engine_IsValid(int value);
constexpr ReLUParameter_Engine ReLUParameter_Engine_Engine_MIN = ReLUParameter_Engine_DEFAULT;
constexpr ReLUParameter_Engine ReLUParameter_Engine_Engine_MAX = ReLUParameter_Engine_CUDNN;
constexpr int ReLUParameter_Engine_Engine_ARRAYSIZE = ReLUParameter_Engine_Engine_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ReLUParameter_Engine_descriptor();
template<typename T>
inline const std::string& ReLUParameter_Engine_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ReLUParameter_Engine>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ReLUParameter_Engine_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ReLUParameter_Engine_descriptor(), enum_t_value);
}
inline bool ReLUParameter_Engine_Parse(
    const std::string& name, ReLUParameter_Engine* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ReLUParameter_Engine>(
    ReLUParameter_Engine_descriptor(), name, value);
}
enum SigmoidParameter_Engine : int {
  SigmoidParameter_Engine_DEFAULT = 0,
  SigmoidParameter_Engine_CAFFE = 1,
  SigmoidParameter_Engine_CUDNN = 2
};
bool SigmoidParameter_Engine_IsValid(int value);
constexpr SigmoidParameter_Engine SigmoidParameter_Engine_Engine_MIN = SigmoidParameter_Engine_DEFAULT;
constexpr SigmoidParameter_Engine SigmoidParameter_Engine_Engine_MAX = SigmoidParameter_Engine_CUDNN;
constexpr int SigmoidParameter_Engine_Engine_ARRAYSIZE = SigmoidParameter_Engine_Engine_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SigmoidParameter_Engine_descriptor();
template<typename T>
inline const std::string& SigmoidParameter_Engine_Name(T enum_t_value) {
  static_assert(::std::is_same<T, SigmoidParameter_Engine>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function SigmoidParameter_Engine_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    SigmoidParameter_Engine_descriptor(), enum_t_value);
}
inline bool SigmoidParameter_Engine_Parse(
    const std::string& name, SigmoidParameter_Engine* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<SigmoidParameter_Engine>(
    SigmoidParameter_Engine_descriptor(), name, value);
}
enum SoftmaxParameter_Engine : int {
  SoftmaxParameter_Engine_DEFAULT = 0,
  SoftmaxParameter_Engine_CAFFE = 1,
  SoftmaxParameter_Engine_CUDNN = 2
};
bool SoftmaxParameter_Engine_IsValid(int value);
constexpr SoftmaxParameter_Engine SoftmaxParameter_Engine_Engine_MIN = SoftmaxParameter_Engine_DEFAULT;
constexpr SoftmaxParameter_Engine SoftmaxParameter_Engine_Engine_MAX = SoftmaxParameter_Engine_CUDNN;
constexpr int SoftmaxParameter_Engine_Engine_ARRAYSIZE = SoftmaxParameter_Engine_Engine_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SoftmaxParameter_Engine_descriptor();
template<typename T>
inline const std::string& SoftmaxParameter_Engine_Name(T enum_t_value) {
  static_assert(::std::is_same<T, SoftmaxParameter_Engine>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function SoftmaxParameter_Engine_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    SoftmaxParameter_Engine_descriptor(), enum_t_value);
}
inline bool SoftmaxParameter_Engine_Parse(
    const std::string& name, SoftmaxParameter_Engine* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<SoftmaxParameter_Engine>(
    SoftmaxParameter_Engine_descriptor(), name, value);
}
enum TanHParameter_Engine : int {
  TanHParameter_Engine_DEFAULT = 0,
  TanHParameter_Engine_CAFFE = 1,
  TanHParameter_Engine_CUDNN = 2
};
bool TanHParameter_Engine_IsValid(int value);
constexpr TanHParameter_Engine TanHParameter_Engine_Engine_MIN = TanHParameter_Engine_DEFAULT;
constexpr TanHParameter_Engine TanHParameter_Engine_Engine_MAX = TanHParameter_Engine_CUDNN;
constexpr int TanHParameter_Engine_Engine_ARRAYSIZE = TanHParameter_Engine_Engine_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TanHParameter_Engine_descriptor();
template<typename T>
inline const std::string& TanHParameter_Engine_Name(T enum_t_value) {
  static_assert(::std::is_same<T, TanHParameter_Engine>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function TanHParameter_Engine_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    TanHParameter_Engine_descriptor(), enum_t_value);
}
inline bool TanHParameter_Engine_Parse(
    const std::string& name, TanHParameter_Engine* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<TanHParameter_Engine>(
    TanHParameter_Engine_descriptor(), name, value);
}
enum SPPParameter_PoolMethod : int {
  SPPParameter_PoolMethod_MAX = 0,
  SPPParameter_PoolMethod_AVE = 1,
  SPPParameter_PoolMethod_STOCHASTIC = 2
};
bool SPPParameter_PoolMethod_IsValid(int value);
constexpr SPPParameter_PoolMethod SPPParameter_PoolMethod_PoolMethod_MIN = SPPParameter_PoolMethod_MAX;
constexpr SPPParameter_PoolMethod SPPParameter_PoolMethod_PoolMethod_MAX = SPPParameter_PoolMethod_STOCHASTIC;
constexpr int SPPParameter_PoolMethod_PoolMethod_ARRAYSIZE = SPPParameter_PoolMethod_PoolMethod_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SPPParameter_PoolMethod_descriptor();
template<typename T>
inline const std::string& SPPParameter_PoolMethod_Name(T enum_t_value) {
  static_assert(::std::is_same<T, SPPParameter_PoolMethod>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function SPPParameter_PoolMethod_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    SPPParameter_PoolMethod_descriptor(), enum_t_value);
}
inline bool SPPParameter_PoolMethod_Parse(
    const std::string& name, SPPParameter_PoolMethod* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<SPPParameter_PoolMethod>(
    SPPParameter_PoolMethod_descriptor(), name, value);
}
enum SPPParameter_Engine : int {
  SPPParameter_Engine_DEFAULT = 0,
  SPPParameter_Engine_CAFFE = 1,
  SPPParameter_Engine_CUDNN = 2
};
bool SPPParameter_Engine_IsValid(int value);
constexpr SPPParameter_Engine SPPParameter_Engine_Engine_MIN = SPPParameter_Engine_DEFAULT;
constexpr SPPParameter_Engine SPPParameter_Engine_Engine_MAX = SPPParameter_Engine_CUDNN;
constexpr int SPPParameter_Engine_Engine_ARRAYSIZE = SPPParameter_Engine_Engine_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SPPParameter_Engine_descriptor();
template<typename T>
inline const std::string& SPPParameter_Engine_Name(T enum_t_value) {
  static_assert(::std::is_same<T, SPPParameter_Engine>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function SPPParameter_Engine_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    SPPParameter_Engine_descriptor(), enum_t_value);
}
inline bool SPPParameter_Engine_Parse(
    const std::string& name, SPPParameter_Engine* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<SPPParameter_Engine>(
    SPPParameter_Engine_descriptor(), name, value);
}
enum V1LayerParameter_LayerType : int {
  V1LayerParameter_LayerType_NONE = 0,
  V1LayerParameter_LayerType_ABSVAL = 35,
  V1LayerParameter_LayerType_ACCURACY = 1,
  V1LayerParameter_LayerType_ARGMAX = 30,
  V1LayerParameter_LayerType_BNLL = 2,
  V1LayerParameter_LayerType_CONCAT = 3,
  V1LayerParameter_LayerType_CONTRASTIVE_LOSS = 37,
  V1LayerParameter_LayerType_CONVOLUTION = 4,
  V1LayerParameter_LayerType_CROP = 44,
  V1LayerParameter_LayerType_DATA = 5,
  V1LayerParameter_LayerType_DECONVOLUTION = 39,
  V1LayerParameter_LayerType_DROPOUT = 6,
  V1LayerParameter_LayerType_DUMMY_DATA = 32,
  V1LayerParameter_LayerType_EUCLIDEAN_LOSS = 7,
  V1LayerParameter_LayerType_ELTWISE = 25,
  V1LayerParameter_LayerType_EXP = 38,
  V1LayerParameter_LayerType_FLATTEN = 8,
  V1LayerParameter_LayerType_HDF5_DATA = 9,
  V1LayerParameter_LayerType_HDF5_OUTPUT = 10,
  V1LayerParameter_LayerType_HINGE_LOSS = 28,
  V1LayerParameter_LayerType_IM2COL = 11,
  V1LayerParameter_LayerType_IMAGE_DATA = 12,
  V1LayerParameter_LayerType_INFOGAIN_LOSS = 13,
  V1LayerParameter_LayerType_INNER_PRODUCT = 14,
  V1LayerParameter_LayerType_LRN = 15,
  V1LayerParameter_LayerType_MEMORY_DATA = 29,
  V1LayerParameter_LayerType_MULTINOMIAL_LOGISTIC_LOSS = 16,
  V1LayerParameter_LayerType_MVN = 34,
  V1LayerParameter_LayerType_POOLING = 17,
  V1LayerParameter_LayerType_POWER = 26,
  V1LayerParameter_LayerType_RELU = 18,
  V1LayerParameter_LayerType_SIGMOID = 19,
  V1LayerParameter_LayerType_SIGMOID_CROSS_ENTROPY_LOSS = 27,
  V1LayerParameter_LayerType_SILENCE = 36,
  V1LayerParameter_LayerType_SOFTMAX = 20,
  V1LayerParameter_LayerType_SOFTMAX_LOSS = 21,
  V1LayerParameter_LayerType_SPLIT = 22,
  V1LayerParameter_LayerType_SLICE = 33,
  V1LayerParameter_LayerType_TANH = 23,
  V1LayerParameter_LayerType_WINDOW_DATA = 24,
  V1LayerParameter_LayerType_THRESHOLD = 31
};
bool V1LayerParameter_LayerType_IsValid(int value);
constexpr V1LayerParameter_LayerType V1LayerParameter_LayerType_LayerType_MIN = V1LayerParameter_LayerType_NONE;
constexpr V1LayerParameter_LayerType V1LayerParameter_LayerType_LayerType_MAX = V1LayerParameter_LayerType_CROP;
constexpr int V1LayerParameter_LayerType_LayerType_ARRAYSIZE = V1LayerParameter_LayerType_LayerType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* V1LayerParameter_LayerType_descriptor();
template<typename T>
inline const std::string& V1LayerParameter_LayerType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, V1LayerParameter_LayerType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function V1LayerParameter_LayerType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    V1LayerParameter_LayerType_descriptor(), enum_t_value);
}
inline bool V1LayerParameter_LayerType_Parse(
    const std::string& name, V1LayerParameter_LayerType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<V1LayerParameter_LayerType>(
    V1LayerParameter_LayerType_descriptor(), name, value);
}
enum V1LayerParameter_DimCheckMode : int {
  V1LayerParameter_DimCheckMode_STRICT = 0,
  V1LayerParameter_DimCheckMode_PERMISSIVE = 1
};
bool V1LayerParameter_DimCheckMode_IsValid(int value);
constexpr V1LayerParameter_DimCheckMode V1LayerParameter_DimCheckMode_DimCheckMode_MIN = V1LayerParameter_DimCheckMode_STRICT;
constexpr V1LayerParameter_DimCheckMode V1LayerParameter_DimCheckMode_DimCheckMode_MAX = V1LayerParameter_DimCheckMode_PERMISSIVE;
constexpr int V1LayerParameter_DimCheckMode_DimCheckMode_ARRAYSIZE = V1LayerParameter_DimCheckMode_DimCheckMode_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* V1LayerParameter_DimCheckMode_descriptor();
template<typename T>
inline const std::string& V1LayerParameter_DimCheckMode_Name(T enum_t_value) {
  static_assert(::std::is_same<T, V1LayerParameter_DimCheckMode>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function V1LayerParameter_DimCheckMode_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    V1LayerParameter_DimCheckMode_descriptor(), enum_t_value);
}
inline bool V1LayerParameter_DimCheckMode_Parse(
    const std::string& name, V1LayerParameter_DimCheckMode* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<V1LayerParameter_DimCheckMode>(
    V1LayerParameter_DimCheckMode_descriptor(), name, value);
}
enum V0LayerParameter_PoolMethod : int {
  V0LayerParameter_PoolMethod_MAX = 0,
  V0LayerParameter_PoolMethod_AVE = 1,
  V0LayerParameter_PoolMethod_STOCHASTIC = 2
};
bool V0LayerParameter_PoolMethod_IsValid(int value);
constexpr V0LayerParameter_PoolMethod V0LayerParameter_PoolMethod_PoolMethod_MIN = V0LayerParameter_PoolMethod_MAX;
constexpr V0LayerParameter_PoolMethod V0LayerParameter_PoolMethod_PoolMethod_MAX = V0LayerParameter_PoolMethod_STOCHASTIC;
constexpr int V0LayerParameter_PoolMethod_PoolMethod_ARRAYSIZE = V0LayerParameter_PoolMethod_PoolMethod_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* V0LayerParameter_PoolMethod_descriptor();
template<typename T>
inline const std::string& V0LayerParameter_PoolMethod_Name(T enum_t_value) {
  static_assert(::std::is_same<T, V0LayerParameter_PoolMethod>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function V0LayerParameter_PoolMethod_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    V0LayerParameter_PoolMethod_descriptor(), enum_t_value);
}
inline bool V0LayerParameter_PoolMethod_Parse(
    const std::string& name, V0LayerParameter_PoolMethod* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<V0LayerParameter_PoolMethod>(
    V0LayerParameter_PoolMethod_descriptor(), name, value);
}
enum Type : int {
  DOUBLE = 0,
  FLOAT = 1,
  FLOAT16 = 2,
  INT = 3,
  UINT = 4
};
bool Type_IsValid(int value);
constexpr Type Type_MIN = DOUBLE;
constexpr Type Type_MAX = UINT;
constexpr int Type_ARRAYSIZE = Type_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Type_descriptor();
template<typename T>
inline const std::string& Type_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Type>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Type_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Type_descriptor(), enum_t_value);
}
inline bool Type_Parse(
    const std::string& name, Type* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Type>(
    Type_descriptor(), name, value);
}
enum Phase : int {
  TRAIN = 0,
  TEST = 1
};
bool Phase_IsValid(int value);
constexpr Phase Phase_MIN = TRAIN;
constexpr Phase Phase_MAX = TEST;
constexpr int Phase_ARRAYSIZE = Phase_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Phase_descriptor();
template<typename T>
inline const std::string& Phase_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Phase>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Phase_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Phase_descriptor(), enum_t_value);
}
inline bool Phase_Parse(
    const std::string& name, Phase* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Phase>(
    Phase_descriptor(), name, value);
}
// ===================================================================

class BlobShape PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:trtcaffe.BlobShape) */ {
 public:
  inline BlobShape() : BlobShape(nullptr) {};
  virtual ~BlobShape();

  BlobShape(const BlobShape& from);
  BlobShape(BlobShape&& from) noexcept
    : BlobShape() {
    *this = ::std::move(from);
  }

  inline BlobShape& operator=(const BlobShape& from) {
    CopyFrom(from);
    return *this;
  }
  inline BlobShape& operator=(BlobShape&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const BlobShape& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BlobShape* internal_default_instance() {
    return reinterpret_cast<const BlobShape*>(
               &_BlobShape_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(BlobShape& a, BlobShape& b) {
    a.Swap(&b);
  }
  inline void Swap(BlobShape* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BlobShape* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BlobShape* New() const final {
    return CreateMaybeMessage<BlobShape>(nullptr);
  }

  BlobShape* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BlobShape>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const BlobShape& from);
  void MergeFrom(const BlobShape& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BlobShape* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "trtcaffe.BlobShape";
  }
  protected:
  explicit BlobShape(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_trtcaffe_2eproto);
    return ::descriptor_table_trtcaffe_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDimFieldNumber = 1,
  };
  // repeated int64 dim = 1 [packed = true];
  int dim_size() const;
  private:
  int _internal_dim_size() const;
  public:
  void clear_dim();
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_dim(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
      _internal_dim() const;
  void _internal_add_dim(::PROTOBUF_NAMESPACE_ID::int64 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
      _internal_mutable_dim();
  public:
  ::PROTOBUF_NAMESPACE_ID::int64 dim(int index) const;
  void set_dim(int index, ::PROTOBUF_NAMESPACE_ID::int64 value);
  void add_dim(::PROTOBUF_NAMESPACE_ID::int64 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
      dim() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
      mutable_dim();

  // @@protoc_insertion_point(class_scope:trtcaffe.BlobShape)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 > dim_;
  mutable std::atomic<int> _dim_cached_byte_size_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_trtcaffe_2eproto;
};
// -------------------------------------------------------------------

class BlobProto PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:trtcaffe.BlobProto) */ {
 public:
  inline BlobProto() : BlobProto(nullptr) {};
  virtual ~BlobProto();

  BlobProto(const BlobProto& from);
  BlobProto(BlobProto&& from) noexcept
    : BlobProto() {
    *this = ::std::move(from);
  }

  inline BlobProto& operator=(const BlobProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline BlobProto& operator=(BlobProto&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const BlobProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BlobProto* internal_default_instance() {
    return reinterpret_cast<const BlobProto*>(
               &_BlobProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(BlobProto& a, BlobProto& b) {
    a.Swap(&b);
  }
  inline void Swap(BlobProto* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BlobProto* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BlobProto* New() const final {
    return CreateMaybeMessage<BlobProto>(nullptr);
  }

  BlobProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BlobProto>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const BlobProto& from);
  void MergeFrom(const BlobProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BlobProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "trtcaffe.BlobProto";
  }
  protected:
  explicit BlobProto(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_trtcaffe_2eproto);
    return ::descriptor_table_trtcaffe_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 5,
    kDiffFieldNumber = 6,
    kDoubleDataFieldNumber = 8,
    kDoubleDiffFieldNumber = 9,
    kRawDataFieldNumber = 12,
    kRawDiffFieldNumber = 13,
    kShapeFieldNumber = 7,
    kNumFieldNumber = 1,
    kChannelsFieldNumber = 2,
    kHeightFieldNumber = 3,
    kWidthFieldNumber = 4,
    kRawDataTypeFieldNumber = 10,
    kRawDiffTypeFieldNumber = 11,
  };
  // repeated float data = 5 [packed = true];
  int data_size() const;
  private:
  int _internal_data_size() const;
  public:
  void clear_data();
  private:
  float _internal_data(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_data() const;
  void _internal_add_data(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_data();
  public:
  float data(int index) const;
  void set_data(int index, float value);
  void add_data(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      data() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_data();

  // repeated float diff = 6 [packed = true];
  int diff_size() const;
  private:
  int _internal_diff_size() const;
  public:
  void clear_diff();
  private:
  float _internal_diff(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_diff() const;
  void _internal_add_diff(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_diff();
  public:
  float diff(int index) const;
  void set_diff(int index, float value);
  void add_diff(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      diff() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_diff();

  // repeated double double_data = 8 [packed = true];
  int double_data_size() const;
  private:
  int _internal_double_data_size() const;
  public:
  void clear_double_data();
  private:
  double _internal_double_data(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      _internal_double_data() const;
  void _internal_add_double_data(double value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      _internal_mutable_double_data();
  public:
  double double_data(int index) const;
  void set_double_data(int index, double value);
  void add_double_data(double value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      double_data() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      mutable_double_data();

  // repeated double double_diff = 9 [packed = true];
  int double_diff_size() const;
  private:
  int _internal_double_diff_size() const;
  public:
  void clear_double_diff();
  private:
  double _internal_double_diff(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      _internal_double_diff() const;
  void _internal_add_double_diff(double value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      _internal_mutable_double_diff();
  public:
  double double_diff(int index) const;
  void set_double_diff(int index, double value);
  void add_double_diff(double value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      double_diff() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      mutable_double_diff();

  // optional bytes raw_data = 12 [packed = false];
  bool has_raw_data() const;
  private:
  bool _internal_has_raw_data() const;
  public:
  void clear_raw_data();
  const std::string& raw_data() const;
  void set_raw_data(const std::string& value);
  void set_raw_data(std::string&& value);
  void set_raw_data(const char* value);
  void set_raw_data(const void* value, size_t size);
  std::string* mutable_raw_data();
  std::string* release_raw_data();
  void set_allocated_raw_data(std::string* raw_data);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_raw_data();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_raw_data(
      std::string* raw_data);
  private:
  const std::string& _internal_raw_data() const;
  void _internal_set_raw_data(const std::string& value);
  std::string* _internal_mutable_raw_data();
  public:

  // optional bytes raw_diff = 13 [packed = false];
  bool has_raw_diff() const;
  private:
  bool _internal_has_raw_diff() const;
  public:
  void clear_raw_diff();
  const std::string& raw_diff() const;
  void set_raw_diff(const std::string& value);
  void set_raw_diff(std::string&& value);
  void set_raw_diff(const char* value);
  void set_raw_diff(const void* value, size_t size);
  std::string* mutable_raw_diff();
  std::string* release_raw_diff();
  void set_allocated_raw_diff(std::string* raw_diff);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_raw_diff();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_raw_diff(
      std::string* raw_diff);
  private:
  const std::string& _internal_raw_diff() const;
  void _internal_set_raw_diff(const std::string& value);
  std::string* _internal_mutable_raw_diff();
  public:

  // optional .trtcaffe.BlobShape shape = 7;
  bool has_shape() const;
  private:
  bool _internal_has_shape() const;
  public:
  void clear_shape();
  const ::trtcaffe::BlobShape& shape() const;
  ::trtcaffe::BlobShape* release_shape();
  ::trtcaffe::BlobShape* mutable_shape();
  void set_allocated_shape(::trtcaffe::BlobShape* shape);
  private:
  const ::trtcaffe::BlobShape& _internal_shape() const;
  ::trtcaffe::BlobShape* _internal_mutable_shape();
  public:
  void unsafe_arena_set_allocated_shape(
      ::trtcaffe::BlobShape* shape);
  ::trtcaffe::BlobShape* unsafe_arena_release_shape();

  // optional int32 num = 1 [default = 0];
  bool has_num() const;
  private:
  bool _internal_has_num() const;
  public:
  void clear_num();
  ::PROTOBUF_NAMESPACE_ID::int32 num() const;
  void set_num(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_num() const;
  void _internal_set_num(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 channels = 2 [default = 0];
  bool has_channels() const;
  private:
  bool _internal_has_channels() const;
  public:
  void clear_channels();
  ::PROTOBUF_NAMESPACE_ID::int32 channels() const;
  void set_channels(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_channels() const;
  void _internal_set_channels(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 height = 3 [default = 0];
  bool has_height() const;
  private:
  bool _internal_has_height() const;
  public:
  void clear_height();
  ::PROTOBUF_NAMESPACE_ID::int32 height() const;
  void set_height(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_height() const;
  void _internal_set_height(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 width = 4 [default = 0];
  bool has_width() const;
  private:
  bool _internal_has_width() const;
  public:
  void clear_width();
  ::PROTOBUF_NAMESPACE_ID::int32 width() const;
  void set_width(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_width() const;
  void _internal_set_width(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional .trtcaffe.Type raw_data_type = 10;
  bool has_raw_data_type() const;
  private:
  bool _internal_has_raw_data_type() const;
  public:
  void clear_raw_data_type();
  ::trtcaffe::Type raw_data_type() const;
  void set_raw_data_type(::trtcaffe::Type value);
  private:
  ::trtcaffe::Type _internal_raw_data_type() const;
  void _internal_set_raw_data_type(::trtcaffe::Type value);
  public:

  // optional .trtcaffe.Type raw_diff_type = 11;
  bool has_raw_diff_type() const;
  private:
  bool _internal_has_raw_diff_type() const;
  public:
  void clear_raw_diff_type();
  ::trtcaffe::Type raw_diff_type() const;
  void set_raw_diff_type(::trtcaffe::Type value);
  private:
  ::trtcaffe::Type _internal_raw_diff_type() const;
  void _internal_set_raw_diff_type(::trtcaffe::Type value);
  public:

  // @@protoc_insertion_point(class_scope:trtcaffe.BlobProto)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > data_;
  mutable std::atomic<int> _data_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > diff_;
  mutable std::atomic<int> _diff_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double > double_data_;
  mutable std::atomic<int> _double_data_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double > double_diff_;
  mutable std::atomic<int> _double_diff_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr raw_data_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr raw_diff_;
  ::trtcaffe::BlobShape* shape_;
  ::PROTOBUF_NAMESPACE_ID::int32 num_;
  ::PROTOBUF_NAMESPACE_ID::int32 channels_;
  ::PROTOBUF_NAMESPACE_ID::int32 height_;
  ::PROTOBUF_NAMESPACE_ID::int32 width_;
  int raw_data_type_;
  int raw_diff_type_;
  friend struct ::TableStruct_trtcaffe_2eproto;
};
// -------------------------------------------------------------------

class BlobProtoVector PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:trtcaffe.BlobProtoVector) */ {
 public:
  inline BlobProtoVector() : BlobProtoVector(nullptr) {};
  virtual ~BlobProtoVector();

  BlobProtoVector(const BlobProtoVector& from);
  BlobProtoVector(BlobProtoVector&& from) noexcept
    : BlobProtoVector() {
    *this = ::std::move(from);
  }

  inline BlobProtoVector& operator=(const BlobProtoVector& from) {
    CopyFrom(from);
    return *this;
  }
  inline BlobProtoVector& operator=(BlobProtoVector&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const BlobProtoVector& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BlobProtoVector* internal_default_instance() {
    return reinterpret_cast<const BlobProtoVector*>(
               &_BlobProtoVector_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(BlobProtoVector& a, BlobProtoVector& b) {
    a.Swap(&b);
  }
  inline void Swap(BlobProtoVector* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BlobProtoVector* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BlobProtoVector* New() const final {
    return CreateMaybeMessage<BlobProtoVector>(nullptr);
  }

  BlobProtoVector* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BlobProtoVector>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const BlobProtoVector& from);
  void MergeFrom(const BlobProtoVector& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BlobProtoVector* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "trtcaffe.BlobProtoVector";
  }
  protected:
  explicit BlobProtoVector(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_trtcaffe_2eproto);
    return ::descriptor_table_trtcaffe_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBlobsFieldNumber = 1,
  };
  // repeated .trtcaffe.BlobProto blobs = 1;
  int blobs_size() const;
  private:
  int _internal_blobs_size() const;
  public:
  void clear_blobs();
  ::trtcaffe::BlobProto* mutable_blobs(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::trtcaffe::BlobProto >*
      mutable_blobs();
  private:
  const ::trtcaffe::BlobProto& _internal_blobs(int index) const;
  ::trtcaffe::BlobProto* _internal_add_blobs();
  public:
  const ::trtcaffe::BlobProto& blobs(int index) const;
  ::trtcaffe::BlobProto* add_blobs();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::trtcaffe::BlobProto >&
      blobs() const;

  // @@protoc_insertion_point(class_scope:trtcaffe.BlobProtoVector)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::trtcaffe::BlobProto > blobs_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_trtcaffe_2eproto;
};
// -------------------------------------------------------------------

class Datum PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:trtcaffe.Datum) */ {
 public:
  inline Datum() : Datum(nullptr) {};
  virtual ~Datum();

  Datum(const Datum& from);
  Datum(Datum&& from) noexcept
    : Datum() {
    *this = ::std::move(from);
  }

  inline Datum& operator=(const Datum& from) {
    CopyFrom(from);
    return *this;
  }
  inline Datum& operator=(Datum&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Datum& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Datum* internal_default_instance() {
    return reinterpret_cast<const Datum*>(
               &_Datum_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(Datum& a, Datum& b) {
    a.Swap(&b);
  }
  inline void Swap(Datum* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Datum* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Datum* New() const final {
    return CreateMaybeMessage<Datum>(nullptr);
  }

  Datum* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Datum>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Datum& from);
  void MergeFrom(const Datum& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Datum* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "trtcaffe.Datum";
  }
  protected:
  explicit Datum(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_trtcaffe_2eproto);
    return ::descriptor_table_trtcaffe_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFloatDataFieldNumber = 6,
    kDataFieldNumber = 4,
    kChannelsFieldNumber = 1,
    kHeightFieldNumber = 2,
    kWidthFieldNumber = 3,
    kLabelFieldNumber = 5,
    kEncodedFieldNumber = 7,
  };
  // repeated float float_data = 6;
  int float_data_size() const;
  private:
  int _internal_float_data_size() const;
  public:
  void clear_float_data();
  private:
  float _internal_float_data(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_float_data() const;
  void _internal_add_float_data(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_float_data();
  public:
  float float_data(int index) const;
  void set_float_data(int index, float value);
  void add_float_data(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      float_data() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_float_data();

  // optional bytes data = 4;
  bool has_data() const;
  private:
  bool _internal_has_data() const;
  public:
  void clear_data();
  const std::string& data() const;
  void set_data(const std::string& value);
  void set_data(std::string&& value);
  void set_data(const char* value);
  void set_data(const void* value, size_t size);
  std::string* mutable_data();
  std::string* release_data();
  void set_allocated_data(std::string* data);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_data();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_data(
      std::string* data);
  private:
  const std::string& _internal_data() const;
  void _internal_set_data(const std::string& value);
  std::string* _internal_mutable_data();
  public:

  // optional int32 channels = 1;
  bool has_channels() const;
  private:
  bool _internal_has_channels() const;
  public:
  void clear_channels();
  ::PROTOBUF_NAMESPACE_ID::int32 channels() const;
  void set_channels(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_channels() const;
  void _internal_set_channels(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 height = 2;
  bool has_height() const;
  private:
  bool _internal_has_height() const;
  public:
  void clear_height();
  ::PROTOBUF_NAMESPACE_ID::int32 height() const;
  void set_height(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_height() const;
  void _internal_set_height(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 width = 3;
  bool has_width() const;
  private:
  bool _internal_has_width() const;
  public:
  void clear_width();
  ::PROTOBUF_NAMESPACE_ID::int32 width() const;
  void set_width(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_width() const;
  void _internal_set_width(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 label = 5;
  bool has_label() const;
  private:
  bool _internal_has_label() const;
  public:
  void clear_label();
  ::PROTOBUF_NAMESPACE_ID::int32 label() const;
  void set_label(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_label() const;
  void _internal_set_label(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional bool encoded = 7 [default = false];
  bool has_encoded() const;
  private:
  bool _internal_has_encoded() const;
  public:
  void clear_encoded();
  bool encoded() const;
  void set_encoded(bool value);
  private:
  bool _internal_encoded() const;
  void _internal_set_encoded(bool value);
  public:

  // @@protoc_insertion_point(class_scope:trtcaffe.Datum)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > float_data_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr data_;
  ::PROTOBUF_NAMESPACE_ID::int32 channels_;
  ::PROTOBUF_NAMESPACE_ID::int32 height_;
  ::PROTOBUF_NAMESPACE_ID::int32 width_;
  ::PROTOBUF_NAMESPACE_ID::int32 label_;
  bool encoded_;
  friend struct ::TableStruct_trtcaffe_2eproto;
};
// -------------------------------------------------------------------

class FillerParameter PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:trtcaffe.FillerParameter) */ {
 public:
  inline FillerParameter() : FillerParameter(nullptr) {};
  virtual ~FillerParameter();

  FillerParameter(const FillerParameter& from);
  FillerParameter(FillerParameter&& from) noexcept
    : FillerParameter() {
    *this = ::std::move(from);
  }

  inline FillerParameter& operator=(const FillerParameter& from) {
    CopyFrom(from);
    return *this;
  }
  inline FillerParameter& operator=(FillerParameter&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const FillerParameter& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FillerParameter* internal_default_instance() {
    return reinterpret_cast<const FillerParameter*>(
               &_FillerParameter_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(FillerParameter& a, FillerParameter& b) {
    a.Swap(&b);
  }
  inline void Swap(FillerParameter* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FillerParameter* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FillerParameter* New() const final {
    return CreateMaybeMessage<FillerParameter>(nullptr);
  }

  FillerParameter* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FillerParameter>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FillerParameter& from);
  void MergeFrom(const FillerParameter& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FillerParameter* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "trtcaffe.FillerParameter";
  }
  protected:
  explicit FillerParameter(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_trtcaffe_2eproto);
    return ::descriptor_table_trtcaffe_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef FillerParameter_VarianceNorm VarianceNorm;
  static constexpr VarianceNorm FAN_IN =
    FillerParameter_VarianceNorm_FAN_IN;
  static constexpr VarianceNorm FAN_OUT =
    FillerParameter_VarianceNorm_FAN_OUT;
  static constexpr VarianceNorm AVERAGE =
    FillerParameter_VarianceNorm_AVERAGE;
  static inline bool VarianceNorm_IsValid(int value) {
    return FillerParameter_VarianceNorm_IsValid(value);
  }
  static constexpr VarianceNorm VarianceNorm_MIN =
    FillerParameter_VarianceNorm_VarianceNorm_MIN;
  static constexpr VarianceNorm VarianceNorm_MAX =
    FillerParameter_VarianceNorm_VarianceNorm_MAX;
  static constexpr int VarianceNorm_ARRAYSIZE =
    FillerParameter_VarianceNorm_VarianceNorm_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  VarianceNorm_descriptor() {
    return FillerParameter_VarianceNorm_descriptor();
  }
  template<typename T>
  static inline const std::string& VarianceNorm_Name(T enum_t_value) {
    static_assert(::std::is_same<T, VarianceNorm>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function VarianceNorm_Name.");
    return FillerParameter_VarianceNorm_Name(enum_t_value);
  }
  static inline bool VarianceNorm_Parse(const std::string& name,
      VarianceNorm* value) {
    return FillerParameter_VarianceNorm_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kTypeFieldNumber = 1,
    kValueFieldNumber = 2,
    kMinFieldNumber = 3,
    kMeanFieldNumber = 5,
    kVarianceNormFieldNumber = 8,
    kSparseFieldNumber = 7,
    kMaxFieldNumber = 4,
    kStdFieldNumber = 6,
  };
  // optional string type = 1 [default = "constant"];
  bool has_type() const;
  private:
  bool _internal_has_type() const;
  public:
  void clear_type();
  const std::string& type() const;
  void set_type(const std::string& value);
  void set_type(std::string&& value);
  void set_type(const char* value);
  void set_type(const char* value, size_t size);
  std::string* mutable_type();
  std::string* release_type();
  void set_allocated_type(std::string* type);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_type();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_type(
      std::string* type);
  private:
  const std::string& _internal_type() const;
  void _internal_set_type(const std::string& value);
  std::string* _internal_mutable_type();
  public:

  // optional float value = 2 [default = 0];
  bool has_value() const;
  private:
  bool _internal_has_value() const;
  public:
  void clear_value();
  float value() const;
  void set_value(float value);
  private:
  float _internal_value() const;
  void _internal_set_value(float value);
  public:

  // optional float min = 3 [default = 0];
  bool has_min() const;
  private:
  bool _internal_has_min() const;
  public:
  void clear_min();
  float min() const;
  void set_min(float value);
  private:
  float _internal_min() const;
  void _internal_set_min(float value);
  public:

  // optional float mean = 5 [default = 0];
  bool has_mean() const;
  private:
  bool _internal_has_mean() const;
  public:
  void clear_mean();
  float mean() const;
  void set_mean(float value);
  private:
  float _internal_mean() const;
  void _internal_set_mean(float value);
  public:

  // optional .trtcaffe.FillerParameter.VarianceNorm variance_norm = 8 [default = FAN_IN];
  bool has_variance_norm() const;
  private:
  bool _internal_has_variance_norm() const;
  public:
  void clear_variance_norm();
  ::trtcaffe::FillerParameter_VarianceNorm variance_norm() const;
  void set_variance_norm(::trtcaffe::FillerParameter_VarianceNorm value);
  private:
  ::trtcaffe::FillerParameter_VarianceNorm _internal_variance_norm() const;
  void _internal_set_variance_norm(::trtcaffe::FillerParameter_VarianceNorm value);
  public:

  // optional int32 sparse = 7 [default = -1];
  bool has_sparse() const;
  private:
  bool _internal_has_sparse() const;
  public:
  void clear_sparse();
  ::PROTOBUF_NAMESPACE_ID::int32 sparse() const;
  void set_sparse(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_sparse() const;
  void _internal_set_sparse(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional float max = 4 [default = 1];
  bool has_max() const;
  private:
  bool _internal_has_max() const;
  public:
  void clear_max();
  float max() const;
  void set_max(float value);
  private:
  float _internal_max() const;
  void _internal_set_max(float value);
  public:

  // optional float std = 6 [default = 1];
  bool has_std() const;
  private:
  bool _internal_has_std() const;
  public:
  void clear_std();
  float std() const;
  void set_std(float value);
  private:
  float _internal_std() const;
  void _internal_set_std(float value);
  public:

  // @@protoc_insertion_point(class_scope:trtcaffe.FillerParameter)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  public:
  static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> _i_give_permission_to_break_this_code_default_type_;
  private:
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr type_;
  float value_;
  float min_;
  float mean_;
  int variance_norm_;
  ::PROTOBUF_NAMESPACE_ID::int32 sparse_;
  float max_;
  float std_;
  friend struct ::TableStruct_trtcaffe_2eproto;
};
// -------------------------------------------------------------------

class NetParameter PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:trtcaffe.NetParameter) */ {
 public:
  inline NetParameter() : NetParameter(nullptr) {};
  virtual ~NetParameter();

  NetParameter(const NetParameter& from);
  NetParameter(NetParameter&& from) noexcept
    : NetParameter() {
    *this = ::std::move(from);
  }

  inline NetParameter& operator=(const NetParameter& from) {
    CopyFrom(from);
    return *this;
  }
  inline NetParameter& operator=(NetParameter&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const NetParameter& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const NetParameter* internal_default_instance() {
    return reinterpret_cast<const NetParameter*>(
               &_NetParameter_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(NetParameter& a, NetParameter& b) {
    a.Swap(&b);
  }
  inline void Swap(NetParameter* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NetParameter* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline NetParameter* New() const final {
    return CreateMaybeMessage<NetParameter>(nullptr);
  }

  NetParameter* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<NetParameter>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const NetParameter& from);
  void MergeFrom(const NetParameter& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NetParameter* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "trtcaffe.NetParameter";
  }
  protected:
  explicit NetParameter(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_trtcaffe_2eproto);
    return ::descriptor_table_trtcaffe_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLayersFieldNumber = 2,
    kInputFieldNumber = 3,
    kInputDimFieldNumber = 4,
    kInputShapeFieldNumber = 8,
    kLayerFieldNumber = 100,
    kNameFieldNumber = 1,
    kDefaultConvAlgosOverrideFieldNumber = 17,
    kStateFieldNumber = 6,
    kForceBackwardFieldNumber = 5,
    kDebugInfoFieldNumber = 7,
    kDefaultCudnnMathOverrideFieldNumber = 19,
    kDefaultForwardTypeFieldNumber = 11,
    kDefaultBackwardTypeFieldNumber = 12,
    kDefaultForwardMathFieldNumber = 13,
    kDefaultBackwardMathFieldNumber = 14,
    kGlobalGradScaleFieldNumber = 15,
    kReduceBucketsFieldNumber = 18,
  };
  // repeated .trtcaffe.V1LayerParameter layers = 2;
  int layers_size() const;
  private:
  int _internal_layers_size() const;
  public:
  void clear_layers();
  ::trtcaffe::V1LayerParameter* mutable_layers(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::trtcaffe::V1LayerParameter >*
      mutable_layers();
  private:
  const ::trtcaffe::V1LayerParameter& _internal_layers(int index) const;
  ::trtcaffe::V1LayerParameter* _internal_add_layers();
  public:
  const ::trtcaffe::V1LayerParameter& layers(int index) const;
  ::trtcaffe::V1LayerParameter* add_layers();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::trtcaffe::V1LayerParameter >&
      layers() const;

  // repeated string input = 3;
  int input_size() const;
  private:
  int _internal_input_size() const;
  public:
  void clear_input();
  const std::string& input(int index) const;
  std::string* mutable_input(int index);
  void set_input(int index, const std::string& value);
  void set_input(int index, std::string&& value);
  void set_input(int index, const char* value);
  void set_input(int index, const char* value, size_t size);
  std::string* add_input();
  void add_input(const std::string& value);
  void add_input(std::string&& value);
  void add_input(const char* value);
  void add_input(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& input() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_input();
  private:
  const std::string& _internal_input(int index) const;
  std::string* _internal_add_input();
  public:

  // repeated int32 input_dim = 4;
  int input_dim_size() const;
  private:
  int _internal_input_dim_size() const;
  public:
  void clear_input_dim();
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_input_dim(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_input_dim() const;
  void _internal_add_input_dim(::PROTOBUF_NAMESPACE_ID::int32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_input_dim();
  public:
  ::PROTOBUF_NAMESPACE_ID::int32 input_dim(int index) const;
  void set_input_dim(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_input_dim(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      input_dim() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_input_dim();

  // repeated .trtcaffe.BlobShape input_shape = 8;
  int input_shape_size() const;
  private:
  int _internal_input_shape_size() const;
  public:
  void clear_input_shape();
  ::trtcaffe::BlobShape* mutable_input_shape(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::trtcaffe::BlobShape >*
      mutable_input_shape();
  private:
  const ::trtcaffe::BlobShape& _internal_input_shape(int index) const;
  ::trtcaffe::BlobShape* _internal_add_input_shape();
  public:
  const ::trtcaffe::BlobShape& input_shape(int index) const;
  ::trtcaffe::BlobShape* add_input_shape();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::trtcaffe::BlobShape >&
      input_shape() const;

  // repeated .trtcaffe.LayerParameter layer = 100;
  int layer_size() const;
  private:
  int _internal_layer_size() const;
  public:
  void clear_layer();
  ::trtcaffe::LayerParameter* mutable_layer(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::trtcaffe::LayerParameter >*
      mutable_layer();
  private:
  const ::trtcaffe::LayerParameter& _internal_layer(int index) const;
  ::trtcaffe::LayerParameter* _internal_add_layer();
  public:
  const ::trtcaffe::LayerParameter& layer(int index) const;
  ::trtcaffe::LayerParameter* add_layer();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::trtcaffe::LayerParameter >&
      layer() const;

  // optional string name = 1;
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_name();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_name(
      std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // optional string default_conv_algos_override = 17 [default = "-1,-1,-1"];
  bool has_default_conv_algos_override() const;
  private:
  bool _internal_has_default_conv_algos_override() const;
  public:
  void clear_default_conv_algos_override();
  const std::string& default_conv_algos_override() const;
  void set_default_conv_algos_override(const std::string& value);
  void set_default_conv_algos_override(std::string&& value);
  void set_default_conv_algos_override(const char* value);
  void set_default_conv_algos_override(const char* value, size_t size);
  std::string* mutable_default_conv_algos_override();
  std::string* release_default_conv_algos_override();
  void set_allocated_default_conv_algos_override(std::string* default_conv_algos_override);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_default_conv_algos_override();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_default_conv_algos_override(
      std::string* default_conv_algos_override);
  private:
  const std::string& _internal_default_conv_algos_override() const;
  void _internal_set_default_conv_algos_override(const std::string& value);
  std::string* _internal_mutable_default_conv_algos_override();
  public:

  // optional .trtcaffe.NetState state = 6;
  bool has_state() const;
  private:
  bool _internal_has_state() const;
  public:
  void clear_state();
  const ::trtcaffe::NetState& state() const;
  ::trtcaffe::NetState* release_state();
  ::trtcaffe::NetState* mutable_state();
  void set_allocated_state(::trtcaffe::NetState* state);
  private:
  const ::trtcaffe::NetState& _internal_state() const;
  ::trtcaffe::NetState* _internal_mutable_state();
  public:
  void unsafe_arena_set_allocated_state(
      ::trtcaffe::NetState* state);
  ::trtcaffe::NetState* unsafe_arena_release_state();

  // optional bool force_backward = 5 [default = false];
  bool has_force_backward() const;
  private:
  bool _internal_has_force_backward() const;
  public:
  void clear_force_backward();
  bool force_backward() const;
  void set_force_backward(bool value);
  private:
  bool _internal_force_backward() const;
  void _internal_set_force_backward(bool value);
  public:

  // optional bool debug_info = 7 [default = false];
  bool has_debug_info() const;
  private:
  bool _internal_has_debug_info() const;
  public:
  void clear_debug_info();
  bool debug_info() const;
  void set_debug_info(bool value);
  private:
  bool _internal_debug_info() const;
  void _internal_set_debug_info(bool value);
  public:

  // optional int32 default_cudnn_math_override = 19 [default = -1];
  bool has_default_cudnn_math_override() const;
  private:
  bool _internal_has_default_cudnn_math_override() const;
  public:
  void clear_default_cudnn_math_override();
  ::PROTOBUF_NAMESPACE_ID::int32 default_cudnn_math_override() const;
  void set_default_cudnn_math_override(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_default_cudnn_math_override() const;
  void _internal_set_default_cudnn_math_override(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional .trtcaffe.Type default_forward_type = 11 [default = FLOAT];
  bool has_default_forward_type() const;
  private:
  bool _internal_has_default_forward_type() const;
  public:
  void clear_default_forward_type();
  ::trtcaffe::Type default_forward_type() const;
  void set_default_forward_type(::trtcaffe::Type value);
  private:
  ::trtcaffe::Type _internal_default_forward_type() const;
  void _internal_set_default_forward_type(::trtcaffe::Type value);
  public:

  // optional .trtcaffe.Type default_backward_type = 12 [default = FLOAT];
  bool has_default_backward_type() const;
  private:
  bool _internal_has_default_backward_type() const;
  public:
  void clear_default_backward_type();
  ::trtcaffe::Type default_backward_type() const;
  void set_default_backward_type(::trtcaffe::Type value);
  private:
  ::trtcaffe::Type _internal_default_backward_type() const;
  void _internal_set_default_backward_type(::trtcaffe::Type value);
  public:

  // optional .trtcaffe.Type default_forward_math = 13 [default = FLOAT];
  bool has_default_forward_math() const;
  private:
  bool _internal_has_default_forward_math() const;
  public:
  void clear_default_forward_math();
  ::trtcaffe::Type default_forward_math() const;
  void set_default_forward_math(::trtcaffe::Type value);
  private:
  ::trtcaffe::Type _internal_default_forward_math() const;
  void _internal_set_default_forward_math(::trtcaffe::Type value);
  public:

  // optional .trtcaffe.Type default_backward_math = 14 [default = FLOAT];
  bool has_default_backward_math() const;
  private:
  bool _internal_has_default_backward_math() const;
  public:
  void clear_default_backward_math();
  ::trtcaffe::Type default_backward_math() const;
  void set_default_backward_math(::trtcaffe::Type value);
  private:
  ::trtcaffe::Type _internal_default_backward_math() const;
  void _internal_set_default_backward_math(::trtcaffe::Type value);
  public:

  // optional float global_grad_scale = 15 [default = 1];
  bool has_global_grad_scale() const;
  private:
  bool _internal_has_global_grad_scale() const;
  public:
  void clear_global_grad_scale();
  float global_grad_scale() const;
  void set_global_grad_scale(float value);
  private:
  float _internal_global_grad_scale() const;
  void _internal_set_global_grad_scale(float value);
  public:

  // optional int32 reduce_buckets = 18 [default = 3];
  bool has_reduce_buckets() const;
  private:
  bool _internal_has_reduce_buckets() const;
  public:
  void clear_reduce_buckets();
  ::PROTOBUF_NAMESPACE_ID::int32 reduce_buckets() const;
  void set_reduce_buckets(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_reduce_buckets() const;
  void _internal_set_reduce_buckets(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:trtcaffe.NetParameter)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::trtcaffe::V1LayerParameter > layers_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> input_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > input_dim_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::trtcaffe::BlobShape > input_shape_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::trtcaffe::LayerParameter > layer_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  public:
  static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> _i_give_permission_to_break_this_code_default_default_conv_algos_override_;
  private:
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr default_conv_algos_override_;
  ::trtcaffe::NetState* state_;
  bool force_backward_;
  bool debug_info_;
  ::PROTOBUF_NAMESPACE_ID::int32 default_cudnn_math_override_;
  int default_forward_type_;
  int default_backward_type_;
  int default_forward_math_;
  int default_backward_math_;
  float global_grad_scale_;
  ::PROTOBUF_NAMESPACE_ID::int32 reduce_buckets_;
  friend struct ::TableStruct_trtcaffe_2eproto;
};
// -------------------------------------------------------------------

class SolverParameter PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:trtcaffe.SolverParameter) */ {
 public:
  inline SolverParameter() : SolverParameter(nullptr) {};
  virtual ~SolverParameter();

  SolverParameter(const SolverParameter& from);
  SolverParameter(SolverParameter&& from) noexcept
    : SolverParameter() {
    *this = ::std::move(from);
  }

  inline SolverParameter& operator=(const SolverParameter& from) {
    CopyFrom(from);
    return *this;
  }
  inline SolverParameter& operator=(SolverParameter&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SolverParameter& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SolverParameter* internal_default_instance() {
    return reinterpret_cast<const SolverParameter*>(
               &_SolverParameter_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(SolverParameter& a, SolverParameter& b) {
    a.Swap(&b);
  }
  inline void Swap(SolverParameter* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SolverParameter* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SolverParameter* New() const final {
    return CreateMaybeMessage<SolverParameter>(nullptr);
  }

  SolverParameter* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SolverParameter>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SolverParameter& from);
  void MergeFrom(const SolverParameter& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SolverParameter* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "trtcaffe.SolverParameter";
  }
  protected:
  explicit SolverParameter(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_trtcaffe_2eproto);
    return ::descriptor_table_trtcaffe_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef SolverParameter_SnapshotFormat SnapshotFormat;
  static constexpr SnapshotFormat HDF5 =
    SolverParameter_SnapshotFormat_HDF5;
  static constexpr SnapshotFormat BINARYPROTO =
    SolverParameter_SnapshotFormat_BINARYPROTO;
  static inline bool SnapshotFormat_IsValid(int value) {
    return SolverParameter_SnapshotFormat_IsValid(value);
  }
  static constexpr SnapshotFormat SnapshotFormat_MIN =
    SolverParameter_SnapshotFormat_SnapshotFormat_MIN;
  static constexpr SnapshotFormat SnapshotFormat_MAX =
    SolverParameter_SnapshotFormat_SnapshotFormat_MAX;
  static constexpr int SnapshotFormat_ARRAYSIZE =
    SolverParameter_SnapshotFormat_SnapshotFormat_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  SnapshotFormat_descriptor() {
    return SolverParameter_SnapshotFormat_descriptor();
  }
  template<typename T>
  static inline const std::string& SnapshotFormat_Name(T enum_t_value) {
    static_assert(::std::is_same<T, SnapshotFormat>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function SnapshotFormat_Name.");
    return SolverParameter_SnapshotFormat_Name(enum_t_value);
  }
  static inline bool SnapshotFormat_Parse(const std::string& name,
      SnapshotFormat* value) {
    return SolverParameter_SnapshotFormat_Parse(name, value);
  }

  typedef SolverParameter_SolverMode SolverMode;
  static constexpr SolverMode CPU =
    SolverParameter_SolverMode_CPU;
  static constexpr SolverMode GPU =
    SolverParameter_SolverMode_GPU;
  static inline bool SolverMode_IsValid(int value) {
    return SolverParameter_SolverMode_IsValid(value);
  }
  static constexpr SolverMode SolverMode_MIN =
    SolverParameter_SolverMode_SolverMode_MIN;
  static constexpr SolverMode SolverMode_MAX =
    SolverParameter_SolverMode_SolverMode_MAX;
  static constexpr int SolverMode_ARRAYSIZE =
    SolverParameter_SolverMode_SolverMode_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  SolverMode_descriptor() {
    return SolverParameter_SolverMode_descriptor();
  }
  template<typename T>
  static inline const std::string& SolverMode_Name(T enum_t_value) {
    static_assert(::std::is_same<T, SolverMode>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function SolverMode_Name.");
    return SolverParameter_SolverMode_Name(enum_t_value);
  }
  static inline bool SolverMode_Parse(const std::string& name,
      SolverMode* value) {
    return SolverParameter_SolverMode_Parse(name, value);
  }

  typedef SolverParameter_SolverType SolverType;
  static constexpr SolverType SGD =
    SolverParameter_SolverType_SGD;
  static constexpr SolverType NESTEROV =
    SolverParameter_SolverType_NESTEROV;
  static constexpr SolverType ADAGRAD =
    SolverParameter_SolverType_ADAGRAD;
  static constexpr SolverType RMSPROP =
    SolverParameter_SolverType_RMSPROP;
  static constexpr SolverType ADADELTA =
    SolverParameter_SolverType_ADADELTA;
  static constexpr SolverType ADAM =
    SolverParameter_SolverType_ADAM;
  static inline bool SolverType_IsValid(int value) {
    return SolverParameter_SolverType_IsValid(value);
  }
  static constexpr SolverType SolverType_MIN =
    SolverParameter_SolverType_SolverType_MIN;
  static constexpr SolverType SolverType_MAX =
    SolverParameter_SolverType_SolverType_MAX;
  static constexpr int SolverType_ARRAYSIZE =
    SolverParameter_SolverType_SolverType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  SolverType_descriptor() {
    return SolverParameter_SolverType_descriptor();
  }
  template<typename T>
  static inline const std::string& SolverType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, SolverType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function SolverType_Name.");
    return SolverParameter_SolverType_Name(enum_t_value);
  }
  static inline bool SolverType_Parse(const std::string& name,
      SolverType* value) {
    return SolverParameter_SolverType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kTestNetFieldNumber = 2,
    kTestIterFieldNumber = 3,
    kTestNetParamFieldNumber = 22,
    kTestStateFieldNumber = 27,
    kStepvalueFieldNumber = 34,
    kTrainNetFieldNumber = 1,
    kLrPolicyFieldNumber = 8,
    kSnapshotPrefixFieldNumber = 15,
    kNetFieldNumber = 24,
    kRegularizationTypeFieldNumber = 29,
    kTypeFieldNumber = 40,
    kMomentumPolicyFieldNumber = 46,
    kTrainNetParamFieldNumber = 21,
    kNetParamFieldNumber = 25,
    kTrainStateFieldNumber = 26,
    kTestIntervalFieldNumber = 4,
    kBaseLrFieldNumber = 5,
    kDisplayFieldNumber = 6,
    kMaxIterFieldNumber = 7,
    kGammaFieldNumber = 9,
    kPowerFieldNumber = 10,
    kMomentumFieldNumber = 11,
    kWeightDecayFieldNumber = 12,
    kStepsizeFieldNumber = 13,
    kSnapshotFieldNumber = 14,
    kDeviceIdFieldNumber = 18,
    kTestComputeLossFieldNumber = 19,
    kTestInitializationFieldNumber = 32,
    kLocalLrAutoFieldNumber = 49,
    kSnapshotDiffFieldNumber = 16,
    kSolverTypeFieldNumber = 30,
    kDebugInfoFieldNumber = 23,
    kStoreBlobsInOldFormatFieldNumber = 45,
    kRampupIntervalFieldNumber = 41,
    kRampupLrFieldNumber = 42,
    kMinLrFieldNumber = 43,
    kLocalGwRatioFieldNumber = 50,
    kRandomSeedFieldNumber = 20,
    kSolverModeFieldNumber = 17,
    kSnapshotAfterTrainFieldNumber = 28,
    kDeltaFieldNumber = 31,
    kAverageLossFieldNumber = 33,
    kClipGradientsFieldNumber = 35,
    kIterSizeFieldNumber = 36,
    kSnapshotFormatFieldNumber = 37,
    kRmsDecayFieldNumber = 38,
    kMomentum2FieldNumber = 39,
    kSolverDataTypeFieldNumber = 44,
    kMaxMomentumFieldNumber = 47,
    kMomentumPowerFieldNumber = 48,
  };
  // repeated string test_net = 2;
  int test_net_size() const;
  private:
  int _internal_test_net_size() const;
  public:
  void clear_test_net();
  const std::string& test_net(int index) const;
  std::string* mutable_test_net(int index);
  void set_test_net(int index, const std::string& value);
  void set_test_net(int index, std::string&& value);
  void set_test_net(int index, const char* value);
  void set_test_net(int index, const char* value, size_t size);
  std::string* add_test_net();
  void add_test_net(const std::string& value);
  void add_test_net(std::string&& value);
  void add_test_net(const char* value);
  void add_test_net(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& test_net() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_test_net();
  private:
  const std::string& _internal_test_net(int index) const;
  std::string* _internal_add_test_net();
  public:

  // repeated int32 test_iter = 3;
  int test_iter_size() const;
  private:
  int _internal_test_iter_size() const;
  public:
  void clear_test_iter();
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_test_iter(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_test_iter() const;
  void _internal_add_test_iter(::PROTOBUF_NAMESPACE_ID::int32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_test_iter();
  public:
  ::PROTOBUF_NAMESPACE_ID::int32 test_iter(int index) const;
  void set_test_iter(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_test_iter(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      test_iter() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_test_iter();

  // repeated .trtcaffe.NetParameter test_net_param = 22;
  int test_net_param_size() const;
  private:
  int _internal_test_net_param_size() const;
  public:
  void clear_test_net_param();
  ::trtcaffe::NetParameter* mutable_test_net_param(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::trtcaffe::NetParameter >*
      mutable_test_net_param();
  private:
  const ::trtcaffe::NetParameter& _internal_test_net_param(int index) const;
  ::trtcaffe::NetParameter* _internal_add_test_net_param();
  public:
  const ::trtcaffe::NetParameter& test_net_param(int index) const;
  ::trtcaffe::NetParameter* add_test_net_param();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::trtcaffe::NetParameter >&
      test_net_param() const;

  // repeated .trtcaffe.NetState test_state = 27;
  int test_state_size() const;
  private:
  int _internal_test_state_size() const;
  public:
  void clear_test_state();
  ::trtcaffe::NetState* mutable_test_state(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::trtcaffe::NetState >*
      mutable_test_state();
  private:
  const ::trtcaffe::NetState& _internal_test_state(int index) const;
  ::trtcaffe::NetState* _internal_add_test_state();
  public:
  const ::trtcaffe::NetState& test_state(int index) const;
  ::trtcaffe::NetState* add_test_state();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::trtcaffe::NetState >&
      test_state() const;

  // repeated int32 stepvalue = 34;
  int stepvalue_size() const;
  private:
  int _internal_stepvalue_size() const;
  public:
  void clear_stepvalue();
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_stepvalue(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_stepvalue() const;
  void _internal_add_stepvalue(::PROTOBUF_NAMESPACE_ID::int32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_stepvalue();
  public:
  ::PROTOBUF_NAMESPACE_ID::int32 stepvalue(int index) const;
  void set_stepvalue(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_stepvalue(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      stepvalue() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_stepvalue();

  // optional string train_net = 1;
  bool has_train_net() const;
  private:
  bool _internal_has_train_net() const;
  public:
  void clear_train_net();
  const std::string& train_net() const;
  void set_train_net(const std::string& value);
  void set_train_net(std::string&& value);
  void set_train_net(const char* value);
  void set_train_net(const char* value, size_t size);
  std::string* mutable_train_net();
  std::string* release_train_net();
  void set_allocated_train_net(std::string* train_net);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_train_net();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_train_net(
      std::string* train_net);
  private:
  const std::string& _internal_train_net() const;
  void _internal_set_train_net(const std::string& value);
  std::string* _internal_mutable_train_net();
  public:

  // optional string lr_policy = 8;
  bool has_lr_policy() const;
  private:
  bool _internal_has_lr_policy() const;
  public:
  void clear_lr_policy();
  const std::string& lr_policy() const;
  void set_lr_policy(const std::string& value);
  void set_lr_policy(std::string&& value);
  void set_lr_policy(const char* value);
  void set_lr_policy(const char* value, size_t size);
  std::string* mutable_lr_policy();
  std::string* release_lr_policy();
  void set_allocated_lr_policy(std::string* lr_policy);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_lr_policy();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_lr_policy(
      std::string* lr_policy);
  private:
  const std::string& _internal_lr_policy() const;
  void _internal_set_lr_policy(const std::string& value);
  std::string* _internal_mutable_lr_policy();
  public:

  // optional string snapshot_prefix = 15;
  bool has_snapshot_prefix() const;
  private:
  bool _internal_has_snapshot_prefix() const;
  public:
  void clear_snapshot_prefix();
  const std::string& snapshot_prefix() const;
  void set_snapshot_prefix(const std::string& value);
  void set_snapshot_prefix(std::string&& value);
  void set_snapshot_prefix(const char* value);
  void set_snapshot_prefix(const char* value, size_t size);
  std::string* mutable_snapshot_prefix();
  std::string* release_snapshot_prefix();
  void set_allocated_snapshot_prefix(std::string* snapshot_prefix);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_snapshot_prefix();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_snapshot_prefix(
      std::string* snapshot_prefix);
  private:
  const std::string& _internal_snapshot_prefix() const;
  void _internal_set_snapshot_prefix(const std::string& value);
  std::string* _internal_mutable_snapshot_prefix();
  public:

  // optional string net = 24;
  bool has_net() const;
  private:
  bool _internal_has_net() const;
  public:
  void clear_net();
  const std::string& net() const;
  void set_net(const std::string& value);
  void set_net(std::string&& value);
  void set_net(const char* value);
  void set_net(const char* value, size_t size);
  std::string* mutable_net();
  std::string* release_net();
  void set_allocated_net(std::string* net);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_net();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_net(
      std::string* net);
  private:
  const std::string& _internal_net() const;
  void _internal_set_net(const std::string& value);
  std::string* _internal_mutable_net();
  public:

  // optional string regularization_type = 29 [default = "L2"];
  bool has_regularization_type() const;
  private:
  bool _internal_has_regularization_type() const;
  public:
  void clear_regularization_type();
  const std::string& regularization_type() const;
  void set_regularization_type(const std::string& value);
  void set_regularization_type(std::string&& value);
  void set_regularization_type(const char* value);
  void set_regularization_type(const char* value, size_t size);
  std::string* mutable_regularization_type();
  std::string* release_regularization_type();
  void set_allocated_regularization_type(std::string* regularization_type);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_regularization_type();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_regularization_type(
      std::string* regularization_type);
  private:
  const std::string& _internal_regularization_type() const;
  void _internal_set_regularization_type(const std::string& value);
  std::string* _internal_mutable_regularization_type();
  public:

  // optional string type = 40 [default = "SGD"];
  bool has_type() const;
  private:
  bool _internal_has_type() const;
  public:
  void clear_type();
  const std::string& type() const;
  void set_type(const std::string& value);
  void set_type(std::string&& value);
  void set_type(const char* value);
  void set_type(const char* value, size_t size);
  std::string* mutable_type();
  std::string* release_type();
  void set_allocated_type(std::string* type);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_type();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_type(
      std::string* type);
  private:
  const std::string& _internal_type() const;
  void _internal_set_type(const std::string& value);
  std::string* _internal_mutable_type();
  public:

  // optional string momentum_policy = 46 [default = "fixed"];
  bool has_momentum_policy() const;
  private:
  bool _internal_has_momentum_policy() const;
  public:
  void clear_momentum_policy();
  const std::string& momentum_policy() const;
  void set_momentum_policy(const std::string& value);
  void set_momentum_policy(std::string&& value);
  void set_momentum_policy(const char* value);
  void set_momentum_policy(const char* value, size_t size);
  std::string* mutable_momentum_policy();
  std::string* release_momentum_policy();
  void set_allocated_momentum_policy(std::string* momentum_policy);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_momentum_policy();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_momentum_policy(
      std::string* momentum_policy);
  private:
  const std::string& _internal_momentum_policy() const;
  void _internal_set_momentum_policy(const std::string& value);
  std::string* _internal_mutable_momentum_policy();
  public:

  // optional .trtcaffe.NetParameter train_net_param = 21;
  bool has_train_net_param() const;
  private:
  bool _internal_has_train_net_param() const;
  public:
  void clear_train_net_param();
  const ::trtcaffe::NetParameter& train_net_param() const;
  ::trtcaffe::NetParameter* release_train_net_param();
  ::trtcaffe::NetParameter* mutable_train_net_param();
  void set_allocated_train_net_param(::trtcaffe::NetParameter* train_net_param);
  private:
  const ::trtcaffe::NetParameter& _internal_train_net_param() const;
  ::trtcaffe::NetParameter* _internal_mutable_train_net_param();
  public:
  void unsafe_arena_set_allocated_train_net_param(
      ::trtcaffe::NetParameter* train_net_param);
  ::trtcaffe::NetParameter* unsafe_arena_release_train_net_param();

  // optional .trtcaffe.NetParameter net_param = 25;
  bool has_net_param() const;
  private:
  bool _internal_has_net_param() const;
  public:
  void clear_net_param();
  const ::trtcaffe::NetParameter& net_param() const;
  ::trtcaffe::NetParameter* release_net_param();
  ::trtcaffe::NetParameter* mutable_net_param();
  void set_allocated_net_param(::trtcaffe::NetParameter* net_param);
  private:
  const ::trtcaffe::NetParameter& _internal_net_param() const;
  ::trtcaffe::NetParameter* _internal_mutable_net_param();
  public:
  void unsafe_arena_set_allocated_net_param(
      ::trtcaffe::NetParameter* net_param);
  ::trtcaffe::NetParameter* unsafe_arena_release_net_param();

  // optional .trtcaffe.NetState train_state = 26;
  bool has_train_state() const;
  private:
  bool _internal_has_train_state() const;
  public:
  void clear_train_state();
  const ::trtcaffe::NetState& train_state() const;
  ::trtcaffe::NetState* release_train_state();
  ::trtcaffe::NetState* mutable_train_state();
  void set_allocated_train_state(::trtcaffe::NetState* train_state);
  private:
  const ::trtcaffe::NetState& _internal_train_state() const;
  ::trtcaffe::NetState* _internal_mutable_train_state();
  public:
  void unsafe_arena_set_allocated_train_state(
      ::trtcaffe::NetState* train_state);
  ::trtcaffe::NetState* unsafe_arena_release_train_state();

  // optional int32 test_interval = 4 [default = 0];
  bool has_test_interval() const;
  private:
  bool _internal_has_test_interval() const;
  public:
  void clear_test_interval();
  ::PROTOBUF_NAMESPACE_ID::int32 test_interval() const;
  void set_test_interval(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_test_interval() const;
  void _internal_set_test_interval(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional float base_lr = 5;
  bool has_base_lr() const;
  private:
  bool _internal_has_base_lr() const;
  public:
  void clear_base_lr();
  float base_lr() const;
  void set_base_lr(float value);
  private:
  float _internal_base_lr() const;
  void _internal_set_base_lr(float value);
  public:

  // optional int32 display = 6;
  bool has_display() const;
  private:
  bool _internal_has_display() const;
  public:
  void clear_display();
  ::PROTOBUF_NAMESPACE_ID::int32 display() const;
  void set_display(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_display() const;
  void _internal_set_display(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 max_iter = 7;
  bool has_max_iter() const;
  private:
  bool _internal_has_max_iter() const;
  public:
  void clear_max_iter();
  ::PROTOBUF_NAMESPACE_ID::int32 max_iter() const;
  void set_max_iter(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_max_iter() const;
  void _internal_set_max_iter(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional float gamma = 9;
  bool has_gamma() const;
  private:
  bool _internal_has_gamma() const;
  public:
  void clear_gamma();
  float gamma() const;
  void set_gamma(float value);
  private:
  float _internal_gamma() const;
  void _internal_set_gamma(float value);
  public:

  // optional float power = 10;
  bool has_power() const;
  private:
  bool _internal_has_power() const;
  public:
  void clear_power();
  float power() const;
  void set_power(float value);
  private:
  float _internal_power() const;
  void _internal_set_power(float value);
  public:

  // optional float momentum = 11;
  bool has_momentum() const;
  private:
  bool _internal_has_momentum() const;
  public:
  void clear_momentum();
  float momentum() const;
  void set_momentum(float value);
  private:
  float _internal_momentum() const;
  void _internal_set_momentum(float value);
  public:

  // optional float weight_decay = 12;
  bool has_weight_decay() const;
  private:
  bool _internal_has_weight_decay() const;
  public:
  void clear_weight_decay();
  float weight_decay() const;
  void set_weight_decay(float value);
  private:
  float _internal_weight_decay() const;
  void _internal_set_weight_decay(float value);
  public:

  // optional int32 stepsize = 13;
  bool has_stepsize() const;
  private:
  bool _internal_has_stepsize() const;
  public:
  void clear_stepsize();
  ::PROTOBUF_NAMESPACE_ID::int32 stepsize() const;
  void set_stepsize(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_stepsize() const;
  void _internal_set_stepsize(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 snapshot = 14 [default = 0];
  bool has_snapshot() const;
  private:
  bool _internal_has_snapshot() const;
  public:
  void clear_snapshot();
  ::PROTOBUF_NAMESPACE_ID::int32 snapshot() const;
  void set_snapshot(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_snapshot() const;
  void _internal_set_snapshot(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 device_id = 18 [default = 0];
  bool has_device_id() const;
  private:
  bool _internal_has_device_id() const;
  public:
  void clear_device_id();
  ::PROTOBUF_NAMESPACE_ID::int32 device_id() const;
  void set_device_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_device_id() const;
  void _internal_set_device_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional bool test_compute_loss = 19 [default = false];
  bool has_test_compute_loss() const;
  private:
  bool _internal_has_test_compute_loss() const;
  public:
  void clear_test_compute_loss();
  bool test_compute_loss() const;
  void set_test_compute_loss(bool value);
  private:
  bool _internal_test_compute_loss() const;
  void _internal_set_test_compute_loss(bool value);
  public:

  // optional bool test_initialization = 32 [default = false];
  bool has_test_initialization() const;
  private:
  bool _internal_has_test_initialization() const;
  public:
  void clear_test_initialization();
  bool test_initialization() const;
  void set_test_initialization(bool value);
  private:
  bool _internal_test_initialization() const;
  void _internal_set_test_initialization(bool value);
  public:

  // optional bool local_lr_auto = 49 [default = false];
  bool has_local_lr_auto() const;
  private:
  bool _internal_has_local_lr_auto() const;
  public:
  void clear_local_lr_auto();
  bool local_lr_auto() const;
  void set_local_lr_auto(bool value);
  private:
  bool _internal_local_lr_auto() const;
  void _internal_set_local_lr_auto(bool value);
  public:

  // optional bool snapshot_diff = 16 [default = false];
  bool has_snapshot_diff() const;
  private:
  bool _internal_has_snapshot_diff() const;
  public:
  void clear_snapshot_diff();
  bool snapshot_diff() const;
  void set_snapshot_diff(bool value);
  private:
  bool _internal_snapshot_diff() const;
  void _internal_set_snapshot_diff(bool value);
  public:

  // optional .trtcaffe.SolverParameter.SolverType solver_type = 30 [default = SGD];
  bool has_solver_type() const;
  private:
  bool _internal_has_solver_type() const;
  public:
  void clear_solver_type();
  ::trtcaffe::SolverParameter_SolverType solver_type() const;
  void set_solver_type(::trtcaffe::SolverParameter_SolverType value);
  private:
  ::trtcaffe::SolverParameter_SolverType _internal_solver_type() const;
  void _internal_set_solver_type(::trtcaffe::SolverParameter_SolverType value);
  public:

  // optional bool debug_info = 23 [default = false];
  bool has_debug_info() const;
  private:
  bool _internal_has_debug_info() const;
  public:
  void clear_debug_info();
  bool debug_info() const;
  void set_debug_info(bool value);
  private:
  bool _internal_debug_info() const;
  void _internal_set_debug_info(bool value);
  public:

  // optional bool store_blobs_in_old_format = 45 [default = false];
  bool has_store_blobs_in_old_format() const;
  private:
  bool _internal_has_store_blobs_in_old_format() const;
  public:
  void clear_store_blobs_in_old_format();
  bool store_blobs_in_old_format() const;
  void set_store_blobs_in_old_format(bool value);
  private:
  bool _internal_store_blobs_in_old_format() const;
  void _internal_set_store_blobs_in_old_format(bool value);
  public:

  // optional int32 rampup_interval = 41 [default = 0];
  bool has_rampup_interval() const;
  private:
  bool _internal_has_rampup_interval() const;
  public:
  void clear_rampup_interval();
  ::PROTOBUF_NAMESPACE_ID::int32 rampup_interval() const;
  void set_rampup_interval(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_rampup_interval() const;
  void _internal_set_rampup_interval(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional float rampup_lr = 42 [default = 0];
  bool has_rampup_lr() const;
  private:
  bool _internal_has_rampup_lr() const;
  public:
  void clear_rampup_lr();
  float rampup_lr() const;
  void set_rampup_lr(float value);
  private:
  float _internal_rampup_lr() const;
  void _internal_set_rampup_lr(float value);
  public:

  // optional float min_lr = 43 [default = 0];
  bool has_min_lr() const;
  private:
  bool _internal_has_min_lr() const;
  public:
  void clear_min_lr();
  float min_lr() const;
  void set_min_lr(float value);
  private:
  float _internal_min_lr() const;
  void _internal_set_min_lr(float value);
  public:

  // optional float local_gw_ratio = 50 [default = 0.001];
  bool has_local_gw_ratio() const;
  private:
  bool _internal_has_local_gw_ratio() const;
  public:
  void clear_local_gw_ratio();
  float local_gw_ratio() const;
  void set_local_gw_ratio(float value);
  private:
  float _internal_local_gw_ratio() const;
  void _internal_set_local_gw_ratio(float value);
  public:

  // optional int64 random_seed = 20 [default = -1];
  bool has_random_seed() const;
  private:
  bool _internal_has_random_seed() const;
  public:
  void clear_random_seed();
  ::PROTOBUF_NAMESPACE_ID::int64 random_seed() const;
  void set_random_seed(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_random_seed() const;
  void _internal_set_random_seed(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // optional .trtcaffe.SolverParameter.SolverMode solver_mode = 17 [default = GPU];
  bool has_solver_mode() const;
  private:
  bool _internal_has_solver_mode() const;
  public:
  void clear_solver_mode();
  ::trtcaffe::SolverParameter_SolverMode solver_mode() const;
  void set_solver_mode(::trtcaffe::SolverParameter_SolverMode value);
  private:
  ::trtcaffe::SolverParameter_SolverMode _internal_solver_mode() const;
  void _internal_set_solver_mode(::trtcaffe::SolverParameter_SolverMode value);
  public:

  // optional bool snapshot_after_train = 28 [default = true];
  bool has_snapshot_after_train() const;
  private:
  bool _internal_has_snapshot_after_train() const;
  public:
  void clear_snapshot_after_train();
  bool snapshot_after_train() const;
  void set_snapshot_after_train(bool value);
  private:
  bool _internal_snapshot_after_train() const;
  void _internal_set_snapshot_after_train(bool value);
  public:

  // optional float delta = 31 [default = 1e-08];
  bool has_delta() const;
  private:
  bool _internal_has_delta() const;
  public:
  void clear_delta();
  float delta() const;
  void set_delta(float value);
  private:
  float _internal_delta() const;
  void _internal_set_delta(float value);
  public:

  // optional int32 average_loss = 33 [default = 1];
  bool has_average_loss() const;
  private:
  bool _internal_has_average_loss() const;
  public:
  void clear_average_loss();
  ::PROTOBUF_NAMESPACE_ID::int32 average_loss() const;
  void set_average_loss(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_average_loss() const;
  void _internal_set_average_loss(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional float clip_gradients = 35 [default = -1];
  bool has_clip_gradients() const;
  private:
  bool _internal_has_clip_gradients() const;
  public:
  void clear_clip_gradients();
  float clip_gradients() const;
  void set_clip_gradients(float value);
  private:
  float _internal_clip_gradients() const;
  void _internal_set_clip_gradients(float value);
  public:

  // optional int32 iter_size = 36 [default = 1];
  bool has_iter_size() const;
  private:
  bool _internal_has_iter_size() const;
  public:
  void clear_iter_size();
  ::PROTOBUF_NAMESPACE_ID::int32 iter_size() const;
  void set_iter_size(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_iter_size() const;
  void _internal_set_iter_size(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional .trtcaffe.SolverParameter.SnapshotFormat snapshot_format = 37 [default = BINARYPROTO];
  bool has_snapshot_format() const;
  private:
  bool _internal_has_snapshot_format() const;
  public:
  void clear_snapshot_format();
  ::trtcaffe::SolverParameter_SnapshotFormat snapshot_format() const;
  void set_snapshot_format(::trtcaffe::SolverParameter_SnapshotFormat value);
  private:
  ::trtcaffe::SolverParameter_SnapshotFormat _internal_snapshot_format() const;
  void _internal_set_snapshot_format(::trtcaffe::SolverParameter_SnapshotFormat value);
  public:

  // optional float rms_decay = 38 [default = 0.99];
  bool has_rms_decay() const;
  private:
  bool _internal_has_rms_decay() const;
  public:
  void clear_rms_decay();
  float rms_decay() const;
  void set_rms_decay(float value);
  private:
  float _internal_rms_decay() const;
  void _internal_set_rms_decay(float value);
  public:

  // optional float momentum2 = 39 [default = 0.999];
  bool has_momentum2() const;
  private:
  bool _internal_has_momentum2() const;
  public:
  void clear_momentum2();
  float momentum2() const;
  void set_momentum2(float value);
  private:
  float _internal_momentum2() const;
  void _internal_set_momentum2(float value);
  public:

  // optional .trtcaffe.Type solver_data_type = 44 [default = FLOAT];
  bool has_solver_data_type() const;
  private:
  bool _internal_has_solver_data_type() const;
  public:
  void clear_solver_data_type();
  ::trtcaffe::Type solver_data_type() const;
  void set_solver_data_type(::trtcaffe::Type value);
  private:
  ::trtcaffe::Type _internal_solver_data_type() const;
  void _internal_set_solver_data_type(::trtcaffe::Type value);
  public:

  // optional float max_momentum = 47 [default = 0.99];
  bool has_max_momentum() const;
  private:
  bool _internal_has_max_momentum() const;
  public:
  void clear_max_momentum();
  float max_momentum() const;
  void set_max_momentum(float value);
  private:
  float _internal_max_momentum() const;
  void _internal_set_max_momentum(float value);
  public:

  // optional float momentum_power = 48 [default = 1];
  bool has_momentum_power() const;
  private:
  bool _internal_has_momentum_power() const;
  public:
  void clear_momentum_power();
  float momentum_power() const;
  void set_momentum_power(float value);
  private:
  float _internal_momentum_power() const;
  void _internal_set_momentum_power(float value);
  public:

  // @@protoc_insertion_point(class_scope:trtcaffe.SolverParameter)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<2> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> test_net_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > test_iter_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::trtcaffe::NetParameter > test_net_param_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::trtcaffe::NetState > test_state_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > stepvalue_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr train_net_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr lr_policy_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr snapshot_prefix_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr net_;
  public:
  static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> _i_give_permission_to_break_this_code_default_regularization_type_;
  private:
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr regularization_type_;
  public:
  static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> _i_give_permission_to_break_this_code_default_type_;
  private:
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr type_;
  public:
  static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> _i_give_permission_to_break_this_code_default_momentum_policy_;
  private:
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr momentum_policy_;
  ::trtcaffe::NetParameter* train_net_param_;
  ::trtcaffe::NetParameter* net_param_;
  ::trtcaffe::NetState* train_state_;
  ::PROTOBUF_NAMESPACE_ID::int32 test_interval_;
  float base_lr_;
  ::PROTOBUF_NAMESPACE_ID::int32 display_;
  ::PROTOBUF_NAMESPACE_ID::int32 max_iter_;
  float gamma_;
  float power_;
  float momentum_;
  float weight_decay_;
  ::PROTOBUF_NAMESPACE_ID::int32 stepsize_;
  ::PROTOBUF_NAMESPACE_ID::int32 snapshot_;
  ::PROTOBUF_NAMESPACE_ID::int32 device_id_;
  bool test_compute_loss_;
  bool test_initialization_;
  bool local_lr_auto_;
  bool snapshot_diff_;
  int solver_type_;
  bool debug_info_;
  bool store_blobs_in_old_format_;
  ::PROTOBUF_NAMESPACE_ID::int32 rampup_interval_;
  float rampup_lr_;
  float min_lr_;
  float local_gw_ratio_;
  ::PROTOBUF_NAMESPACE_ID::int64 random_seed_;
  int solver_mode_;
  bool snapshot_after_train_;
  float delta_;
  ::PROTOBUF_NAMESPACE_ID::int32 average_loss_;
  float clip_gradients_;
  ::PROTOBUF_NAMESPACE_ID::int32 iter_size_;
  int snapshot_format_;
  float rms_decay_;
  float momentum2_;
  int solver_data_type_;
  float max_momentum_;
  float momentum_power_;
  friend struct ::TableStruct_trtcaffe_2eproto;
};
// -------------------------------------------------------------------

class SolverState PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:trtcaffe.SolverState) */ {
 public:
  inline SolverState() : SolverState(nullptr) {};
  virtual ~SolverState();

  SolverState(const SolverState& from);
  SolverState(SolverState&& from) noexcept
    : SolverState() {
    *this = ::std::move(from);
  }

  inline SolverState& operator=(const SolverState& from) {
    CopyFrom(from);
    return *this;
  }
  inline SolverState& operator=(SolverState&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SolverState& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SolverState* internal_default_instance() {
    return reinterpret_cast<const SolverState*>(
               &_SolverState_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(SolverState& a, SolverState& b) {
    a.Swap(&b);
  }
  inline void Swap(SolverState* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SolverState* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SolverState* New() const final {
    return CreateMaybeMessage<SolverState>(nullptr);
  }

  SolverState* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SolverState>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SolverState& from);
  void MergeFrom(const SolverState& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SolverState* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "trtcaffe.SolverState";
  }
  protected:
  explicit SolverState(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_trtcaffe_2eproto);
    return ::descriptor_table_trtcaffe_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHistoryFieldNumber = 3,
    kLearnedNetFieldNumber = 2,
    kIterFieldNumber = 1,
    kCurrentStepFieldNumber = 4,
  };
  // repeated .trtcaffe.BlobProto history = 3;
  int history_size() const;
  private:
  int _internal_history_size() const;
  public:
  void clear_history();
  ::trtcaffe::BlobProto* mutable_history(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::trtcaffe::BlobProto >*
      mutable_history();
  private:
  const ::trtcaffe::BlobProto& _internal_history(int index) const;
  ::trtcaffe::BlobProto* _internal_add_history();
  public:
  const ::trtcaffe::BlobProto& history(int index) const;
  ::trtcaffe::BlobProto* add_history();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::trtcaffe::BlobProto >&
      history() const;

  // optional string learned_net = 2;
  bool has_learned_net() const;
  private:
  bool _internal_has_learned_net() const;
  public:
  void clear_learned_net();
  const std::string& learned_net() const;
  void set_learned_net(const std::string& value);
  void set_learned_net(std::string&& value);
  void set_learned_net(const char* value);
  void set_learned_net(const char* value, size_t size);
  std::string* mutable_learned_net();
  std::string* release_learned_net();
  void set_allocated_learned_net(std::string* learned_net);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_learned_net();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_learned_net(
      std::string* learned_net);
  private:
  const std::string& _internal_learned_net() const;
  void _internal_set_learned_net(const std::string& value);
  std::string* _internal_mutable_learned_net();
  public:

  // optional int32 iter = 1;
  bool has_iter() const;
  private:
  bool _internal_has_iter() const;
  public:
  void clear_iter();
  ::PROTOBUF_NAMESPACE_ID::int32 iter() const;
  void set_iter(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_iter() const;
  void _internal_set_iter(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 current_step = 4 [default = 0];
  bool has_current_step() const;
  private:
  bool _internal_has_current_step() const;
  public:
  void clear_current_step();
  ::PROTOBUF_NAMESPACE_ID::int32 current_step() const;
  void set_current_step(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_current_step() const;
  void _internal_set_current_step(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:trtcaffe.SolverState)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::trtcaffe::BlobProto > history_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr learned_net_;
  ::PROTOBUF_NAMESPACE_ID::int32 iter_;
  ::PROTOBUF_NAMESPACE_ID::int32 current_step_;
  friend struct ::TableStruct_trtcaffe_2eproto;
};
// -------------------------------------------------------------------

class NetState PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:trtcaffe.NetState) */ {
 public:
  inline NetState() : NetState(nullptr) {};
  virtual ~NetState();

  NetState(const NetState& from);
  NetState(NetState&& from) noexcept
    : NetState() {
    *this = ::std::move(from);
  }

  inline NetState& operator=(const NetState& from) {
    CopyFrom(from);
    return *this;
  }
  inline NetState& operator=(NetState&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const NetState& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const NetState* internal_default_instance() {
    return reinterpret_cast<const NetState*>(
               &_NetState_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(NetState& a, NetState& b) {
    a.Swap(&b);
  }
  inline void Swap(NetState* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NetState* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline NetState* New() const final {
    return CreateMaybeMessage<NetState>(nullptr);
  }

  NetState* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<NetState>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const NetState& from);
  void MergeFrom(const NetState& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NetState* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "trtcaffe.NetState";
  }
  protected:
  explicit NetState(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_trtcaffe_2eproto);
    return ::descriptor_table_trtcaffe_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStageFieldNumber = 3,
    kLevelFieldNumber = 2,
    kPhaseFieldNumber = 1,
  };
  // repeated string stage = 3;
  int stage_size() const;
  private:
  int _internal_stage_size() const;
  public:
  void clear_stage();
  const std::string& stage(int index) const;
  std::string* mutable_stage(int index);
  void set_stage(int index, const std::string& value);
  void set_stage(int index, std::string&& value);
  void set_stage(int index, const char* value);
  void set_stage(int index, const char* value, size_t size);
  std::string* add_stage();
  void add_stage(const std::string& value);
  void add_stage(std::string&& value);
  void add_stage(const char* value);
  void add_stage(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& stage() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_stage();
  private:
  const std::string& _internal_stage(int index) const;
  std::string* _internal_add_stage();
  public:

  // optional int32 level = 2 [default = 0];
  bool has_level() const;
  private:
  bool _internal_has_level() const;
  public:
  void clear_level();
  ::PROTOBUF_NAMESPACE_ID::int32 level() const;
  void set_level(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_level() const;
  void _internal_set_level(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional .trtcaffe.Phase phase = 1 [default = TEST];
  bool has_phase() const;
  private:
  bool _internal_has_phase() const;
  public:
  void clear_phase();
  ::trtcaffe::Phase phase() const;
  void set_phase(::trtcaffe::Phase value);
  private:
  ::trtcaffe::Phase _internal_phase() const;
  void _internal_set_phase(::trtcaffe::Phase value);
  public:

  // @@protoc_insertion_point(class_scope:trtcaffe.NetState)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> stage_;
  ::PROTOBUF_NAMESPACE_ID::int32 level_;
  int phase_;
  friend struct ::TableStruct_trtcaffe_2eproto;
};
// -------------------------------------------------------------------

class NetStateRule PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:trtcaffe.NetStateRule) */ {
 public:
  inline NetStateRule() : NetStateRule(nullptr) {};
  virtual ~NetStateRule();

  NetStateRule(const NetStateRule& from);
  NetStateRule(NetStateRule&& from) noexcept
    : NetStateRule() {
    *this = ::std::move(from);
  }

  inline NetStateRule& operator=(const NetStateRule& from) {
    CopyFrom(from);
    return *this;
  }
  inline NetStateRule& operator=(NetStateRule&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const NetStateRule& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const NetStateRule* internal_default_instance() {
    return reinterpret_cast<const NetStateRule*>(
               &_NetStateRule_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(NetStateRule& a, NetStateRule& b) {
    a.Swap(&b);
  }
  inline void Swap(NetStateRule* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NetStateRule* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline NetStateRule* New() const final {
    return CreateMaybeMessage<NetStateRule>(nullptr);
  }

  NetStateRule* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<NetStateRule>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const NetStateRule& from);
  void MergeFrom(const NetStateRule& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NetStateRule* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "trtcaffe.NetStateRule";
  }
  protected:
  explicit NetStateRule(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_trtcaffe_2eproto);
    return ::descriptor_table_trtcaffe_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStageFieldNumber = 4,
    kNotStageFieldNumber = 5,
    kPhaseFieldNumber = 1,
    kMinLevelFieldNumber = 2,
    kMaxLevelFieldNumber = 3,
  };
  // repeated string stage = 4;
  int stage_size() const;
  private:
  int _internal_stage_size() const;
  public:
  void clear_stage();
  const std::string& stage(int index) const;
  std::string* mutable_stage(int index);
  void set_stage(int index, const std::string& value);
  void set_stage(int index, std::string&& value);
  void set_stage(int index, const char* value);
  void set_stage(int index, const char* value, size_t size);
  std::string* add_stage();
  void add_stage(const std::string& value);
  void add_stage(std::string&& value);
  void add_stage(const char* value);
  void add_stage(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& stage() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_stage();
  private:
  const std::string& _internal_stage(int index) const;
  std::string* _internal_add_stage();
  public:

  // repeated string not_stage = 5;
  int not_stage_size() const;
  private:
  int _internal_not_stage_size() const;
  public:
  void clear_not_stage();
  const std::string& not_stage(int index) const;
  std::string* mutable_not_stage(int index);
  void set_not_stage(int index, const std::string& value);
  void set_not_stage(int index, std::string&& value);
  void set_not_stage(int index, const char* value);
  void set_not_stage(int index, const char* value, size_t size);
  std::string* add_not_stage();
  void add_not_stage(const std::string& value);
  void add_not_stage(std::string&& value);
  void add_not_stage(const char* value);
  void add_not_stage(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& not_stage() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_not_stage();
  private:
  const std::string& _internal_not_stage(int index) const;
  std::string* _internal_add_not_stage();
  public:

  // optional .trtcaffe.Phase phase = 1;
  bool has_phase() const;
  private:
  bool _internal_has_phase() const;
  public:
  void clear_phase();
  ::trtcaffe::Phase phase() const;
  void set_phase(::trtcaffe::Phase value);
  private:
  ::trtcaffe::Phase _internal_phase() const;
  void _internal_set_phase(::trtcaffe::Phase value);
  public:

  // optional int32 min_level = 2;
  bool has_min_level() const;
  private:
  bool _internal_has_min_level() const;
  public:
  void clear_min_level();
  ::PROTOBUF_NAMESPACE_ID::int32 min_level() const;
  void set_min_level(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_min_level() const;
  void _internal_set_min_level(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 max_level = 3;
  bool has_max_level() const;
  private:
  bool _internal_has_max_level() const;
  public:
  void clear_max_level();
  ::PROTOBUF_NAMESPACE_ID::int32 max_level() const;
  void set_max_level(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_max_level() const;
  void _internal_set_max_level(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:trtcaffe.NetStateRule)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> stage_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> not_stage_;
  int phase_;
  ::PROTOBUF_NAMESPACE_ID::int32 min_level_;
  ::PROTOBUF_NAMESPACE_ID::int32 max_level_;
  friend struct ::TableStruct_trtcaffe_2eproto;
};
// -------------------------------------------------------------------

class ParamSpec PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:trtcaffe.ParamSpec) */ {
 public:
  inline ParamSpec() : ParamSpec(nullptr) {};
  virtual ~ParamSpec();

  ParamSpec(const ParamSpec& from);
  ParamSpec(ParamSpec&& from) noexcept
    : ParamSpec() {
    *this = ::std::move(from);
  }

  inline ParamSpec& operator=(const ParamSpec& from) {
    CopyFrom(from);
    return *this;
  }
  inline ParamSpec& operator=(ParamSpec&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ParamSpec& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ParamSpec* internal_default_instance() {
    return reinterpret_cast<const ParamSpec*>(
               &_ParamSpec_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(ParamSpec& a, ParamSpec& b) {
    a.Swap(&b);
  }
  inline void Swap(ParamSpec* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ParamSpec* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ParamSpec* New() const final {
    return CreateMaybeMessage<ParamSpec>(nullptr);
  }

  ParamSpec* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ParamSpec>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ParamSpec& from);
  void MergeFrom(const ParamSpec& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ParamSpec* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "trtcaffe.ParamSpec";
  }
  protected:
  explicit ParamSpec(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_trtcaffe_2eproto);
    return ::descriptor_table_trtcaffe_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef ParamSpec_DimCheckMode DimCheckMode;
  static constexpr DimCheckMode STRICT =
    ParamSpec_DimCheckMode_STRICT;
  static constexpr DimCheckMode PERMISSIVE =
    ParamSpec_DimCheckMode_PERMISSIVE;
  static inline bool DimCheckMode_IsValid(int value) {
    return ParamSpec_DimCheckMode_IsValid(value);
  }
  static constexpr DimCheckMode DimCheckMode_MIN =
    ParamSpec_DimCheckMode_DimCheckMode_MIN;
  static constexpr DimCheckMode DimCheckMode_MAX =
    ParamSpec_DimCheckMode_DimCheckMode_MAX;
  static constexpr int DimCheckMode_ARRAYSIZE =
    ParamSpec_DimCheckMode_DimCheckMode_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  DimCheckMode_descriptor() {
    return ParamSpec_DimCheckMode_descriptor();
  }
  template<typename T>
  static inline const std::string& DimCheckMode_Name(T enum_t_value) {
    static_assert(::std::is_same<T, DimCheckMode>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function DimCheckMode_Name.");
    return ParamSpec_DimCheckMode_Name(enum_t_value);
  }
  static inline bool DimCheckMode_Parse(const std::string& name,
      DimCheckMode* value) {
    return ParamSpec_DimCheckMode_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kShareModeFieldNumber = 2,
    kLrMultFieldNumber = 3,
    kDecayMultFieldNumber = 4,
  };
  // optional string name = 1;
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_name();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_name(
      std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // optional .trtcaffe.ParamSpec.DimCheckMode share_mode = 2;
  bool has_share_mode() const;
  private:
  bool _internal_has_share_mode() const;
  public:
  void clear_share_mode();
  ::trtcaffe::ParamSpec_DimCheckMode share_mode() const;
  void set_share_mode(::trtcaffe::ParamSpec_DimCheckMode value);
  private:
  ::trtcaffe::ParamSpec_DimCheckMode _internal_share_mode() const;
  void _internal_set_share_mode(::trtcaffe::ParamSpec_DimCheckMode value);
  public:

  // optional float lr_mult = 3 [default = 1];
  bool has_lr_mult() const;
  private:
  bool _internal_has_lr_mult() const;
  public:
  void clear_lr_mult();
  float lr_mult() const;
  void set_lr_mult(float value);
  private:
  float _internal_lr_mult() const;
  void _internal_set_lr_mult(float value);
  public:

  // optional float decay_mult = 4 [default = 1];
  bool has_decay_mult() const;
  private:
  bool _internal_has_decay_mult() const;
  public:
  void clear_decay_mult();
  float decay_mult() const;
  void set_decay_mult(float value);
  private:
  float _internal_decay_mult() const;
  void _internal_set_decay_mult(float value);
  public:

  // @@protoc_insertion_point(class_scope:trtcaffe.ParamSpec)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  int share_mode_;
  float lr_mult_;
  float decay_mult_;
  friend struct ::TableStruct_trtcaffe_2eproto;
};
// -------------------------------------------------------------------

class LayerParameter PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:trtcaffe.LayerParameter) */ {
 public:
  inline LayerParameter() : LayerParameter(nullptr) {};
  virtual ~LayerParameter();

  LayerParameter(const LayerParameter& from);
  LayerParameter(LayerParameter&& from) noexcept
    : LayerParameter() {
    *this = ::std::move(from);
  }

  inline LayerParameter& operator=(const LayerParameter& from) {
    CopyFrom(from);
    return *this;
  }
  inline LayerParameter& operator=(LayerParameter&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LayerParameter& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LayerParameter* internal_default_instance() {
    return reinterpret_cast<const LayerParameter*>(
               &_LayerParameter_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(LayerParameter& a, LayerParameter& b) {
    a.Swap(&b);
  }
  inline void Swap(LayerParameter* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LayerParameter* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LayerParameter* New() const final {
    return CreateMaybeMessage<LayerParameter>(nullptr);
  }

  LayerParameter* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LayerParameter>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LayerParameter& from);
  void MergeFrom(const LayerParameter& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LayerParameter* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "trtcaffe.LayerParameter";
  }
  protected:
  explicit LayerParameter(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_trtcaffe_2eproto);
    return ::descriptor_table_trtcaffe_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBottomFieldNumber = 3,
    kTopFieldNumber = 4,
    kLossWeightFieldNumber = 5,
    kParamFieldNumber = 6,
    kBlobsFieldNumber = 7,
    kIncludeFieldNumber = 8,
    kExcludeFieldNumber = 9,
    kPropagateDownFieldNumber = 11,
    kNameFieldNumber = 1,
    kTypeFieldNumber = 2,
    kTransformParamFieldNumber = 100,
    kLossParamFieldNumber = 101,
    kAccuracyParamFieldNumber = 102,
    kArgmaxParamFieldNumber = 103,
    kConcatParamFieldNumber = 104,
    kContrastiveLossParamFieldNumber = 105,
    kConvolutionParamFieldNumber = 106,
    kDataParamFieldNumber = 107,
    kDropoutParamFieldNumber = 108,
    kDummyDataParamFieldNumber = 109,
    kEltwiseParamFieldNumber = 110,
    kExpParamFieldNumber = 111,
    kHdf5DataParamFieldNumber = 112,
    kHdf5OutputParamFieldNumber = 113,
    kHingeLossParamFieldNumber = 114,
    kImageDataParamFieldNumber = 115,
    kInfogainLossParamFieldNumber = 116,
    kInnerProductParamFieldNumber = 117,
    kLrnParamFieldNumber = 118,
    kMemoryDataParamFieldNumber = 119,
    kMvnParamFieldNumber = 120,
    kPoolingParamFieldNumber = 121,
    kPowerParamFieldNumber = 122,
    kReluParamFieldNumber = 123,
    kSigmoidParamFieldNumber = 124,
    kSoftmaxParamFieldNumber = 125,
    kSliceParamFieldNumber = 126,
    kTanhParamFieldNumber = 127,
    kThresholdParamFieldNumber = 128,
    kWindowDataParamFieldNumber = 129,
    kPythonParamFieldNumber = 130,
    kPreluParamFieldNumber = 131,
    kSppParamFieldNumber = 132,
    kReshapeParamFieldNumber = 133,
    kLogParamFieldNumber = 134,
    kFlattenParamFieldNumber = 135,
    kReductionParamFieldNumber = 136,
    kEmbedParamFieldNumber = 137,
    kTileParamFieldNumber = 138,
    kBatchNormParamFieldNumber = 139,
    kEluParamFieldNumber = 140,
    kBiasParamFieldNumber = 141,
    kScaleParamFieldNumber = 142,
    kInputParamFieldNumber = 143,
    kCropParamFieldNumber = 144,
    kPermuteParamFieldNumber = 8781,
    kDetectionOutputParamFieldNumber = 8782,
    kNormParamFieldNumber = 8783,
    kPriorBoxParamFieldNumber = 8784,
    kRoiPoolingParamFieldNumber = 8785,
    kRegionProposalParamFieldNumber = 8786,
    kClipParamFieldNumber = 8787,
    kPhaseFieldNumber = 10,
    kDebugFieldNumber = 149,
    kCudnnMathOverrideFieldNumber = 150,
    kForwardTypeFieldNumber = 145,
    kBackwardTypeFieldNumber = 146,
    kForwardMathFieldNumber = 147,
    kBackwardMathFieldNumber = 148,
  };
  // repeated string bottom = 3;
  int bottom_size() const;
  private:
  int _internal_bottom_size() const;
  public:
  void clear_bottom();
  const std::string& bottom(int index) const;
  std::string* mutable_bottom(int index);
  void set_bottom(int index, const std::string& value);
  void set_bottom(int index, std::string&& value);
  void set_bottom(int index, const char* value);
  void set_bottom(int index, const char* value, size_t size);
  std::string* add_bottom();
  void add_bottom(const std::string& value);
  void add_bottom(std::string&& value);
  void add_bottom(const char* value);
  void add_bottom(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& bottom() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_bottom();
  private:
  const std::string& _internal_bottom(int index) const;
  std::string* _internal_add_bottom();
  public:

  // repeated string top = 4;
  int top_size() const;
  private:
  int _internal_top_size() const;
  public:
  void clear_top();
  const std::string& top(int index) const;
  std::string* mutable_top(int index);
  void set_top(int index, const std::string& value);
  void set_top(int index, std::string&& value);
  void set_top(int index, const char* value);
  void set_top(int index, const char* value, size_t size);
  std::string* add_top();
  void add_top(const std::string& value);
  void add_top(std::string&& value);
  void add_top(const char* value);
  void add_top(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& top() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_top();
  private:
  const std::string& _internal_top(int index) const;
  std::string* _internal_add_top();
  public:

  // repeated float loss_weight = 5;
  int loss_weight_size() const;
  private:
  int _internal_loss_weight_size() const;
  public:
  void clear_loss_weight();
  private:
  float _internal_loss_weight(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_loss_weight() const;
  void _internal_add_loss_weight(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_loss_weight();
  public:
  float loss_weight(int index) const;
  void set_loss_weight(int index, float value);
  void add_loss_weight(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      loss_weight() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_loss_weight();

  // repeated .trtcaffe.ParamSpec param = 6;
  int param_size() const;
  private:
  int _internal_param_size() const;
  public:
  void clear_param();
  ::trtcaffe::ParamSpec* mutable_param(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::trtcaffe::ParamSpec >*
      mutable_param();
  private:
  const ::trtcaffe::ParamSpec& _internal_param(int index) const;
  ::trtcaffe::ParamSpec* _internal_add_param();
  public:
  const ::trtcaffe::ParamSpec& param(int index) const;
  ::trtcaffe::ParamSpec* add_param();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::trtcaffe::ParamSpec >&
      param() const;

  // repeated .trtcaffe.BlobProto blobs = 7;
  int blobs_size() const;
  private:
  int _internal_blobs_size() const;
  public:
  void clear_blobs();
  ::trtcaffe::BlobProto* mutable_blobs(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::trtcaffe::BlobProto >*
      mutable_blobs();
  private:
  const ::trtcaffe::BlobProto& _internal_blobs(int index) const;
  ::trtcaffe::BlobProto* _internal_add_blobs();
  public:
  const ::trtcaffe::BlobProto& blobs(int index) const;
  ::trtcaffe::BlobProto* add_blobs();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::trtcaffe::BlobProto >&
      blobs() const;

  // repeated .trtcaffe.NetStateRule include = 8;
  int include_size() const;
  private:
  int _internal_include_size() const;
  public:
  void clear_include();
  ::trtcaffe::NetStateRule* mutable_include(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::trtcaffe::NetStateRule >*
      mutable_include();
  private:
  const ::trtcaffe::NetStateRule& _internal_include(int index) const;
  ::trtcaffe::NetStateRule* _internal_add_include();
  public:
  const ::trtcaffe::NetStateRule& include(int index) const;
  ::trtcaffe::NetStateRule* add_include();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::trtcaffe::NetStateRule >&
      include() const;

  // repeated .trtcaffe.NetStateRule exclude = 9;
  int exclude_size() const;
  private:
  int _internal_exclude_size() const;
  public:
  void clear_exclude();
  ::trtcaffe::NetStateRule* mutable_exclude(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::trtcaffe::NetStateRule >*
      mutable_exclude();
  private:
  const ::trtcaffe::NetStateRule& _internal_exclude(int index) const;
  ::trtcaffe::NetStateRule* _internal_add_exclude();
  public:
  const ::trtcaffe::NetStateRule& exclude(int index) const;
  ::trtcaffe::NetStateRule* add_exclude();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::trtcaffe::NetStateRule >&
      exclude() const;

  // repeated bool propagate_down = 11;
  int propagate_down_size() const;
  private:
  int _internal_propagate_down_size() const;
  public:
  void clear_propagate_down();
  private:
  bool _internal_propagate_down(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >&
      _internal_propagate_down() const;
  void _internal_add_propagate_down(bool value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >*
      _internal_mutable_propagate_down();
  public:
  bool propagate_down(int index) const;
  void set_propagate_down(int index, bool value);
  void add_propagate_down(bool value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >&
      propagate_down() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >*
      mutable_propagate_down();

  // optional string name = 1;
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_name();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_name(
      std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // optional string type = 2;
  bool has_type() const;
  private:
  bool _internal_has_type() const;
  public:
  void clear_type();
  const std::string& type() const;
  void set_type(const std::string& value);
  void set_type(std::string&& value);
  void set_type(const char* value);
  void set_type(const char* value, size_t size);
  std::string* mutable_type();
  std::string* release_type();
  void set_allocated_type(std::string* type);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_type();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_type(
      std::string* type);
  private:
  const std::string& _internal_type() const;
  void _internal_set_type(const std::string& value);
  std::string* _internal_mutable_type();
  public:

  // optional .trtcaffe.TransformationParameter transform_param = 100;
  bool has_transform_param() const;
  private:
  bool _internal_has_transform_param() const;
  public:
  void clear_transform_param();
  const ::trtcaffe::TransformationParameter& transform_param() const;
  ::trtcaffe::TransformationParameter* release_transform_param();
  ::trtcaffe::TransformationParameter* mutable_transform_param();
  void set_allocated_transform_param(::trtcaffe::TransformationParameter* transform_param);
  private:
  const ::trtcaffe::TransformationParameter& _internal_transform_param() const;
  ::trtcaffe::TransformationParameter* _internal_mutable_transform_param();
  public:
  void unsafe_arena_set_allocated_transform_param(
      ::trtcaffe::TransformationParameter* transform_param);
  ::trtcaffe::TransformationParameter* unsafe_arena_release_transform_param();

  // optional .trtcaffe.LossParameter loss_param = 101;
  bool has_loss_param() const;
  private:
  bool _internal_has_loss_param() const;
  public:
  void clear_loss_param();
  const ::trtcaffe::LossParameter& loss_param() const;
  ::trtcaffe::LossParameter* release_loss_param();
  ::trtcaffe::LossParameter* mutable_loss_param();
  void set_allocated_loss_param(::trtcaffe::LossParameter* loss_param);
  private:
  const ::trtcaffe::LossParameter& _internal_loss_param() const;
  ::trtcaffe::LossParameter* _internal_mutable_loss_param();
  public:
  void unsafe_arena_set_allocated_loss_param(
      ::trtcaffe::LossParameter* loss_param);
  ::trtcaffe::LossParameter* unsafe_arena_release_loss_param();

  // optional .trtcaffe.AccuracyParameter accuracy_param = 102;
  bool has_accuracy_param() const;
  private:
  bool _internal_has_accuracy_param() const;
  public:
  void clear_accuracy_param();
  const ::trtcaffe::AccuracyParameter& accuracy_param() const;
  ::trtcaffe::AccuracyParameter* release_accuracy_param();
  ::trtcaffe::AccuracyParameter* mutable_accuracy_param();
  void set_allocated_accuracy_param(::trtcaffe::AccuracyParameter* accuracy_param);
  private:
  const ::trtcaffe::AccuracyParameter& _internal_accuracy_param() const;
  ::trtcaffe::AccuracyParameter* _internal_mutable_accuracy_param();
  public:
  void unsafe_arena_set_allocated_accuracy_param(
      ::trtcaffe::AccuracyParameter* accuracy_param);
  ::trtcaffe::AccuracyParameter* unsafe_arena_release_accuracy_param();

  // optional .trtcaffe.ArgMaxParameter argmax_param = 103;
  bool has_argmax_param() const;
  private:
  bool _internal_has_argmax_param() const;
  public:
  void clear_argmax_param();
  const ::trtcaffe::ArgMaxParameter& argmax_param() const;
  ::trtcaffe::ArgMaxParameter* release_argmax_param();
  ::trtcaffe::ArgMaxParameter* mutable_argmax_param();
  void set_allocated_argmax_param(::trtcaffe::ArgMaxParameter* argmax_param);
  private:
  const ::trtcaffe::ArgMaxParameter& _internal_argmax_param() const;
  ::trtcaffe::ArgMaxParameter* _internal_mutable_argmax_param();
  public:
  void unsafe_arena_set_allocated_argmax_param(
      ::trtcaffe::ArgMaxParameter* argmax_param);
  ::trtcaffe::ArgMaxParameter* unsafe_arena_release_argmax_param();

  // optional .trtcaffe.ConcatParameter concat_param = 104;
  bool has_concat_param() const;
  private:
  bool _internal_has_concat_param() const;
  public:
  void clear_concat_param();
  const ::trtcaffe::ConcatParameter& concat_param() const;
  ::trtcaffe::ConcatParameter* release_concat_param();
  ::trtcaffe::ConcatParameter* mutable_concat_param();
  void set_allocated_concat_param(::trtcaffe::ConcatParameter* concat_param);
  private:
  const ::trtcaffe::ConcatParameter& _internal_concat_param() const;
  ::trtcaffe::ConcatParameter* _internal_mutable_concat_param();
  public:
  void unsafe_arena_set_allocated_concat_param(
      ::trtcaffe::ConcatParameter* concat_param);
  ::trtcaffe::ConcatParameter* unsafe_arena_release_concat_param();

  // optional .trtcaffe.ContrastiveLossParameter contrastive_loss_param = 105;
  bool has_contrastive_loss_param() const;
  private:
  bool _internal_has_contrastive_loss_param() const;
  public:
  void clear_contrastive_loss_param();
  const ::trtcaffe::ContrastiveLossParameter& contrastive_loss_param() const;
  ::trtcaffe::ContrastiveLossParameter* release_contrastive_loss_param();
  ::trtcaffe::ContrastiveLossParameter* mutable_contrastive_loss_param();
  void set_allocated_contrastive_loss_param(::trtcaffe::ContrastiveLossParameter* contrastive_loss_param);
  private:
  const ::trtcaffe::ContrastiveLossParameter& _internal_contrastive_loss_param() const;
  ::trtcaffe::ContrastiveLossParameter* _internal_mutable_contrastive_loss_param();
  public:
  void unsafe_arena_set_allocated_contrastive_loss_param(
      ::trtcaffe::ContrastiveLossParameter* contrastive_loss_param);
  ::trtcaffe::ContrastiveLossParameter* unsafe_arena_release_contrastive_loss_param();

  // optional .trtcaffe.ConvolutionParameter convolution_param = 106;
  bool has_convolution_param() const;
  private:
  bool _internal_has_convolution_param() const;
  public:
  void clear_convolution_param();
  const ::trtcaffe::ConvolutionParameter& convolution_param() const;
  ::trtcaffe::ConvolutionParameter* release_convolution_param();
  ::trtcaffe::ConvolutionParameter* mutable_convolution_param();
  void set_allocated_convolution_param(::trtcaffe::ConvolutionParameter* convolution_param);
  private:
  const ::trtcaffe::ConvolutionParameter& _internal_convolution_param() const;
  ::trtcaffe::ConvolutionParameter* _internal_mutable_convolution_param();
  public:
  void unsafe_arena_set_allocated_convolution_param(
      ::trtcaffe::ConvolutionParameter* convolution_param);
  ::trtcaffe::ConvolutionParameter* unsafe_arena_release_convolution_param();

  // optional .trtcaffe.DataParameter data_param = 107;
  bool has_data_param() const;
  private:
  bool _internal_has_data_param() const;
  public:
  void clear_data_param();
  const ::trtcaffe::DataParameter& data_param() const;
  ::trtcaffe::DataParameter* release_data_param();
  ::trtcaffe::DataParameter* mutable_data_param();
  void set_allocated_data_param(::trtcaffe::DataParameter* data_param);
  private:
  const ::trtcaffe::DataParameter& _internal_data_param() const;
  ::trtcaffe::DataParameter* _internal_mutable_data_param();
  public:
  void unsafe_arena_set_allocated_data_param(
      ::trtcaffe::DataParameter* data_param);
  ::trtcaffe::DataParameter* unsafe_arena_release_data_param();

  // optional .trtcaffe.DropoutParameter dropout_param = 108;
  bool has_dropout_param() const;
  private:
  bool _internal_has_dropout_param() const;
  public:
  void clear_dropout_param();
  const ::trtcaffe::DropoutParameter& dropout_param() const;
  ::trtcaffe::DropoutParameter* release_dropout_param();
  ::trtcaffe::DropoutParameter* mutable_dropout_param();
  void set_allocated_dropout_param(::trtcaffe::DropoutParameter* dropout_param);
  private:
  const ::trtcaffe::DropoutParameter& _internal_dropout_param() const;
  ::trtcaffe::DropoutParameter* _internal_mutable_dropout_param();
  public:
  void unsafe_arena_set_allocated_dropout_param(
      ::trtcaffe::DropoutParameter* dropout_param);
  ::trtcaffe::DropoutParameter* unsafe_arena_release_dropout_param();

  // optional .trtcaffe.DummyDataParameter dummy_data_param = 109;
  bool has_dummy_data_param() const;
  private:
  bool _internal_has_dummy_data_param() const;
  public:
  void clear_dummy_data_param();
  const ::trtcaffe::DummyDataParameter& dummy_data_param() const;
  ::trtcaffe::DummyDataParameter* release_dummy_data_param();
  ::trtcaffe::DummyDataParameter* mutable_dummy_data_param();
  void set_allocated_dummy_data_param(::trtcaffe::DummyDataParameter* dummy_data_param);
  private:
  const ::trtcaffe::DummyDataParameter& _internal_dummy_data_param() const;
  ::trtcaffe::DummyDataParameter* _internal_mutable_dummy_data_param();
  public:
  void unsafe_arena_set_allocated_dummy_data_param(
      ::trtcaffe::DummyDataParameter* dummy_data_param);
  ::trtcaffe::DummyDataParameter* unsafe_arena_release_dummy_data_param();

  // optional .trtcaffe.EltwiseParameter eltwise_param = 110;
  bool has_eltwise_param() const;
  private:
  bool _internal_has_eltwise_param() const;
  public:
  void clear_eltwise_param();
  const ::trtcaffe::EltwiseParameter& eltwise_param() const;
  ::trtcaffe::EltwiseParameter* release_eltwise_param();
  ::trtcaffe::EltwiseParameter* mutable_eltwise_param();
  void set_allocated_eltwise_param(::trtcaffe::EltwiseParameter* eltwise_param);
  private:
  const ::trtcaffe::EltwiseParameter& _internal_eltwise_param() const;
  ::trtcaffe::EltwiseParameter* _internal_mutable_eltwise_param();
  public:
  void unsafe_arena_set_allocated_eltwise_param(
      ::trtcaffe::EltwiseParameter* eltwise_param);
  ::trtcaffe::EltwiseParameter* unsafe_arena_release_eltwise_param();

  // optional .trtcaffe.ExpParameter exp_param = 111;
  bool has_exp_param() const;
  private:
  bool _internal_has_exp_param() const;
  public:
  void clear_exp_param();
  const ::trtcaffe::ExpParameter& exp_param() const;
  ::trtcaffe::ExpParameter* release_exp_param();
  ::trtcaffe::ExpParameter* mutable_exp_param();
  void set_allocated_exp_param(::trtcaffe::ExpParameter* exp_param);
  private:
  const ::trtcaffe::ExpParameter& _internal_exp_param() const;
  ::trtcaffe::ExpParameter* _internal_mutable_exp_param();
  public:
  void unsafe_arena_set_allocated_exp_param(
      ::trtcaffe::ExpParameter* exp_param);
  ::trtcaffe::ExpParameter* unsafe_arena_release_exp_param();

  // optional .trtcaffe.HDF5DataParameter hdf5_data_param = 112;
  bool has_hdf5_data_param() const;
  private:
  bool _internal_has_hdf5_data_param() const;
  public:
  void clear_hdf5_data_param();
  const ::trtcaffe::HDF5DataParameter& hdf5_data_param() const;
  ::trtcaffe::HDF5DataParameter* release_hdf5_data_param();
  ::trtcaffe::HDF5DataParameter* mutable_hdf5_data_param();
  void set_allocated_hdf5_data_param(::trtcaffe::HDF5DataParameter* hdf5_data_param);
  private:
  const ::trtcaffe::HDF5DataParameter& _internal_hdf5_data_param() const;
  ::trtcaffe::HDF5DataParameter* _internal_mutable_hdf5_data_param();
  public:
  void unsafe_arena_set_allocated_hdf5_data_param(
      ::trtcaffe::HDF5DataParameter* hdf5_data_param);
  ::trtcaffe::HDF5DataParameter* unsafe_arena_release_hdf5_data_param();

  // optional .trtcaffe.HDF5OutputParameter hdf5_output_param = 113;
  bool has_hdf5_output_param() const;
  private:
  bool _internal_has_hdf5_output_param() const;
  public:
  void clear_hdf5_output_param();
  const ::trtcaffe::HDF5OutputParameter& hdf5_output_param() const;
  ::trtcaffe::HDF5OutputParameter* release_hdf5_output_param();
  ::trtcaffe::HDF5OutputParameter* mutable_hdf5_output_param();
  void set_allocated_hdf5_output_param(::trtcaffe::HDF5OutputParameter* hdf5_output_param);
  private:
  const ::trtcaffe::HDF5OutputParameter& _internal_hdf5_output_param() const;
  ::trtcaffe::HDF5OutputParameter* _internal_mutable_hdf5_output_param();
  public:
  void unsafe_arena_set_allocated_hdf5_output_param(
      ::trtcaffe::HDF5OutputParameter* hdf5_output_param);
  ::trtcaffe::HDF5OutputParameter* unsafe_arena_release_hdf5_output_param();

  // optional .trtcaffe.HingeLossParameter hinge_loss_param = 114;
  bool has_hinge_loss_param() const;
  private:
  bool _internal_has_hinge_loss_param() const;
  public:
  void clear_hinge_loss_param();
  const ::trtcaffe::HingeLossParameter& hinge_loss_param() const;
  ::trtcaffe::HingeLossParameter* release_hinge_loss_param();
  ::trtcaffe::HingeLossParameter* mutable_hinge_loss_param();
  void set_allocated_hinge_loss_param(::trtcaffe::HingeLossParameter* hinge_loss_param);
  private:
  const ::trtcaffe::HingeLossParameter& _internal_hinge_loss_param() const;
  ::trtcaffe::HingeLossParameter* _internal_mutable_hinge_loss_param();
  public:
  void unsafe_arena_set_allocated_hinge_loss_param(
      ::trtcaffe::HingeLossParameter* hinge_loss_param);
  ::trtcaffe::HingeLossParameter* unsafe_arena_release_hinge_loss_param();

  // optional .trtcaffe.ImageDataParameter image_data_param = 115;
  bool has_image_data_param() const;
  private:
  bool _internal_has_image_data_param() const;
  public:
  void clear_image_data_param();
  const ::trtcaffe::ImageDataParameter& image_data_param() const;
  ::trtcaffe::ImageDataParameter* release_image_data_param();
  ::trtcaffe::ImageDataParameter* mutable_image_data_param();
  void set_allocated_image_data_param(::trtcaffe::ImageDataParameter* image_data_param);
  private:
  const ::trtcaffe::ImageDataParameter& _internal_image_data_param() const;
  ::trtcaffe::ImageDataParameter* _internal_mutable_image_data_param();
  public:
  void unsafe_arena_set_allocated_image_data_param(
      ::trtcaffe::ImageDataParameter* image_data_param);
  ::trtcaffe::ImageDataParameter* unsafe_arena_release_image_data_param();

  // optional .trtcaffe.InfogainLossParameter infogain_loss_param = 116;
  bool has_infogain_loss_param() const;
  private:
  bool _internal_has_infogain_loss_param() const;
  public:
  void clear_infogain_loss_param();
  const ::trtcaffe::InfogainLossParameter& infogain_loss_param() const;
  ::trtcaffe::InfogainLossParameter* release_infogain_loss_param();
  ::trtcaffe::InfogainLossParameter* mutable_infogain_loss_param();
  void set_allocated_infogain_loss_param(::trtcaffe::InfogainLossParameter* infogain_loss_param);
  private:
  const ::trtcaffe::InfogainLossParameter& _internal_infogain_loss_param() const;
  ::trtcaffe::InfogainLossParameter* _internal_mutable_infogain_loss_param();
  public:
  void unsafe_arena_set_allocated_infogain_loss_param(
      ::trtcaffe::InfogainLossParameter* infogain_loss_param);
  ::trtcaffe::InfogainLossParameter* unsafe_arena_release_infogain_loss_param();

  // optional .trtcaffe.InnerProductParameter inner_product_param = 117;
  bool has_inner_product_param() const;
  private:
  bool _internal_has_inner_product_param() const;
  public:
  void clear_inner_product_param();
  const ::trtcaffe::InnerProductParameter& inner_product_param() const;
  ::trtcaffe::InnerProductParameter* release_inner_product_param();
  ::trtcaffe::InnerProductParameter* mutable_inner_product_param();
  void set_allocated_inner_product_param(::trtcaffe::InnerProductParameter* inner_product_param);
  private:
  const ::trtcaffe::InnerProductParameter& _internal_inner_product_param() const;
  ::trtcaffe::InnerProductParameter* _internal_mutable_inner_product_param();
  public:
  void unsafe_arena_set_allocated_inner_product_param(
      ::trtcaffe::InnerProductParameter* inner_product_param);
  ::trtcaffe::InnerProductParameter* unsafe_arena_release_inner_product_param();

  // optional .trtcaffe.LRNParameter lrn_param = 118;
  bool has_lrn_param() const;
  private:
  bool _internal_has_lrn_param() const;
  public:
  void clear_lrn_param();
  const ::trtcaffe::LRNParameter& lrn_param() const;
  ::trtcaffe::LRNParameter* release_lrn_param();
  ::trtcaffe::LRNParameter* mutable_lrn_param();
  void set_allocated_lrn_param(::trtcaffe::LRNParameter* lrn_param);
  private:
  const ::trtcaffe::LRNParameter& _internal_lrn_param() const;
  ::trtcaffe::LRNParameter* _internal_mutable_lrn_param();
  public:
  void unsafe_arena_set_allocated_lrn_param(
      ::trtcaffe::LRNParameter* lrn_param);
  ::trtcaffe::LRNParameter* unsafe_arena_release_lrn_param();

  // optional .trtcaffe.MemoryDataParameter memory_data_param = 119;
  bool has_memory_data_param() const;
  private:
  bool _internal_has_memory_data_param() const;
  public:
  void clear_memory_data_param();
  const ::trtcaffe::MemoryDataParameter& memory_data_param() const;
  ::trtcaffe::MemoryDataParameter* release_memory_data_param();
  ::trtcaffe::MemoryDataParameter* mutable_memory_data_param();
  void set_allocated_memory_data_param(::trtcaffe::MemoryDataParameter* memory_data_param);
  private:
  const ::trtcaffe::MemoryDataParameter& _internal_memory_data_param() const;
  ::trtcaffe::MemoryDataParameter* _internal_mutable_memory_data_param();
  public:
  void unsafe_arena_set_allocated_memory_data_param(
      ::trtcaffe::MemoryDataParameter* memory_data_param);
  ::trtcaffe::MemoryDataParameter* unsafe_arena_release_memory_data_param();

  // optional .trtcaffe.MVNParameter mvn_param = 120;
  bool has_mvn_param() const;
  private:
  bool _internal_has_mvn_param() const;
  public:
  void clear_mvn_param();
  const ::trtcaffe::MVNParameter& mvn_param() const;
  ::trtcaffe::MVNParameter* release_mvn_param();
  ::trtcaffe::MVNParameter* mutable_mvn_param();
  void set_allocated_mvn_param(::trtcaffe::MVNParameter* mvn_param);
  private:
  const ::trtcaffe::MVNParameter& _internal_mvn_param() const;
  ::trtcaffe::MVNParameter* _internal_mutable_mvn_param();
  public:
  void unsafe_arena_set_allocated_mvn_param(
      ::trtcaffe::MVNParameter* mvn_param);
  ::trtcaffe::MVNParameter* unsafe_arena_release_mvn_param();

  // optional .trtcaffe.PoolingParameter pooling_param = 121;
  bool has_pooling_param() const;
  private:
  bool _internal_has_pooling_param() const;
  public:
  void clear_pooling_param();
  const ::trtcaffe::PoolingParameter& pooling_param() const;
  ::trtcaffe::PoolingParameter* release_pooling_param();
  ::trtcaffe::PoolingParameter* mutable_pooling_param();
  void set_allocated_pooling_param(::trtcaffe::PoolingParameter* pooling_param);
  private:
  const ::trtcaffe::PoolingParameter& _internal_pooling_param() const;
  ::trtcaffe::PoolingParameter* _internal_mutable_pooling_param();
  public:
  void unsafe_arena_set_allocated_pooling_param(
      ::trtcaffe::PoolingParameter* pooling_param);
  ::trtcaffe::PoolingParameter* unsafe_arena_release_pooling_param();

  // optional .trtcaffe.PowerParameter power_param = 122;
  bool has_power_param() const;
  private:
  bool _internal_has_power_param() const;
  public:
  void clear_power_param();
  const ::trtcaffe::PowerParameter& power_param() const;
  ::trtcaffe::PowerParameter* release_power_param();
  ::trtcaffe::PowerParameter* mutable_power_param();
  void set_allocated_power_param(::trtcaffe::PowerParameter* power_param);
  private:
  const ::trtcaffe::PowerParameter& _internal_power_param() const;
  ::trtcaffe::PowerParameter* _internal_mutable_power_param();
  public:
  void unsafe_arena_set_allocated_power_param(
      ::trtcaffe::PowerParameter* power_param);
  ::trtcaffe::PowerParameter* unsafe_arena_release_power_param();

  // optional .trtcaffe.ReLUParameter relu_param = 123;
  bool has_relu_param() const;
  private:
  bool _internal_has_relu_param() const;
  public:
  void clear_relu_param();
  const ::trtcaffe::ReLUParameter& relu_param() const;
  ::trtcaffe::ReLUParameter* release_relu_param();
  ::trtcaffe::ReLUParameter* mutable_relu_param();
  void set_allocated_relu_param(::trtcaffe::ReLUParameter* relu_param);
  private:
  const ::trtcaffe::ReLUParameter& _internal_relu_param() const;
  ::trtcaffe::ReLUParameter* _internal_mutable_relu_param();
  public:
  void unsafe_arena_set_allocated_relu_param(
      ::trtcaffe::ReLUParameter* relu_param);
  ::trtcaffe::ReLUParameter* unsafe_arena_release_relu_param();

  // optional .trtcaffe.SigmoidParameter sigmoid_param = 124;
  bool has_sigmoid_param() const;
  private:
  bool _internal_has_sigmoid_param() const;
  public:
  void clear_sigmoid_param();
  const ::trtcaffe::SigmoidParameter& sigmoid_param() const;
  ::trtcaffe::SigmoidParameter* release_sigmoid_param();
  ::trtcaffe::SigmoidParameter* mutable_sigmoid_param();
  void set_allocated_sigmoid_param(::trtcaffe::SigmoidParameter* sigmoid_param);
  private:
  const ::trtcaffe::SigmoidParameter& _internal_sigmoid_param() const;
  ::trtcaffe::SigmoidParameter* _internal_mutable_sigmoid_param();
  public:
  void unsafe_arena_set_allocated_sigmoid_param(
      ::trtcaffe::SigmoidParameter* sigmoid_param);
  ::trtcaffe::SigmoidParameter* unsafe_arena_release_sigmoid_param();

  // optional .trtcaffe.SoftmaxParameter softmax_param = 125;
  bool has_softmax_param() const;
  private:
  bool _internal_has_softmax_param() const;
  public:
  void clear_softmax_param();
  const ::trtcaffe::SoftmaxParameter& softmax_param() const;
  ::trtcaffe::SoftmaxParameter* release_softmax_param();
  ::trtcaffe::SoftmaxParameter* mutable_softmax_param();
  void set_allocated_softmax_param(::trtcaffe::SoftmaxParameter* softmax_param);
  private:
  const ::trtcaffe::SoftmaxParameter& _internal_softmax_param() const;
  ::trtcaffe::SoftmaxParameter* _internal_mutable_softmax_param();
  public:
  void unsafe_arena_set_allocated_softmax_param(
      ::trtcaffe::SoftmaxParameter* softmax_param);
  ::trtcaffe::SoftmaxParameter* unsafe_arena_release_softmax_param();

  // optional .trtcaffe.SliceParameter slice_param = 126;
  bool has_slice_param() const;
  private:
  bool _internal_has_slice_param() const;
  public:
  void clear_slice_param();
  const ::trtcaffe::SliceParameter& slice_param() const;
  ::trtcaffe::SliceParameter* release_slice_param();
  ::trtcaffe::SliceParameter* mutable_slice_param();
  void set_allocated_slice_param(::trtcaffe::SliceParameter* slice_param);
  private:
  const ::trtcaffe::SliceParameter& _internal_slice_param() const;
  ::trtcaffe::SliceParameter* _internal_mutable_slice_param();
  public:
  void unsafe_arena_set_allocated_slice_param(
      ::trtcaffe::SliceParameter* slice_param);
  ::trtcaffe::SliceParameter* unsafe_arena_release_slice_param();

  // optional .trtcaffe.TanHParameter tanh_param = 127;
  bool has_tanh_param() const;
  private:
  bool _internal_has_tanh_param() const;
  public:
  void clear_tanh_param();
  const ::trtcaffe::TanHParameter& tanh_param() const;
  ::trtcaffe::TanHParameter* release_tanh_param();
  ::trtcaffe::TanHParameter* mutable_tanh_param();
  void set_allocated_tanh_param(::trtcaffe::TanHParameter* tanh_param);
  private:
  const ::trtcaffe::TanHParameter& _internal_tanh_param() const;
  ::trtcaffe::TanHParameter* _internal_mutable_tanh_param();
  public:
  void unsafe_arena_set_allocated_tanh_param(
      ::trtcaffe::TanHParameter* tanh_param);
  ::trtcaffe::TanHParameter* unsafe_arena_release_tanh_param();

  // optional .trtcaffe.ThresholdParameter threshold_param = 128;
  bool has_threshold_param() const;
  private:
  bool _internal_has_threshold_param() const;
  public:
  void clear_threshold_param();
  const ::trtcaffe::ThresholdParameter& threshold_param() const;
  ::trtcaffe::ThresholdParameter* release_threshold_param();
  ::trtcaffe::ThresholdParameter* mutable_threshold_param();
  void set_allocated_threshold_param(::trtcaffe::ThresholdParameter* threshold_param);
  private:
  const ::trtcaffe::ThresholdParameter& _internal_threshold_param() const;
  ::trtcaffe::ThresholdParameter* _internal_mutable_threshold_param();
  public:
  void unsafe_arena_set_allocated_threshold_param(
      ::trtcaffe::ThresholdParameter* threshold_param);
  ::trtcaffe::ThresholdParameter* unsafe_arena_release_threshold_param();

  // optional .trtcaffe.WindowDataParameter window_data_param = 129;
  bool has_window_data_param() const;
  private:
  bool _internal_has_window_data_param() const;
  public:
  void clear_window_data_param();
  const ::trtcaffe::WindowDataParameter& window_data_param() const;
  ::trtcaffe::WindowDataParameter* release_window_data_param();
  ::trtcaffe::WindowDataParameter* mutable_window_data_param();
  void set_allocated_window_data_param(::trtcaffe::WindowDataParameter* window_data_param);
  private:
  const ::trtcaffe::WindowDataParameter& _internal_window_data_param() const;
  ::trtcaffe::WindowDataParameter* _internal_mutable_window_data_param();
  public:
  void unsafe_arena_set_allocated_window_data_param(
      ::trtcaffe::WindowDataParameter* window_data_param);
  ::trtcaffe::WindowDataParameter* unsafe_arena_release_window_data_param();

  // optional .trtcaffe.PythonParameter python_param = 130;
  bool has_python_param() const;
  private:
  bool _internal_has_python_param() const;
  public:
  void clear_python_param();
  const ::trtcaffe::PythonParameter& python_param() const;
  ::trtcaffe::PythonParameter* release_python_param();
  ::trtcaffe::PythonParameter* mutable_python_param();
  void set_allocated_python_param(::trtcaffe::PythonParameter* python_param);
  private:
  const ::trtcaffe::PythonParameter& _internal_python_param() const;
  ::trtcaffe::PythonParameter* _internal_mutable_python_param();
  public:
  void unsafe_arena_set_allocated_python_param(
      ::trtcaffe::PythonParameter* python_param);
  ::trtcaffe::PythonParameter* unsafe_arena_release_python_param();

  // optional .trtcaffe.PReLUParameter prelu_param = 131;
  bool has_prelu_param() const;
  private:
  bool _internal_has_prelu_param() const;
  public:
  void clear_prelu_param();
  const ::trtcaffe::PReLUParameter& prelu_param() const;
  ::trtcaffe::PReLUParameter* release_prelu_param();
  ::trtcaffe::PReLUParameter* mutable_prelu_param();
  void set_allocated_prelu_param(::trtcaffe::PReLUParameter* prelu_param);
  private:
  const ::trtcaffe::PReLUParameter& _internal_prelu_param() const;
  ::trtcaffe::PReLUParameter* _internal_mutable_prelu_param();
  public:
  void unsafe_arena_set_allocated_prelu_param(
      ::trtcaffe::PReLUParameter* prelu_param);
  ::trtcaffe::PReLUParameter* unsafe_arena_release_prelu_param();

  // optional .trtcaffe.SPPParameter spp_param = 132;
  bool has_spp_param() const;
  private:
  bool _internal_has_spp_param() const;
  public:
  void clear_spp_param();
  const ::trtcaffe::SPPParameter& spp_param() const;
  ::trtcaffe::SPPParameter* release_spp_param();
  ::trtcaffe::SPPParameter* mutable_spp_param();
  void set_allocated_spp_param(::trtcaffe::SPPParameter* spp_param);
  private:
  const ::trtcaffe::SPPParameter& _internal_spp_param() const;
  ::trtcaffe::SPPParameter* _internal_mutable_spp_param();
  public:
  void unsafe_arena_set_allocated_spp_param(
      ::trtcaffe::SPPParameter* spp_param);
  ::trtcaffe::SPPParameter* unsafe_arena_release_spp_param();

  // optional .trtcaffe.ReshapeParameter reshape_param = 133;
  bool has_reshape_param() const;
  private:
  bool _internal_has_reshape_param() const;
  public:
  void clear_reshape_param();
  const ::trtcaffe::ReshapeParameter& reshape_param() const;
  ::trtcaffe::ReshapeParameter* release_reshape_param();
  ::trtcaffe::ReshapeParameter* mutable_reshape_param();
  void set_allocated_reshape_param(::trtcaffe::ReshapeParameter* reshape_param);
  private:
  const ::trtcaffe::ReshapeParameter& _internal_reshape_param() const;
  ::trtcaffe::ReshapeParameter* _internal_mutable_reshape_param();
  public:
  void unsafe_arena_set_allocated_reshape_param(
      ::trtcaffe::ReshapeParameter* reshape_param);
  ::trtcaffe::ReshapeParameter* unsafe_arena_release_reshape_param();

  // optional .trtcaffe.LogParameter log_param = 134;
  bool has_log_param() const;
  private:
  bool _internal_has_log_param() const;
  public:
  void clear_log_param();
  const ::trtcaffe::LogParameter& log_param() const;
  ::trtcaffe::LogParameter* release_log_param();
  ::trtcaffe::LogParameter* mutable_log_param();
  void set_allocated_log_param(::trtcaffe::LogParameter* log_param);
  private:
  const ::trtcaffe::LogParameter& _internal_log_param() const;
  ::trtcaffe::LogParameter* _internal_mutable_log_param();
  public:
  void unsafe_arena_set_allocated_log_param(
      ::trtcaffe::LogParameter* log_param);
  ::trtcaffe::LogParameter* unsafe_arena_release_log_param();

  // optional .trtcaffe.FlattenParameter flatten_param = 135;
  bool has_flatten_param() const;
  private:
  bool _internal_has_flatten_param() const;
  public:
  void clear_flatten_param();
  const ::trtcaffe::FlattenParameter& flatten_param() const;
  ::trtcaffe::FlattenParameter* release_flatten_param();
  ::trtcaffe::FlattenParameter* mutable_flatten_param();
  void set_allocated_flatten_param(::trtcaffe::FlattenParameter* flatten_param);
  private:
  const ::trtcaffe::FlattenParameter& _internal_flatten_param() const;
  ::trtcaffe::FlattenParameter* _internal_mutable_flatten_param();
  public:
  void unsafe_arena_set_allocated_flatten_param(
      ::trtcaffe::FlattenParameter* flatten_param);
  ::trtcaffe::FlattenParameter* unsafe_arena_release_flatten_param();

  // optional .trtcaffe.ReductionParameter reduction_param = 136;
  bool has_reduction_param() const;
  private:
  bool _internal_has_reduction_param() const;
  public:
  void clear_reduction_param();
  const ::trtcaffe::ReductionParameter& reduction_param() const;
  ::trtcaffe::ReductionParameter* release_reduction_param();
  ::trtcaffe::ReductionParameter* mutable_reduction_param();
  void set_allocated_reduction_param(::trtcaffe::ReductionParameter* reduction_param);
  private:
  const ::trtcaffe::ReductionParameter& _internal_reduction_param() const;
  ::trtcaffe::ReductionParameter* _internal_mutable_reduction_param();
  public:
  void unsafe_arena_set_allocated_reduction_param(
      ::trtcaffe::ReductionParameter* reduction_param);
  ::trtcaffe::ReductionParameter* unsafe_arena_release_reduction_param();

  // optional .trtcaffe.EmbedParameter embed_param = 137;
  bool has_embed_param() const;
  private:
  bool _internal_has_embed_param() const;
  public:
  void clear_embed_param();
  const ::trtcaffe::EmbedParameter& embed_param() const;
  ::trtcaffe::EmbedParameter* release_embed_param();
  ::trtcaffe::EmbedParameter* mutable_embed_param();
  void set_allocated_embed_param(::trtcaffe::EmbedParameter* embed_param);
  private:
  const ::trtcaffe::EmbedParameter& _internal_embed_param() const;
  ::trtcaffe::EmbedParameter* _internal_mutable_embed_param();
  public:
  void unsafe_arena_set_allocated_embed_param(
      ::trtcaffe::EmbedParameter* embed_param);
  ::trtcaffe::EmbedParameter* unsafe_arena_release_embed_param();

  // optional .trtcaffe.TileParameter tile_param = 138;
  bool has_tile_param() const;
  private:
  bool _internal_has_tile_param() const;
  public:
  void clear_tile_param();
  const ::trtcaffe::TileParameter& tile_param() const;
  ::trtcaffe::TileParameter* release_tile_param();
  ::trtcaffe::TileParameter* mutable_tile_param();
  void set_allocated_tile_param(::trtcaffe::TileParameter* tile_param);
  private:
  const ::trtcaffe::TileParameter& _internal_tile_param() const;
  ::trtcaffe::TileParameter* _internal_mutable_tile_param();
  public:
  void unsafe_arena_set_allocated_tile_param(
      ::trtcaffe::TileParameter* tile_param);
  ::trtcaffe::TileParameter* unsafe_arena_release_tile_param();

  // optional .trtcaffe.BatchNormParameter batch_norm_param = 139;
  bool has_batch_norm_param() const;
  private:
  bool _internal_has_batch_norm_param() const;
  public:
  void clear_batch_norm_param();
  const ::trtcaffe::BatchNormParameter& batch_norm_param() const;
  ::trtcaffe::BatchNormParameter* release_batch_norm_param();
  ::trtcaffe::BatchNormParameter* mutable_batch_norm_param();
  void set_allocated_batch_norm_param(::trtcaffe::BatchNormParameter* batch_norm_param);
  private:
  const ::trtcaffe::BatchNormParameter& _internal_batch_norm_param() const;
  ::trtcaffe::BatchNormParameter* _internal_mutable_batch_norm_param();
  public:
  void unsafe_arena_set_allocated_batch_norm_param(
      ::trtcaffe::BatchNormParameter* batch_norm_param);
  ::trtcaffe::BatchNormParameter* unsafe_arena_release_batch_norm_param();

  // optional .trtcaffe.ELUParameter elu_param = 140;
  bool has_elu_param() const;
  private:
  bool _internal_has_elu_param() const;
  public:
  void clear_elu_param();
  const ::trtcaffe::ELUParameter& elu_param() const;
  ::trtcaffe::ELUParameter* release_elu_param();
  ::trtcaffe::ELUParameter* mutable_elu_param();
  void set_allocated_elu_param(::trtcaffe::ELUParameter* elu_param);
  private:
  const ::trtcaffe::ELUParameter& _internal_elu_param() const;
  ::trtcaffe::ELUParameter* _internal_mutable_elu_param();
  public:
  void unsafe_arena_set_allocated_elu_param(
      ::trtcaffe::ELUParameter* elu_param);
  ::trtcaffe::ELUParameter* unsafe_arena_release_elu_param();

  // optional .trtcaffe.BiasParameter bias_param = 141;
  bool has_bias_param() const;
  private:
  bool _internal_has_bias_param() const;
  public:
  void clear_bias_param();
  const ::trtcaffe::BiasParameter& bias_param() const;
  ::trtcaffe::BiasParameter* release_bias_param();
  ::trtcaffe::BiasParameter* mutable_bias_param();
  void set_allocated_bias_param(::trtcaffe::BiasParameter* bias_param);
  private:
  const ::trtcaffe::BiasParameter& _internal_bias_param() const;
  ::trtcaffe::BiasParameter* _internal_mutable_bias_param();
  public:
  void unsafe_arena_set_allocated_bias_param(
      ::trtcaffe::BiasParameter* bias_param);
  ::trtcaffe::BiasParameter* unsafe_arena_release_bias_param();

  // optional .trtcaffe.ScaleParameter scale_param = 142;
  bool has_scale_param() const;
  private:
  bool _internal_has_scale_param() const;
  public:
  void clear_scale_param();
  const ::trtcaffe::ScaleParameter& scale_param() const;
  ::trtcaffe::ScaleParameter* release_scale_param();
  ::trtcaffe::ScaleParameter* mutable_scale_param();
  void set_allocated_scale_param(::trtcaffe::ScaleParameter* scale_param);
  private:
  const ::trtcaffe::ScaleParameter& _internal_scale_param() const;
  ::trtcaffe::ScaleParameter* _internal_mutable_scale_param();
  public:
  void unsafe_arena_set_allocated_scale_param(
      ::trtcaffe::ScaleParameter* scale_param);
  ::trtcaffe::ScaleParameter* unsafe_arena_release_scale_param();

  // optional .trtcaffe.InputParameter input_param = 143;
  bool has_input_param() const;
  private:
  bool _internal_has_input_param() const;
  public:
  void clear_input_param();
  const ::trtcaffe::InputParameter& input_param() const;
  ::trtcaffe::InputParameter* release_input_param();
  ::trtcaffe::InputParameter* mutable_input_param();
  void set_allocated_input_param(::trtcaffe::InputParameter* input_param);
  private:
  const ::trtcaffe::InputParameter& _internal_input_param() const;
  ::trtcaffe::InputParameter* _internal_mutable_input_param();
  public:
  void unsafe_arena_set_allocated_input_param(
      ::trtcaffe::InputParameter* input_param);
  ::trtcaffe::InputParameter* unsafe_arena_release_input_param();

  // optional .trtcaffe.CropParameter crop_param = 144;
  bool has_crop_param() const;
  private:
  bool _internal_has_crop_param() const;
  public:
  void clear_crop_param();
  const ::trtcaffe::CropParameter& crop_param() const;
  ::trtcaffe::CropParameter* release_crop_param();
  ::trtcaffe::CropParameter* mutable_crop_param();
  void set_allocated_crop_param(::trtcaffe::CropParameter* crop_param);
  private:
  const ::trtcaffe::CropParameter& _internal_crop_param() const;
  ::trtcaffe::CropParameter* _internal_mutable_crop_param();
  public:
  void unsafe_arena_set_allocated_crop_param(
      ::trtcaffe::CropParameter* crop_param);
  ::trtcaffe::CropParameter* unsafe_arena_release_crop_param();

  // optional .trtcaffe.PermuteParameter permute_param = 8781;
  bool has_permute_param() const;
  private:
  bool _internal_has_permute_param() const;
  public:
  void clear_permute_param();
  const ::trtcaffe::PermuteParameter& permute_param() const;
  ::trtcaffe::PermuteParameter* release_permute_param();
  ::trtcaffe::PermuteParameter* mutable_permute_param();
  void set_allocated_permute_param(::trtcaffe::PermuteParameter* permute_param);
  private:
  const ::trtcaffe::PermuteParameter& _internal_permute_param() const;
  ::trtcaffe::PermuteParameter* _internal_mutable_permute_param();
  public:
  void unsafe_arena_set_allocated_permute_param(
      ::trtcaffe::PermuteParameter* permute_param);
  ::trtcaffe::PermuteParameter* unsafe_arena_release_permute_param();

  // optional .trtcaffe.DetectionOutputParameter detection_output_param = 8782;
  bool has_detection_output_param() const;
  private:
  bool _internal_has_detection_output_param() const;
  public:
  void clear_detection_output_param();
  const ::trtcaffe::DetectionOutputParameter& detection_output_param() const;
  ::trtcaffe::DetectionOutputParameter* release_detection_output_param();
  ::trtcaffe::DetectionOutputParameter* mutable_detection_output_param();
  void set_allocated_detection_output_param(::trtcaffe::DetectionOutputParameter* detection_output_param);
  private:
  const ::trtcaffe::DetectionOutputParameter& _internal_detection_output_param() const;
  ::trtcaffe::DetectionOutputParameter* _internal_mutable_detection_output_param();
  public:
  void unsafe_arena_set_allocated_detection_output_param(
      ::trtcaffe::DetectionOutputParameter* detection_output_param);
  ::trtcaffe::DetectionOutputParameter* unsafe_arena_release_detection_output_param();

  // optional .trtcaffe.NormalizeParameter norm_param = 8783;
  bool has_norm_param() const;
  private:
  bool _internal_has_norm_param() const;
  public:
  void clear_norm_param();
  const ::trtcaffe::NormalizeParameter& norm_param() const;
  ::trtcaffe::NormalizeParameter* release_norm_param();
  ::trtcaffe::NormalizeParameter* mutable_norm_param();
  void set_allocated_norm_param(::trtcaffe::NormalizeParameter* norm_param);
  private:
  const ::trtcaffe::NormalizeParameter& _internal_norm_param() const;
  ::trtcaffe::NormalizeParameter* _internal_mutable_norm_param();
  public:
  void unsafe_arena_set_allocated_norm_param(
      ::trtcaffe::NormalizeParameter* norm_param);
  ::trtcaffe::NormalizeParameter* unsafe_arena_release_norm_param();

  // optional .trtcaffe.PriorBoxParameter prior_box_param = 8784;
  bool has_prior_box_param() const;
  private:
  bool _internal_has_prior_box_param() const;
  public:
  void clear_prior_box_param();
  const ::trtcaffe::PriorBoxParameter& prior_box_param() const;
  ::trtcaffe::PriorBoxParameter* release_prior_box_param();
  ::trtcaffe::PriorBoxParameter* mutable_prior_box_param();
  void set_allocated_prior_box_param(::trtcaffe::PriorBoxParameter* prior_box_param);
  private:
  const ::trtcaffe::PriorBoxParameter& _internal_prior_box_param() const;
  ::trtcaffe::PriorBoxParameter* _internal_mutable_prior_box_param();
  public:
  void unsafe_arena_set_allocated_prior_box_param(
      ::trtcaffe::PriorBoxParameter* prior_box_param);
  ::trtcaffe::PriorBoxParameter* unsafe_arena_release_prior_box_param();

  // optional .trtcaffe.ROIPoolingParameter roi_pooling_param = 8785;
  bool has_roi_pooling_param() const;
  private:
  bool _internal_has_roi_pooling_param() const;
  public:
  void clear_roi_pooling_param();
  const ::trtcaffe::ROIPoolingParameter& roi_pooling_param() const;
  ::trtcaffe::ROIPoolingParameter* release_roi_pooling_param();
  ::trtcaffe::ROIPoolingParameter* mutable_roi_pooling_param();
  void set_allocated_roi_pooling_param(::trtcaffe::ROIPoolingParameter* roi_pooling_param);
  private:
  const ::trtcaffe::ROIPoolingParameter& _internal_roi_pooling_param() const;
  ::trtcaffe::ROIPoolingParameter* _internal_mutable_roi_pooling_param();
  public:
  void unsafe_arena_set_allocated_roi_pooling_param(
      ::trtcaffe::ROIPoolingParameter* roi_pooling_param);
  ::trtcaffe::ROIPoolingParameter* unsafe_arena_release_roi_pooling_param();

  // optional .trtcaffe.RegionProposalParameter region_proposal_param = 8786;
  bool has_region_proposal_param() const;
  private:
  bool _internal_has_region_proposal_param() const;
  public:
  void clear_region_proposal_param();
  const ::trtcaffe::RegionProposalParameter& region_proposal_param() const;
  ::trtcaffe::RegionProposalParameter* release_region_proposal_param();
  ::trtcaffe::RegionProposalParameter* mutable_region_proposal_param();
  void set_allocated_region_proposal_param(::trtcaffe::RegionProposalParameter* region_proposal_param);
  private:
  const ::trtcaffe::RegionProposalParameter& _internal_region_proposal_param() const;
  ::trtcaffe::RegionProposalParameter* _internal_mutable_region_proposal_param();
  public:
  void unsafe_arena_set_allocated_region_proposal_param(
      ::trtcaffe::RegionProposalParameter* region_proposal_param);
  ::trtcaffe::RegionProposalParameter* unsafe_arena_release_region_proposal_param();

  // optional .trtcaffe.ClipParameter clip_param = 8787;
  bool has_clip_param() const;
  private:
  bool _internal_has_clip_param() const;
  public:
  void clear_clip_param();
  const ::trtcaffe::ClipParameter& clip_param() const;
  ::trtcaffe::ClipParameter* release_clip_param();
  ::trtcaffe::ClipParameter* mutable_clip_param();
  void set_allocated_clip_param(::trtcaffe::ClipParameter* clip_param);
  private:
  const ::trtcaffe::ClipParameter& _internal_clip_param() const;
  ::trtcaffe::ClipParameter* _internal_mutable_clip_param();
  public:
  void unsafe_arena_set_allocated_clip_param(
      ::trtcaffe::ClipParameter* clip_param);
  ::trtcaffe::ClipParameter* unsafe_arena_release_clip_param();

  // optional .trtcaffe.Phase phase = 10;
  bool has_phase() const;
  private:
  bool _internal_has_phase() const;
  public:
  void clear_phase();
  ::trtcaffe::Phase phase() const;
  void set_phase(::trtcaffe::Phase value);
  private:
  ::trtcaffe::Phase _internal_phase() const;
  void _internal_set_phase(::trtcaffe::Phase value);
  public:

  // optional bool debug = 149 [default = false];
  bool has_debug() const;
  private:
  bool _internal_has_debug() const;
  public:
  void clear_debug();
  bool debug() const;
  void set_debug(bool value);
  private:
  bool _internal_debug() const;
  void _internal_set_debug(bool value);
  public:

  // optional int32 cudnn_math_override = 150 [default = -1];
  bool has_cudnn_math_override() const;
  private:
  bool _internal_has_cudnn_math_override() const;
  public:
  void clear_cudnn_math_override();
  ::PROTOBUF_NAMESPACE_ID::int32 cudnn_math_override() const;
  void set_cudnn_math_override(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_cudnn_math_override() const;
  void _internal_set_cudnn_math_override(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional .trtcaffe.Type forward_type = 145 [default = FLOAT];
  bool has_forward_type() const;
  private:
  bool _internal_has_forward_type() const;
  public:
  void clear_forward_type();
  ::trtcaffe::Type forward_type() const;
  void set_forward_type(::trtcaffe::Type value);
  private:
  ::trtcaffe::Type _internal_forward_type() const;
  void _internal_set_forward_type(::trtcaffe::Type value);
  public:

  // optional .trtcaffe.Type backward_type = 146 [default = FLOAT];
  bool has_backward_type() const;
  private:
  bool _internal_has_backward_type() const;
  public:
  void clear_backward_type();
  ::trtcaffe::Type backward_type() const;
  void set_backward_type(::trtcaffe::Type value);
  private:
  ::trtcaffe::Type _internal_backward_type() const;
  void _internal_set_backward_type(::trtcaffe::Type value);
  public:

  // optional .trtcaffe.Type forward_math = 147 [default = FLOAT];
  bool has_forward_math() const;
  private:
  bool _internal_has_forward_math() const;
  public:
  void clear_forward_math();
  ::trtcaffe::Type forward_math() const;
  void set_forward_math(::trtcaffe::Type value);
  private:
  ::trtcaffe::Type _internal_forward_math() const;
  void _internal_set_forward_math(::trtcaffe::Type value);
  public:

  // optional .trtcaffe.Type backward_math = 148 [default = FLOAT];
  bool has_backward_math() const;
  private:
  bool _internal_has_backward_math() const;
  public:
  void clear_backward_math();
  ::trtcaffe::Type backward_math() const;
  void set_backward_math(::trtcaffe::Type value);
  private:
  ::trtcaffe::Type _internal_backward_math() const;
  void _internal_set_backward_math(::trtcaffe::Type value);
  public:

  // @@protoc_insertion_point(class_scope:trtcaffe.LayerParameter)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<2> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> bottom_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> top_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > loss_weight_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::trtcaffe::ParamSpec > param_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::trtcaffe::BlobProto > blobs_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::trtcaffe::NetStateRule > include_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::trtcaffe::NetStateRule > exclude_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool > propagate_down_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr type_;
  ::trtcaffe::TransformationParameter* transform_param_;
  ::trtcaffe::LossParameter* loss_param_;
  ::trtcaffe::AccuracyParameter* accuracy_param_;
  ::trtcaffe::ArgMaxParameter* argmax_param_;
  ::trtcaffe::ConcatParameter* concat_param_;
  ::trtcaffe::ContrastiveLossParameter* contrastive_loss_param_;
  ::trtcaffe::ConvolutionParameter* convolution_param_;
  ::trtcaffe::DataParameter* data_param_;
  ::trtcaffe::DropoutParameter* dropout_param_;
  ::trtcaffe::DummyDataParameter* dummy_data_param_;
  ::trtcaffe::EltwiseParameter* eltwise_param_;
  ::trtcaffe::ExpParameter* exp_param_;
  ::trtcaffe::HDF5DataParameter* hdf5_data_param_;
  ::trtcaffe::HDF5OutputParameter* hdf5_output_param_;
  ::trtcaffe::HingeLossParameter* hinge_loss_param_;
  ::trtcaffe::ImageDataParameter* image_data_param_;
  ::trtcaffe::InfogainLossParameter* infogain_loss_param_;
  ::trtcaffe::InnerProductParameter* inner_product_param_;
  ::trtcaffe::LRNParameter* lrn_param_;
  ::trtcaffe::MemoryDataParameter* memory_data_param_;
  ::trtcaffe::MVNParameter* mvn_param_;
  ::trtcaffe::PoolingParameter* pooling_param_;
  ::trtcaffe::PowerParameter* power_param_;
  ::trtcaffe::ReLUParameter* relu_param_;
  ::trtcaffe::SigmoidParameter* sigmoid_param_;
  ::trtcaffe::SoftmaxParameter* softmax_param_;
  ::trtcaffe::SliceParameter* slice_param_;
  ::trtcaffe::TanHParameter* tanh_param_;
  ::trtcaffe::ThresholdParameter* threshold_param_;
  ::trtcaffe::WindowDataParameter* window_data_param_;
  ::trtcaffe::PythonParameter* python_param_;
  ::trtcaffe::PReLUParameter* prelu_param_;
  ::trtcaffe::SPPParameter* spp_param_;
  ::trtcaffe::ReshapeParameter* reshape_param_;
  ::trtcaffe::LogParameter* log_param_;
  ::trtcaffe::FlattenParameter* flatten_param_;
  ::trtcaffe::ReductionParameter* reduction_param_;
  ::trtcaffe::EmbedParameter* embed_param_;
  ::trtcaffe::TileParameter* tile_param_;
  ::trtcaffe::BatchNormParameter* batch_norm_param_;
  ::trtcaffe::ELUParameter* elu_param_;
  ::trtcaffe::BiasParameter* bias_param_;
  ::trtcaffe::ScaleParameter* scale_param_;
  ::trtcaffe::InputParameter* input_param_;
  ::trtcaffe::CropParameter* crop_param_;
  ::trtcaffe::PermuteParameter* permute_param_;
  ::trtcaffe::DetectionOutputParameter* detection_output_param_;
  ::trtcaffe::NormalizeParameter* norm_param_;
  ::trtcaffe::PriorBoxParameter* prior_box_param_;
  ::trtcaffe::ROIPoolingParameter* roi_pooling_param_;
  ::trtcaffe::RegionProposalParameter* region_proposal_param_;
  ::trtcaffe::ClipParameter* clip_param_;
  int phase_;
  bool debug_;
  ::PROTOBUF_NAMESPACE_ID::int32 cudnn_math_override_;
  int forward_type_;
  int backward_type_;
  int forward_math_;
  int backward_math_;
  friend struct ::TableStruct_trtcaffe_2eproto;
};
// -------------------------------------------------------------------

class TransformationParameter PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:trtcaffe.TransformationParameter) */ {
 public:
  inline TransformationParameter() : TransformationParameter(nullptr) {};
  virtual ~TransformationParameter();

  TransformationParameter(const TransformationParameter& from);
  TransformationParameter(TransformationParameter&& from) noexcept
    : TransformationParameter() {
    *this = ::std::move(from);
  }

  inline TransformationParameter& operator=(const TransformationParameter& from) {
    CopyFrom(from);
    return *this;
  }
  inline TransformationParameter& operator=(TransformationParameter&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TransformationParameter& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TransformationParameter* internal_default_instance() {
    return reinterpret_cast<const TransformationParameter*>(
               &_TransformationParameter_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(TransformationParameter& a, TransformationParameter& b) {
    a.Swap(&b);
  }
  inline void Swap(TransformationParameter* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TransformationParameter* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TransformationParameter* New() const final {
    return CreateMaybeMessage<TransformationParameter>(nullptr);
  }

  TransformationParameter* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TransformationParameter>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TransformationParameter& from);
  void MergeFrom(const TransformationParameter& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TransformationParameter* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "trtcaffe.TransformationParameter";
  }
  protected:
  explicit TransformationParameter(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_trtcaffe_2eproto);
    return ::descriptor_table_trtcaffe_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef TransformationParameter_InterpolationAlgo InterpolationAlgo;
  static constexpr InterpolationAlgo INTER_NEAREST =
    TransformationParameter_InterpolationAlgo_INTER_NEAREST;
  static constexpr InterpolationAlgo INTER_LINEAR =
    TransformationParameter_InterpolationAlgo_INTER_LINEAR;
  static constexpr InterpolationAlgo INTER_CUBIC =
    TransformationParameter_InterpolationAlgo_INTER_CUBIC;
  static constexpr InterpolationAlgo INTER_AREA =
    TransformationParameter_InterpolationAlgo_INTER_AREA;
  static inline bool InterpolationAlgo_IsValid(int value) {
    return TransformationParameter_InterpolationAlgo_IsValid(value);
  }
  static constexpr InterpolationAlgo InterpolationAlgo_MIN =
    TransformationParameter_InterpolationAlgo_InterpolationAlgo_MIN;
  static constexpr InterpolationAlgo InterpolationAlgo_MAX =
    TransformationParameter_InterpolationAlgo_InterpolationAlgo_MAX;
  static constexpr int InterpolationAlgo_ARRAYSIZE =
    TransformationParameter_InterpolationAlgo_InterpolationAlgo_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  InterpolationAlgo_descriptor() {
    return TransformationParameter_InterpolationAlgo_descriptor();
  }
  template<typename T>
  static inline const std::string& InterpolationAlgo_Name(T enum_t_value) {
    static_assert(::std::is_same<T, InterpolationAlgo>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function InterpolationAlgo_Name.");
    return TransformationParameter_InterpolationAlgo_Name(enum_t_value);
  }
  static inline bool InterpolationAlgo_Parse(const std::string& name,
      InterpolationAlgo* value) {
    return TransformationParameter_InterpolationAlgo_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kMeanValueFieldNumber = 5,
    kMeanFileFieldNumber = 4,
    kCropSizeFieldNumber = 3,
    kUseGpuTransformFieldNumber = 8,
    kAllowUpscaleFieldNumber = 20,
    kMirrorFieldNumber = 2,
    kForceColorFieldNumber = 6,
    kForceGrayFieldNumber = 7,
    kImgRandResizeLowerFieldNumber = 10,
    kImgRandResizeUpperFieldNumber = 11,
    kRandResizeRatioLowerFieldNumber = 12,
    kRandResizeRatioUpperFieldNumber = 13,
    kInterpolationAlgoDownFieldNumber = 18,
    kScaleFieldNumber = 1,
    kVerticalStretchLowerFieldNumber = 14,
    kRandomSeedFieldNumber = 9,
    kVerticalStretchUpperFieldNumber = 15,
    kHorizontalStretchLowerFieldNumber = 16,
    kHorizontalStretchUpperFieldNumber = 17,
    kInterpolationAlgoUpFieldNumber = 19,
  };
  // repeated float mean_value = 5;
  int mean_value_size() const;
  private:
  int _internal_mean_value_size() const;
  public:
  void clear_mean_value();
  private:
  float _internal_mean_value(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_mean_value() const;
  void _internal_add_mean_value(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_mean_value();
  public:
  float mean_value(int index) const;
  void set_mean_value(int index, float value);
  void add_mean_value(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      mean_value() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_mean_value();

  // optional string mean_file = 4;
  bool has_mean_file() const;
  private:
  bool _internal_has_mean_file() const;
  public:
  void clear_mean_file();
  const std::string& mean_file() const;
  void set_mean_file(const std::string& value);
  void set_mean_file(std::string&& value);
  void set_mean_file(const char* value);
  void set_mean_file(const char* value, size_t size);
  std::string* mutable_mean_file();
  std::string* release_mean_file();
  void set_allocated_mean_file(std::string* mean_file);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_mean_file();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_mean_file(
      std::string* mean_file);
  private:
  const std::string& _internal_mean_file() const;
  void _internal_set_mean_file(const std::string& value);
  std::string* _internal_mutable_mean_file();
  public:

  // optional uint32 crop_size = 3 [default = 0];
  bool has_crop_size() const;
  private:
  bool _internal_has_crop_size() const;
  public:
  void clear_crop_size();
  ::PROTOBUF_NAMESPACE_ID::uint32 crop_size() const;
  void set_crop_size(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_crop_size() const;
  void _internal_set_crop_size(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional bool use_gpu_transform = 8 [default = false];
  bool has_use_gpu_transform() const;
  private:
  bool _internal_has_use_gpu_transform() const;
  public:
  void clear_use_gpu_transform();
  bool use_gpu_transform() const;
  void set_use_gpu_transform(bool value);
  private:
  bool _internal_use_gpu_transform() const;
  void _internal_set_use_gpu_transform(bool value);
  public:

  // optional bool allow_upscale = 20 [default = false];
  bool has_allow_upscale() const;
  private:
  bool _internal_has_allow_upscale() const;
  public:
  void clear_allow_upscale();
  bool allow_upscale() const;
  void set_allow_upscale(bool value);
  private:
  bool _internal_allow_upscale() const;
  void _internal_set_allow_upscale(bool value);
  public:

  // optional bool mirror = 2 [default = false];
  bool has_mirror() const;
  private:
  bool _internal_has_mirror() const;
  public:
  void clear_mirror();
  bool mirror() const;
  void set_mirror(bool value);
  private:
  bool _internal_mirror() const;
  void _internal_set_mirror(bool value);
  public:

  // optional bool force_color = 6 [default = false];
  bool has_force_color() const;
  private:
  bool _internal_has_force_color() const;
  public:
  void clear_force_color();
  bool force_color() const;
  void set_force_color(bool value);
  private:
  bool _internal_force_color() const;
  void _internal_set_force_color(bool value);
  public:

  // optional bool force_gray = 7 [default = false];
  bool has_force_gray() const;
  private:
  bool _internal_has_force_gray() const;
  public:
  void clear_force_gray();
  bool force_gray() const;
  void set_force_gray(bool value);
  private:
  bool _internal_force_gray() const;
  void _internal_set_force_gray(bool value);
  public:

  // optional uint32 img_rand_resize_lower = 10 [default = 0];
  bool has_img_rand_resize_lower() const;
  private:
  bool _internal_has_img_rand_resize_lower() const;
  public:
  void clear_img_rand_resize_lower();
  ::PROTOBUF_NAMESPACE_ID::uint32 img_rand_resize_lower() const;
  void set_img_rand_resize_lower(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_img_rand_resize_lower() const;
  void _internal_set_img_rand_resize_lower(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 img_rand_resize_upper = 11 [default = 0];
  bool has_img_rand_resize_upper() const;
  private:
  bool _internal_has_img_rand_resize_upper() const;
  public:
  void clear_img_rand_resize_upper();
  ::PROTOBUF_NAMESPACE_ID::uint32 img_rand_resize_upper() const;
  void set_img_rand_resize_upper(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_img_rand_resize_upper() const;
  void _internal_set_img_rand_resize_upper(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional float rand_resize_ratio_lower = 12 [default = 0];
  bool has_rand_resize_ratio_lower() const;
  private:
  bool _internal_has_rand_resize_ratio_lower() const;
  public:
  void clear_rand_resize_ratio_lower();
  float rand_resize_ratio_lower() const;
  void set_rand_resize_ratio_lower(float value);
  private:
  float _internal_rand_resize_ratio_lower() const;
  void _internal_set_rand_resize_ratio_lower(float value);
  public:

  // optional float rand_resize_ratio_upper = 13 [default = 0];
  bool has_rand_resize_ratio_upper() const;
  private:
  bool _internal_has_rand_resize_ratio_upper() const;
  public:
  void clear_rand_resize_ratio_upper();
  float rand_resize_ratio_upper() const;
  void set_rand_resize_ratio_upper(float value);
  private:
  float _internal_rand_resize_ratio_upper() const;
  void _internal_set_rand_resize_ratio_upper(float value);
  public:

  // optional .trtcaffe.TransformationParameter.InterpolationAlgo interpolation_algo_down = 18 [default = INTER_NEAREST];
  bool has_interpolation_algo_down() const;
  private:
  bool _internal_has_interpolation_algo_down() const;
  public:
  void clear_interpolation_algo_down();
  ::trtcaffe::TransformationParameter_InterpolationAlgo interpolation_algo_down() const;
  void set_interpolation_algo_down(::trtcaffe::TransformationParameter_InterpolationAlgo value);
  private:
  ::trtcaffe::TransformationParameter_InterpolationAlgo _internal_interpolation_algo_down() const;
  void _internal_set_interpolation_algo_down(::trtcaffe::TransformationParameter_InterpolationAlgo value);
  public:

  // optional float scale = 1 [default = 1];
  bool has_scale() const;
  private:
  bool _internal_has_scale() const;
  public:
  void clear_scale();
  float scale() const;
  void set_scale(float value);
  private:
  float _internal_scale() const;
  void _internal_set_scale(float value);
  public:

  // optional float vertical_stretch_lower = 14 [default = 1];
  bool has_vertical_stretch_lower() const;
  private:
  bool _internal_has_vertical_stretch_lower() const;
  public:
  void clear_vertical_stretch_lower();
  float vertical_stretch_lower() const;
  void set_vertical_stretch_lower(float value);
  private:
  float _internal_vertical_stretch_lower() const;
  void _internal_set_vertical_stretch_lower(float value);
  public:

  // optional int64 random_seed = 9 [default = -1];
  bool has_random_seed() const;
  private:
  bool _internal_has_random_seed() const;
  public:
  void clear_random_seed();
  ::PROTOBUF_NAMESPACE_ID::int64 random_seed() const;
  void set_random_seed(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_random_seed() const;
  void _internal_set_random_seed(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // optional float vertical_stretch_upper = 15 [default = 1];
  bool has_vertical_stretch_upper() const;
  private:
  bool _internal_has_vertical_stretch_upper() const;
  public:
  void clear_vertical_stretch_upper();
  float vertical_stretch_upper() const;
  void set_vertical_stretch_upper(float value);
  private:
  float _internal_vertical_stretch_upper() const;
  void _internal_set_vertical_stretch_upper(float value);
  public:

  // optional float horizontal_stretch_lower = 16 [default = 1];
  bool has_horizontal_stretch_lower() const;
  private:
  bool _internal_has_horizontal_stretch_lower() const;
  public:
  void clear_horizontal_stretch_lower();
  float horizontal_stretch_lower() const;
  void set_horizontal_stretch_lower(float value);
  private:
  float _internal_horizontal_stretch_lower() const;
  void _internal_set_horizontal_stretch_lower(float value);
  public:

  // optional float horizontal_stretch_upper = 17 [default = 1];
  bool has_horizontal_stretch_upper() const;
  private:
  bool _internal_has_horizontal_stretch_upper() const;
  public:
  void clear_horizontal_stretch_upper();
  float horizontal_stretch_upper() const;
  void set_horizontal_stretch_upper(float value);
  private:
  float _internal_horizontal_stretch_upper() const;
  void _internal_set_horizontal_stretch_upper(float value);
  public:

  // optional .trtcaffe.TransformationParameter.InterpolationAlgo interpolation_algo_up = 19 [default = INTER_CUBIC];
  bool has_interpolation_algo_up() const;
  private:
  bool _internal_has_interpolation_algo_up() const;
  public:
  void clear_interpolation_algo_up();
  ::trtcaffe::TransformationParameter_InterpolationAlgo interpolation_algo_up() const;
  void set_interpolation_algo_up(::trtcaffe::TransformationParameter_InterpolationAlgo value);
  private:
  ::trtcaffe::TransformationParameter_InterpolationAlgo _internal_interpolation_algo_up() const;
  void _internal_set_interpolation_algo_up(::trtcaffe::TransformationParameter_InterpolationAlgo value);
  public:

  // @@protoc_insertion_point(class_scope:trtcaffe.TransformationParameter)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > mean_value_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr mean_file_;
  ::PROTOBUF_NAMESPACE_ID::uint32 crop_size_;
  bool use_gpu_transform_;
  bool allow_upscale_;
  bool mirror_;
  bool force_color_;
  bool force_gray_;
  ::PROTOBUF_NAMESPACE_ID::uint32 img_rand_resize_lower_;
  ::PROTOBUF_NAMESPACE_ID::uint32 img_rand_resize_upper_;
  float rand_resize_ratio_lower_;
  float rand_resize_ratio_upper_;
  int interpolation_algo_down_;
  float scale_;
  float vertical_stretch_lower_;
  ::PROTOBUF_NAMESPACE_ID::int64 random_seed_;
  float vertical_stretch_upper_;
  float horizontal_stretch_lower_;
  float horizontal_stretch_upper_;
  int interpolation_algo_up_;
  friend struct ::TableStruct_trtcaffe_2eproto;
};
// -------------------------------------------------------------------

class LossParameter PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:trtcaffe.LossParameter) */ {
 public:
  inline LossParameter() : LossParameter(nullptr) {};
  virtual ~LossParameter();

  LossParameter(const LossParameter& from);
  LossParameter(LossParameter&& from) noexcept
    : LossParameter() {
    *this = ::std::move(from);
  }

  inline LossParameter& operator=(const LossParameter& from) {
    CopyFrom(from);
    return *this;
  }
  inline LossParameter& operator=(LossParameter&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LossParameter& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LossParameter* internal_default_instance() {
    return reinterpret_cast<const LossParameter*>(
               &_LossParameter_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(LossParameter& a, LossParameter& b) {
    a.Swap(&b);
  }
  inline void Swap(LossParameter* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LossParameter* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LossParameter* New() const final {
    return CreateMaybeMessage<LossParameter>(nullptr);
  }

  LossParameter* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LossParameter>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LossParameter& from);
  void MergeFrom(const LossParameter& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LossParameter* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "trtcaffe.LossParameter";
  }
  protected:
  explicit LossParameter(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_trtcaffe_2eproto);
    return ::descriptor_table_trtcaffe_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef LossParameter_NormalizationMode NormalizationMode;
  static constexpr NormalizationMode FULL =
    LossParameter_NormalizationMode_FULL;
  static constexpr NormalizationMode VALID =
    LossParameter_NormalizationMode_VALID;
  static constexpr NormalizationMode BATCH_SIZE =
    LossParameter_NormalizationMode_BATCH_SIZE;
  static constexpr NormalizationMode NONE =
    LossParameter_NormalizationMode_NONE;
  static inline bool NormalizationMode_IsValid(int value) {
    return LossParameter_NormalizationMode_IsValid(value);
  }
  static constexpr NormalizationMode NormalizationMode_MIN =
    LossParameter_NormalizationMode_NormalizationMode_MIN;
  static constexpr NormalizationMode NormalizationMode_MAX =
    LossParameter_NormalizationMode_NormalizationMode_MAX;
  static constexpr int NormalizationMode_ARRAYSIZE =
    LossParameter_NormalizationMode_NormalizationMode_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  NormalizationMode_descriptor() {
    return LossParameter_NormalizationMode_descriptor();
  }
  template<typename T>
  static inline const std::string& NormalizationMode_Name(T enum_t_value) {
    static_assert(::std::is_same<T, NormalizationMode>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function NormalizationMode_Name.");
    return LossParameter_NormalizationMode_Name(enum_t_value);
  }
  static inline bool NormalizationMode_Parse(const std::string& name,
      NormalizationMode* value) {
    return LossParameter_NormalizationMode_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kIgnoreLabelFieldNumber = 1,
    kNormalizeFieldNumber = 2,
    kNormalizationFieldNumber = 3,
  };
  // optional int32 ignore_label = 1;
  bool has_ignore_label() const;
  private:
  bool _internal_has_ignore_label() const;
  public:
  void clear_ignore_label();
  ::PROTOBUF_NAMESPACE_ID::int32 ignore_label() const;
  void set_ignore_label(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_ignore_label() const;
  void _internal_set_ignore_label(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional bool normalize = 2;
  bool has_normalize() const;
  private:
  bool _internal_has_normalize() const;
  public:
  void clear_normalize();
  bool normalize() const;
  void set_normalize(bool value);
  private:
  bool _internal_normalize() const;
  void _internal_set_normalize(bool value);
  public:

  // optional .trtcaffe.LossParameter.NormalizationMode normalization = 3 [default = VALID];
  bool has_normalization() const;
  private:
  bool _internal_has_normalization() const;
  public:
  void clear_normalization();
  ::trtcaffe::LossParameter_NormalizationMode normalization() const;
  void set_normalization(::trtcaffe::LossParameter_NormalizationMode value);
  private:
  ::trtcaffe::LossParameter_NormalizationMode _internal_normalization() const;
  void _internal_set_normalization(::trtcaffe::LossParameter_NormalizationMode value);
  public:

  // @@protoc_insertion_point(class_scope:trtcaffe.LossParameter)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int32 ignore_label_;
  bool normalize_;
  int normalization_;
  friend struct ::TableStruct_trtcaffe_2eproto;
};
// -------------------------------------------------------------------

class AccuracyParameter PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:trtcaffe.AccuracyParameter) */ {
 public:
  inline AccuracyParameter() : AccuracyParameter(nullptr) {};
  virtual ~AccuracyParameter();

  AccuracyParameter(const AccuracyParameter& from);
  AccuracyParameter(AccuracyParameter&& from) noexcept
    : AccuracyParameter() {
    *this = ::std::move(from);
  }

  inline AccuracyParameter& operator=(const AccuracyParameter& from) {
    CopyFrom(from);
    return *this;
  }
  inline AccuracyParameter& operator=(AccuracyParameter&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AccuracyParameter& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AccuracyParameter* internal_default_instance() {
    return reinterpret_cast<const AccuracyParameter*>(
               &_AccuracyParameter_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(AccuracyParameter& a, AccuracyParameter& b) {
    a.Swap(&b);
  }
  inline void Swap(AccuracyParameter* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AccuracyParameter* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AccuracyParameter* New() const final {
    return CreateMaybeMessage<AccuracyParameter>(nullptr);
  }

  AccuracyParameter* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AccuracyParameter>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AccuracyParameter& from);
  void MergeFrom(const AccuracyParameter& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AccuracyParameter* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "trtcaffe.AccuracyParameter";
  }
  protected:
  explicit AccuracyParameter(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_trtcaffe_2eproto);
    return ::descriptor_table_trtcaffe_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIgnoreLabelFieldNumber = 3,
    kTopKFieldNumber = 1,
    kAxisFieldNumber = 2,
  };
  // optional int32 ignore_label = 3;
  bool has_ignore_label() const;
  private:
  bool _internal_has_ignore_label() const;
  public:
  void clear_ignore_label();
  ::PROTOBUF_NAMESPACE_ID::int32 ignore_label() const;
  void set_ignore_label(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_ignore_label() const;
  void _internal_set_ignore_label(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional uint32 top_k = 1 [default = 1];
  bool has_top_k() const;
  private:
  bool _internal_has_top_k() const;
  public:
  void clear_top_k();
  ::PROTOBUF_NAMESPACE_ID::uint32 top_k() const;
  void set_top_k(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_top_k() const;
  void _internal_set_top_k(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional int32 axis = 2 [default = 1];
  bool has_axis() const;
  private:
  bool _internal_has_axis() const;
  public:
  void clear_axis();
  ::PROTOBUF_NAMESPACE_ID::int32 axis() const;
  void set_axis(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_axis() const;
  void _internal_set_axis(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:trtcaffe.AccuracyParameter)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int32 ignore_label_;
  ::PROTOBUF_NAMESPACE_ID::uint32 top_k_;
  ::PROTOBUF_NAMESPACE_ID::int32 axis_;
  friend struct ::TableStruct_trtcaffe_2eproto;
};
// -------------------------------------------------------------------

class ArgMaxParameter PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:trtcaffe.ArgMaxParameter) */ {
 public:
  inline ArgMaxParameter() : ArgMaxParameter(nullptr) {};
  virtual ~ArgMaxParameter();

  ArgMaxParameter(const ArgMaxParameter& from);
  ArgMaxParameter(ArgMaxParameter&& from) noexcept
    : ArgMaxParameter() {
    *this = ::std::move(from);
  }

  inline ArgMaxParameter& operator=(const ArgMaxParameter& from) {
    CopyFrom(from);
    return *this;
  }
  inline ArgMaxParameter& operator=(ArgMaxParameter&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ArgMaxParameter& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ArgMaxParameter* internal_default_instance() {
    return reinterpret_cast<const ArgMaxParameter*>(
               &_ArgMaxParameter_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(ArgMaxParameter& a, ArgMaxParameter& b) {
    a.Swap(&b);
  }
  inline void Swap(ArgMaxParameter* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ArgMaxParameter* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ArgMaxParameter* New() const final {
    return CreateMaybeMessage<ArgMaxParameter>(nullptr);
  }

  ArgMaxParameter* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ArgMaxParameter>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ArgMaxParameter& from);
  void MergeFrom(const ArgMaxParameter& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ArgMaxParameter* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "trtcaffe.ArgMaxParameter";
  }
  protected:
  explicit ArgMaxParameter(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_trtcaffe_2eproto);
    return ::descriptor_table_trtcaffe_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOutMaxValFieldNumber = 1,
    kAxisFieldNumber = 3,
    kTopKFieldNumber = 2,
  };
  // optional bool out_max_val = 1 [default = false];
  bool has_out_max_val() const;
  private:
  bool _internal_has_out_max_val() const;
  public:
  void clear_out_max_val();
  bool out_max_val() const;
  void set_out_max_val(bool value);
  private:
  bool _internal_out_max_val() const;
  void _internal_set_out_max_val(bool value);
  public:

  // optional int32 axis = 3;
  bool has_axis() const;
  private:
  bool _internal_has_axis() const;
  public:
  void clear_axis();
  ::PROTOBUF_NAMESPACE_ID::int32 axis() const;
  void set_axis(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_axis() const;
  void _internal_set_axis(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional uint32 top_k = 2 [default = 1];
  bool has_top_k() const;
  private:
  bool _internal_has_top_k() const;
  public:
  void clear_top_k();
  ::PROTOBUF_NAMESPACE_ID::uint32 top_k() const;
  void set_top_k(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_top_k() const;
  void _internal_set_top_k(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:trtcaffe.ArgMaxParameter)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  bool out_max_val_;
  ::PROTOBUF_NAMESPACE_ID::int32 axis_;
  ::PROTOBUF_NAMESPACE_ID::uint32 top_k_;
  friend struct ::TableStruct_trtcaffe_2eproto;
};
// -------------------------------------------------------------------

class ClipParameter PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:trtcaffe.ClipParameter) */ {
 public:
  inline ClipParameter() : ClipParameter(nullptr) {};
  virtual ~ClipParameter();

  ClipParameter(const ClipParameter& from);
  ClipParameter(ClipParameter&& from) noexcept
    : ClipParameter() {
    *this = ::std::move(from);
  }

  inline ClipParameter& operator=(const ClipParameter& from) {
    CopyFrom(from);
    return *this;
  }
  inline ClipParameter& operator=(ClipParameter&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ClipParameter& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ClipParameter* internal_default_instance() {
    return reinterpret_cast<const ClipParameter*>(
               &_ClipParameter_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(ClipParameter& a, ClipParameter& b) {
    a.Swap(&b);
  }
  inline void Swap(ClipParameter* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ClipParameter* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ClipParameter* New() const final {
    return CreateMaybeMessage<ClipParameter>(nullptr);
  }

  ClipParameter* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ClipParameter>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ClipParameter& from);
  void MergeFrom(const ClipParameter& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ClipParameter* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "trtcaffe.ClipParameter";
  }
  protected:
  explicit ClipParameter(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_trtcaffe_2eproto);
    return ::descriptor_table_trtcaffe_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMinFieldNumber = 1,
    kMaxFieldNumber = 2,
  };
  // required float min = 1;
  bool has_min() const;
  private:
  bool _internal_has_min() const;
  public:
  void clear_min();
  float min() const;
  void set_min(float value);
  private:
  float _internal_min() const;
  void _internal_set_min(float value);
  public:

  // required float max = 2;
  bool has_max() const;
  private:
  bool _internal_has_max() const;
  public:
  void clear_max();
  float max() const;
  void set_max(float value);
  private:
  float _internal_max() const;
  void _internal_set_max(float value);
  public:

  // @@protoc_insertion_point(class_scope:trtcaffe.ClipParameter)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  float min_;
  float max_;
  friend struct ::TableStruct_trtcaffe_2eproto;
};
// -------------------------------------------------------------------

class ConcatParameter PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:trtcaffe.ConcatParameter) */ {
 public:
  inline ConcatParameter() : ConcatParameter(nullptr) {};
  virtual ~ConcatParameter();

  ConcatParameter(const ConcatParameter& from);
  ConcatParameter(ConcatParameter&& from) noexcept
    : ConcatParameter() {
    *this = ::std::move(from);
  }

  inline ConcatParameter& operator=(const ConcatParameter& from) {
    CopyFrom(from);
    return *this;
  }
  inline ConcatParameter& operator=(ConcatParameter&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ConcatParameter& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ConcatParameter* internal_default_instance() {
    return reinterpret_cast<const ConcatParameter*>(
               &_ConcatParameter_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(ConcatParameter& a, ConcatParameter& b) {
    a.Swap(&b);
  }
  inline void Swap(ConcatParameter* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ConcatParameter* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ConcatParameter* New() const final {
    return CreateMaybeMessage<ConcatParameter>(nullptr);
  }

  ConcatParameter* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ConcatParameter>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ConcatParameter& from);
  void MergeFrom(const ConcatParameter& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ConcatParameter* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "trtcaffe.ConcatParameter";
  }
  protected:
  explicit ConcatParameter(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_trtcaffe_2eproto);
    return ::descriptor_table_trtcaffe_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kConcatDimFieldNumber = 1,
    kAxisFieldNumber = 2,
  };
  // optional uint32 concat_dim = 1 [default = 1];
  bool has_concat_dim() const;
  private:
  bool _internal_has_concat_dim() const;
  public:
  void clear_concat_dim();
  ::PROTOBUF_NAMESPACE_ID::uint32 concat_dim() const;
  void set_concat_dim(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_concat_dim() const;
  void _internal_set_concat_dim(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional int32 axis = 2 [default = 1];
  bool has_axis() const;
  private:
  bool _internal_has_axis() const;
  public:
  void clear_axis();
  ::PROTOBUF_NAMESPACE_ID::int32 axis() const;
  void set_axis(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_axis() const;
  void _internal_set_axis(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:trtcaffe.ConcatParameter)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 concat_dim_;
  ::PROTOBUF_NAMESPACE_ID::int32 axis_;
  friend struct ::TableStruct_trtcaffe_2eproto;
};
// -------------------------------------------------------------------

class BatchNormParameter PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:trtcaffe.BatchNormParameter) */ {
 public:
  inline BatchNormParameter() : BatchNormParameter(nullptr) {};
  virtual ~BatchNormParameter();

  BatchNormParameter(const BatchNormParameter& from);
  BatchNormParameter(BatchNormParameter&& from) noexcept
    : BatchNormParameter() {
    *this = ::std::move(from);
  }

  inline BatchNormParameter& operator=(const BatchNormParameter& from) {
    CopyFrom(from);
    return *this;
  }
  inline BatchNormParameter& operator=(BatchNormParameter&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const BatchNormParameter& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BatchNormParameter* internal_default_instance() {
    return reinterpret_cast<const BatchNormParameter*>(
               &_BatchNormParameter_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  friend void swap(BatchNormParameter& a, BatchNormParameter& b) {
    a.Swap(&b);
  }
  inline void Swap(BatchNormParameter* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BatchNormParameter* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BatchNormParameter* New() const final {
    return CreateMaybeMessage<BatchNormParameter>(nullptr);
  }

  BatchNormParameter* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BatchNormParameter>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const BatchNormParameter& from);
  void MergeFrom(const BatchNormParameter& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BatchNormParameter* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "trtcaffe.BatchNormParameter";
  }
  protected:
  explicit BatchNormParameter(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_trtcaffe_2eproto);
    return ::descriptor_table_trtcaffe_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef BatchNormParameter_Engine Engine;
  static constexpr Engine DEFAULT =
    BatchNormParameter_Engine_DEFAULT;
  static constexpr Engine CAFFE =
    BatchNormParameter_Engine_CAFFE;
  static constexpr Engine CUDNN =
    BatchNormParameter_Engine_CUDNN;
  static inline bool Engine_IsValid(int value) {
    return BatchNormParameter_Engine_IsValid(value);
  }
  static constexpr Engine Engine_MIN =
    BatchNormParameter_Engine_Engine_MIN;
  static constexpr Engine Engine_MAX =
    BatchNormParameter_Engine_Engine_MAX;
  static constexpr int Engine_ARRAYSIZE =
    BatchNormParameter_Engine_Engine_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Engine_descriptor() {
    return BatchNormParameter_Engine_descriptor();
  }
  template<typename T>
  static inline const std::string& Engine_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Engine>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Engine_Name.");
    return BatchNormParameter_Engine_Name(enum_t_value);
  }
  static inline bool Engine_Parse(const std::string& name,
      Engine* value) {
    return BatchNormParameter_Engine_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kScaleFillerFieldNumber = 5,
    kBiasFillerFieldNumber = 6,
    kUseGlobalStatsFieldNumber = 1,
    kScaleBiasFieldNumber = 7,
    kEngineFieldNumber = 15,
    kMovingAverageFractionFieldNumber = 2,
    kEpsFieldNumber = 3,
  };
  // optional .trtcaffe.FillerParameter scale_filler = 5;
  bool has_scale_filler() const;
  private:
  bool _internal_has_scale_filler() const;
  public:
  void clear_scale_filler();
  const ::trtcaffe::FillerParameter& scale_filler() const;
  ::trtcaffe::FillerParameter* release_scale_filler();
  ::trtcaffe::FillerParameter* mutable_scale_filler();
  void set_allocated_scale_filler(::trtcaffe::FillerParameter* scale_filler);
  private:
  const ::trtcaffe::FillerParameter& _internal_scale_filler() const;
  ::trtcaffe::FillerParameter* _internal_mutable_scale_filler();
  public:
  void unsafe_arena_set_allocated_scale_filler(
      ::trtcaffe::FillerParameter* scale_filler);
  ::trtcaffe::FillerParameter* unsafe_arena_release_scale_filler();

  // optional .trtcaffe.FillerParameter bias_filler = 6;
  bool has_bias_filler() const;
  private:
  bool _internal_has_bias_filler() const;
  public:
  void clear_bias_filler();
  const ::trtcaffe::FillerParameter& bias_filler() const;
  ::trtcaffe::FillerParameter* release_bias_filler();
  ::trtcaffe::FillerParameter* mutable_bias_filler();
  void set_allocated_bias_filler(::trtcaffe::FillerParameter* bias_filler);
  private:
  const ::trtcaffe::FillerParameter& _internal_bias_filler() const;
  ::trtcaffe::FillerParameter* _internal_mutable_bias_filler();
  public:
  void unsafe_arena_set_allocated_bias_filler(
      ::trtcaffe::FillerParameter* bias_filler);
  ::trtcaffe::FillerParameter* unsafe_arena_release_bias_filler();

  // optional bool use_global_stats = 1 [default = false];
  bool has_use_global_stats() const;
  private:
  bool _internal_has_use_global_stats() const;
  public:
  void clear_use_global_stats();
  bool use_global_stats() const;
  void set_use_global_stats(bool value);
  private:
  bool _internal_use_global_stats() const;
  void _internal_set_use_global_stats(bool value);
  public:

  // optional bool scale_bias = 7 [default = false];
  bool has_scale_bias() const;
  private:
  bool _internal_has_scale_bias() const;
  public:
  void clear_scale_bias();
  bool scale_bias() const;
  void set_scale_bias(bool value);
  private:
  bool _internal_scale_bias() const;
  void _internal_set_scale_bias(bool value);
  public:

  // optional .trtcaffe.BatchNormParameter.Engine engine = 15 [default = DEFAULT];
  bool has_engine() const;
  private:
  bool _internal_has_engine() const;
  public:
  void clear_engine();
  ::trtcaffe::BatchNormParameter_Engine engine() const;
  void set_engine(::trtcaffe::BatchNormParameter_Engine value);
  private:
  ::trtcaffe::BatchNormParameter_Engine _internal_engine() const;
  void _internal_set_engine(::trtcaffe::BatchNormParameter_Engine value);
  public:

  // optional float moving_average_fraction = 2 [default = 0.999];
  bool has_moving_average_fraction() const;
  private:
  bool _internal_has_moving_average_fraction() const;
  public:
  void clear_moving_average_fraction();
  float moving_average_fraction() const;
  void set_moving_average_fraction(float value);
  private:
  float _internal_moving_average_fraction() const;
  void _internal_set_moving_average_fraction(float value);
  public:

  // optional float eps = 3 [default = 1e-05];
  bool has_eps() const;
  private:
  bool _internal_has_eps() const;
  public:
  void clear_eps();
  float eps() const;
  void set_eps(float value);
  private:
  float _internal_eps() const;
  void _internal_set_eps(float value);
  public:

  // @@protoc_insertion_point(class_scope:trtcaffe.BatchNormParameter)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::trtcaffe::FillerParameter* scale_filler_;
  ::trtcaffe::FillerParameter* bias_filler_;
  bool use_global_stats_;
  bool scale_bias_;
  int engine_;
  float moving_average_fraction_;
  float eps_;
  friend struct ::TableStruct_trtcaffe_2eproto;
};
// -------------------------------------------------------------------

class BiasParameter PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:trtcaffe.BiasParameter) */ {
 public:
  inline BiasParameter() : BiasParameter(nullptr) {};
  virtual ~BiasParameter();

  BiasParameter(const BiasParameter& from);
  BiasParameter(BiasParameter&& from) noexcept
    : BiasParameter() {
    *this = ::std::move(from);
  }

  inline BiasParameter& operator=(const BiasParameter& from) {
    CopyFrom(from);
    return *this;
  }
  inline BiasParameter& operator=(BiasParameter&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const BiasParameter& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BiasParameter* internal_default_instance() {
    return reinterpret_cast<const BiasParameter*>(
               &_BiasParameter_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  friend void swap(BiasParameter& a, BiasParameter& b) {
    a.Swap(&b);
  }
  inline void Swap(BiasParameter* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BiasParameter* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BiasParameter* New() const final {
    return CreateMaybeMessage<BiasParameter>(nullptr);
  }

  BiasParameter* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BiasParameter>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const BiasParameter& from);
  void MergeFrom(const BiasParameter& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BiasParameter* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "trtcaffe.BiasParameter";
  }
  protected:
  explicit BiasParameter(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_trtcaffe_2eproto);
    return ::descriptor_table_trtcaffe_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFillerFieldNumber = 3,
    kAxisFieldNumber = 1,
    kNumAxesFieldNumber = 2,
  };
  // optional .trtcaffe.FillerParameter filler = 3;
  bool has_filler() const;
  private:
  bool _internal_has_filler() const;
  public:
  void clear_filler();
  const ::trtcaffe::FillerParameter& filler() const;
  ::trtcaffe::FillerParameter* release_filler();
  ::trtcaffe::FillerParameter* mutable_filler();
  void set_allocated_filler(::trtcaffe::FillerParameter* filler);
  private:
  const ::trtcaffe::FillerParameter& _internal_filler() const;
  ::trtcaffe::FillerParameter* _internal_mutable_filler();
  public:
  void unsafe_arena_set_allocated_filler(
      ::trtcaffe::FillerParameter* filler);
  ::trtcaffe::FillerParameter* unsafe_arena_release_filler();

  // optional int32 axis = 1 [default = 1];
  bool has_axis() const;
  private:
  bool _internal_has_axis() const;
  public:
  void clear_axis();
  ::PROTOBUF_NAMESPACE_ID::int32 axis() const;
  void set_axis(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_axis() const;
  void _internal_set_axis(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 num_axes = 2 [default = 1];
  bool has_num_axes() const;
  private:
  bool _internal_has_num_axes() const;
  public:
  void clear_num_axes();
  ::PROTOBUF_NAMESPACE_ID::int32 num_axes() const;
  void set_num_axes(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_num_axes() const;
  void _internal_set_num_axes(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:trtcaffe.BiasParameter)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::trtcaffe::FillerParameter* filler_;
  ::PROTOBUF_NAMESPACE_ID::int32 axis_;
  ::PROTOBUF_NAMESPACE_ID::int32 num_axes_;
  friend struct ::TableStruct_trtcaffe_2eproto;
};
// -------------------------------------------------------------------

class ContrastiveLossParameter PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:trtcaffe.ContrastiveLossParameter) */ {
 public:
  inline ContrastiveLossParameter() : ContrastiveLossParameter(nullptr) {};
  virtual ~ContrastiveLossParameter();

  ContrastiveLossParameter(const ContrastiveLossParameter& from);
  ContrastiveLossParameter(ContrastiveLossParameter&& from) noexcept
    : ContrastiveLossParameter() {
    *this = ::std::move(from);
  }

  inline ContrastiveLossParameter& operator=(const ContrastiveLossParameter& from) {
    CopyFrom(from);
    return *this;
  }
  inline ContrastiveLossParameter& operator=(ContrastiveLossParameter&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ContrastiveLossParameter& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ContrastiveLossParameter* internal_default_instance() {
    return reinterpret_cast<const ContrastiveLossParameter*>(
               &_ContrastiveLossParameter_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  friend void swap(ContrastiveLossParameter& a, ContrastiveLossParameter& b) {
    a.Swap(&b);
  }
  inline void Swap(ContrastiveLossParameter* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ContrastiveLossParameter* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ContrastiveLossParameter* New() const final {
    return CreateMaybeMessage<ContrastiveLossParameter>(nullptr);
  }

  ContrastiveLossParameter* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ContrastiveLossParameter>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ContrastiveLossParameter& from);
  void MergeFrom(const ContrastiveLossParameter& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ContrastiveLossParameter* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "trtcaffe.ContrastiveLossParameter";
  }
  protected:
  explicit ContrastiveLossParameter(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_trtcaffe_2eproto);
    return ::descriptor_table_trtcaffe_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLegacyVersionFieldNumber = 2,
    kMarginFieldNumber = 1,
  };
  // optional bool legacy_version = 2 [default = false];
  bool has_legacy_version() const;
  private:
  bool _internal_has_legacy_version() const;
  public:
  void clear_legacy_version();
  bool legacy_version() const;
  void set_legacy_version(bool value);
  private:
  bool _internal_legacy_version() const;
  void _internal_set_legacy_version(bool value);
  public:

  // optional float margin = 1 [default = 1];
  bool has_margin() const;
  private:
  bool _internal_has_margin() const;
  public:
  void clear_margin();
  float margin() const;
  void set_margin(float value);
  private:
  float _internal_margin() const;
  void _internal_set_margin(float value);
  public:

  // @@protoc_insertion_point(class_scope:trtcaffe.ContrastiveLossParameter)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  bool legacy_version_;
  float margin_;
  friend struct ::TableStruct_trtcaffe_2eproto;
};
// -------------------------------------------------------------------

class ConvolutionParameter PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:trtcaffe.ConvolutionParameter) */ {
 public:
  inline ConvolutionParameter() : ConvolutionParameter(nullptr) {};
  virtual ~ConvolutionParameter();

  ConvolutionParameter(const ConvolutionParameter& from);
  ConvolutionParameter(ConvolutionParameter&& from) noexcept
    : ConvolutionParameter() {
    *this = ::std::move(from);
  }

  inline ConvolutionParameter& operator=(const ConvolutionParameter& from) {
    CopyFrom(from);
    return *this;
  }
  inline ConvolutionParameter& operator=(ConvolutionParameter&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ConvolutionParameter& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ConvolutionParameter* internal_default_instance() {
    return reinterpret_cast<const ConvolutionParameter*>(
               &_ConvolutionParameter_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    21;

  friend void swap(ConvolutionParameter& a, ConvolutionParameter& b) {
    a.Swap(&b);
  }
  inline void Swap(ConvolutionParameter* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ConvolutionParameter* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ConvolutionParameter* New() const final {
    return CreateMaybeMessage<ConvolutionParameter>(nullptr);
  }

  ConvolutionParameter* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ConvolutionParameter>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ConvolutionParameter& from);
  void MergeFrom(const ConvolutionParameter& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ConvolutionParameter* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "trtcaffe.ConvolutionParameter";
  }
  protected:
  explicit ConvolutionParameter(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_trtcaffe_2eproto);
    return ::descriptor_table_trtcaffe_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef ConvolutionParameter_Engine Engine;
  static constexpr Engine DEFAULT =
    ConvolutionParameter_Engine_DEFAULT;
  static constexpr Engine CAFFE =
    ConvolutionParameter_Engine_CAFFE;
  static constexpr Engine CUDNN =
    ConvolutionParameter_Engine_CUDNN;
  static inline bool Engine_IsValid(int value) {
    return ConvolutionParameter_Engine_IsValid(value);
  }
  static constexpr Engine Engine_MIN =
    ConvolutionParameter_Engine_Engine_MIN;
  static constexpr Engine Engine_MAX =
    ConvolutionParameter_Engine_Engine_MAX;
  static constexpr int Engine_ARRAYSIZE =
    ConvolutionParameter_Engine_Engine_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Engine_descriptor() {
    return ConvolutionParameter_Engine_descriptor();
  }
  template<typename T>
  static inline const std::string& Engine_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Engine>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Engine_Name.");
    return ConvolutionParameter_Engine_Name(enum_t_value);
  }
  static inline bool Engine_Parse(const std::string& name,
      Engine* value) {
    return ConvolutionParameter_Engine_Parse(name, value);
  }

  typedef ConvolutionParameter_CuDNNConvolutionAlgorithmSeeker CuDNNConvolutionAlgorithmSeeker;
  static constexpr CuDNNConvolutionAlgorithmSeeker GET =
    ConvolutionParameter_CuDNNConvolutionAlgorithmSeeker_GET;
  static constexpr CuDNNConvolutionAlgorithmSeeker FINDEX =
    ConvolutionParameter_CuDNNConvolutionAlgorithmSeeker_FINDEX;
  static inline bool CuDNNConvolutionAlgorithmSeeker_IsValid(int value) {
    return ConvolutionParameter_CuDNNConvolutionAlgorithmSeeker_IsValid(value);
  }
  static constexpr CuDNNConvolutionAlgorithmSeeker CuDNNConvolutionAlgorithmSeeker_MIN =
    ConvolutionParameter_CuDNNConvolutionAlgorithmSeeker_CuDNNConvolutionAlgorithmSeeker_MIN;
  static constexpr CuDNNConvolutionAlgorithmSeeker CuDNNConvolutionAlgorithmSeeker_MAX =
    ConvolutionParameter_CuDNNConvolutionAlgorithmSeeker_CuDNNConvolutionAlgorithmSeeker_MAX;
  static constexpr int CuDNNConvolutionAlgorithmSeeker_ARRAYSIZE =
    ConvolutionParameter_CuDNNConvolutionAlgorithmSeeker_CuDNNConvolutionAlgorithmSeeker_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  CuDNNConvolutionAlgorithmSeeker_descriptor() {
    return ConvolutionParameter_CuDNNConvolutionAlgorithmSeeker_descriptor();
  }
  template<typename T>
  static inline const std::string& CuDNNConvolutionAlgorithmSeeker_Name(T enum_t_value) {
    static_assert(::std::is_same<T, CuDNNConvolutionAlgorithmSeeker>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function CuDNNConvolutionAlgorithmSeeker_Name.");
    return ConvolutionParameter_CuDNNConvolutionAlgorithmSeeker_Name(enum_t_value);
  }
  static inline bool CuDNNConvolutionAlgorithmSeeker_Parse(const std::string& name,
      CuDNNConvolutionAlgorithmSeeker* value) {
    return ConvolutionParameter_CuDNNConvolutionAlgorithmSeeker_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kPadFieldNumber = 3,
    kKernelSizeFieldNumber = 4,
    kStrideFieldNumber = 6,
    kDilationFieldNumber = 18,
    kConvAlgosOverrideFieldNumber = 20,
    kWeightFillerFieldNumber = 7,
    kBiasFillerFieldNumber = 8,
    kNumOutputFieldNumber = 1,
    kPadHFieldNumber = 9,
    kPadWFieldNumber = 10,
    kKernelHFieldNumber = 11,
    kKernelWFieldNumber = 12,
    kStrideHFieldNumber = 13,
    kStrideWFieldNumber = 14,
    kEngineFieldNumber = 15,
    kForceNdIm2ColFieldNumber = 17,
    kBiasTermFieldNumber = 2,
    kGroupFieldNumber = 5,
    kAxisFieldNumber = 16,
    kCudnnConvolutionAlgoSeekerFieldNumber = 19,
  };
  // repeated uint32 pad = 3;
  int pad_size() const;
  private:
  int _internal_pad_size() const;
  public:
  void clear_pad();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_pad(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      _internal_pad() const;
  void _internal_add_pad(::PROTOBUF_NAMESPACE_ID::uint32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      _internal_mutable_pad();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint32 pad(int index) const;
  void set_pad(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value);
  void add_pad(::PROTOBUF_NAMESPACE_ID::uint32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      pad() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      mutable_pad();

  // repeated uint32 kernel_size = 4;
  int kernel_size_size() const;
  private:
  int _internal_kernel_size_size() const;
  public:
  void clear_kernel_size();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_kernel_size(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      _internal_kernel_size() const;
  void _internal_add_kernel_size(::PROTOBUF_NAMESPACE_ID::uint32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      _internal_mutable_kernel_size();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint32 kernel_size(int index) const;
  void set_kernel_size(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value);
  void add_kernel_size(::PROTOBUF_NAMESPACE_ID::uint32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      kernel_size() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      mutable_kernel_size();

  // repeated uint32 stride = 6;
  int stride_size() const;
  private:
  int _internal_stride_size() const;
  public:
  void clear_stride();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_stride(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      _internal_stride() const;
  void _internal_add_stride(::PROTOBUF_NAMESPACE_ID::uint32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      _internal_mutable_stride();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint32 stride(int index) const;
  void set_stride(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value);
  void add_stride(::PROTOBUF_NAMESPACE_ID::uint32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      stride() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      mutable_stride();

  // repeated uint32 dilation = 18;
  int dilation_size() const;
  private:
  int _internal_dilation_size() const;
  public:
  void clear_dilation();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_dilation(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      _internal_dilation() const;
  void _internal_add_dilation(::PROTOBUF_NAMESPACE_ID::uint32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      _internal_mutable_dilation();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint32 dilation(int index) const;
  void set_dilation(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value);
  void add_dilation(::PROTOBUF_NAMESPACE_ID::uint32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      dilation() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      mutable_dilation();

  // optional string conv_algos_override = 20 [default = "-1,-1,-1"];
  bool has_conv_algos_override() const;
  private:
  bool _internal_has_conv_algos_override() const;
  public:
  void clear_conv_algos_override();
  const std::string& conv_algos_override() const;
  void set_conv_algos_override(const std::string& value);
  void set_conv_algos_override(std::string&& value);
  void set_conv_algos_override(const char* value);
  void set_conv_algos_override(const char* value, size_t size);
  std::string* mutable_conv_algos_override();
  std::string* release_conv_algos_override();
  void set_allocated_conv_algos_override(std::string* conv_algos_override);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_conv_algos_override();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_conv_algos_override(
      std::string* conv_algos_override);
  private:
  const std::string& _internal_conv_algos_override() const;
  void _internal_set_conv_algos_override(const std::string& value);
  std::string* _internal_mutable_conv_algos_override();
  public:

  // optional .trtcaffe.FillerParameter weight_filler = 7;
  bool has_weight_filler() const;
  private:
  bool _internal_has_weight_filler() const;
  public:
  void clear_weight_filler();
  const ::trtcaffe::FillerParameter& weight_filler() const;
  ::trtcaffe::FillerParameter* release_weight_filler();
  ::trtcaffe::FillerParameter* mutable_weight_filler();
  void set_allocated_weight_filler(::trtcaffe::FillerParameter* weight_filler);
  private:
  const ::trtcaffe::FillerParameter& _internal_weight_filler() const;
  ::trtcaffe::FillerParameter* _internal_mutable_weight_filler();
  public:
  void unsafe_arena_set_allocated_weight_filler(
      ::trtcaffe::FillerParameter* weight_filler);
  ::trtcaffe::FillerParameter* unsafe_arena_release_weight_filler();

  // optional .trtcaffe.FillerParameter bias_filler = 8;
  bool has_bias_filler() const;
  private:
  bool _internal_has_bias_filler() const;
  public:
  void clear_bias_filler();
  const ::trtcaffe::FillerParameter& bias_filler() const;
  ::trtcaffe::FillerParameter* release_bias_filler();
  ::trtcaffe::FillerParameter* mutable_bias_filler();
  void set_allocated_bias_filler(::trtcaffe::FillerParameter* bias_filler);
  private:
  const ::trtcaffe::FillerParameter& _internal_bias_filler() const;
  ::trtcaffe::FillerParameter* _internal_mutable_bias_filler();
  public:
  void unsafe_arena_set_allocated_bias_filler(
      ::trtcaffe::FillerParameter* bias_filler);
  ::trtcaffe::FillerParameter* unsafe_arena_release_bias_filler();

  // optional uint32 num_output = 1;
  bool has_num_output() const;
  private:
  bool _internal_has_num_output() const;
  public:
  void clear_num_output();
  ::PROTOBUF_NAMESPACE_ID::uint32 num_output() const;
  void set_num_output(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_num_output() const;
  void _internal_set_num_output(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 pad_h = 9 [default = 0];
  bool has_pad_h() const;
  private:
  bool _internal_has_pad_h() const;
  public:
  void clear_pad_h();
  ::PROTOBUF_NAMESPACE_ID::uint32 pad_h() const;
  void set_pad_h(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_pad_h() const;
  void _internal_set_pad_h(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 pad_w = 10 [default = 0];
  bool has_pad_w() const;
  private:
  bool _internal_has_pad_w() const;
  public:
  void clear_pad_w();
  ::PROTOBUF_NAMESPACE_ID::uint32 pad_w() const;
  void set_pad_w(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_pad_w() const;
  void _internal_set_pad_w(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 kernel_h = 11;
  bool has_kernel_h() const;
  private:
  bool _internal_has_kernel_h() const;
  public:
  void clear_kernel_h();
  ::PROTOBUF_NAMESPACE_ID::uint32 kernel_h() const;
  void set_kernel_h(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_kernel_h() const;
  void _internal_set_kernel_h(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 kernel_w = 12;
  bool has_kernel_w() const;
  private:
  bool _internal_has_kernel_w() const;
  public:
  void clear_kernel_w();
  ::PROTOBUF_NAMESPACE_ID::uint32 kernel_w() const;
  void set_kernel_w(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_kernel_w() const;
  void _internal_set_kernel_w(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 stride_h = 13;
  bool has_stride_h() const;
  private:
  bool _internal_has_stride_h() const;
  public:
  void clear_stride_h();
  ::PROTOBUF_NAMESPACE_ID::uint32 stride_h() const;
  void set_stride_h(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_stride_h() const;
  void _internal_set_stride_h(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 stride_w = 14;
  bool has_stride_w() const;
  private:
  bool _internal_has_stride_w() const;
  public:
  void clear_stride_w();
  ::PROTOBUF_NAMESPACE_ID::uint32 stride_w() const;
  void set_stride_w(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_stride_w() const;
  void _internal_set_stride_w(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional .trtcaffe.ConvolutionParameter.Engine engine = 15 [default = DEFAULT];
  bool has_engine() const;
  private:
  bool _internal_has_engine() const;
  public:
  void clear_engine();
  ::trtcaffe::ConvolutionParameter_Engine engine() const;
  void set_engine(::trtcaffe::ConvolutionParameter_Engine value);
  private:
  ::trtcaffe::ConvolutionParameter_Engine _internal_engine() const;
  void _internal_set_engine(::trtcaffe::ConvolutionParameter_Engine value);
  public:

  // optional bool force_nd_im2col = 17 [default = false];
  bool has_force_nd_im2col() const;
  private:
  bool _internal_has_force_nd_im2col() const;
  public:
  void clear_force_nd_im2col();
  bool force_nd_im2col() const;
  void set_force_nd_im2col(bool value);
  private:
  bool _internal_force_nd_im2col() const;
  void _internal_set_force_nd_im2col(bool value);
  public:

  // optional bool bias_term = 2 [default = true];
  bool has_bias_term() const;
  private:
  bool _internal_has_bias_term() const;
  public:
  void clear_bias_term();
  bool bias_term() const;
  void set_bias_term(bool value);
  private:
  bool _internal_bias_term() const;
  void _internal_set_bias_term(bool value);
  public:

  // optional uint32 group = 5 [default = 1];
  bool has_group() const;
  private:
  bool _internal_has_group() const;
  public:
  void clear_group();
  ::PROTOBUF_NAMESPACE_ID::uint32 group() const;
  void set_group(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_group() const;
  void _internal_set_group(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional int32 axis = 16 [default = 1];
  bool has_axis() const;
  private:
  bool _internal_has_axis() const;
  public:
  void clear_axis();
  ::PROTOBUF_NAMESPACE_ID::int32 axis() const;
  void set_axis(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_axis() const;
  void _internal_set_axis(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional .trtcaffe.ConvolutionParameter.CuDNNConvolutionAlgorithmSeeker cudnn_convolution_algo_seeker = 19 [default = FINDEX];
  bool has_cudnn_convolution_algo_seeker() const;
  private:
  bool _internal_has_cudnn_convolution_algo_seeker() const;
  public:
  void clear_cudnn_convolution_algo_seeker();
  ::trtcaffe::ConvolutionParameter_CuDNNConvolutionAlgorithmSeeker cudnn_convolution_algo_seeker() const;
  void set_cudnn_convolution_algo_seeker(::trtcaffe::ConvolutionParameter_CuDNNConvolutionAlgorithmSeeker value);
  private:
  ::trtcaffe::ConvolutionParameter_CuDNNConvolutionAlgorithmSeeker _internal_cudnn_convolution_algo_seeker() const;
  void _internal_set_cudnn_convolution_algo_seeker(::trtcaffe::ConvolutionParameter_CuDNNConvolutionAlgorithmSeeker value);
  public:

  // @@protoc_insertion_point(class_scope:trtcaffe.ConvolutionParameter)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 > pad_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 > kernel_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 > stride_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 > dilation_;
  public:
  static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> _i_give_permission_to_break_this_code_default_conv_algos_override_;
  private:
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr conv_algos_override_;
  ::trtcaffe::FillerParameter* weight_filler_;
  ::trtcaffe::FillerParameter* bias_filler_;
  ::PROTOBUF_NAMESPACE_ID::uint32 num_output_;
  ::PROTOBUF_NAMESPACE_ID::uint32 pad_h_;
  ::PROTOBUF_NAMESPACE_ID::uint32 pad_w_;
  ::PROTOBUF_NAMESPACE_ID::uint32 kernel_h_;
  ::PROTOBUF_NAMESPACE_ID::uint32 kernel_w_;
  ::PROTOBUF_NAMESPACE_ID::uint32 stride_h_;
  ::PROTOBUF_NAMESPACE_ID::uint32 stride_w_;
  int engine_;
  bool force_nd_im2col_;
  bool bias_term_;
  ::PROTOBUF_NAMESPACE_ID::uint32 group_;
  ::PROTOBUF_NAMESPACE_ID::int32 axis_;
  int cudnn_convolution_algo_seeker_;
  friend struct ::TableStruct_trtcaffe_2eproto;
};
// -------------------------------------------------------------------

class CropParameter PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:trtcaffe.CropParameter) */ {
 public:
  inline CropParameter() : CropParameter(nullptr) {};
  virtual ~CropParameter();

  CropParameter(const CropParameter& from);
  CropParameter(CropParameter&& from) noexcept
    : CropParameter() {
    *this = ::std::move(from);
  }

  inline CropParameter& operator=(const CropParameter& from) {
    CopyFrom(from);
    return *this;
  }
  inline CropParameter& operator=(CropParameter&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CropParameter& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CropParameter* internal_default_instance() {
    return reinterpret_cast<const CropParameter*>(
               &_CropParameter_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    22;

  friend void swap(CropParameter& a, CropParameter& b) {
    a.Swap(&b);
  }
  inline void Swap(CropParameter* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CropParameter* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CropParameter* New() const final {
    return CreateMaybeMessage<CropParameter>(nullptr);
  }

  CropParameter* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CropParameter>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CropParameter& from);
  void MergeFrom(const CropParameter& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CropParameter* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "trtcaffe.CropParameter";
  }
  protected:
  explicit CropParameter(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_trtcaffe_2eproto);
    return ::descriptor_table_trtcaffe_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOffsetFieldNumber = 2,
    kAxisFieldNumber = 1,
  };
  // repeated uint32 offset = 2;
  int offset_size() const;
  private:
  int _internal_offset_size() const;
  public:
  void clear_offset();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_offset(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      _internal_offset() const;
  void _internal_add_offset(::PROTOBUF_NAMESPACE_ID::uint32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      _internal_mutable_offset();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint32 offset(int index) const;
  void set_offset(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value);
  void add_offset(::PROTOBUF_NAMESPACE_ID::uint32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      offset() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      mutable_offset();

  // optional int32 axis = 1 [default = 2];
  bool has_axis() const;
  private:
  bool _internal_has_axis() const;
  public:
  void clear_axis();
  ::PROTOBUF_NAMESPACE_ID::int32 axis() const;
  void set_axis(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_axis() const;
  void _internal_set_axis(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:trtcaffe.CropParameter)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 > offset_;
  ::PROTOBUF_NAMESPACE_ID::int32 axis_;
  friend struct ::TableStruct_trtcaffe_2eproto;
};
// -------------------------------------------------------------------

class DataParameter PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:trtcaffe.DataParameter) */ {
 public:
  inline DataParameter() : DataParameter(nullptr) {};
  virtual ~DataParameter();

  DataParameter(const DataParameter& from);
  DataParameter(DataParameter&& from) noexcept
    : DataParameter() {
    *this = ::std::move(from);
  }

  inline DataParameter& operator=(const DataParameter& from) {
    CopyFrom(from);
    return *this;
  }
  inline DataParameter& operator=(DataParameter&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DataParameter& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DataParameter* internal_default_instance() {
    return reinterpret_cast<const DataParameter*>(
               &_DataParameter_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    23;

  friend void swap(DataParameter& a, DataParameter& b) {
    a.Swap(&b);
  }
  inline void Swap(DataParameter* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DataParameter* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DataParameter* New() const final {
    return CreateMaybeMessage<DataParameter>(nullptr);
  }

  DataParameter* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DataParameter>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DataParameter& from);
  void MergeFrom(const DataParameter& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DataParameter* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "trtcaffe.DataParameter";
  }
  protected:
  explicit DataParameter(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_trtcaffe_2eproto);
    return ::descriptor_table_trtcaffe_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef DataParameter_DB DB;
  static constexpr DB LEVELDB =
    DataParameter_DB_LEVELDB;
  static constexpr DB LMDB =
    DataParameter_DB_LMDB;
  static inline bool DB_IsValid(int value) {
    return DataParameter_DB_IsValid(value);
  }
  static constexpr DB DB_MIN =
    DataParameter_DB_DB_MIN;
  static constexpr DB DB_MAX =
    DataParameter_DB_DB_MAX;
  static constexpr int DB_ARRAYSIZE =
    DataParameter_DB_DB_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  DB_descriptor() {
    return DataParameter_DB_descriptor();
  }
  template<typename T>
  static inline const std::string& DB_Name(T enum_t_value) {
    static_assert(::std::is_same<T, DB>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function DB_Name.");
    return DataParameter_DB_Name(enum_t_value);
  }
  static inline bool DB_Parse(const std::string& name,
      DB* value) {
    return DataParameter_DB_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kSourceFieldNumber = 1,
    kMeanFileFieldNumber = 3,
    kBatchSizeFieldNumber = 4,
    kCropSizeFieldNumber = 5,
    kRandSkipFieldNumber = 7,
    kBackendFieldNumber = 8,
    kPrefetchFieldNumber = 10,
    kMirrorFieldNumber = 6,
    kForceEncodedColorFieldNumber = 9,
    kCacheFieldNumber = 13,
    kShuffleFieldNumber = 14,
    kThreadsFieldNumber = 11,
    kParserThreadsFieldNumber = 12,
    kScaleFieldNumber = 2,
  };
  // optional string source = 1;
  bool has_source() const;
  private:
  bool _internal_has_source() const;
  public:
  void clear_source();
  const std::string& source() const;
  void set_source(const std::string& value);
  void set_source(std::string&& value);
  void set_source(const char* value);
  void set_source(const char* value, size_t size);
  std::string* mutable_source();
  std::string* release_source();
  void set_allocated_source(std::string* source);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_source();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_source(
      std::string* source);
  private:
  const std::string& _internal_source() const;
  void _internal_set_source(const std::string& value);
  std::string* _internal_mutable_source();
  public:

  // optional string mean_file = 3;
  bool has_mean_file() const;
  private:
  bool _internal_has_mean_file() const;
  public:
  void clear_mean_file();
  const std::string& mean_file() const;
  void set_mean_file(const std::string& value);
  void set_mean_file(std::string&& value);
  void set_mean_file(const char* value);
  void set_mean_file(const char* value, size_t size);
  std::string* mutable_mean_file();
  std::string* release_mean_file();
  void set_allocated_mean_file(std::string* mean_file);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_mean_file();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_mean_file(
      std::string* mean_file);
  private:
  const std::string& _internal_mean_file() const;
  void _internal_set_mean_file(const std::string& value);
  std::string* _internal_mutable_mean_file();
  public:

  // optional uint32 batch_size = 4;
  bool has_batch_size() const;
  private:
  bool _internal_has_batch_size() const;
  public:
  void clear_batch_size();
  ::PROTOBUF_NAMESPACE_ID::uint32 batch_size() const;
  void set_batch_size(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_batch_size() const;
  void _internal_set_batch_size(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 crop_size = 5 [default = 0];
  bool has_crop_size() const;
  private:
  bool _internal_has_crop_size() const;
  public:
  void clear_crop_size();
  ::PROTOBUF_NAMESPACE_ID::uint32 crop_size() const;
  void set_crop_size(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_crop_size() const;
  void _internal_set_crop_size(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 rand_skip = 7 [default = 0];
  bool has_rand_skip() const;
  private:
  bool _internal_has_rand_skip() const;
  public:
  void clear_rand_skip();
  ::PROTOBUF_NAMESPACE_ID::uint32 rand_skip() const;
  void set_rand_skip(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_rand_skip() const;
  void _internal_set_rand_skip(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional .trtcaffe.DataParameter.DB backend = 8 [default = LEVELDB];
  bool has_backend() const;
  private:
  bool _internal_has_backend() const;
  public:
  void clear_backend();
  ::trtcaffe::DataParameter_DB backend() const;
  void set_backend(::trtcaffe::DataParameter_DB value);
  private:
  ::trtcaffe::DataParameter_DB _internal_backend() const;
  void _internal_set_backend(::trtcaffe::DataParameter_DB value);
  public:

  // optional uint32 prefetch = 10 [default = 0];
  bool has_prefetch() const;
  private:
  bool _internal_has_prefetch() const;
  public:
  void clear_prefetch();
  ::PROTOBUF_NAMESPACE_ID::uint32 prefetch() const;
  void set_prefetch(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_prefetch() const;
  void _internal_set_prefetch(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional bool mirror = 6 [default = false];
  bool has_mirror() const;
  private:
  bool _internal_has_mirror() const;
  public:
  void clear_mirror();
  bool mirror() const;
  void set_mirror(bool value);
  private:
  bool _internal_mirror() const;
  void _internal_set_mirror(bool value);
  public:

  // optional bool force_encoded_color = 9 [default = false];
  bool has_force_encoded_color() const;
  private:
  bool _internal_has_force_encoded_color() const;
  public:
  void clear_force_encoded_color();
  bool force_encoded_color() const;
  void set_force_encoded_color(bool value);
  private:
  bool _internal_force_encoded_color() const;
  void _internal_set_force_encoded_color(bool value);
  public:

  // optional bool cache = 13 [default = false];
  bool has_cache() const;
  private:
  bool _internal_has_cache() const;
  public:
  void clear_cache();
  bool cache() const;
  void set_cache(bool value);
  private:
  bool _internal_cache() const;
  void _internal_set_cache(bool value);
  public:

  // optional bool shuffle = 14 [default = false];
  bool has_shuffle() const;
  private:
  bool _internal_has_shuffle() const;
  public:
  void clear_shuffle();
  bool shuffle() const;
  void set_shuffle(bool value);
  private:
  bool _internal_shuffle() const;
  void _internal_set_shuffle(bool value);
  public:

  // optional uint32 threads = 11 [default = 0];
  bool has_threads() const;
  private:
  bool _internal_has_threads() const;
  public:
  void clear_threads();
  ::PROTOBUF_NAMESPACE_ID::uint32 threads() const;
  void set_threads(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_threads() const;
  void _internal_set_threads(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 parser_threads = 12 [default = 0];
  bool has_parser_threads() const;
  private:
  bool _internal_has_parser_threads() const;
  public:
  void clear_parser_threads();
  ::PROTOBUF_NAMESPACE_ID::uint32 parser_threads() const;
  void set_parser_threads(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_parser_threads() const;
  void _internal_set_parser_threads(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional float scale = 2 [default = 1];
  bool has_scale() const;
  private:
  bool _internal_has_scale() const;
  public:
  void clear_scale();
  float scale() const;
  void set_scale(float value);
  private:
  float _internal_scale() const;
  void _internal_set_scale(float value);
  public:

  // @@protoc_insertion_point(class_scope:trtcaffe.DataParameter)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr source_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr mean_file_;
  ::PROTOBUF_NAMESPACE_ID::uint32 batch_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 crop_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 rand_skip_;
  int backend_;
  ::PROTOBUF_NAMESPACE_ID::uint32 prefetch_;
  bool mirror_;
  bool force_encoded_color_;
  bool cache_;
  bool shuffle_;
  ::PROTOBUF_NAMESPACE_ID::uint32 threads_;
  ::PROTOBUF_NAMESPACE_ID::uint32 parser_threads_;
  float scale_;
  friend struct ::TableStruct_trtcaffe_2eproto;
};
// -------------------------------------------------------------------

class ResizeParameter PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:trtcaffe.ResizeParameter) */ {
 public:
  inline ResizeParameter() : ResizeParameter(nullptr) {};
  virtual ~ResizeParameter();

  ResizeParameter(const ResizeParameter& from);
  ResizeParameter(ResizeParameter&& from) noexcept
    : ResizeParameter() {
    *this = ::std::move(from);
  }

  inline ResizeParameter& operator=(const ResizeParameter& from) {
    CopyFrom(from);
    return *this;
  }
  inline ResizeParameter& operator=(ResizeParameter&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ResizeParameter& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ResizeParameter* internal_default_instance() {
    return reinterpret_cast<const ResizeParameter*>(
               &_ResizeParameter_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    24;

  friend void swap(ResizeParameter& a, ResizeParameter& b) {
    a.Swap(&b);
  }
  inline void Swap(ResizeParameter* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ResizeParameter* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ResizeParameter* New() const final {
    return CreateMaybeMessage<ResizeParameter>(nullptr);
  }

  ResizeParameter* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ResizeParameter>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ResizeParameter& from);
  void MergeFrom(const ResizeParameter& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ResizeParameter* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "trtcaffe.ResizeParameter";
  }
  protected:
  explicit ResizeParameter(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_trtcaffe_2eproto);
    return ::descriptor_table_trtcaffe_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef ResizeParameter_Resize_mode Resize_mode;
  static constexpr Resize_mode WARP =
    ResizeParameter_Resize_mode_WARP;
  static constexpr Resize_mode FIT_SMALL_SIZE =
    ResizeParameter_Resize_mode_FIT_SMALL_SIZE;
  static constexpr Resize_mode FIT_LARGE_SIZE_AND_PAD =
    ResizeParameter_Resize_mode_FIT_LARGE_SIZE_AND_PAD;
  static inline bool Resize_mode_IsValid(int value) {
    return ResizeParameter_Resize_mode_IsValid(value);
  }
  static constexpr Resize_mode Resize_mode_MIN =
    ResizeParameter_Resize_mode_Resize_mode_MIN;
  static constexpr Resize_mode Resize_mode_MAX =
    ResizeParameter_Resize_mode_Resize_mode_MAX;
  static constexpr int Resize_mode_ARRAYSIZE =
    ResizeParameter_Resize_mode_Resize_mode_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Resize_mode_descriptor() {
    return ResizeParameter_Resize_mode_descriptor();
  }
  template<typename T>
  static inline const std::string& Resize_mode_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Resize_mode>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Resize_mode_Name.");
    return ResizeParameter_Resize_mode_Name(enum_t_value);
  }
  static inline bool Resize_mode_Parse(const std::string& name,
      Resize_mode* value) {
    return ResizeParameter_Resize_mode_Parse(name, value);
  }

  typedef ResizeParameter_Pad_mode Pad_mode;
  static constexpr Pad_mode CONSTANT =
    ResizeParameter_Pad_mode_CONSTANT;
  static constexpr Pad_mode MIRRORED =
    ResizeParameter_Pad_mode_MIRRORED;
  static constexpr Pad_mode REPEAT_NEAREST =
    ResizeParameter_Pad_mode_REPEAT_NEAREST;
  static inline bool Pad_mode_IsValid(int value) {
    return ResizeParameter_Pad_mode_IsValid(value);
  }
  static constexpr Pad_mode Pad_mode_MIN =
    ResizeParameter_Pad_mode_Pad_mode_MIN;
  static constexpr Pad_mode Pad_mode_MAX =
    ResizeParameter_Pad_mode_Pad_mode_MAX;
  static constexpr int Pad_mode_ARRAYSIZE =
    ResizeParameter_Pad_mode_Pad_mode_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Pad_mode_descriptor() {
    return ResizeParameter_Pad_mode_descriptor();
  }
  template<typename T>
  static inline const std::string& Pad_mode_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Pad_mode>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Pad_mode_Name.");
    return ResizeParameter_Pad_mode_Name(enum_t_value);
  }
  static inline bool Pad_mode_Parse(const std::string& name,
      Pad_mode* value) {
    return ResizeParameter_Pad_mode_Parse(name, value);
  }

  typedef ResizeParameter_Interp_mode Interp_mode;
  static constexpr Interp_mode LINEAR =
    ResizeParameter_Interp_mode_LINEAR;
  static constexpr Interp_mode AREA =
    ResizeParameter_Interp_mode_AREA;
  static constexpr Interp_mode NEAREST =
    ResizeParameter_Interp_mode_NEAREST;
  static constexpr Interp_mode CUBIC =
    ResizeParameter_Interp_mode_CUBIC;
  static constexpr Interp_mode LANCZOS4 =
    ResizeParameter_Interp_mode_LANCZOS4;
  static inline bool Interp_mode_IsValid(int value) {
    return ResizeParameter_Interp_mode_IsValid(value);
  }
  static constexpr Interp_mode Interp_mode_MIN =
    ResizeParameter_Interp_mode_Interp_mode_MIN;
  static constexpr Interp_mode Interp_mode_MAX =
    ResizeParameter_Interp_mode_Interp_mode_MAX;
  static constexpr int Interp_mode_ARRAYSIZE =
    ResizeParameter_Interp_mode_Interp_mode_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Interp_mode_descriptor() {
    return ResizeParameter_Interp_mode_descriptor();
  }
  template<typename T>
  static inline const std::string& Interp_mode_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Interp_mode>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Interp_mode_Name.");
    return ResizeParameter_Interp_mode_Name(enum_t_value);
  }
  static inline bool Interp_mode_Parse(const std::string& name,
      Interp_mode* value) {
    return ResizeParameter_Interp_mode_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kPadValueFieldNumber = 6,
    kInterpModeFieldNumber = 7,
    kHeightFieldNumber = 3,
    kWidthFieldNumber = 4,
    kHeightScaleFieldNumber = 8,
    kWidthScaleFieldNumber = 9,
    kPadModeFieldNumber = 5,
    kProbFieldNumber = 1,
    kResizeModeFieldNumber = 2,
  };
  // repeated float pad_value = 6;
  int pad_value_size() const;
  private:
  int _internal_pad_value_size() const;
  public:
  void clear_pad_value();
  private:
  float _internal_pad_value(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_pad_value() const;
  void _internal_add_pad_value(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_pad_value();
  public:
  float pad_value(int index) const;
  void set_pad_value(int index, float value);
  void add_pad_value(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      pad_value() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_pad_value();

  // repeated .trtcaffe.ResizeParameter.Interp_mode interp_mode = 7;
  int interp_mode_size() const;
  private:
  int _internal_interp_mode_size() const;
  public:
  void clear_interp_mode();
  private:
  ::trtcaffe::ResizeParameter_Interp_mode _internal_interp_mode(int index) const;
  void _internal_add_interp_mode(::trtcaffe::ResizeParameter_Interp_mode value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* _internal_mutable_interp_mode();
  public:
  ::trtcaffe::ResizeParameter_Interp_mode interp_mode(int index) const;
  void set_interp_mode(int index, ::trtcaffe::ResizeParameter_Interp_mode value);
  void add_interp_mode(::trtcaffe::ResizeParameter_Interp_mode value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>& interp_mode() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* mutable_interp_mode();

  // optional uint32 height = 3 [default = 0];
  bool has_height() const;
  private:
  bool _internal_has_height() const;
  public:
  void clear_height();
  ::PROTOBUF_NAMESPACE_ID::uint32 height() const;
  void set_height(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_height() const;
  void _internal_set_height(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 width = 4 [default = 0];
  bool has_width() const;
  private:
  bool _internal_has_width() const;
  public:
  void clear_width();
  ::PROTOBUF_NAMESPACE_ID::uint32 width() const;
  void set_width(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_width() const;
  void _internal_set_width(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 height_scale = 8 [default = 0];
  bool has_height_scale() const;
  private:
  bool _internal_has_height_scale() const;
  public:
  void clear_height_scale();
  ::PROTOBUF_NAMESPACE_ID::uint32 height_scale() const;
  void set_height_scale(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_height_scale() const;
  void _internal_set_height_scale(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 width_scale = 9 [default = 0];
  bool has_width_scale() const;
  private:
  bool _internal_has_width_scale() const;
  public:
  void clear_width_scale();
  ::PROTOBUF_NAMESPACE_ID::uint32 width_scale() const;
  void set_width_scale(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_width_scale() const;
  void _internal_set_width_scale(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional .trtcaffe.ResizeParameter.Pad_mode pad_mode = 5 [default = CONSTANT];
  bool has_pad_mode() const;
  private:
  bool _internal_has_pad_mode() const;
  public:
  void clear_pad_mode();
  ::trtcaffe::ResizeParameter_Pad_mode pad_mode() const;
  void set_pad_mode(::trtcaffe::ResizeParameter_Pad_mode value);
  private:
  ::trtcaffe::ResizeParameter_Pad_mode _internal_pad_mode() const;
  void _internal_set_pad_mode(::trtcaffe::ResizeParameter_Pad_mode value);
  public:

  // optional float prob = 1 [default = 1];
  bool has_prob() const;
  private:
  bool _internal_has_prob() const;
  public:
  void clear_prob();
  float prob() const;
  void set_prob(float value);
  private:
  float _internal_prob() const;
  void _internal_set_prob(float value);
  public:

  // optional .trtcaffe.ResizeParameter.Resize_mode resize_mode = 2 [default = WARP];
  bool has_resize_mode() const;
  private:
  bool _internal_has_resize_mode() const;
  public:
  void clear_resize_mode();
  ::trtcaffe::ResizeParameter_Resize_mode resize_mode() const;
  void set_resize_mode(::trtcaffe::ResizeParameter_Resize_mode value);
  private:
  ::trtcaffe::ResizeParameter_Resize_mode _internal_resize_mode() const;
  void _internal_set_resize_mode(::trtcaffe::ResizeParameter_Resize_mode value);
  public:

  // @@protoc_insertion_point(class_scope:trtcaffe.ResizeParameter)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > pad_value_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int> interp_mode_;
  ::PROTOBUF_NAMESPACE_ID::uint32 height_;
  ::PROTOBUF_NAMESPACE_ID::uint32 width_;
  ::PROTOBUF_NAMESPACE_ID::uint32 height_scale_;
  ::PROTOBUF_NAMESPACE_ID::uint32 width_scale_;
  int pad_mode_;
  float prob_;
  int resize_mode_;
  friend struct ::TableStruct_trtcaffe_2eproto;
};
// -------------------------------------------------------------------

class NonMaximumSuppressionParameter PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:trtcaffe.NonMaximumSuppressionParameter) */ {
 public:
  inline NonMaximumSuppressionParameter() : NonMaximumSuppressionParameter(nullptr) {};
  virtual ~NonMaximumSuppressionParameter();

  NonMaximumSuppressionParameter(const NonMaximumSuppressionParameter& from);
  NonMaximumSuppressionParameter(NonMaximumSuppressionParameter&& from) noexcept
    : NonMaximumSuppressionParameter() {
    *this = ::std::move(from);
  }

  inline NonMaximumSuppressionParameter& operator=(const NonMaximumSuppressionParameter& from) {
    CopyFrom(from);
    return *this;
  }
  inline NonMaximumSuppressionParameter& operator=(NonMaximumSuppressionParameter&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const NonMaximumSuppressionParameter& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const NonMaximumSuppressionParameter* internal_default_instance() {
    return reinterpret_cast<const NonMaximumSuppressionParameter*>(
               &_NonMaximumSuppressionParameter_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    25;

  friend void swap(NonMaximumSuppressionParameter& a, NonMaximumSuppressionParameter& b) {
    a.Swap(&b);
  }
  inline void Swap(NonMaximumSuppressionParameter* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NonMaximumSuppressionParameter* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline NonMaximumSuppressionParameter* New() const final {
    return CreateMaybeMessage<NonMaximumSuppressionParameter>(nullptr);
  }

  NonMaximumSuppressionParameter* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<NonMaximumSuppressionParameter>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const NonMaximumSuppressionParameter& from);
  void MergeFrom(const NonMaximumSuppressionParameter& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NonMaximumSuppressionParameter* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "trtcaffe.NonMaximumSuppressionParameter";
  }
  protected:
  explicit NonMaximumSuppressionParameter(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_trtcaffe_2eproto);
    return ::descriptor_table_trtcaffe_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTopKFieldNumber = 2,
    kNmsThresholdFieldNumber = 1,
    kEtaFieldNumber = 3,
  };
  // optional int32 top_k = 2;
  bool has_top_k() const;
  private:
  bool _internal_has_top_k() const;
  public:
  void clear_top_k();
  ::PROTOBUF_NAMESPACE_ID::int32 top_k() const;
  void set_top_k(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_top_k() const;
  void _internal_set_top_k(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional float nms_threshold = 1 [default = 0.3];
  bool has_nms_threshold() const;
  private:
  bool _internal_has_nms_threshold() const;
  public:
  void clear_nms_threshold();
  float nms_threshold() const;
  void set_nms_threshold(float value);
  private:
  float _internal_nms_threshold() const;
  void _internal_set_nms_threshold(float value);
  public:

  // optional float eta = 3 [default = 1];
  bool has_eta() const;
  private:
  bool _internal_has_eta() const;
  public:
  void clear_eta();
  float eta() const;
  void set_eta(float value);
  private:
  float _internal_eta() const;
  void _internal_set_eta(float value);
  public:

  // @@protoc_insertion_point(class_scope:trtcaffe.NonMaximumSuppressionParameter)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int32 top_k_;
  float nms_threshold_;
  float eta_;
  friend struct ::TableStruct_trtcaffe_2eproto;
};
// -------------------------------------------------------------------

class SaveOutputParameter PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:trtcaffe.SaveOutputParameter) */ {
 public:
  inline SaveOutputParameter() : SaveOutputParameter(nullptr) {};
  virtual ~SaveOutputParameter();

  SaveOutputParameter(const SaveOutputParameter& from);
  SaveOutputParameter(SaveOutputParameter&& from) noexcept
    : SaveOutputParameter() {
    *this = ::std::move(from);
  }

  inline SaveOutputParameter& operator=(const SaveOutputParameter& from) {
    CopyFrom(from);
    return *this;
  }
  inline SaveOutputParameter& operator=(SaveOutputParameter&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SaveOutputParameter& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SaveOutputParameter* internal_default_instance() {
    return reinterpret_cast<const SaveOutputParameter*>(
               &_SaveOutputParameter_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    26;

  friend void swap(SaveOutputParameter& a, SaveOutputParameter& b) {
    a.Swap(&b);
  }
  inline void Swap(SaveOutputParameter* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SaveOutputParameter* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SaveOutputParameter* New() const final {
    return CreateMaybeMessage<SaveOutputParameter>(nullptr);
  }

  SaveOutputParameter* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SaveOutputParameter>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SaveOutputParameter& from);
  void MergeFrom(const SaveOutputParameter& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SaveOutputParameter* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "trtcaffe.SaveOutputParameter";
  }
  protected:
  explicit SaveOutputParameter(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_trtcaffe_2eproto);
    return ::descriptor_table_trtcaffe_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOutputDirectoryFieldNumber = 1,
    kOutputNamePrefixFieldNumber = 2,
    kOutputFormatFieldNumber = 3,
    kLabelMapFileFieldNumber = 4,
    kNameSizeFileFieldNumber = 5,
    kResizeParamFieldNumber = 7,
    kNumTestImageFieldNumber = 6,
  };
  // optional string output_directory = 1;
  bool has_output_directory() const;
  private:
  bool _internal_has_output_directory() const;
  public:
  void clear_output_directory();
  const std::string& output_directory() const;
  void set_output_directory(const std::string& value);
  void set_output_directory(std::string&& value);
  void set_output_directory(const char* value);
  void set_output_directory(const char* value, size_t size);
  std::string* mutable_output_directory();
  std::string* release_output_directory();
  void set_allocated_output_directory(std::string* output_directory);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_output_directory();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_output_directory(
      std::string* output_directory);
  private:
  const std::string& _internal_output_directory() const;
  void _internal_set_output_directory(const std::string& value);
  std::string* _internal_mutable_output_directory();
  public:

  // optional string output_name_prefix = 2;
  bool has_output_name_prefix() const;
  private:
  bool _internal_has_output_name_prefix() const;
  public:
  void clear_output_name_prefix();
  const std::string& output_name_prefix() const;
  void set_output_name_prefix(const std::string& value);
  void set_output_name_prefix(std::string&& value);
  void set_output_name_prefix(const char* value);
  void set_output_name_prefix(const char* value, size_t size);
  std::string* mutable_output_name_prefix();
  std::string* release_output_name_prefix();
  void set_allocated_output_name_prefix(std::string* output_name_prefix);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_output_name_prefix();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_output_name_prefix(
      std::string* output_name_prefix);
  private:
  const std::string& _internal_output_name_prefix() const;
  void _internal_set_output_name_prefix(const std::string& value);
  std::string* _internal_mutable_output_name_prefix();
  public:

  // optional string output_format = 3;
  bool has_output_format() const;
  private:
  bool _internal_has_output_format() const;
  public:
  void clear_output_format();
  const std::string& output_format() const;
  void set_output_format(const std::string& value);
  void set_output_format(std::string&& value);
  void set_output_format(const char* value);
  void set_output_format(const char* value, size_t size);
  std::string* mutable_output_format();
  std::string* release_output_format();
  void set_allocated_output_format(std::string* output_format);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_output_format();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_output_format(
      std::string* output_format);
  private:
  const std::string& _internal_output_format() const;
  void _internal_set_output_format(const std::string& value);
  std::string* _internal_mutable_output_format();
  public:

  // optional string label_map_file = 4;
  bool has_label_map_file() const;
  private:
  bool _internal_has_label_map_file() const;
  public:
  void clear_label_map_file();
  const std::string& label_map_file() const;
  void set_label_map_file(const std::string& value);
  void set_label_map_file(std::string&& value);
  void set_label_map_file(const char* value);
  void set_label_map_file(const char* value, size_t size);
  std::string* mutable_label_map_file();
  std::string* release_label_map_file();
  void set_allocated_label_map_file(std::string* label_map_file);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_label_map_file();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_label_map_file(
      std::string* label_map_file);
  private:
  const std::string& _internal_label_map_file() const;
  void _internal_set_label_map_file(const std::string& value);
  std::string* _internal_mutable_label_map_file();
  public:

  // optional string name_size_file = 5;
  bool has_name_size_file() const;
  private:
  bool _internal_has_name_size_file() const;
  public:
  void clear_name_size_file();
  const std::string& name_size_file() const;
  void set_name_size_file(const std::string& value);
  void set_name_size_file(std::string&& value);
  void set_name_size_file(const char* value);
  void set_name_size_file(const char* value, size_t size);
  std::string* mutable_name_size_file();
  std::string* release_name_size_file();
  void set_allocated_name_size_file(std::string* name_size_file);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_name_size_file();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_name_size_file(
      std::string* name_size_file);
  private:
  const std::string& _internal_name_size_file() const;
  void _internal_set_name_size_file(const std::string& value);
  std::string* _internal_mutable_name_size_file();
  public:

  // optional .trtcaffe.ResizeParameter resize_param = 7;
  bool has_resize_param() const;
  private:
  bool _internal_has_resize_param() const;
  public:
  void clear_resize_param();
  const ::trtcaffe::ResizeParameter& resize_param() const;
  ::trtcaffe::ResizeParameter* release_resize_param();
  ::trtcaffe::ResizeParameter* mutable_resize_param();
  void set_allocated_resize_param(::trtcaffe::ResizeParameter* resize_param);
  private:
  const ::trtcaffe::ResizeParameter& _internal_resize_param() const;
  ::trtcaffe::ResizeParameter* _internal_mutable_resize_param();
  public:
  void unsafe_arena_set_allocated_resize_param(
      ::trtcaffe::ResizeParameter* resize_param);
  ::trtcaffe::ResizeParameter* unsafe_arena_release_resize_param();

  // optional uint32 num_test_image = 6;
  bool has_num_test_image() const;
  private:
  bool _internal_has_num_test_image() const;
  public:
  void clear_num_test_image();
  ::PROTOBUF_NAMESPACE_ID::uint32 num_test_image() const;
  void set_num_test_image(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_num_test_image() const;
  void _internal_set_num_test_image(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:trtcaffe.SaveOutputParameter)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr output_directory_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr output_name_prefix_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr output_format_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr label_map_file_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_size_file_;
  ::trtcaffe::ResizeParameter* resize_param_;
  ::PROTOBUF_NAMESPACE_ID::uint32 num_test_image_;
  friend struct ::TableStruct_trtcaffe_2eproto;
};
// -------------------------------------------------------------------

class DetectionOutputParameter PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:trtcaffe.DetectionOutputParameter) */ {
 public:
  inline DetectionOutputParameter() : DetectionOutputParameter(nullptr) {};
  virtual ~DetectionOutputParameter();

  DetectionOutputParameter(const DetectionOutputParameter& from);
  DetectionOutputParameter(DetectionOutputParameter&& from) noexcept
    : DetectionOutputParameter() {
    *this = ::std::move(from);
  }

  inline DetectionOutputParameter& operator=(const DetectionOutputParameter& from) {
    CopyFrom(from);
    return *this;
  }
  inline DetectionOutputParameter& operator=(DetectionOutputParameter&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DetectionOutputParameter& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DetectionOutputParameter* internal_default_instance() {
    return reinterpret_cast<const DetectionOutputParameter*>(
               &_DetectionOutputParameter_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    27;

  friend void swap(DetectionOutputParameter& a, DetectionOutputParameter& b) {
    a.Swap(&b);
  }
  inline void Swap(DetectionOutputParameter* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DetectionOutputParameter* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DetectionOutputParameter* New() const final {
    return CreateMaybeMessage<DetectionOutputParameter>(nullptr);
  }

  DetectionOutputParameter* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DetectionOutputParameter>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DetectionOutputParameter& from);
  void MergeFrom(const DetectionOutputParameter& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DetectionOutputParameter* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "trtcaffe.DetectionOutputParameter";
  }
  protected:
  explicit DetectionOutputParameter(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_trtcaffe_2eproto);
    return ::descriptor_table_trtcaffe_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSaveFileFieldNumber = 12,
    kNmsParamFieldNumber = 4,
    kSaveOutputParamFieldNumber = 5,
    kNumClassesFieldNumber = 1,
    kBackgroundLabelIdFieldNumber = 3,
    kConfidenceThresholdFieldNumber = 9,
    kVarianceEncodedInTargetFieldNumber = 8,
    kVisualizeFieldNumber = 10,
    kVisualizeThresholdFieldNumber = 11,
    kKeepTopKFieldNumber = 7,
    kShareLocationFieldNumber = 2,
    kCodeTypeFieldNumber = 6,
  };
  // optional string save_file = 12;
  bool has_save_file() const;
  private:
  bool _internal_has_save_file() const;
  public:
  void clear_save_file();
  const std::string& save_file() const;
  void set_save_file(const std::string& value);
  void set_save_file(std::string&& value);
  void set_save_file(const char* value);
  void set_save_file(const char* value, size_t size);
  std::string* mutable_save_file();
  std::string* release_save_file();
  void set_allocated_save_file(std::string* save_file);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_save_file();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_save_file(
      std::string* save_file);
  private:
  const std::string& _internal_save_file() const;
  void _internal_set_save_file(const std::string& value);
  std::string* _internal_mutable_save_file();
  public:

  // optional .trtcaffe.NonMaximumSuppressionParameter nms_param = 4;
  bool has_nms_param() const;
  private:
  bool _internal_has_nms_param() const;
  public:
  void clear_nms_param();
  const ::trtcaffe::NonMaximumSuppressionParameter& nms_param() const;
  ::trtcaffe::NonMaximumSuppressionParameter* release_nms_param();
  ::trtcaffe::NonMaximumSuppressionParameter* mutable_nms_param();
  void set_allocated_nms_param(::trtcaffe::NonMaximumSuppressionParameter* nms_param);
  private:
  const ::trtcaffe::NonMaximumSuppressionParameter& _internal_nms_param() const;
  ::trtcaffe::NonMaximumSuppressionParameter* _internal_mutable_nms_param();
  public:
  void unsafe_arena_set_allocated_nms_param(
      ::trtcaffe::NonMaximumSuppressionParameter* nms_param);
  ::trtcaffe::NonMaximumSuppressionParameter* unsafe_arena_release_nms_param();

  // optional .trtcaffe.SaveOutputParameter save_output_param = 5;
  bool has_save_output_param() const;
  private:
  bool _internal_has_save_output_param() const;
  public:
  void clear_save_output_param();
  const ::trtcaffe::SaveOutputParameter& save_output_param() const;
  ::trtcaffe::SaveOutputParameter* release_save_output_param();
  ::trtcaffe::SaveOutputParameter* mutable_save_output_param();
  void set_allocated_save_output_param(::trtcaffe::SaveOutputParameter* save_output_param);
  private:
  const ::trtcaffe::SaveOutputParameter& _internal_save_output_param() const;
  ::trtcaffe::SaveOutputParameter* _internal_mutable_save_output_param();
  public:
  void unsafe_arena_set_allocated_save_output_param(
      ::trtcaffe::SaveOutputParameter* save_output_param);
  ::trtcaffe::SaveOutputParameter* unsafe_arena_release_save_output_param();

  // optional uint32 num_classes = 1;
  bool has_num_classes() const;
  private:
  bool _internal_has_num_classes() const;
  public:
  void clear_num_classes();
  ::PROTOBUF_NAMESPACE_ID::uint32 num_classes() const;
  void set_num_classes(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_num_classes() const;
  void _internal_set_num_classes(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional int32 background_label_id = 3 [default = 0];
  bool has_background_label_id() const;
  private:
  bool _internal_has_background_label_id() const;
  public:
  void clear_background_label_id();
  ::PROTOBUF_NAMESPACE_ID::int32 background_label_id() const;
  void set_background_label_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_background_label_id() const;
  void _internal_set_background_label_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional float confidence_threshold = 9;
  bool has_confidence_threshold() const;
  private:
  bool _internal_has_confidence_threshold() const;
  public:
  void clear_confidence_threshold();
  float confidence_threshold() const;
  void set_confidence_threshold(float value);
  private:
  float _internal_confidence_threshold() const;
  void _internal_set_confidence_threshold(float value);
  public:

  // optional bool variance_encoded_in_target = 8 [default = false];
  bool has_variance_encoded_in_target() const;
  private:
  bool _internal_has_variance_encoded_in_target() const;
  public:
  void clear_variance_encoded_in_target();
  bool variance_encoded_in_target() const;
  void set_variance_encoded_in_target(bool value);
  private:
  bool _internal_variance_encoded_in_target() const;
  void _internal_set_variance_encoded_in_target(bool value);
  public:

  // optional bool visualize = 10 [default = false];
  bool has_visualize() const;
  private:
  bool _internal_has_visualize() const;
  public:
  void clear_visualize();
  bool visualize() const;
  void set_visualize(bool value);
  private:
  bool _internal_visualize() const;
  void _internal_set_visualize(bool value);
  public:

  // optional float visualize_threshold = 11;
  bool has_visualize_threshold() const;
  private:
  bool _internal_has_visualize_threshold() const;
  public:
  void clear_visualize_threshold();
  float visualize_threshold() const;
  void set_visualize_threshold(float value);
  private:
  float _internal_visualize_threshold() const;
  void _internal_set_visualize_threshold(float value);
  public:

  // optional int32 keep_top_k = 7 [default = -1];
  bool has_keep_top_k() const;
  private:
  bool _internal_has_keep_top_k() const;
  public:
  void clear_keep_top_k();
  ::PROTOBUF_NAMESPACE_ID::int32 keep_top_k() const;
  void set_keep_top_k(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_keep_top_k() const;
  void _internal_set_keep_top_k(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional bool share_location = 2 [default = true];
  bool has_share_location() const;
  private:
  bool _internal_has_share_location() const;
  public:
  void clear_share_location();
  bool share_location() const;
  void set_share_location(bool value);
  private:
  bool _internal_share_location() const;
  void _internal_set_share_location(bool value);
  public:

  // optional .trtcaffe.PriorBoxParameter.CodeType code_type = 6 [default = CORNER];
  bool has_code_type() const;
  private:
  bool _internal_has_code_type() const;
  public:
  void clear_code_type();
  ::trtcaffe::PriorBoxParameter_CodeType code_type() const;
  void set_code_type(::trtcaffe::PriorBoxParameter_CodeType value);
  private:
  ::trtcaffe::PriorBoxParameter_CodeType _internal_code_type() const;
  void _internal_set_code_type(::trtcaffe::PriorBoxParameter_CodeType value);
  public:

  // @@protoc_insertion_point(class_scope:trtcaffe.DetectionOutputParameter)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr save_file_;
  ::trtcaffe::NonMaximumSuppressionParameter* nms_param_;
  ::trtcaffe::SaveOutputParameter* save_output_param_;
  ::PROTOBUF_NAMESPACE_ID::uint32 num_classes_;
  ::PROTOBUF_NAMESPACE_ID::int32 background_label_id_;
  float confidence_threshold_;
  bool variance_encoded_in_target_;
  bool visualize_;
  float visualize_threshold_;
  ::PROTOBUF_NAMESPACE_ID::int32 keep_top_k_;
  bool share_location_;
  int code_type_;
  friend struct ::TableStruct_trtcaffe_2eproto;
};
// -------------------------------------------------------------------

class DropoutParameter PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:trtcaffe.DropoutParameter) */ {
 public:
  inline DropoutParameter() : DropoutParameter(nullptr) {};
  virtual ~DropoutParameter();

  DropoutParameter(const DropoutParameter& from);
  DropoutParameter(DropoutParameter&& from) noexcept
    : DropoutParameter() {
    *this = ::std::move(from);
  }

  inline DropoutParameter& operator=(const DropoutParameter& from) {
    CopyFrom(from);
    return *this;
  }
  inline DropoutParameter& operator=(DropoutParameter&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DropoutParameter& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DropoutParameter* internal_default_instance() {
    return reinterpret_cast<const DropoutParameter*>(
               &_DropoutParameter_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    28;

  friend void swap(DropoutParameter& a, DropoutParameter& b) {
    a.Swap(&b);
  }
  inline void Swap(DropoutParameter* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DropoutParameter* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DropoutParameter* New() const final {
    return CreateMaybeMessage<DropoutParameter>(nullptr);
  }

  DropoutParameter* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DropoutParameter>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DropoutParameter& from);
  void MergeFrom(const DropoutParameter& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DropoutParameter* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "trtcaffe.DropoutParameter";
  }
  protected:
  explicit DropoutParameter(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_trtcaffe_2eproto);
    return ::descriptor_table_trtcaffe_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef DropoutParameter_Engine Engine;
  static constexpr Engine DEFAULT =
    DropoutParameter_Engine_DEFAULT;
  static constexpr Engine CAFFE =
    DropoutParameter_Engine_CAFFE;
  static constexpr Engine CUDNN =
    DropoutParameter_Engine_CUDNN;
  static inline bool Engine_IsValid(int value) {
    return DropoutParameter_Engine_IsValid(value);
  }
  static constexpr Engine Engine_MIN =
    DropoutParameter_Engine_Engine_MIN;
  static constexpr Engine Engine_MAX =
    DropoutParameter_Engine_Engine_MAX;
  static constexpr int Engine_ARRAYSIZE =
    DropoutParameter_Engine_Engine_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Engine_descriptor() {
    return DropoutParameter_Engine_descriptor();
  }
  template<typename T>
  static inline const std::string& Engine_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Engine>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Engine_Name.");
    return DropoutParameter_Engine_Name(enum_t_value);
  }
  static inline bool Engine_Parse(const std::string& name,
      Engine* value) {
    return DropoutParameter_Engine_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kEngineFieldNumber = 2,
    kDropoutRatioFieldNumber = 1,
    kRandomSeedFieldNumber = 3,
  };
  // optional .trtcaffe.DropoutParameter.Engine engine = 2 [default = DEFAULT];
  bool has_engine() const;
  private:
  bool _internal_has_engine() const;
  public:
  void clear_engine();
  ::trtcaffe::DropoutParameter_Engine engine() const;
  void set_engine(::trtcaffe::DropoutParameter_Engine value);
  private:
  ::trtcaffe::DropoutParameter_Engine _internal_engine() const;
  void _internal_set_engine(::trtcaffe::DropoutParameter_Engine value);
  public:

  // optional float dropout_ratio = 1 [default = 0.5];
  bool has_dropout_ratio() const;
  private:
  bool _internal_has_dropout_ratio() const;
  public:
  void clear_dropout_ratio();
  float dropout_ratio() const;
  void set_dropout_ratio(float value);
  private:
  float _internal_dropout_ratio() const;
  void _internal_set_dropout_ratio(float value);
  public:

  // optional int64 random_seed = 3 [default = -1];
  bool has_random_seed() const;
  private:
  bool _internal_has_random_seed() const;
  public:
  void clear_random_seed();
  ::PROTOBUF_NAMESPACE_ID::int64 random_seed() const;
  void set_random_seed(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_random_seed() const;
  void _internal_set_random_seed(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:trtcaffe.DropoutParameter)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  int engine_;
  float dropout_ratio_;
  ::PROTOBUF_NAMESPACE_ID::int64 random_seed_;
  friend struct ::TableStruct_trtcaffe_2eproto;
};
// -------------------------------------------------------------------

class DummyDataParameter PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:trtcaffe.DummyDataParameter) */ {
 public:
  inline DummyDataParameter() : DummyDataParameter(nullptr) {};
  virtual ~DummyDataParameter();

  DummyDataParameter(const DummyDataParameter& from);
  DummyDataParameter(DummyDataParameter&& from) noexcept
    : DummyDataParameter() {
    *this = ::std::move(from);
  }

  inline DummyDataParameter& operator=(const DummyDataParameter& from) {
    CopyFrom(from);
    return *this;
  }
  inline DummyDataParameter& operator=(DummyDataParameter&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DummyDataParameter& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DummyDataParameter* internal_default_instance() {
    return reinterpret_cast<const DummyDataParameter*>(
               &_DummyDataParameter_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    29;

  friend void swap(DummyDataParameter& a, DummyDataParameter& b) {
    a.Swap(&b);
  }
  inline void Swap(DummyDataParameter* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DummyDataParameter* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DummyDataParameter* New() const final {
    return CreateMaybeMessage<DummyDataParameter>(nullptr);
  }

  DummyDataParameter* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DummyDataParameter>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DummyDataParameter& from);
  void MergeFrom(const DummyDataParameter& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DummyDataParameter* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "trtcaffe.DummyDataParameter";
  }
  protected:
  explicit DummyDataParameter(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_trtcaffe_2eproto);
    return ::descriptor_table_trtcaffe_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataFillerFieldNumber = 1,
    kNumFieldNumber = 2,
    kChannelsFieldNumber = 3,
    kHeightFieldNumber = 4,
    kWidthFieldNumber = 5,
    kShapeFieldNumber = 6,
  };
  // repeated .trtcaffe.FillerParameter data_filler = 1;
  int data_filler_size() const;
  private:
  int _internal_data_filler_size() const;
  public:
  void clear_data_filler();
  ::trtcaffe::FillerParameter* mutable_data_filler(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::trtcaffe::FillerParameter >*
      mutable_data_filler();
  private:
  const ::trtcaffe::FillerParameter& _internal_data_filler(int index) const;
  ::trtcaffe::FillerParameter* _internal_add_data_filler();
  public:
  const ::trtcaffe::FillerParameter& data_filler(int index) const;
  ::trtcaffe::FillerParameter* add_data_filler();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::trtcaffe::FillerParameter >&
      data_filler() const;

  // repeated uint32 num = 2;
  int num_size() const;
  private:
  int _internal_num_size() const;
  public:
  void clear_num();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_num(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      _internal_num() const;
  void _internal_add_num(::PROTOBUF_NAMESPACE_ID::uint32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      _internal_mutable_num();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint32 num(int index) const;
  void set_num(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value);
  void add_num(::PROTOBUF_NAMESPACE_ID::uint32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      num() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      mutable_num();

  // repeated uint32 channels = 3;
  int channels_size() const;
  private:
  int _internal_channels_size() const;
  public:
  void clear_channels();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_channels(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      _internal_channels() const;
  void _internal_add_channels(::PROTOBUF_NAMESPACE_ID::uint32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      _internal_mutable_channels();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint32 channels(int index) const;
  void set_channels(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value);
  void add_channels(::PROTOBUF_NAMESPACE_ID::uint32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      channels() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      mutable_channels();

  // repeated uint32 height = 4;
  int height_size() const;
  private:
  int _internal_height_size() const;
  public:
  void clear_height();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_height(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      _internal_height() const;
  void _internal_add_height(::PROTOBUF_NAMESPACE_ID::uint32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      _internal_mutable_height();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint32 height(int index) const;
  void set_height(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value);
  void add_height(::PROTOBUF_NAMESPACE_ID::uint32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      height() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      mutable_height();

  // repeated uint32 width = 5;
  int width_size() const;
  private:
  int _internal_width_size() const;
  public:
  void clear_width();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_width(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      _internal_width() const;
  void _internal_add_width(::PROTOBUF_NAMESPACE_ID::uint32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      _internal_mutable_width();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint32 width(int index) const;
  void set_width(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value);
  void add_width(::PROTOBUF_NAMESPACE_ID::uint32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      width() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      mutable_width();

  // repeated .trtcaffe.BlobShape shape = 6;
  int shape_size() const;
  private:
  int _internal_shape_size() const;
  public:
  void clear_shape();
  ::trtcaffe::BlobShape* mutable_shape(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::trtcaffe::BlobShape >*
      mutable_shape();
  private:
  const ::trtcaffe::BlobShape& _internal_shape(int index) const;
  ::trtcaffe::BlobShape* _internal_add_shape();
  public:
  const ::trtcaffe::BlobShape& shape(int index) const;
  ::trtcaffe::BlobShape* add_shape();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::trtcaffe::BlobShape >&
      shape() const;

  // @@protoc_insertion_point(class_scope:trtcaffe.DummyDataParameter)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::trtcaffe::FillerParameter > data_filler_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 > num_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 > channels_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 > height_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 > width_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::trtcaffe::BlobShape > shape_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_trtcaffe_2eproto;
};
// -------------------------------------------------------------------

class EltwiseParameter PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:trtcaffe.EltwiseParameter) */ {
 public:
  inline EltwiseParameter() : EltwiseParameter(nullptr) {};
  virtual ~EltwiseParameter();

  EltwiseParameter(const EltwiseParameter& from);
  EltwiseParameter(EltwiseParameter&& from) noexcept
    : EltwiseParameter() {
    *this = ::std::move(from);
  }

  inline EltwiseParameter& operator=(const EltwiseParameter& from) {
    CopyFrom(from);
    return *this;
  }
  inline EltwiseParameter& operator=(EltwiseParameter&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const EltwiseParameter& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const EltwiseParameter* internal_default_instance() {
    return reinterpret_cast<const EltwiseParameter*>(
               &_EltwiseParameter_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    30;

  friend void swap(EltwiseParameter& a, EltwiseParameter& b) {
    a.Swap(&b);
  }
  inline void Swap(EltwiseParameter* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EltwiseParameter* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline EltwiseParameter* New() const final {
    return CreateMaybeMessage<EltwiseParameter>(nullptr);
  }

  EltwiseParameter* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<EltwiseParameter>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const EltwiseParameter& from);
  void MergeFrom(const EltwiseParameter& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EltwiseParameter* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "trtcaffe.EltwiseParameter";
  }
  protected:
  explicit EltwiseParameter(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_trtcaffe_2eproto);
    return ::descriptor_table_trtcaffe_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef EltwiseParameter_EltwiseOp EltwiseOp;
  static constexpr EltwiseOp PROD =
    EltwiseParameter_EltwiseOp_PROD;
  static constexpr EltwiseOp SUM =
    EltwiseParameter_EltwiseOp_SUM;
  static constexpr EltwiseOp MAX =
    EltwiseParameter_EltwiseOp_MAX;
  static inline bool EltwiseOp_IsValid(int value) {
    return EltwiseParameter_EltwiseOp_IsValid(value);
  }
  static constexpr EltwiseOp EltwiseOp_MIN =
    EltwiseParameter_EltwiseOp_EltwiseOp_MIN;
  static constexpr EltwiseOp EltwiseOp_MAX =
    EltwiseParameter_EltwiseOp_EltwiseOp_MAX;
  static constexpr int EltwiseOp_ARRAYSIZE =
    EltwiseParameter_EltwiseOp_EltwiseOp_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  EltwiseOp_descriptor() {
    return EltwiseParameter_EltwiseOp_descriptor();
  }
  template<typename T>
  static inline const std::string& EltwiseOp_Name(T enum_t_value) {
    static_assert(::std::is_same<T, EltwiseOp>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function EltwiseOp_Name.");
    return EltwiseParameter_EltwiseOp_Name(enum_t_value);
  }
  static inline bool EltwiseOp_Parse(const std::string& name,
      EltwiseOp* value) {
    return EltwiseParameter_EltwiseOp_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kCoeffFieldNumber = 2,
    kOperationFieldNumber = 1,
    kStableProdGradFieldNumber = 3,
  };
  // repeated float coeff = 2;
  int coeff_size() const;
  private:
  int _internal_coeff_size() const;
  public:
  void clear_coeff();
  private:
  float _internal_coeff(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_coeff() const;
  void _internal_add_coeff(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_coeff();
  public:
  float coeff(int index) const;
  void set_coeff(int index, float value);
  void add_coeff(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      coeff() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_coeff();

  // optional .trtcaffe.EltwiseParameter.EltwiseOp operation = 1 [default = SUM];
  bool has_operation() const;
  private:
  bool _internal_has_operation() const;
  public:
  void clear_operation();
  ::trtcaffe::EltwiseParameter_EltwiseOp operation() const;
  void set_operation(::trtcaffe::EltwiseParameter_EltwiseOp value);
  private:
  ::trtcaffe::EltwiseParameter_EltwiseOp _internal_operation() const;
  void _internal_set_operation(::trtcaffe::EltwiseParameter_EltwiseOp value);
  public:

  // optional bool stable_prod_grad = 3 [default = true];
  bool has_stable_prod_grad() const;
  private:
  bool _internal_has_stable_prod_grad() const;
  public:
  void clear_stable_prod_grad();
  bool stable_prod_grad() const;
  void set_stable_prod_grad(bool value);
  private:
  bool _internal_stable_prod_grad() const;
  void _internal_set_stable_prod_grad(bool value);
  public:

  // @@protoc_insertion_point(class_scope:trtcaffe.EltwiseParameter)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > coeff_;
  int operation_;
  bool stable_prod_grad_;
  friend struct ::TableStruct_trtcaffe_2eproto;
};
// -------------------------------------------------------------------

class ELUParameter PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:trtcaffe.ELUParameter) */ {
 public:
  inline ELUParameter() : ELUParameter(nullptr) {};
  virtual ~ELUParameter();

  ELUParameter(const ELUParameter& from);
  ELUParameter(ELUParameter&& from) noexcept
    : ELUParameter() {
    *this = ::std::move(from);
  }

  inline ELUParameter& operator=(const ELUParameter& from) {
    CopyFrom(from);
    return *this;
  }
  inline ELUParameter& operator=(ELUParameter&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ELUParameter& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ELUParameter* internal_default_instance() {
    return reinterpret_cast<const ELUParameter*>(
               &_ELUParameter_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    31;

  friend void swap(ELUParameter& a, ELUParameter& b) {
    a.Swap(&b);
  }
  inline void Swap(ELUParameter* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ELUParameter* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ELUParameter* New() const final {
    return CreateMaybeMessage<ELUParameter>(nullptr);
  }

  ELUParameter* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ELUParameter>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ELUParameter& from);
  void MergeFrom(const ELUParameter& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ELUParameter* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "trtcaffe.ELUParameter";
  }
  protected:
  explicit ELUParameter(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_trtcaffe_2eproto);
    return ::descriptor_table_trtcaffe_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAlphaFieldNumber = 1,
  };
  // optional float alpha = 1 [default = 1];
  bool has_alpha() const;
  private:
  bool _internal_has_alpha() const;
  public:
  void clear_alpha();
  float alpha() const;
  void set_alpha(float value);
  private:
  float _internal_alpha() const;
  void _internal_set_alpha(float value);
  public:

  // @@protoc_insertion_point(class_scope:trtcaffe.ELUParameter)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  float alpha_;
  friend struct ::TableStruct_trtcaffe_2eproto;
};
// -------------------------------------------------------------------

class EmbedParameter PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:trtcaffe.EmbedParameter) */ {
 public:
  inline EmbedParameter() : EmbedParameter(nullptr) {};
  virtual ~EmbedParameter();

  EmbedParameter(const EmbedParameter& from);
  EmbedParameter(EmbedParameter&& from) noexcept
    : EmbedParameter() {
    *this = ::std::move(from);
  }

  inline EmbedParameter& operator=(const EmbedParameter& from) {
    CopyFrom(from);
    return *this;
  }
  inline EmbedParameter& operator=(EmbedParameter&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const EmbedParameter& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const EmbedParameter* internal_default_instance() {
    return reinterpret_cast<const EmbedParameter*>(
               &_EmbedParameter_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    32;

  friend void swap(EmbedParameter& a, EmbedParameter& b) {
    a.Swap(&b);
  }
  inline void Swap(EmbedParameter* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EmbedParameter* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline EmbedParameter* New() const final {
    return CreateMaybeMessage<EmbedParameter>(nullptr);
  }

  EmbedParameter* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<EmbedParameter>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const EmbedParameter& from);
  void MergeFrom(const EmbedParameter& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EmbedParameter* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "trtcaffe.EmbedParameter";
  }
  protected:
  explicit EmbedParameter(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_trtcaffe_2eproto);
    return ::descriptor_table_trtcaffe_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kWeightFillerFieldNumber = 4,
    kBiasFillerFieldNumber = 5,
    kNumOutputFieldNumber = 1,
    kInputDimFieldNumber = 2,
    kBiasTermFieldNumber = 3,
  };
  // optional .trtcaffe.FillerParameter weight_filler = 4;
  bool has_weight_filler() const;
  private:
  bool _internal_has_weight_filler() const;
  public:
  void clear_weight_filler();
  const ::trtcaffe::FillerParameter& weight_filler() const;
  ::trtcaffe::FillerParameter* release_weight_filler();
  ::trtcaffe::FillerParameter* mutable_weight_filler();
  void set_allocated_weight_filler(::trtcaffe::FillerParameter* weight_filler);
  private:
  const ::trtcaffe::FillerParameter& _internal_weight_filler() const;
  ::trtcaffe::FillerParameter* _internal_mutable_weight_filler();
  public:
  void unsafe_arena_set_allocated_weight_filler(
      ::trtcaffe::FillerParameter* weight_filler);
  ::trtcaffe::FillerParameter* unsafe_arena_release_weight_filler();

  // optional .trtcaffe.FillerParameter bias_filler = 5;
  bool has_bias_filler() const;
  private:
  bool _internal_has_bias_filler() const;
  public:
  void clear_bias_filler();
  const ::trtcaffe::FillerParameter& bias_filler() const;
  ::trtcaffe::FillerParameter* release_bias_filler();
  ::trtcaffe::FillerParameter* mutable_bias_filler();
  void set_allocated_bias_filler(::trtcaffe::FillerParameter* bias_filler);
  private:
  const ::trtcaffe::FillerParameter& _internal_bias_filler() const;
  ::trtcaffe::FillerParameter* _internal_mutable_bias_filler();
  public:
  void unsafe_arena_set_allocated_bias_filler(
      ::trtcaffe::FillerParameter* bias_filler);
  ::trtcaffe::FillerParameter* unsafe_arena_release_bias_filler();

  // optional uint32 num_output = 1;
  bool has_num_output() const;
  private:
  bool _internal_has_num_output() const;
  public:
  void clear_num_output();
  ::PROTOBUF_NAMESPACE_ID::uint32 num_output() const;
  void set_num_output(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_num_output() const;
  void _internal_set_num_output(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 input_dim = 2;
  bool has_input_dim() const;
  private:
  bool _internal_has_input_dim() const;
  public:
  void clear_input_dim();
  ::PROTOBUF_NAMESPACE_ID::uint32 input_dim() const;
  void set_input_dim(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_input_dim() const;
  void _internal_set_input_dim(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional bool bias_term = 3 [default = true];
  bool has_bias_term() const;
  private:
  bool _internal_has_bias_term() const;
  public:
  void clear_bias_term();
  bool bias_term() const;
  void set_bias_term(bool value);
  private:
  bool _internal_bias_term() const;
  void _internal_set_bias_term(bool value);
  public:

  // @@protoc_insertion_point(class_scope:trtcaffe.EmbedParameter)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::trtcaffe::FillerParameter* weight_filler_;
  ::trtcaffe::FillerParameter* bias_filler_;
  ::PROTOBUF_NAMESPACE_ID::uint32 num_output_;
  ::PROTOBUF_NAMESPACE_ID::uint32 input_dim_;
  bool bias_term_;
  friend struct ::TableStruct_trtcaffe_2eproto;
};
// -------------------------------------------------------------------

class ExpParameter PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:trtcaffe.ExpParameter) */ {
 public:
  inline ExpParameter() : ExpParameter(nullptr) {};
  virtual ~ExpParameter();

  ExpParameter(const ExpParameter& from);
  ExpParameter(ExpParameter&& from) noexcept
    : ExpParameter() {
    *this = ::std::move(from);
  }

  inline ExpParameter& operator=(const ExpParameter& from) {
    CopyFrom(from);
    return *this;
  }
  inline ExpParameter& operator=(ExpParameter&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ExpParameter& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ExpParameter* internal_default_instance() {
    return reinterpret_cast<const ExpParameter*>(
               &_ExpParameter_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    33;

  friend void swap(ExpParameter& a, ExpParameter& b) {
    a.Swap(&b);
  }
  inline void Swap(ExpParameter* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ExpParameter* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ExpParameter* New() const final {
    return CreateMaybeMessage<ExpParameter>(nullptr);
  }

  ExpParameter* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ExpParameter>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ExpParameter& from);
  void MergeFrom(const ExpParameter& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ExpParameter* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "trtcaffe.ExpParameter";
  }
  protected:
  explicit ExpParameter(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_trtcaffe_2eproto);
    return ::descriptor_table_trtcaffe_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kShiftFieldNumber = 3,
    kBaseFieldNumber = 1,
    kScaleFieldNumber = 2,
  };
  // optional float shift = 3 [default = 0];
  bool has_shift() const;
  private:
  bool _internal_has_shift() const;
  public:
  void clear_shift();
  float shift() const;
  void set_shift(float value);
  private:
  float _internal_shift() const;
  void _internal_set_shift(float value);
  public:

  // optional float base = 1 [default = -1];
  bool has_base() const;
  private:
  bool _internal_has_base() const;
  public:
  void clear_base();
  float base() const;
  void set_base(float value);
  private:
  float _internal_base() const;
  void _internal_set_base(float value);
  public:

  // optional float scale = 2 [default = 1];
  bool has_scale() const;
  private:
  bool _internal_has_scale() const;
  public:
  void clear_scale();
  float scale() const;
  void set_scale(float value);
  private:
  float _internal_scale() const;
  void _internal_set_scale(float value);
  public:

  // @@protoc_insertion_point(class_scope:trtcaffe.ExpParameter)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  float shift_;
  float base_;
  float scale_;
  friend struct ::TableStruct_trtcaffe_2eproto;
};
// -------------------------------------------------------------------

class FlattenParameter PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:trtcaffe.FlattenParameter) */ {
 public:
  inline FlattenParameter() : FlattenParameter(nullptr) {};
  virtual ~FlattenParameter();

  FlattenParameter(const FlattenParameter& from);
  FlattenParameter(FlattenParameter&& from) noexcept
    : FlattenParameter() {
    *this = ::std::move(from);
  }

  inline FlattenParameter& operator=(const FlattenParameter& from) {
    CopyFrom(from);
    return *this;
  }
  inline FlattenParameter& operator=(FlattenParameter&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const FlattenParameter& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FlattenParameter* internal_default_instance() {
    return reinterpret_cast<const FlattenParameter*>(
               &_FlattenParameter_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    34;

  friend void swap(FlattenParameter& a, FlattenParameter& b) {
    a.Swap(&b);
  }
  inline void Swap(FlattenParameter* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FlattenParameter* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FlattenParameter* New() const final {
    return CreateMaybeMessage<FlattenParameter>(nullptr);
  }

  FlattenParameter* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FlattenParameter>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FlattenParameter& from);
  void MergeFrom(const FlattenParameter& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FlattenParameter* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "trtcaffe.FlattenParameter";
  }
  protected:
  explicit FlattenParameter(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_trtcaffe_2eproto);
    return ::descriptor_table_trtcaffe_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAxisFieldNumber = 1,
    kEndAxisFieldNumber = 2,
  };
  // optional int32 axis = 1 [default = 1];
  bool has_axis() const;
  private:
  bool _internal_has_axis() const;
  public:
  void clear_axis();
  ::PROTOBUF_NAMESPACE_ID::int32 axis() const;
  void set_axis(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_axis() const;
  void _internal_set_axis(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 end_axis = 2 [default = -1];
  bool has_end_axis() const;
  private:
  bool _internal_has_end_axis() const;
  public:
  void clear_end_axis();
  ::PROTOBUF_NAMESPACE_ID::int32 end_axis() const;
  void set_end_axis(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_end_axis() const;
  void _internal_set_end_axis(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:trtcaffe.FlattenParameter)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int32 axis_;
  ::PROTOBUF_NAMESPACE_ID::int32 end_axis_;
  friend struct ::TableStruct_trtcaffe_2eproto;
};
// -------------------------------------------------------------------

class HDF5DataParameter PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:trtcaffe.HDF5DataParameter) */ {
 public:
  inline HDF5DataParameter() : HDF5DataParameter(nullptr) {};
  virtual ~HDF5DataParameter();

  HDF5DataParameter(const HDF5DataParameter& from);
  HDF5DataParameter(HDF5DataParameter&& from) noexcept
    : HDF5DataParameter() {
    *this = ::std::move(from);
  }

  inline HDF5DataParameter& operator=(const HDF5DataParameter& from) {
    CopyFrom(from);
    return *this;
  }
  inline HDF5DataParameter& operator=(HDF5DataParameter&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const HDF5DataParameter& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const HDF5DataParameter* internal_default_instance() {
    return reinterpret_cast<const HDF5DataParameter*>(
               &_HDF5DataParameter_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    35;

  friend void swap(HDF5DataParameter& a, HDF5DataParameter& b) {
    a.Swap(&b);
  }
  inline void Swap(HDF5DataParameter* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(HDF5DataParameter* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline HDF5DataParameter* New() const final {
    return CreateMaybeMessage<HDF5DataParameter>(nullptr);
  }

  HDF5DataParameter* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<HDF5DataParameter>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const HDF5DataParameter& from);
  void MergeFrom(const HDF5DataParameter& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(HDF5DataParameter* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "trtcaffe.HDF5DataParameter";
  }
  protected:
  explicit HDF5DataParameter(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_trtcaffe_2eproto);
    return ::descriptor_table_trtcaffe_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSourceFieldNumber = 1,
    kBatchSizeFieldNumber = 2,
    kShuffleFieldNumber = 3,
  };
  // optional string source = 1;
  bool has_source() const;
  private:
  bool _internal_has_source() const;
  public:
  void clear_source();
  const std::string& source() const;
  void set_source(const std::string& value);
  void set_source(std::string&& value);
  void set_source(const char* value);
  void set_source(const char* value, size_t size);
  std::string* mutable_source();
  std::string* release_source();
  void set_allocated_source(std::string* source);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_source();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_source(
      std::string* source);
  private:
  const std::string& _internal_source() const;
  void _internal_set_source(const std::string& value);
  std::string* _internal_mutable_source();
  public:

  // optional uint32 batch_size = 2;
  bool has_batch_size() const;
  private:
  bool _internal_has_batch_size() const;
  public:
  void clear_batch_size();
  ::PROTOBUF_NAMESPACE_ID::uint32 batch_size() const;
  void set_batch_size(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_batch_size() const;
  void _internal_set_batch_size(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional bool shuffle = 3 [default = false];
  bool has_shuffle() const;
  private:
  bool _internal_has_shuffle() const;
  public:
  void clear_shuffle();
  bool shuffle() const;
  void set_shuffle(bool value);
  private:
  bool _internal_shuffle() const;
  void _internal_set_shuffle(bool value);
  public:

  // @@protoc_insertion_point(class_scope:trtcaffe.HDF5DataParameter)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr source_;
  ::PROTOBUF_NAMESPACE_ID::uint32 batch_size_;
  bool shuffle_;
  friend struct ::TableStruct_trtcaffe_2eproto;
};
// -------------------------------------------------------------------

class HDF5OutputParameter PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:trtcaffe.HDF5OutputParameter) */ {
 public:
  inline HDF5OutputParameter() : HDF5OutputParameter(nullptr) {};
  virtual ~HDF5OutputParameter();

  HDF5OutputParameter(const HDF5OutputParameter& from);
  HDF5OutputParameter(HDF5OutputParameter&& from) noexcept
    : HDF5OutputParameter() {
    *this = ::std::move(from);
  }

  inline HDF5OutputParameter& operator=(const HDF5OutputParameter& from) {
    CopyFrom(from);
    return *this;
  }
  inline HDF5OutputParameter& operator=(HDF5OutputParameter&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const HDF5OutputParameter& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const HDF5OutputParameter* internal_default_instance() {
    return reinterpret_cast<const HDF5OutputParameter*>(
               &_HDF5OutputParameter_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    36;

  friend void swap(HDF5OutputParameter& a, HDF5OutputParameter& b) {
    a.Swap(&b);
  }
  inline void Swap(HDF5OutputParameter* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(HDF5OutputParameter* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline HDF5OutputParameter* New() const final {
    return CreateMaybeMessage<HDF5OutputParameter>(nullptr);
  }

  HDF5OutputParameter* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<HDF5OutputParameter>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const HDF5OutputParameter& from);
  void MergeFrom(const HDF5OutputParameter& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(HDF5OutputParameter* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "trtcaffe.HDF5OutputParameter";
  }
  protected:
  explicit HDF5OutputParameter(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_trtcaffe_2eproto);
    return ::descriptor_table_trtcaffe_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFileNameFieldNumber = 1,
  };
  // optional string file_name = 1;
  bool has_file_name() const;
  private:
  bool _internal_has_file_name() const;
  public:
  void clear_file_name();
  const std::string& file_name() const;
  void set_file_name(const std::string& value);
  void set_file_name(std::string&& value);
  void set_file_name(const char* value);
  void set_file_name(const char* value, size_t size);
  std::string* mutable_file_name();
  std::string* release_file_name();
  void set_allocated_file_name(std::string* file_name);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_file_name();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_file_name(
      std::string* file_name);
  private:
  const std::string& _internal_file_name() const;
  void _internal_set_file_name(const std::string& value);
  std::string* _internal_mutable_file_name();
  public:

  // @@protoc_insertion_point(class_scope:trtcaffe.HDF5OutputParameter)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr file_name_;
  friend struct ::TableStruct_trtcaffe_2eproto;
};
// -------------------------------------------------------------------

class HingeLossParameter PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:trtcaffe.HingeLossParameter) */ {
 public:
  inline HingeLossParameter() : HingeLossParameter(nullptr) {};
  virtual ~HingeLossParameter();

  HingeLossParameter(const HingeLossParameter& from);
  HingeLossParameter(HingeLossParameter&& from) noexcept
    : HingeLossParameter() {
    *this = ::std::move(from);
  }

  inline HingeLossParameter& operator=(const HingeLossParameter& from) {
    CopyFrom(from);
    return *this;
  }
  inline HingeLossParameter& operator=(HingeLossParameter&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const HingeLossParameter& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const HingeLossParameter* internal_default_instance() {
    return reinterpret_cast<const HingeLossParameter*>(
               &_HingeLossParameter_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    37;

  friend void swap(HingeLossParameter& a, HingeLossParameter& b) {
    a.Swap(&b);
  }
  inline void Swap(HingeLossParameter* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(HingeLossParameter* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline HingeLossParameter* New() const final {
    return CreateMaybeMessage<HingeLossParameter>(nullptr);
  }

  HingeLossParameter* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<HingeLossParameter>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const HingeLossParameter& from);
  void MergeFrom(const HingeLossParameter& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(HingeLossParameter* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "trtcaffe.HingeLossParameter";
  }
  protected:
  explicit HingeLossParameter(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_trtcaffe_2eproto);
    return ::descriptor_table_trtcaffe_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef HingeLossParameter_Norm Norm;
  static constexpr Norm L1 =
    HingeLossParameter_Norm_L1;
  static constexpr Norm L2 =
    HingeLossParameter_Norm_L2;
  static inline bool Norm_IsValid(int value) {
    return HingeLossParameter_Norm_IsValid(value);
  }
  static constexpr Norm Norm_MIN =
    HingeLossParameter_Norm_Norm_MIN;
  static constexpr Norm Norm_MAX =
    HingeLossParameter_Norm_Norm_MAX;
  static constexpr int Norm_ARRAYSIZE =
    HingeLossParameter_Norm_Norm_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Norm_descriptor() {
    return HingeLossParameter_Norm_descriptor();
  }
  template<typename T>
  static inline const std::string& Norm_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Norm>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Norm_Name.");
    return HingeLossParameter_Norm_Name(enum_t_value);
  }
  static inline bool Norm_Parse(const std::string& name,
      Norm* value) {
    return HingeLossParameter_Norm_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kNormFieldNumber = 1,
  };
  // optional .trtcaffe.HingeLossParameter.Norm norm = 1 [default = L1];
  bool has_norm() const;
  private:
  bool _internal_has_norm() const;
  public:
  void clear_norm();
  ::trtcaffe::HingeLossParameter_Norm norm() const;
  void set_norm(::trtcaffe::HingeLossParameter_Norm value);
  private:
  ::trtcaffe::HingeLossParameter_Norm _internal_norm() const;
  void _internal_set_norm(::trtcaffe::HingeLossParameter_Norm value);
  public:

  // @@protoc_insertion_point(class_scope:trtcaffe.HingeLossParameter)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  int norm_;
  friend struct ::TableStruct_trtcaffe_2eproto;
};
// -------------------------------------------------------------------

class ImageDataParameter PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:trtcaffe.ImageDataParameter) */ {
 public:
  inline ImageDataParameter() : ImageDataParameter(nullptr) {};
  virtual ~ImageDataParameter();

  ImageDataParameter(const ImageDataParameter& from);
  ImageDataParameter(ImageDataParameter&& from) noexcept
    : ImageDataParameter() {
    *this = ::std::move(from);
  }

  inline ImageDataParameter& operator=(const ImageDataParameter& from) {
    CopyFrom(from);
    return *this;
  }
  inline ImageDataParameter& operator=(ImageDataParameter&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ImageDataParameter& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ImageDataParameter* internal_default_instance() {
    return reinterpret_cast<const ImageDataParameter*>(
               &_ImageDataParameter_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    38;

  friend void swap(ImageDataParameter& a, ImageDataParameter& b) {
    a.Swap(&b);
  }
  inline void Swap(ImageDataParameter* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ImageDataParameter* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ImageDataParameter* New() const final {
    return CreateMaybeMessage<ImageDataParameter>(nullptr);
  }

  ImageDataParameter* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ImageDataParameter>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ImageDataParameter& from);
  void MergeFrom(const ImageDataParameter& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ImageDataParameter* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "trtcaffe.ImageDataParameter";
  }
  protected:
  explicit ImageDataParameter(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_trtcaffe_2eproto);
    return ::descriptor_table_trtcaffe_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSourceFieldNumber = 1,
    kMeanFileFieldNumber = 3,
    kRootFolderFieldNumber = 12,
    kCropSizeFieldNumber = 5,
    kRandSkipFieldNumber = 7,
    kShuffleFieldNumber = 8,
    kMirrorFieldNumber = 6,
    kNewHeightFieldNumber = 9,
    kNewWidthFieldNumber = 10,
    kIsColorFieldNumber = 11,
    kScaleFieldNumber = 2,
    kBatchSizeFieldNumber = 4,
  };
  // optional string source = 1;
  bool has_source() const;
  private:
  bool _internal_has_source() const;
  public:
  void clear_source();
  const std::string& source() const;
  void set_source(const std::string& value);
  void set_source(std::string&& value);
  void set_source(const char* value);
  void set_source(const char* value, size_t size);
  std::string* mutable_source();
  std::string* release_source();
  void set_allocated_source(std::string* source);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_source();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_source(
      std::string* source);
  private:
  const std::string& _internal_source() const;
  void _internal_set_source(const std::string& value);
  std::string* _internal_mutable_source();
  public:

  // optional string mean_file = 3;
  bool has_mean_file() const;
  private:
  bool _internal_has_mean_file() const;
  public:
  void clear_mean_file();
  const std::string& mean_file() const;
  void set_mean_file(const std::string& value);
  void set_mean_file(std::string&& value);
  void set_mean_file(const char* value);
  void set_mean_file(const char* value, size_t size);
  std::string* mutable_mean_file();
  std::string* release_mean_file();
  void set_allocated_mean_file(std::string* mean_file);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_mean_file();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_mean_file(
      std::string* mean_file);
  private:
  const std::string& _internal_mean_file() const;
  void _internal_set_mean_file(const std::string& value);
  std::string* _internal_mutable_mean_file();
  public:

  // optional string root_folder = 12 [default = ""];
  bool has_root_folder() const;
  private:
  bool _internal_has_root_folder() const;
  public:
  void clear_root_folder();
  const std::string& root_folder() const;
  void set_root_folder(const std::string& value);
  void set_root_folder(std::string&& value);
  void set_root_folder(const char* value);
  void set_root_folder(const char* value, size_t size);
  std::string* mutable_root_folder();
  std::string* release_root_folder();
  void set_allocated_root_folder(std::string* root_folder);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_root_folder();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_root_folder(
      std::string* root_folder);
  private:
  const std::string& _internal_root_folder() const;
  void _internal_set_root_folder(const std::string& value);
  std::string* _internal_mutable_root_folder();
  public:

  // optional uint32 crop_size = 5 [default = 0];
  bool has_crop_size() const;
  private:
  bool _internal_has_crop_size() const;
  public:
  void clear_crop_size();
  ::PROTOBUF_NAMESPACE_ID::uint32 crop_size() const;
  void set_crop_size(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_crop_size() const;
  void _internal_set_crop_size(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 rand_skip = 7 [default = 0];
  bool has_rand_skip() const;
  private:
  bool _internal_has_rand_skip() const;
  public:
  void clear_rand_skip();
  ::PROTOBUF_NAMESPACE_ID::uint32 rand_skip() const;
  void set_rand_skip(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_rand_skip() const;
  void _internal_set_rand_skip(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional bool shuffle = 8 [default = false];
  bool has_shuffle() const;
  private:
  bool _internal_has_shuffle() const;
  public:
  void clear_shuffle();
  bool shuffle() const;
  void set_shuffle(bool value);
  private:
  bool _internal_shuffle() const;
  void _internal_set_shuffle(bool value);
  public:

  // optional bool mirror = 6 [default = false];
  bool has_mirror() const;
  private:
  bool _internal_has_mirror() const;
  public:
  void clear_mirror();
  bool mirror() const;
  void set_mirror(bool value);
  private:
  bool _internal_mirror() const;
  void _internal_set_mirror(bool value);
  public:

  // optional uint32 new_height = 9 [default = 0];
  bool has_new_height() const;
  private:
  bool _internal_has_new_height() const;
  public:
  void clear_new_height();
  ::PROTOBUF_NAMESPACE_ID::uint32 new_height() const;
  void set_new_height(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_new_height() const;
  void _internal_set_new_height(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 new_width = 10 [default = 0];
  bool has_new_width() const;
  private:
  bool _internal_has_new_width() const;
  public:
  void clear_new_width();
  ::PROTOBUF_NAMESPACE_ID::uint32 new_width() const;
  void set_new_width(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_new_width() const;
  void _internal_set_new_width(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional bool is_color = 11 [default = true];
  bool has_is_color() const;
  private:
  bool _internal_has_is_color() const;
  public:
  void clear_is_color();
  bool is_color() const;
  void set_is_color(bool value);
  private:
  bool _internal_is_color() const;
  void _internal_set_is_color(bool value);
  public:

  // optional float scale = 2 [default = 1];
  bool has_scale() const;
  private:
  bool _internal_has_scale() const;
  public:
  void clear_scale();
  float scale() const;
  void set_scale(float value);
  private:
  float _internal_scale() const;
  void _internal_set_scale(float value);
  public:

  // optional uint32 batch_size = 4 [default = 1];
  bool has_batch_size() const;
  private:
  bool _internal_has_batch_size() const;
  public:
  void clear_batch_size();
  ::PROTOBUF_NAMESPACE_ID::uint32 batch_size() const;
  void set_batch_size(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_batch_size() const;
  void _internal_set_batch_size(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:trtcaffe.ImageDataParameter)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr source_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr mean_file_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr root_folder_;
  ::PROTOBUF_NAMESPACE_ID::uint32 crop_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 rand_skip_;
  bool shuffle_;
  bool mirror_;
  ::PROTOBUF_NAMESPACE_ID::uint32 new_height_;
  ::PROTOBUF_NAMESPACE_ID::uint32 new_width_;
  bool is_color_;
  float scale_;
  ::PROTOBUF_NAMESPACE_ID::uint32 batch_size_;
  friend struct ::TableStruct_trtcaffe_2eproto;
};
// -------------------------------------------------------------------

class InfogainLossParameter PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:trtcaffe.InfogainLossParameter) */ {
 public:
  inline InfogainLossParameter() : InfogainLossParameter(nullptr) {};
  virtual ~InfogainLossParameter();

  InfogainLossParameter(const InfogainLossParameter& from);
  InfogainLossParameter(InfogainLossParameter&& from) noexcept
    : InfogainLossParameter() {
    *this = ::std::move(from);
  }

  inline InfogainLossParameter& operator=(const InfogainLossParameter& from) {
    CopyFrom(from);
    return *this;
  }
  inline InfogainLossParameter& operator=(InfogainLossParameter&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const InfogainLossParameter& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const InfogainLossParameter* internal_default_instance() {
    return reinterpret_cast<const InfogainLossParameter*>(
               &_InfogainLossParameter_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    39;

  friend void swap(InfogainLossParameter& a, InfogainLossParameter& b) {
    a.Swap(&b);
  }
  inline void Swap(InfogainLossParameter* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(InfogainLossParameter* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline InfogainLossParameter* New() const final {
    return CreateMaybeMessage<InfogainLossParameter>(nullptr);
  }

  InfogainLossParameter* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<InfogainLossParameter>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const InfogainLossParameter& from);
  void MergeFrom(const InfogainLossParameter& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(InfogainLossParameter* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "trtcaffe.InfogainLossParameter";
  }
  protected:
  explicit InfogainLossParameter(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_trtcaffe_2eproto);
    return ::descriptor_table_trtcaffe_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSourceFieldNumber = 1,
  };
  // optional string source = 1;
  bool has_source() const;
  private:
  bool _internal_has_source() const;
  public:
  void clear_source();
  const std::string& source() const;
  void set_source(const std::string& value);
  void set_source(std::string&& value);
  void set_source(const char* value);
  void set_source(const char* value, size_t size);
  std::string* mutable_source();
  std::string* release_source();
  void set_allocated_source(std::string* source);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_source();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_source(
      std::string* source);
  private:
  const std::string& _internal_source() const;
  void _internal_set_source(const std::string& value);
  std::string* _internal_mutable_source();
  public:

  // @@protoc_insertion_point(class_scope:trtcaffe.InfogainLossParameter)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr source_;
  friend struct ::TableStruct_trtcaffe_2eproto;
};
// -------------------------------------------------------------------

class InnerProductParameter PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:trtcaffe.InnerProductParameter) */ {
 public:
  inline InnerProductParameter() : InnerProductParameter(nullptr) {};
  virtual ~InnerProductParameter();

  InnerProductParameter(const InnerProductParameter& from);
  InnerProductParameter(InnerProductParameter&& from) noexcept
    : InnerProductParameter() {
    *this = ::std::move(from);
  }

  inline InnerProductParameter& operator=(const InnerProductParameter& from) {
    CopyFrom(from);
    return *this;
  }
  inline InnerProductParameter& operator=(InnerProductParameter&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const InnerProductParameter& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const InnerProductParameter* internal_default_instance() {
    return reinterpret_cast<const InnerProductParameter*>(
               &_InnerProductParameter_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    40;

  friend void swap(InnerProductParameter& a, InnerProductParameter& b) {
    a.Swap(&b);
  }
  inline void Swap(InnerProductParameter* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(InnerProductParameter* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline InnerProductParameter* New() const final {
    return CreateMaybeMessage<InnerProductParameter>(nullptr);
  }

  InnerProductParameter* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<InnerProductParameter>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const InnerProductParameter& from);
  void MergeFrom(const InnerProductParameter& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(InnerProductParameter* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "trtcaffe.InnerProductParameter";
  }
  protected:
  explicit InnerProductParameter(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_trtcaffe_2eproto);
    return ::descriptor_table_trtcaffe_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kWeightFillerFieldNumber = 3,
    kBiasFillerFieldNumber = 4,
    kNumOutputFieldNumber = 1,
    kTransposeFieldNumber = 6,
    kBiasTermFieldNumber = 2,
    kAxisFieldNumber = 5,
  };
  // optional .trtcaffe.FillerParameter weight_filler = 3;
  bool has_weight_filler() const;
  private:
  bool _internal_has_weight_filler() const;
  public:
  void clear_weight_filler();
  const ::trtcaffe::FillerParameter& weight_filler() const;
  ::trtcaffe::FillerParameter* release_weight_filler();
  ::trtcaffe::FillerParameter* mutable_weight_filler();
  void set_allocated_weight_filler(::trtcaffe::FillerParameter* weight_filler);
  private:
  const ::trtcaffe::FillerParameter& _internal_weight_filler() const;
  ::trtcaffe::FillerParameter* _internal_mutable_weight_filler();
  public:
  void unsafe_arena_set_allocated_weight_filler(
      ::trtcaffe::FillerParameter* weight_filler);
  ::trtcaffe::FillerParameter* unsafe_arena_release_weight_filler();

  // optional .trtcaffe.FillerParameter bias_filler = 4;
  bool has_bias_filler() const;
  private:
  bool _internal_has_bias_filler() const;
  public:
  void clear_bias_filler();
  const ::trtcaffe::FillerParameter& bias_filler() const;
  ::trtcaffe::FillerParameter* release_bias_filler();
  ::trtcaffe::FillerParameter* mutable_bias_filler();
  void set_allocated_bias_filler(::trtcaffe::FillerParameter* bias_filler);
  private:
  const ::trtcaffe::FillerParameter& _internal_bias_filler() const;
  ::trtcaffe::FillerParameter* _internal_mutable_bias_filler();
  public:
  void unsafe_arena_set_allocated_bias_filler(
      ::trtcaffe::FillerParameter* bias_filler);
  ::trtcaffe::FillerParameter* unsafe_arena_release_bias_filler();

  // optional uint32 num_output = 1;
  bool has_num_output() const;
  private:
  bool _internal_has_num_output() const;
  public:
  void clear_num_output();
  ::PROTOBUF_NAMESPACE_ID::uint32 num_output() const;
  void set_num_output(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_num_output() const;
  void _internal_set_num_output(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional bool transpose = 6 [default = false];
  bool has_transpose() const;
  private:
  bool _internal_has_transpose() const;
  public:
  void clear_transpose();
  bool transpose() const;
  void set_transpose(bool value);
  private:
  bool _internal_transpose() const;
  void _internal_set_transpose(bool value);
  public:

  // optional bool bias_term = 2 [default = true];
  bool has_bias_term() const;
  private:
  bool _internal_has_bias_term() const;
  public:
  void clear_bias_term();
  bool bias_term() const;
  void set_bias_term(bool value);
  private:
  bool _internal_bias_term() const;
  void _internal_set_bias_term(bool value);
  public:

  // optional int32 axis = 5 [default = 1];
  bool has_axis() const;
  private:
  bool _internal_has_axis() const;
  public:
  void clear_axis();
  ::PROTOBUF_NAMESPACE_ID::int32 axis() const;
  void set_axis(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_axis() const;
  void _internal_set_axis(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:trtcaffe.InnerProductParameter)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::trtcaffe::FillerParameter* weight_filler_;
  ::trtcaffe::FillerParameter* bias_filler_;
  ::PROTOBUF_NAMESPACE_ID::uint32 num_output_;
  bool transpose_;
  bool bias_term_;
  ::PROTOBUF_NAMESPACE_ID::int32 axis_;
  friend struct ::TableStruct_trtcaffe_2eproto;
};
// -------------------------------------------------------------------

class InputParameter PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:trtcaffe.InputParameter) */ {
 public:
  inline InputParameter() : InputParameter(nullptr) {};
  virtual ~InputParameter();

  InputParameter(const InputParameter& from);
  InputParameter(InputParameter&& from) noexcept
    : InputParameter() {
    *this = ::std::move(from);
  }

  inline InputParameter& operator=(const InputParameter& from) {
    CopyFrom(from);
    return *this;
  }
  inline InputParameter& operator=(InputParameter&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const InputParameter& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const InputParameter* internal_default_instance() {
    return reinterpret_cast<const InputParameter*>(
               &_InputParameter_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    41;

  friend void swap(InputParameter& a, InputParameter& b) {
    a.Swap(&b);
  }
  inline void Swap(InputParameter* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(InputParameter* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline InputParameter* New() const final {
    return CreateMaybeMessage<InputParameter>(nullptr);
  }

  InputParameter* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<InputParameter>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const InputParameter& from);
  void MergeFrom(const InputParameter& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(InputParameter* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "trtcaffe.InputParameter";
  }
  protected:
  explicit InputParameter(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_trtcaffe_2eproto);
    return ::descriptor_table_trtcaffe_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kShapeFieldNumber = 1,
  };
  // repeated .trtcaffe.BlobShape shape = 1;
  int shape_size() const;
  private:
  int _internal_shape_size() const;
  public:
  void clear_shape();
  ::trtcaffe::BlobShape* mutable_shape(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::trtcaffe::BlobShape >*
      mutable_shape();
  private:
  const ::trtcaffe::BlobShape& _internal_shape(int index) const;
  ::trtcaffe::BlobShape* _internal_add_shape();
  public:
  const ::trtcaffe::BlobShape& shape(int index) const;
  ::trtcaffe::BlobShape* add_shape();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::trtcaffe::BlobShape >&
      shape() const;

  // @@protoc_insertion_point(class_scope:trtcaffe.InputParameter)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::trtcaffe::BlobShape > shape_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_trtcaffe_2eproto;
};
// -------------------------------------------------------------------

class LogParameter PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:trtcaffe.LogParameter) */ {
 public:
  inline LogParameter() : LogParameter(nullptr) {};
  virtual ~LogParameter();

  LogParameter(const LogParameter& from);
  LogParameter(LogParameter&& from) noexcept
    : LogParameter() {
    *this = ::std::move(from);
  }

  inline LogParameter& operator=(const LogParameter& from) {
    CopyFrom(from);
    return *this;
  }
  inline LogParameter& operator=(LogParameter&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LogParameter& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LogParameter* internal_default_instance() {
    return reinterpret_cast<const LogParameter*>(
               &_LogParameter_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    42;

  friend void swap(LogParameter& a, LogParameter& b) {
    a.Swap(&b);
  }
  inline void Swap(LogParameter* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LogParameter* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LogParameter* New() const final {
    return CreateMaybeMessage<LogParameter>(nullptr);
  }

  LogParameter* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LogParameter>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LogParameter& from);
  void MergeFrom(const LogParameter& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LogParameter* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "trtcaffe.LogParameter";
  }
  protected:
  explicit LogParameter(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_trtcaffe_2eproto);
    return ::descriptor_table_trtcaffe_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kShiftFieldNumber = 3,
    kBaseFieldNumber = 1,
    kScaleFieldNumber = 2,
  };
  // optional float shift = 3 [default = 0];
  bool has_shift() const;
  private:
  bool _internal_has_shift() const;
  public:
  void clear_shift();
  float shift() const;
  void set_shift(float value);
  private:
  float _internal_shift() const;
  void _internal_set_shift(float value);
  public:

  // optional float base = 1 [default = -1];
  bool has_base() const;
  private:
  bool _internal_has_base() const;
  public:
  void clear_base();
  float base() const;
  void set_base(float value);
  private:
  float _internal_base() const;
  void _internal_set_base(float value);
  public:

  // optional float scale = 2 [default = 1];
  bool has_scale() const;
  private:
  bool _internal_has_scale() const;
  public:
  void clear_scale();
  float scale() const;
  void set_scale(float value);
  private:
  float _internal_scale() const;
  void _internal_set_scale(float value);
  public:

  // @@protoc_insertion_point(class_scope:trtcaffe.LogParameter)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  float shift_;
  float base_;
  float scale_;
  friend struct ::TableStruct_trtcaffe_2eproto;
};
// -------------------------------------------------------------------

class LRNParameter PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:trtcaffe.LRNParameter) */ {
 public:
  inline LRNParameter() : LRNParameter(nullptr) {};
  virtual ~LRNParameter();

  LRNParameter(const LRNParameter& from);
  LRNParameter(LRNParameter&& from) noexcept
    : LRNParameter() {
    *this = ::std::move(from);
  }

  inline LRNParameter& operator=(const LRNParameter& from) {
    CopyFrom(from);
    return *this;
  }
  inline LRNParameter& operator=(LRNParameter&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LRNParameter& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LRNParameter* internal_default_instance() {
    return reinterpret_cast<const LRNParameter*>(
               &_LRNParameter_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    43;

  friend void swap(LRNParameter& a, LRNParameter& b) {
    a.Swap(&b);
  }
  inline void Swap(LRNParameter* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LRNParameter* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LRNParameter* New() const final {
    return CreateMaybeMessage<LRNParameter>(nullptr);
  }

  LRNParameter* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LRNParameter>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LRNParameter& from);
  void MergeFrom(const LRNParameter& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LRNParameter* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "trtcaffe.LRNParameter";
  }
  protected:
  explicit LRNParameter(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_trtcaffe_2eproto);
    return ::descriptor_table_trtcaffe_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef LRNParameter_NormRegion NormRegion;
  static constexpr NormRegion ACROSS_CHANNELS =
    LRNParameter_NormRegion_ACROSS_CHANNELS;
  static constexpr NormRegion WITHIN_CHANNEL =
    LRNParameter_NormRegion_WITHIN_CHANNEL;
  static inline bool NormRegion_IsValid(int value) {
    return LRNParameter_NormRegion_IsValid(value);
  }
  static constexpr NormRegion NormRegion_MIN =
    LRNParameter_NormRegion_NormRegion_MIN;
  static constexpr NormRegion NormRegion_MAX =
    LRNParameter_NormRegion_NormRegion_MAX;
  static constexpr int NormRegion_ARRAYSIZE =
    LRNParameter_NormRegion_NormRegion_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  NormRegion_descriptor() {
    return LRNParameter_NormRegion_descriptor();
  }
  template<typename T>
  static inline const std::string& NormRegion_Name(T enum_t_value) {
    static_assert(::std::is_same<T, NormRegion>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function NormRegion_Name.");
    return LRNParameter_NormRegion_Name(enum_t_value);
  }
  static inline bool NormRegion_Parse(const std::string& name,
      NormRegion* value) {
    return LRNParameter_NormRegion_Parse(name, value);
  }

  typedef LRNParameter_Engine Engine;
  static constexpr Engine DEFAULT =
    LRNParameter_Engine_DEFAULT;
  static constexpr Engine CAFFE =
    LRNParameter_Engine_CAFFE;
  static constexpr Engine CUDNN =
    LRNParameter_Engine_CUDNN;
  static inline bool Engine_IsValid(int value) {
    return LRNParameter_Engine_IsValid(value);
  }
  static constexpr Engine Engine_MIN =
    LRNParameter_Engine_Engine_MIN;
  static constexpr Engine Engine_MAX =
    LRNParameter_Engine_Engine_MAX;
  static constexpr int Engine_ARRAYSIZE =
    LRNParameter_Engine_Engine_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Engine_descriptor() {
    return LRNParameter_Engine_descriptor();
  }
  template<typename T>
  static inline const std::string& Engine_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Engine>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Engine_Name.");
    return LRNParameter_Engine_Name(enum_t_value);
  }
  static inline bool Engine_Parse(const std::string& name,
      Engine* value) {
    return LRNParameter_Engine_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kNormRegionFieldNumber = 4,
    kEngineFieldNumber = 6,
    kLocalSizeFieldNumber = 1,
    kAlphaFieldNumber = 2,
    kBetaFieldNumber = 3,
    kKFieldNumber = 5,
  };
  // optional .trtcaffe.LRNParameter.NormRegion norm_region = 4 [default = ACROSS_CHANNELS];
  bool has_norm_region() const;
  private:
  bool _internal_has_norm_region() const;
  public:
  void clear_norm_region();
  ::trtcaffe::LRNParameter_NormRegion norm_region() const;
  void set_norm_region(::trtcaffe::LRNParameter_NormRegion value);
  private:
  ::trtcaffe::LRNParameter_NormRegion _internal_norm_region() const;
  void _internal_set_norm_region(::trtcaffe::LRNParameter_NormRegion value);
  public:

  // optional .trtcaffe.LRNParameter.Engine engine = 6 [default = DEFAULT];
  bool has_engine() const;
  private:
  bool _internal_has_engine() const;
  public:
  void clear_engine();
  ::trtcaffe::LRNParameter_Engine engine() const;
  void set_engine(::trtcaffe::LRNParameter_Engine value);
  private:
  ::trtcaffe::LRNParameter_Engine _internal_engine() const;
  void _internal_set_engine(::trtcaffe::LRNParameter_Engine value);
  public:

  // optional uint32 local_size = 1 [default = 5];
  bool has_local_size() const;
  private:
  bool _internal_has_local_size() const;
  public:
  void clear_local_size();
  ::PROTOBUF_NAMESPACE_ID::uint32 local_size() const;
  void set_local_size(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_local_size() const;
  void _internal_set_local_size(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional float alpha = 2 [default = 1];
  bool has_alpha() const;
  private:
  bool _internal_has_alpha() const;
  public:
  void clear_alpha();
  float alpha() const;
  void set_alpha(float value);
  private:
  float _internal_alpha() const;
  void _internal_set_alpha(float value);
  public:

  // optional float beta = 3 [default = 0.75];
  bool has_beta() const;
  private:
  bool _internal_has_beta() const;
  public:
  void clear_beta();
  float beta() const;
  void set_beta(float value);
  private:
  float _internal_beta() const;
  void _internal_set_beta(float value);
  public:

  // optional float k = 5 [default = 1];
  bool has_k() const;
  private:
  bool _internal_has_k() const;
  public:
  void clear_k();
  float k() const;
  void set_k(float value);
  private:
  float _internal_k() const;
  void _internal_set_k(float value);
  public:

  // @@protoc_insertion_point(class_scope:trtcaffe.LRNParameter)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  int norm_region_;
  int engine_;
  ::PROTOBUF_NAMESPACE_ID::uint32 local_size_;
  float alpha_;
  float beta_;
  float k_;
  friend struct ::TableStruct_trtcaffe_2eproto;
};
// -------------------------------------------------------------------

class MemoryDataParameter PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:trtcaffe.MemoryDataParameter) */ {
 public:
  inline MemoryDataParameter() : MemoryDataParameter(nullptr) {};
  virtual ~MemoryDataParameter();

  MemoryDataParameter(const MemoryDataParameter& from);
  MemoryDataParameter(MemoryDataParameter&& from) noexcept
    : MemoryDataParameter() {
    *this = ::std::move(from);
  }

  inline MemoryDataParameter& operator=(const MemoryDataParameter& from) {
    CopyFrom(from);
    return *this;
  }
  inline MemoryDataParameter& operator=(MemoryDataParameter&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MemoryDataParameter& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MemoryDataParameter* internal_default_instance() {
    return reinterpret_cast<const MemoryDataParameter*>(
               &_MemoryDataParameter_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    44;

  friend void swap(MemoryDataParameter& a, MemoryDataParameter& b) {
    a.Swap(&b);
  }
  inline void Swap(MemoryDataParameter* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MemoryDataParameter* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MemoryDataParameter* New() const final {
    return CreateMaybeMessage<MemoryDataParameter>(nullptr);
  }

  MemoryDataParameter* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MemoryDataParameter>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MemoryDataParameter& from);
  void MergeFrom(const MemoryDataParameter& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MemoryDataParameter* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "trtcaffe.MemoryDataParameter";
  }
  protected:
  explicit MemoryDataParameter(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_trtcaffe_2eproto);
    return ::descriptor_table_trtcaffe_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBatchSizeFieldNumber = 1,
    kChannelsFieldNumber = 2,
    kHeightFieldNumber = 3,
    kWidthFieldNumber = 4,
  };
  // optional uint32 batch_size = 1;
  bool has_batch_size() const;
  private:
  bool _internal_has_batch_size() const;
  public:
  void clear_batch_size();
  ::PROTOBUF_NAMESPACE_ID::uint32 batch_size() const;
  void set_batch_size(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_batch_size() const;
  void _internal_set_batch_size(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 channels = 2;
  bool has_channels() const;
  private:
  bool _internal_has_channels() const;
  public:
  void clear_channels();
  ::PROTOBUF_NAMESPACE_ID::uint32 channels() const;
  void set_channels(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_channels() const;
  void _internal_set_channels(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 height = 3;
  bool has_height() const;
  private:
  bool _internal_has_height() const;
  public:
  void clear_height();
  ::PROTOBUF_NAMESPACE_ID::uint32 height() const;
  void set_height(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_height() const;
  void _internal_set_height(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 width = 4;
  bool has_width() const;
  private:
  bool _internal_has_width() const;
  public:
  void clear_width();
  ::PROTOBUF_NAMESPACE_ID::uint32 width() const;
  void set_width(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_width() const;
  void _internal_set_width(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:trtcaffe.MemoryDataParameter)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 batch_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 channels_;
  ::PROTOBUF_NAMESPACE_ID::uint32 height_;
  ::PROTOBUF_NAMESPACE_ID::uint32 width_;
  friend struct ::TableStruct_trtcaffe_2eproto;
};
// -------------------------------------------------------------------

class MVNParameter PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:trtcaffe.MVNParameter) */ {
 public:
  inline MVNParameter() : MVNParameter(nullptr) {};
  virtual ~MVNParameter();

  MVNParameter(const MVNParameter& from);
  MVNParameter(MVNParameter&& from) noexcept
    : MVNParameter() {
    *this = ::std::move(from);
  }

  inline MVNParameter& operator=(const MVNParameter& from) {
    CopyFrom(from);
    return *this;
  }
  inline MVNParameter& operator=(MVNParameter&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MVNParameter& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MVNParameter* internal_default_instance() {
    return reinterpret_cast<const MVNParameter*>(
               &_MVNParameter_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    45;

  friend void swap(MVNParameter& a, MVNParameter& b) {
    a.Swap(&b);
  }
  inline void Swap(MVNParameter* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MVNParameter* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MVNParameter* New() const final {
    return CreateMaybeMessage<MVNParameter>(nullptr);
  }

  MVNParameter* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MVNParameter>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MVNParameter& from);
  void MergeFrom(const MVNParameter& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MVNParameter* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "trtcaffe.MVNParameter";
  }
  protected:
  explicit MVNParameter(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_trtcaffe_2eproto);
    return ::descriptor_table_trtcaffe_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAcrossChannelsFieldNumber = 2,
    kNormalizeVarianceFieldNumber = 1,
    kEpsFieldNumber = 3,
  };
  // optional bool across_channels = 2 [default = false];
  bool has_across_channels() const;
  private:
  bool _internal_has_across_channels() const;
  public:
  void clear_across_channels();
  bool across_channels() const;
  void set_across_channels(bool value);
  private:
  bool _internal_across_channels() const;
  void _internal_set_across_channels(bool value);
  public:

  // optional bool normalize_variance = 1 [default = true];
  bool has_normalize_variance() const;
  private:
  bool _internal_has_normalize_variance() const;
  public:
  void clear_normalize_variance();
  bool normalize_variance() const;
  void set_normalize_variance(bool value);
  private:
  bool _internal_normalize_variance() const;
  void _internal_set_normalize_variance(bool value);
  public:

  // optional float eps = 3 [default = 1e-09];
  bool has_eps() const;
  private:
  bool _internal_has_eps() const;
  public:
  void clear_eps();
  float eps() const;
  void set_eps(float value);
  private:
  float _internal_eps() const;
  void _internal_set_eps(float value);
  public:

  // @@protoc_insertion_point(class_scope:trtcaffe.MVNParameter)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  bool across_channels_;
  bool normalize_variance_;
  float eps_;
  friend struct ::TableStruct_trtcaffe_2eproto;
};
// -------------------------------------------------------------------

class NormalizeParameter PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:trtcaffe.NormalizeParameter) */ {
 public:
  inline NormalizeParameter() : NormalizeParameter(nullptr) {};
  virtual ~NormalizeParameter();

  NormalizeParameter(const NormalizeParameter& from);
  NormalizeParameter(NormalizeParameter&& from) noexcept
    : NormalizeParameter() {
    *this = ::std::move(from);
  }

  inline NormalizeParameter& operator=(const NormalizeParameter& from) {
    CopyFrom(from);
    return *this;
  }
  inline NormalizeParameter& operator=(NormalizeParameter&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const NormalizeParameter& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const NormalizeParameter* internal_default_instance() {
    return reinterpret_cast<const NormalizeParameter*>(
               &_NormalizeParameter_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    46;

  friend void swap(NormalizeParameter& a, NormalizeParameter& b) {
    a.Swap(&b);
  }
  inline void Swap(NormalizeParameter* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NormalizeParameter* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline NormalizeParameter* New() const final {
    return CreateMaybeMessage<NormalizeParameter>(nullptr);
  }

  NormalizeParameter* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<NormalizeParameter>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const NormalizeParameter& from);
  void MergeFrom(const NormalizeParameter& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NormalizeParameter* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "trtcaffe.NormalizeParameter";
  }
  protected:
  explicit NormalizeParameter(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_trtcaffe_2eproto);
    return ::descriptor_table_trtcaffe_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kScaleFillerFieldNumber = 2,
    kAcrossSpatialFieldNumber = 1,
    kChannelSharedFieldNumber = 3,
    kEpsFieldNumber = 4,
  };
  // optional .trtcaffe.FillerParameter scale_filler = 2;
  bool has_scale_filler() const;
  private:
  bool _internal_has_scale_filler() const;
  public:
  void clear_scale_filler();
  const ::trtcaffe::FillerParameter& scale_filler() const;
  ::trtcaffe::FillerParameter* release_scale_filler();
  ::trtcaffe::FillerParameter* mutable_scale_filler();
  void set_allocated_scale_filler(::trtcaffe::FillerParameter* scale_filler);
  private:
  const ::trtcaffe::FillerParameter& _internal_scale_filler() const;
  ::trtcaffe::FillerParameter* _internal_mutable_scale_filler();
  public:
  void unsafe_arena_set_allocated_scale_filler(
      ::trtcaffe::FillerParameter* scale_filler);
  ::trtcaffe::FillerParameter* unsafe_arena_release_scale_filler();

  // optional bool across_spatial = 1 [default = true];
  bool has_across_spatial() const;
  private:
  bool _internal_has_across_spatial() const;
  public:
  void clear_across_spatial();
  bool across_spatial() const;
  void set_across_spatial(bool value);
  private:
  bool _internal_across_spatial() const;
  void _internal_set_across_spatial(bool value);
  public:

  // optional bool channel_shared = 3 [default = true];
  bool has_channel_shared() const;
  private:
  bool _internal_has_channel_shared() const;
  public:
  void clear_channel_shared();
  bool channel_shared() const;
  void set_channel_shared(bool value);
  private:
  bool _internal_channel_shared() const;
  void _internal_set_channel_shared(bool value);
  public:

  // optional float eps = 4 [default = 1e-10];
  bool has_eps() const;
  private:
  bool _internal_has_eps() const;
  public:
  void clear_eps();
  float eps() const;
  void set_eps(float value);
  private:
  float _internal_eps() const;
  void _internal_set_eps(float value);
  public:

  // @@protoc_insertion_point(class_scope:trtcaffe.NormalizeParameter)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::trtcaffe::FillerParameter* scale_filler_;
  bool across_spatial_;
  bool channel_shared_;
  float eps_;
  friend struct ::TableStruct_trtcaffe_2eproto;
};
// -------------------------------------------------------------------

class PermuteParameter PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:trtcaffe.PermuteParameter) */ {
 public:
  inline PermuteParameter() : PermuteParameter(nullptr) {};
  virtual ~PermuteParameter();

  PermuteParameter(const PermuteParameter& from);
  PermuteParameter(PermuteParameter&& from) noexcept
    : PermuteParameter() {
    *this = ::std::move(from);
  }

  inline PermuteParameter& operator=(const PermuteParameter& from) {
    CopyFrom(from);
    return *this;
  }
  inline PermuteParameter& operator=(PermuteParameter&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PermuteParameter& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PermuteParameter* internal_default_instance() {
    return reinterpret_cast<const PermuteParameter*>(
               &_PermuteParameter_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    47;

  friend void swap(PermuteParameter& a, PermuteParameter& b) {
    a.Swap(&b);
  }
  inline void Swap(PermuteParameter* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PermuteParameter* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PermuteParameter* New() const final {
    return CreateMaybeMessage<PermuteParameter>(nullptr);
  }

  PermuteParameter* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PermuteParameter>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PermuteParameter& from);
  void MergeFrom(const PermuteParameter& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PermuteParameter* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "trtcaffe.PermuteParameter";
  }
  protected:
  explicit PermuteParameter(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_trtcaffe_2eproto);
    return ::descriptor_table_trtcaffe_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOrderFieldNumber = 1,
  };
  // repeated uint32 order = 1;
  int order_size() const;
  private:
  int _internal_order_size() const;
  public:
  void clear_order();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_order(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      _internal_order() const;
  void _internal_add_order(::PROTOBUF_NAMESPACE_ID::uint32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      _internal_mutable_order();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint32 order(int index) const;
  void set_order(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value);
  void add_order(::PROTOBUF_NAMESPACE_ID::uint32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      order() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      mutable_order();

  // @@protoc_insertion_point(class_scope:trtcaffe.PermuteParameter)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 > order_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_trtcaffe_2eproto;
};
// -------------------------------------------------------------------

class PoolingParameter PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:trtcaffe.PoolingParameter) */ {
 public:
  inline PoolingParameter() : PoolingParameter(nullptr) {};
  virtual ~PoolingParameter();

  PoolingParameter(const PoolingParameter& from);
  PoolingParameter(PoolingParameter&& from) noexcept
    : PoolingParameter() {
    *this = ::std::move(from);
  }

  inline PoolingParameter& operator=(const PoolingParameter& from) {
    CopyFrom(from);
    return *this;
  }
  inline PoolingParameter& operator=(PoolingParameter&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PoolingParameter& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PoolingParameter* internal_default_instance() {
    return reinterpret_cast<const PoolingParameter*>(
               &_PoolingParameter_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    48;

  friend void swap(PoolingParameter& a, PoolingParameter& b) {
    a.Swap(&b);
  }
  inline void Swap(PoolingParameter* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PoolingParameter* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PoolingParameter* New() const final {
    return CreateMaybeMessage<PoolingParameter>(nullptr);
  }

  PoolingParameter* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PoolingParameter>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PoolingParameter& from);
  void MergeFrom(const PoolingParameter& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PoolingParameter* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "trtcaffe.PoolingParameter";
  }
  protected:
  explicit PoolingParameter(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_trtcaffe_2eproto);
    return ::descriptor_table_trtcaffe_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef PoolingParameter_PoolMethod PoolMethod;
  static constexpr PoolMethod MAX =
    PoolingParameter_PoolMethod_MAX;
  static constexpr PoolMethod AVE =
    PoolingParameter_PoolMethod_AVE;
  static constexpr PoolMethod STOCHASTIC =
    PoolingParameter_PoolMethod_STOCHASTIC;
  static inline bool PoolMethod_IsValid(int value) {
    return PoolingParameter_PoolMethod_IsValid(value);
  }
  static constexpr PoolMethod PoolMethod_MIN =
    PoolingParameter_PoolMethod_PoolMethod_MIN;
  static constexpr PoolMethod PoolMethod_MAX =
    PoolingParameter_PoolMethod_PoolMethod_MAX;
  static constexpr int PoolMethod_ARRAYSIZE =
    PoolingParameter_PoolMethod_PoolMethod_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  PoolMethod_descriptor() {
    return PoolingParameter_PoolMethod_descriptor();
  }
  template<typename T>
  static inline const std::string& PoolMethod_Name(T enum_t_value) {
    static_assert(::std::is_same<T, PoolMethod>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function PoolMethod_Name.");
    return PoolingParameter_PoolMethod_Name(enum_t_value);
  }
  static inline bool PoolMethod_Parse(const std::string& name,
      PoolMethod* value) {
    return PoolingParameter_PoolMethod_Parse(name, value);
  }

  typedef PoolingParameter_Engine Engine;
  static constexpr Engine DEFAULT =
    PoolingParameter_Engine_DEFAULT;
  static constexpr Engine CAFFE =
    PoolingParameter_Engine_CAFFE;
  static constexpr Engine CUDNN =
    PoolingParameter_Engine_CUDNN;
  static inline bool Engine_IsValid(int value) {
    return PoolingParameter_Engine_IsValid(value);
  }
  static constexpr Engine Engine_MIN =
    PoolingParameter_Engine_Engine_MIN;
  static constexpr Engine Engine_MAX =
    PoolingParameter_Engine_Engine_MAX;
  static constexpr int Engine_ARRAYSIZE =
    PoolingParameter_Engine_Engine_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Engine_descriptor() {
    return PoolingParameter_Engine_descriptor();
  }
  template<typename T>
  static inline const std::string& Engine_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Engine>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Engine_Name.");
    return PoolingParameter_Engine_Name(enum_t_value);
  }
  static inline bool Engine_Parse(const std::string& name,
      Engine* value) {
    return PoolingParameter_Engine_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kPoolFieldNumber = 1,
    kKernelSizeFieldNumber = 2,
    kPadFieldNumber = 4,
    kKernelHFieldNumber = 5,
    kKernelWFieldNumber = 6,
    kStrideHFieldNumber = 7,
    kStrideWFieldNumber = 8,
    kPadHFieldNumber = 9,
    kPadWFieldNumber = 10,
    kEngineFieldNumber = 11,
    kGlobalPoolingFieldNumber = 12,
    kTorchPoolingFieldNumber = 40,
    kStrideFieldNumber = 3,
  };
  // optional .trtcaffe.PoolingParameter.PoolMethod pool = 1 [default = MAX];
  bool has_pool() const;
  private:
  bool _internal_has_pool() const;
  public:
  void clear_pool();
  ::trtcaffe::PoolingParameter_PoolMethod pool() const;
  void set_pool(::trtcaffe::PoolingParameter_PoolMethod value);
  private:
  ::trtcaffe::PoolingParameter_PoolMethod _internal_pool() const;
  void _internal_set_pool(::trtcaffe::PoolingParameter_PoolMethod value);
  public:

  // optional uint32 kernel_size = 2;
  bool has_kernel_size() const;
  private:
  bool _internal_has_kernel_size() const;
  public:
  void clear_kernel_size();
  ::PROTOBUF_NAMESPACE_ID::uint32 kernel_size() const;
  void set_kernel_size(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_kernel_size() const;
  void _internal_set_kernel_size(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 pad = 4 [default = 0];
  bool has_pad() const;
  private:
  bool _internal_has_pad() const;
  public:
  void clear_pad();
  ::PROTOBUF_NAMESPACE_ID::uint32 pad() const;
  void set_pad(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_pad() const;
  void _internal_set_pad(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 kernel_h = 5;
  bool has_kernel_h() const;
  private:
  bool _internal_has_kernel_h() const;
  public:
  void clear_kernel_h();
  ::PROTOBUF_NAMESPACE_ID::uint32 kernel_h() const;
  void set_kernel_h(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_kernel_h() const;
  void _internal_set_kernel_h(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 kernel_w = 6;
  bool has_kernel_w() const;
  private:
  bool _internal_has_kernel_w() const;
  public:
  void clear_kernel_w();
  ::PROTOBUF_NAMESPACE_ID::uint32 kernel_w() const;
  void set_kernel_w(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_kernel_w() const;
  void _internal_set_kernel_w(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 stride_h = 7;
  bool has_stride_h() const;
  private:
  bool _internal_has_stride_h() const;
  public:
  void clear_stride_h();
  ::PROTOBUF_NAMESPACE_ID::uint32 stride_h() const;
  void set_stride_h(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_stride_h() const;
  void _internal_set_stride_h(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 stride_w = 8;
  bool has_stride_w() const;
  private:
  bool _internal_has_stride_w() const;
  public:
  void clear_stride_w();
  ::PROTOBUF_NAMESPACE_ID::uint32 stride_w() const;
  void set_stride_w(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_stride_w() const;
  void _internal_set_stride_w(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 pad_h = 9 [default = 0];
  bool has_pad_h() const;
  private:
  bool _internal_has_pad_h() const;
  public:
  void clear_pad_h();
  ::PROTOBUF_NAMESPACE_ID::uint32 pad_h() const;
  void set_pad_h(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_pad_h() const;
  void _internal_set_pad_h(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 pad_w = 10 [default = 0];
  bool has_pad_w() const;
  private:
  bool _internal_has_pad_w() const;
  public:
  void clear_pad_w();
  ::PROTOBUF_NAMESPACE_ID::uint32 pad_w() const;
  void set_pad_w(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_pad_w() const;
  void _internal_set_pad_w(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional .trtcaffe.PoolingParameter.Engine engine = 11 [default = DEFAULT];
  bool has_engine() const;
  private:
  bool _internal_has_engine() const;
  public:
  void clear_engine();
  ::trtcaffe::PoolingParameter_Engine engine() const;
  void set_engine(::trtcaffe::PoolingParameter_Engine value);
  private:
  ::trtcaffe::PoolingParameter_Engine _internal_engine() const;
  void _internal_set_engine(::trtcaffe::PoolingParameter_Engine value);
  public:

  // optional bool global_pooling = 12 [default = false];
  bool has_global_pooling() const;
  private:
  bool _internal_has_global_pooling() const;
  public:
  void clear_global_pooling();
  bool global_pooling() const;
  void set_global_pooling(bool value);
  private:
  bool _internal_global_pooling() const;
  void _internal_set_global_pooling(bool value);
  public:

  // optional bool torch_pooling = 40 [default = false];
  bool has_torch_pooling() const;
  private:
  bool _internal_has_torch_pooling() const;
  public:
  void clear_torch_pooling();
  bool torch_pooling() const;
  void set_torch_pooling(bool value);
  private:
  bool _internal_torch_pooling() const;
  void _internal_set_torch_pooling(bool value);
  public:

  // optional uint32 stride = 3 [default = 1];
  bool has_stride() const;
  private:
  bool _internal_has_stride() const;
  public:
  void clear_stride();
  ::PROTOBUF_NAMESPACE_ID::uint32 stride() const;
  void set_stride(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_stride() const;
  void _internal_set_stride(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:trtcaffe.PoolingParameter)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  int pool_;
  ::PROTOBUF_NAMESPACE_ID::uint32 kernel_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 pad_;
  ::PROTOBUF_NAMESPACE_ID::uint32 kernel_h_;
  ::PROTOBUF_NAMESPACE_ID::uint32 kernel_w_;
  ::PROTOBUF_NAMESPACE_ID::uint32 stride_h_;
  ::PROTOBUF_NAMESPACE_ID::uint32 stride_w_;
  ::PROTOBUF_NAMESPACE_ID::uint32 pad_h_;
  ::PROTOBUF_NAMESPACE_ID::uint32 pad_w_;
  int engine_;
  bool global_pooling_;
  bool torch_pooling_;
  ::PROTOBUF_NAMESPACE_ID::uint32 stride_;
  friend struct ::TableStruct_trtcaffe_2eproto;
};
// -------------------------------------------------------------------

class PowerParameter PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:trtcaffe.PowerParameter) */ {
 public:
  inline PowerParameter() : PowerParameter(nullptr) {};
  virtual ~PowerParameter();

  PowerParameter(const PowerParameter& from);
  PowerParameter(PowerParameter&& from) noexcept
    : PowerParameter() {
    *this = ::std::move(from);
  }

  inline PowerParameter& operator=(const PowerParameter& from) {
    CopyFrom(from);
    return *this;
  }
  inline PowerParameter& operator=(PowerParameter&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PowerParameter& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PowerParameter* internal_default_instance() {
    return reinterpret_cast<const PowerParameter*>(
               &_PowerParameter_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    49;

  friend void swap(PowerParameter& a, PowerParameter& b) {
    a.Swap(&b);
  }
  inline void Swap(PowerParameter* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PowerParameter* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PowerParameter* New() const final {
    return CreateMaybeMessage<PowerParameter>(nullptr);
  }

  PowerParameter* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PowerParameter>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PowerParameter& from);
  void MergeFrom(const PowerParameter& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PowerParameter* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "trtcaffe.PowerParameter";
  }
  protected:
  explicit PowerParameter(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_trtcaffe_2eproto);
    return ::descriptor_table_trtcaffe_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kShiftFieldNumber = 3,
    kPowerFieldNumber = 1,
    kScaleFieldNumber = 2,
  };
  // optional float shift = 3 [default = 0];
  bool has_shift() const;
  private:
  bool _internal_has_shift() const;
  public:
  void clear_shift();
  float shift() const;
  void set_shift(float value);
  private:
  float _internal_shift() const;
  void _internal_set_shift(float value);
  public:

  // optional float power = 1 [default = 1];
  bool has_power() const;
  private:
  bool _internal_has_power() const;
  public:
  void clear_power();
  float power() const;
  void set_power(float value);
  private:
  float _internal_power() const;
  void _internal_set_power(float value);
  public:

  // optional float scale = 2 [default = 1];
  bool has_scale() const;
  private:
  bool _internal_has_scale() const;
  public:
  void clear_scale();
  float scale() const;
  void set_scale(float value);
  private:
  float _internal_scale() const;
  void _internal_set_scale(float value);
  public:

  // @@protoc_insertion_point(class_scope:trtcaffe.PowerParameter)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  float shift_;
  float power_;
  float scale_;
  friend struct ::TableStruct_trtcaffe_2eproto;
};
// -------------------------------------------------------------------

class PriorBoxParameter PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:trtcaffe.PriorBoxParameter) */ {
 public:
  inline PriorBoxParameter() : PriorBoxParameter(nullptr) {};
  virtual ~PriorBoxParameter();

  PriorBoxParameter(const PriorBoxParameter& from);
  PriorBoxParameter(PriorBoxParameter&& from) noexcept
    : PriorBoxParameter() {
    *this = ::std::move(from);
  }

  inline PriorBoxParameter& operator=(const PriorBoxParameter& from) {
    CopyFrom(from);
    return *this;
  }
  inline PriorBoxParameter& operator=(PriorBoxParameter&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PriorBoxParameter& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PriorBoxParameter* internal_default_instance() {
    return reinterpret_cast<const PriorBoxParameter*>(
               &_PriorBoxParameter_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    50;

  friend void swap(PriorBoxParameter& a, PriorBoxParameter& b) {
    a.Swap(&b);
  }
  inline void Swap(PriorBoxParameter* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PriorBoxParameter* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PriorBoxParameter* New() const final {
    return CreateMaybeMessage<PriorBoxParameter>(nullptr);
  }

  PriorBoxParameter* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PriorBoxParameter>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PriorBoxParameter& from);
  void MergeFrom(const PriorBoxParameter& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PriorBoxParameter* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "trtcaffe.PriorBoxParameter";
  }
  protected:
  explicit PriorBoxParameter(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_trtcaffe_2eproto);
    return ::descriptor_table_trtcaffe_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef PriorBoxParameter_CodeType CodeType;
  static constexpr CodeType CORNER =
    PriorBoxParameter_CodeType_CORNER;
  static constexpr CodeType CENTER_SIZE =
    PriorBoxParameter_CodeType_CENTER_SIZE;
  static constexpr CodeType CORNER_SIZE =
    PriorBoxParameter_CodeType_CORNER_SIZE;
  static inline bool CodeType_IsValid(int value) {
    return PriorBoxParameter_CodeType_IsValid(value);
  }
  static constexpr CodeType CodeType_MIN =
    PriorBoxParameter_CodeType_CodeType_MIN;
  static constexpr CodeType CodeType_MAX =
    PriorBoxParameter_CodeType_CodeType_MAX;
  static constexpr int CodeType_ARRAYSIZE =
    PriorBoxParameter_CodeType_CodeType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  CodeType_descriptor() {
    return PriorBoxParameter_CodeType_descriptor();
  }
  template<typename T>
  static inline const std::string& CodeType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, CodeType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function CodeType_Name.");
    return PriorBoxParameter_CodeType_Name(enum_t_value);
  }
  static inline bool CodeType_Parse(const std::string& name,
      CodeType* value) {
    return PriorBoxParameter_CodeType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kMinSizeFieldNumber = 1,
    kMaxSizeFieldNumber = 2,
    kAspectRatioFieldNumber = 3,
    kVarianceFieldNumber = 6,
    kClipFieldNumber = 5,
    kImgSizeFieldNumber = 7,
    kImgHFieldNumber = 8,
    kImgWFieldNumber = 9,
    kStepFieldNumber = 10,
    kStepHFieldNumber = 11,
    kStepWFieldNumber = 12,
    kFlipFieldNumber = 4,
    kOffsetFieldNumber = 13,
  };
  // repeated float min_size = 1;
  int min_size_size() const;
  private:
  int _internal_min_size_size() const;
  public:
  void clear_min_size();
  private:
  float _internal_min_size(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_min_size() const;
  void _internal_add_min_size(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_min_size();
  public:
  float min_size(int index) const;
  void set_min_size(int index, float value);
  void add_min_size(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      min_size() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_min_size();

  // repeated float max_size = 2;
  int max_size_size() const;
  private:
  int _internal_max_size_size() const;
  public:
  void clear_max_size();
  private:
  float _internal_max_size(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_max_size() const;
  void _internal_add_max_size(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_max_size();
  public:
  float max_size(int index) const;
  void set_max_size(int index, float value);
  void add_max_size(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      max_size() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_max_size();

  // repeated float aspect_ratio = 3;
  int aspect_ratio_size() const;
  private:
  int _internal_aspect_ratio_size() const;
  public:
  void clear_aspect_ratio();
  private:
  float _internal_aspect_ratio(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_aspect_ratio() const;
  void _internal_add_aspect_ratio(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_aspect_ratio();
  public:
  float aspect_ratio(int index) const;
  void set_aspect_ratio(int index, float value);
  void add_aspect_ratio(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      aspect_ratio() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_aspect_ratio();

  // repeated float variance = 6;
  int variance_size() const;
  private:
  int _internal_variance_size() const;
  public:
  void clear_variance();
  private:
  float _internal_variance(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_variance() const;
  void _internal_add_variance(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_variance();
  public:
  float variance(int index) const;
  void set_variance(int index, float value);
  void add_variance(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      variance() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_variance();

  // optional bool clip = 5 [default = false];
  bool has_clip() const;
  private:
  bool _internal_has_clip() const;
  public:
  void clear_clip();
  bool clip() const;
  void set_clip(bool value);
  private:
  bool _internal_clip() const;
  void _internal_set_clip(bool value);
  public:

  // optional uint32 img_size = 7;
  bool has_img_size() const;
  private:
  bool _internal_has_img_size() const;
  public:
  void clear_img_size();
  ::PROTOBUF_NAMESPACE_ID::uint32 img_size() const;
  void set_img_size(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_img_size() const;
  void _internal_set_img_size(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 img_h = 8;
  bool has_img_h() const;
  private:
  bool _internal_has_img_h() const;
  public:
  void clear_img_h();
  ::PROTOBUF_NAMESPACE_ID::uint32 img_h() const;
  void set_img_h(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_img_h() const;
  void _internal_set_img_h(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 img_w = 9;
  bool has_img_w() const;
  private:
  bool _internal_has_img_w() const;
  public:
  void clear_img_w();
  ::PROTOBUF_NAMESPACE_ID::uint32 img_w() const;
  void set_img_w(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_img_w() const;
  void _internal_set_img_w(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional float step = 10;
  bool has_step() const;
  private:
  bool _internal_has_step() const;
  public:
  void clear_step();
  float step() const;
  void set_step(float value);
  private:
  float _internal_step() const;
  void _internal_set_step(float value);
  public:

  // optional float step_h = 11;
  bool has_step_h() const;
  private:
  bool _internal_has_step_h() const;
  public:
  void clear_step_h();
  float step_h() const;
  void set_step_h(float value);
  private:
  float _internal_step_h() const;
  void _internal_set_step_h(float value);
  public:

  // optional float step_w = 12;
  bool has_step_w() const;
  private:
  bool _internal_has_step_w() const;
  public:
  void clear_step_w();
  float step_w() const;
  void set_step_w(float value);
  private:
  float _internal_step_w() const;
  void _internal_set_step_w(float value);
  public:

  // optional bool flip = 4 [default = true];
  bool has_flip() const;
  private:
  bool _internal_has_flip() const;
  public:
  void clear_flip();
  bool flip() const;
  void set_flip(bool value);
  private:
  bool _internal_flip() const;
  void _internal_set_flip(bool value);
  public:

  // optional float offset = 13 [default = 0.5];
  bool has_offset() const;
  private:
  bool _internal_has_offset() const;
  public:
  void clear_offset();
  float offset() const;
  void set_offset(float value);
  private:
  float _internal_offset() const;
  void _internal_set_offset(float value);
  public:

  // @@protoc_insertion_point(class_scope:trtcaffe.PriorBoxParameter)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > min_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > max_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > aspect_ratio_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > variance_;
  bool clip_;
  ::PROTOBUF_NAMESPACE_ID::uint32 img_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 img_h_;
  ::PROTOBUF_NAMESPACE_ID::uint32 img_w_;
  float step_;
  float step_h_;
  float step_w_;
  bool flip_;
  float offset_;
  friend struct ::TableStruct_trtcaffe_2eproto;
};
// -------------------------------------------------------------------

class ROIPoolingParameter PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:trtcaffe.ROIPoolingParameter) */ {
 public:
  inline ROIPoolingParameter() : ROIPoolingParameter(nullptr) {};
  virtual ~ROIPoolingParameter();

  ROIPoolingParameter(const ROIPoolingParameter& from);
  ROIPoolingParameter(ROIPoolingParameter&& from) noexcept
    : ROIPoolingParameter() {
    *this = ::std::move(from);
  }

  inline ROIPoolingParameter& operator=(const ROIPoolingParameter& from) {
    CopyFrom(from);
    return *this;
  }
  inline ROIPoolingParameter& operator=(ROIPoolingParameter&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ROIPoolingParameter& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ROIPoolingParameter* internal_default_instance() {
    return reinterpret_cast<const ROIPoolingParameter*>(
               &_ROIPoolingParameter_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    51;

  friend void swap(ROIPoolingParameter& a, ROIPoolingParameter& b) {
    a.Swap(&b);
  }
  inline void Swap(ROIPoolingParameter* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ROIPoolingParameter* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ROIPoolingParameter* New() const final {
    return CreateMaybeMessage<ROIPoolingParameter>(nullptr);
  }

  ROIPoolingParameter* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ROIPoolingParameter>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ROIPoolingParameter& from);
  void MergeFrom(const ROIPoolingParameter& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ROIPoolingParameter* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "trtcaffe.ROIPoolingParameter";
  }
  protected:
  explicit ROIPoolingParameter(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_trtcaffe_2eproto);
    return ::descriptor_table_trtcaffe_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPooledHFieldNumber = 1,
    kPooledWFieldNumber = 2,
    kSpatialScaleFieldNumber = 3,
  };
  // optional uint32 pooled_h = 1 [default = 0];
  bool has_pooled_h() const;
  private:
  bool _internal_has_pooled_h() const;
  public:
  void clear_pooled_h();
  ::PROTOBUF_NAMESPACE_ID::uint32 pooled_h() const;
  void set_pooled_h(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_pooled_h() const;
  void _internal_set_pooled_h(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 pooled_w = 2 [default = 0];
  bool has_pooled_w() const;
  private:
  bool _internal_has_pooled_w() const;
  public:
  void clear_pooled_w();
  ::PROTOBUF_NAMESPACE_ID::uint32 pooled_w() const;
  void set_pooled_w(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_pooled_w() const;
  void _internal_set_pooled_w(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional float spatial_scale = 3 [default = 1];
  bool has_spatial_scale() const;
  private:
  bool _internal_has_spatial_scale() const;
  public:
  void clear_spatial_scale();
  float spatial_scale() const;
  void set_spatial_scale(float value);
  private:
  float _internal_spatial_scale() const;
  void _internal_set_spatial_scale(float value);
  public:

  // @@protoc_insertion_point(class_scope:trtcaffe.ROIPoolingParameter)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 pooled_h_;
  ::PROTOBUF_NAMESPACE_ID::uint32 pooled_w_;
  float spatial_scale_;
  friend struct ::TableStruct_trtcaffe_2eproto;
};
// -------------------------------------------------------------------

class RegionProposalParameter PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:trtcaffe.RegionProposalParameter) */ {
 public:
  inline RegionProposalParameter() : RegionProposalParameter(nullptr) {};
  virtual ~RegionProposalParameter();

  RegionProposalParameter(const RegionProposalParameter& from);
  RegionProposalParameter(RegionProposalParameter&& from) noexcept
    : RegionProposalParameter() {
    *this = ::std::move(from);
  }

  inline RegionProposalParameter& operator=(const RegionProposalParameter& from) {
    CopyFrom(from);
    return *this;
  }
  inline RegionProposalParameter& operator=(RegionProposalParameter&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RegionProposalParameter& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RegionProposalParameter* internal_default_instance() {
    return reinterpret_cast<const RegionProposalParameter*>(
               &_RegionProposalParameter_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    52;

  friend void swap(RegionProposalParameter& a, RegionProposalParameter& b) {
    a.Swap(&b);
  }
  inline void Swap(RegionProposalParameter* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RegionProposalParameter* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RegionProposalParameter* New() const final {
    return CreateMaybeMessage<RegionProposalParameter>(nullptr);
  }

  RegionProposalParameter* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RegionProposalParameter>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RegionProposalParameter& from);
  void MergeFrom(const RegionProposalParameter& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RegionProposalParameter* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "trtcaffe.RegionProposalParameter";
  }
  protected:
  explicit RegionProposalParameter(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_trtcaffe_2eproto);
    return ::descriptor_table_trtcaffe_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAnchorRatioFieldNumber = 8,
    kAnchorScaleFieldNumber = 9,
    kPrenmsTopFieldNumber = 1,
    kNmsMaxOutFieldNumber = 2,
    kIouThresholdFieldNumber = 3,
    kMinBoxSizeFieldNumber = 4,
    kFeatureStrideFieldNumber = 5,
    kAnchorRatioCountFieldNumber = 6,
    kAnchorScaleCountFieldNumber = 7,
  };
  // repeated float anchor_ratio = 8;
  int anchor_ratio_size() const;
  private:
  int _internal_anchor_ratio_size() const;
  public:
  void clear_anchor_ratio();
  private:
  float _internal_anchor_ratio(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_anchor_ratio() const;
  void _internal_add_anchor_ratio(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_anchor_ratio();
  public:
  float anchor_ratio(int index) const;
  void set_anchor_ratio(int index, float value);
  void add_anchor_ratio(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      anchor_ratio() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_anchor_ratio();

  // repeated float anchor_scale = 9;
  int anchor_scale_size() const;
  private:
  int _internal_anchor_scale_size() const;
  public:
  void clear_anchor_scale();
  private:
  float _internal_anchor_scale(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_anchor_scale() const;
  void _internal_add_anchor_scale(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_anchor_scale();
  public:
  float anchor_scale(int index) const;
  void set_anchor_scale(int index, float value);
  void add_anchor_scale(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      anchor_scale() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_anchor_scale();

  // optional uint32 prenms_top = 1;
  bool has_prenms_top() const;
  private:
  bool _internal_has_prenms_top() const;
  public:
  void clear_prenms_top();
  ::PROTOBUF_NAMESPACE_ID::uint32 prenms_top() const;
  void set_prenms_top(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_prenms_top() const;
  void _internal_set_prenms_top(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 nms_max_out = 2;
  bool has_nms_max_out() const;
  private:
  bool _internal_has_nms_max_out() const;
  public:
  void clear_nms_max_out();
  ::PROTOBUF_NAMESPACE_ID::uint32 nms_max_out() const;
  void set_nms_max_out(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_nms_max_out() const;
  void _internal_set_nms_max_out(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional float iou_threshold = 3;
  bool has_iou_threshold() const;
  private:
  bool _internal_has_iou_threshold() const;
  public:
  void clear_iou_threshold();
  float iou_threshold() const;
  void set_iou_threshold(float value);
  private:
  float _internal_iou_threshold() const;
  void _internal_set_iou_threshold(float value);
  public:

  // optional float min_box_size = 4;
  bool has_min_box_size() const;
  private:
  bool _internal_has_min_box_size() const;
  public:
  void clear_min_box_size();
  float min_box_size() const;
  void set_min_box_size(float value);
  private:
  float _internal_min_box_size() const;
  void _internal_set_min_box_size(float value);
  public:

  // optional uint32 feature_stride = 5;
  bool has_feature_stride() const;
  private:
  bool _internal_has_feature_stride() const;
  public:
  void clear_feature_stride();
  ::PROTOBUF_NAMESPACE_ID::uint32 feature_stride() const;
  void set_feature_stride(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_feature_stride() const;
  void _internal_set_feature_stride(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 anchor_ratio_count = 6 [default = 1];
  bool has_anchor_ratio_count() const;
  private:
  bool _internal_has_anchor_ratio_count() const;
  public:
  void clear_anchor_ratio_count();
  ::PROTOBUF_NAMESPACE_ID::uint32 anchor_ratio_count() const;
  void set_anchor_ratio_count(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_anchor_ratio_count() const;
  void _internal_set_anchor_ratio_count(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 anchor_scale_count = 7 [default = 1];
  bool has_anchor_scale_count() const;
  private:
  bool _internal_has_anchor_scale_count() const;
  public:
  void clear_anchor_scale_count();
  ::PROTOBUF_NAMESPACE_ID::uint32 anchor_scale_count() const;
  void set_anchor_scale_count(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_anchor_scale_count() const;
  void _internal_set_anchor_scale_count(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:trtcaffe.RegionProposalParameter)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > anchor_ratio_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > anchor_scale_;
  ::PROTOBUF_NAMESPACE_ID::uint32 prenms_top_;
  ::PROTOBUF_NAMESPACE_ID::uint32 nms_max_out_;
  float iou_threshold_;
  float min_box_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 feature_stride_;
  ::PROTOBUF_NAMESPACE_ID::uint32 anchor_ratio_count_;
  ::PROTOBUF_NAMESPACE_ID::uint32 anchor_scale_count_;
  friend struct ::TableStruct_trtcaffe_2eproto;
};
// -------------------------------------------------------------------

class PythonParameter PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:trtcaffe.PythonParameter) */ {
 public:
  inline PythonParameter() : PythonParameter(nullptr) {};
  virtual ~PythonParameter();

  PythonParameter(const PythonParameter& from);
  PythonParameter(PythonParameter&& from) noexcept
    : PythonParameter() {
    *this = ::std::move(from);
  }

  inline PythonParameter& operator=(const PythonParameter& from) {
    CopyFrom(from);
    return *this;
  }
  inline PythonParameter& operator=(PythonParameter&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PythonParameter& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PythonParameter* internal_default_instance() {
    return reinterpret_cast<const PythonParameter*>(
               &_PythonParameter_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    53;

  friend void swap(PythonParameter& a, PythonParameter& b) {
    a.Swap(&b);
  }
  inline void Swap(PythonParameter* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PythonParameter* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PythonParameter* New() const final {
    return CreateMaybeMessage<PythonParameter>(nullptr);
  }

  PythonParameter* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PythonParameter>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PythonParameter& from);
  void MergeFrom(const PythonParameter& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PythonParameter* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "trtcaffe.PythonParameter";
  }
  protected:
  explicit PythonParameter(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_trtcaffe_2eproto);
    return ::descriptor_table_trtcaffe_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kModuleFieldNumber = 1,
    kLayerFieldNumber = 2,
    kParamStrFieldNumber = 3,
    kShareInParallelFieldNumber = 4,
  };
  // optional string module = 1;
  bool has_module() const;
  private:
  bool _internal_has_module() const;
  public:
  void clear_module();
  const std::string& module() const;
  void set_module(const std::string& value);
  void set_module(std::string&& value);
  void set_module(const char* value);
  void set_module(const char* value, size_t size);
  std::string* mutable_module();
  std::string* release_module();
  void set_allocated_module(std::string* module);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_module();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_module(
      std::string* module);
  private:
  const std::string& _internal_module() const;
  void _internal_set_module(const std::string& value);
  std::string* _internal_mutable_module();
  public:

  // optional string layer = 2;
  bool has_layer() const;
  private:
  bool _internal_has_layer() const;
  public:
  void clear_layer();
  const std::string& layer() const;
  void set_layer(const std::string& value);
  void set_layer(std::string&& value);
  void set_layer(const char* value);
  void set_layer(const char* value, size_t size);
  std::string* mutable_layer();
  std::string* release_layer();
  void set_allocated_layer(std::string* layer);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_layer();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_layer(
      std::string* layer);
  private:
  const std::string& _internal_layer() const;
  void _internal_set_layer(const std::string& value);
  std::string* _internal_mutable_layer();
  public:

  // optional string param_str = 3 [default = ""];
  bool has_param_str() const;
  private:
  bool _internal_has_param_str() const;
  public:
  void clear_param_str();
  const std::string& param_str() const;
  void set_param_str(const std::string& value);
  void set_param_str(std::string&& value);
  void set_param_str(const char* value);
  void set_param_str(const char* value, size_t size);
  std::string* mutable_param_str();
  std::string* release_param_str();
  void set_allocated_param_str(std::string* param_str);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_param_str();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_param_str(
      std::string* param_str);
  private:
  const std::string& _internal_param_str() const;
  void _internal_set_param_str(const std::string& value);
  std::string* _internal_mutable_param_str();
  public:

  // optional bool share_in_parallel = 4 [default = false];
  bool has_share_in_parallel() const;
  private:
  bool _internal_has_share_in_parallel() const;
  public:
  void clear_share_in_parallel();
  bool share_in_parallel() const;
  void set_share_in_parallel(bool value);
  private:
  bool _internal_share_in_parallel() const;
  void _internal_set_share_in_parallel(bool value);
  public:

  // @@protoc_insertion_point(class_scope:trtcaffe.PythonParameter)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr module_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr layer_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr param_str_;
  bool share_in_parallel_;
  friend struct ::TableStruct_trtcaffe_2eproto;
};
// -------------------------------------------------------------------

class ReductionParameter PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:trtcaffe.ReductionParameter) */ {
 public:
  inline ReductionParameter() : ReductionParameter(nullptr) {};
  virtual ~ReductionParameter();

  ReductionParameter(const ReductionParameter& from);
  ReductionParameter(ReductionParameter&& from) noexcept
    : ReductionParameter() {
    *this = ::std::move(from);
  }

  inline ReductionParameter& operator=(const ReductionParameter& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReductionParameter& operator=(ReductionParameter&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ReductionParameter& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ReductionParameter* internal_default_instance() {
    return reinterpret_cast<const ReductionParameter*>(
               &_ReductionParameter_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    54;

  friend void swap(ReductionParameter& a, ReductionParameter& b) {
    a.Swap(&b);
  }
  inline void Swap(ReductionParameter* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReductionParameter* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ReductionParameter* New() const final {
    return CreateMaybeMessage<ReductionParameter>(nullptr);
  }

  ReductionParameter* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ReductionParameter>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ReductionParameter& from);
  void MergeFrom(const ReductionParameter& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReductionParameter* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "trtcaffe.ReductionParameter";
  }
  protected:
  explicit ReductionParameter(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_trtcaffe_2eproto);
    return ::descriptor_table_trtcaffe_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef ReductionParameter_ReductionOp ReductionOp;
  static constexpr ReductionOp SUM =
    ReductionParameter_ReductionOp_SUM;
  static constexpr ReductionOp ASUM =
    ReductionParameter_ReductionOp_ASUM;
  static constexpr ReductionOp SUMSQ =
    ReductionParameter_ReductionOp_SUMSQ;
  static constexpr ReductionOp MEAN =
    ReductionParameter_ReductionOp_MEAN;
  static inline bool ReductionOp_IsValid(int value) {
    return ReductionParameter_ReductionOp_IsValid(value);
  }
  static constexpr ReductionOp ReductionOp_MIN =
    ReductionParameter_ReductionOp_ReductionOp_MIN;
  static constexpr ReductionOp ReductionOp_MAX =
    ReductionParameter_ReductionOp_ReductionOp_MAX;
  static constexpr int ReductionOp_ARRAYSIZE =
    ReductionParameter_ReductionOp_ReductionOp_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  ReductionOp_descriptor() {
    return ReductionParameter_ReductionOp_descriptor();
  }
  template<typename T>
  static inline const std::string& ReductionOp_Name(T enum_t_value) {
    static_assert(::std::is_same<T, ReductionOp>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function ReductionOp_Name.");
    return ReductionParameter_ReductionOp_Name(enum_t_value);
  }
  static inline bool ReductionOp_Parse(const std::string& name,
      ReductionOp* value) {
    return ReductionParameter_ReductionOp_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kAxisFieldNumber = 2,
    kOperationFieldNumber = 1,
    kCoeffFieldNumber = 3,
  };
  // optional int32 axis = 2 [default = 0];
  bool has_axis() const;
  private:
  bool _internal_has_axis() const;
  public:
  void clear_axis();
  ::PROTOBUF_NAMESPACE_ID::int32 axis() const;
  void set_axis(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_axis() const;
  void _internal_set_axis(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional .trtcaffe.ReductionParameter.ReductionOp operation = 1 [default = SUM];
  bool has_operation() const;
  private:
  bool _internal_has_operation() const;
  public:
  void clear_operation();
  ::trtcaffe::ReductionParameter_ReductionOp operation() const;
  void set_operation(::trtcaffe::ReductionParameter_ReductionOp value);
  private:
  ::trtcaffe::ReductionParameter_ReductionOp _internal_operation() const;
  void _internal_set_operation(::trtcaffe::ReductionParameter_ReductionOp value);
  public:

  // optional float coeff = 3 [default = 1];
  bool has_coeff() const;
  private:
  bool _internal_has_coeff() const;
  public:
  void clear_coeff();
  float coeff() const;
  void set_coeff(float value);
  private:
  float _internal_coeff() const;
  void _internal_set_coeff(float value);
  public:

  // @@protoc_insertion_point(class_scope:trtcaffe.ReductionParameter)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int32 axis_;
  int operation_;
  float coeff_;
  friend struct ::TableStruct_trtcaffe_2eproto;
};
// -------------------------------------------------------------------

class ReLUParameter PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:trtcaffe.ReLUParameter) */ {
 public:
  inline ReLUParameter() : ReLUParameter(nullptr) {};
  virtual ~ReLUParameter();

  ReLUParameter(const ReLUParameter& from);
  ReLUParameter(ReLUParameter&& from) noexcept
    : ReLUParameter() {
    *this = ::std::move(from);
  }

  inline ReLUParameter& operator=(const ReLUParameter& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReLUParameter& operator=(ReLUParameter&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ReLUParameter& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ReLUParameter* internal_default_instance() {
    return reinterpret_cast<const ReLUParameter*>(
               &_ReLUParameter_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    55;

  friend void swap(ReLUParameter& a, ReLUParameter& b) {
    a.Swap(&b);
  }
  inline void Swap(ReLUParameter* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReLUParameter* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ReLUParameter* New() const final {
    return CreateMaybeMessage<ReLUParameter>(nullptr);
  }

  ReLUParameter* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ReLUParameter>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ReLUParameter& from);
  void MergeFrom(const ReLUParameter& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReLUParameter* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "trtcaffe.ReLUParameter";
  }
  protected:
  explicit ReLUParameter(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_trtcaffe_2eproto);
    return ::descriptor_table_trtcaffe_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef ReLUParameter_Engine Engine;
  static constexpr Engine DEFAULT =
    ReLUParameter_Engine_DEFAULT;
  static constexpr Engine CAFFE =
    ReLUParameter_Engine_CAFFE;
  static constexpr Engine CUDNN =
    ReLUParameter_Engine_CUDNN;
  static inline bool Engine_IsValid(int value) {
    return ReLUParameter_Engine_IsValid(value);
  }
  static constexpr Engine Engine_MIN =
    ReLUParameter_Engine_Engine_MIN;
  static constexpr Engine Engine_MAX =
    ReLUParameter_Engine_Engine_MAX;
  static constexpr int Engine_ARRAYSIZE =
    ReLUParameter_Engine_Engine_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Engine_descriptor() {
    return ReLUParameter_Engine_descriptor();
  }
  template<typename T>
  static inline const std::string& Engine_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Engine>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Engine_Name.");
    return ReLUParameter_Engine_Name(enum_t_value);
  }
  static inline bool Engine_Parse(const std::string& name,
      Engine* value) {
    return ReLUParameter_Engine_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kNegativeSlopeFieldNumber = 1,
    kEngineFieldNumber = 2,
  };
  // optional float negative_slope = 1 [default = 0];
  bool has_negative_slope() const;
  private:
  bool _internal_has_negative_slope() const;
  public:
  void clear_negative_slope();
  float negative_slope() const;
  void set_negative_slope(float value);
  private:
  float _internal_negative_slope() const;
  void _internal_set_negative_slope(float value);
  public:

  // optional .trtcaffe.ReLUParameter.Engine engine = 2 [default = DEFAULT];
  bool has_engine() const;
  private:
  bool _internal_has_engine() const;
  public:
  void clear_engine();
  ::trtcaffe::ReLUParameter_Engine engine() const;
  void set_engine(::trtcaffe::ReLUParameter_Engine value);
  private:
  ::trtcaffe::ReLUParameter_Engine _internal_engine() const;
  void _internal_set_engine(::trtcaffe::ReLUParameter_Engine value);
  public:

  // @@protoc_insertion_point(class_scope:trtcaffe.ReLUParameter)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  float negative_slope_;
  int engine_;
  friend struct ::TableStruct_trtcaffe_2eproto;
};
// -------------------------------------------------------------------

class ReshapeParameter PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:trtcaffe.ReshapeParameter) */ {
 public:
  inline ReshapeParameter() : ReshapeParameter(nullptr) {};
  virtual ~ReshapeParameter();

  ReshapeParameter(const ReshapeParameter& from);
  ReshapeParameter(ReshapeParameter&& from) noexcept
    : ReshapeParameter() {
    *this = ::std::move(from);
  }

  inline ReshapeParameter& operator=(const ReshapeParameter& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReshapeParameter& operator=(ReshapeParameter&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ReshapeParameter& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ReshapeParameter* internal_default_instance() {
    return reinterpret_cast<const ReshapeParameter*>(
               &_ReshapeParameter_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    56;

  friend void swap(ReshapeParameter& a, ReshapeParameter& b) {
    a.Swap(&b);
  }
  inline void Swap(ReshapeParameter* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReshapeParameter* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ReshapeParameter* New() const final {
    return CreateMaybeMessage<ReshapeParameter>(nullptr);
  }

  ReshapeParameter* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ReshapeParameter>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ReshapeParameter& from);
  void MergeFrom(const ReshapeParameter& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReshapeParameter* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "trtcaffe.ReshapeParameter";
  }
  protected:
  explicit ReshapeParameter(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_trtcaffe_2eproto);
    return ::descriptor_table_trtcaffe_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kShapeFieldNumber = 1,
    kAxisFieldNumber = 2,
    kNumAxesFieldNumber = 3,
  };
  // optional .trtcaffe.BlobShape shape = 1;
  bool has_shape() const;
  private:
  bool _internal_has_shape() const;
  public:
  void clear_shape();
  const ::trtcaffe::BlobShape& shape() const;
  ::trtcaffe::BlobShape* release_shape();
  ::trtcaffe::BlobShape* mutable_shape();
  void set_allocated_shape(::trtcaffe::BlobShape* shape);
  private:
  const ::trtcaffe::BlobShape& _internal_shape() const;
  ::trtcaffe::BlobShape* _internal_mutable_shape();
  public:
  void unsafe_arena_set_allocated_shape(
      ::trtcaffe::BlobShape* shape);
  ::trtcaffe::BlobShape* unsafe_arena_release_shape();

  // optional int32 axis = 2 [default = 0];
  bool has_axis() const;
  private:
  bool _internal_has_axis() const;
  public:
  void clear_axis();
  ::PROTOBUF_NAMESPACE_ID::int32 axis() const;
  void set_axis(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_axis() const;
  void _internal_set_axis(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 num_axes = 3 [default = -1];
  bool has_num_axes() const;
  private:
  bool _internal_has_num_axes() const;
  public:
  void clear_num_axes();
  ::PROTOBUF_NAMESPACE_ID::int32 num_axes() const;
  void set_num_axes(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_num_axes() const;
  void _internal_set_num_axes(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:trtcaffe.ReshapeParameter)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::trtcaffe::BlobShape* shape_;
  ::PROTOBUF_NAMESPACE_ID::int32 axis_;
  ::PROTOBUF_NAMESPACE_ID::int32 num_axes_;
  friend struct ::TableStruct_trtcaffe_2eproto;
};
// -------------------------------------------------------------------

class ScaleParameter PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:trtcaffe.ScaleParameter) */ {
 public:
  inline ScaleParameter() : ScaleParameter(nullptr) {};
  virtual ~ScaleParameter();

  ScaleParameter(const ScaleParameter& from);
  ScaleParameter(ScaleParameter&& from) noexcept
    : ScaleParameter() {
    *this = ::std::move(from);
  }

  inline ScaleParameter& operator=(const ScaleParameter& from) {
    CopyFrom(from);
    return *this;
  }
  inline ScaleParameter& operator=(ScaleParameter&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ScaleParameter& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ScaleParameter* internal_default_instance() {
    return reinterpret_cast<const ScaleParameter*>(
               &_ScaleParameter_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    57;

  friend void swap(ScaleParameter& a, ScaleParameter& b) {
    a.Swap(&b);
  }
  inline void Swap(ScaleParameter* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ScaleParameter* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ScaleParameter* New() const final {
    return CreateMaybeMessage<ScaleParameter>(nullptr);
  }

  ScaleParameter* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ScaleParameter>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ScaleParameter& from);
  void MergeFrom(const ScaleParameter& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ScaleParameter* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "trtcaffe.ScaleParameter";
  }
  protected:
  explicit ScaleParameter(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_trtcaffe_2eproto);
    return ::descriptor_table_trtcaffe_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFillerFieldNumber = 3,
    kBiasFillerFieldNumber = 5,
    kBiasTermFieldNumber = 4,
    kAxisFieldNumber = 1,
    kNumAxesFieldNumber = 2,
  };
  // optional .trtcaffe.FillerParameter filler = 3;
  bool has_filler() const;
  private:
  bool _internal_has_filler() const;
  public:
  void clear_filler();
  const ::trtcaffe::FillerParameter& filler() const;
  ::trtcaffe::FillerParameter* release_filler();
  ::trtcaffe::FillerParameter* mutable_filler();
  void set_allocated_filler(::trtcaffe::FillerParameter* filler);
  private:
  const ::trtcaffe::FillerParameter& _internal_filler() const;
  ::trtcaffe::FillerParameter* _internal_mutable_filler();
  public:
  void unsafe_arena_set_allocated_filler(
      ::trtcaffe::FillerParameter* filler);
  ::trtcaffe::FillerParameter* unsafe_arena_release_filler();

  // optional .trtcaffe.FillerParameter bias_filler = 5;
  bool has_bias_filler() const;
  private:
  bool _internal_has_bias_filler() const;
  public:
  void clear_bias_filler();
  const ::trtcaffe::FillerParameter& bias_filler() const;
  ::trtcaffe::FillerParameter* release_bias_filler();
  ::trtcaffe::FillerParameter* mutable_bias_filler();
  void set_allocated_bias_filler(::trtcaffe::FillerParameter* bias_filler);
  private:
  const ::trtcaffe::FillerParameter& _internal_bias_filler() const;
  ::trtcaffe::FillerParameter* _internal_mutable_bias_filler();
  public:
  void unsafe_arena_set_allocated_bias_filler(
      ::trtcaffe::FillerParameter* bias_filler);
  ::trtcaffe::FillerParameter* unsafe_arena_release_bias_filler();

  // optional bool bias_term = 4 [default = false];
  bool has_bias_term() const;
  private:
  bool _internal_has_bias_term() const;
  public:
  void clear_bias_term();
  bool bias_term() const;
  void set_bias_term(bool value);
  private:
  bool _internal_bias_term() const;
  void _internal_set_bias_term(bool value);
  public:

  // optional int32 axis = 1 [default = 1];
  bool has_axis() const;
  private:
  bool _internal_has_axis() const;
  public:
  void clear_axis();
  ::PROTOBUF_NAMESPACE_ID::int32 axis() const;
  void set_axis(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_axis() const;
  void _internal_set_axis(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 num_axes = 2 [default = 1];
  bool has_num_axes() const;
  private:
  bool _internal_has_num_axes() const;
  public:
  void clear_num_axes();
  ::PROTOBUF_NAMESPACE_ID::int32 num_axes() const;
  void set_num_axes(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_num_axes() const;
  void _internal_set_num_axes(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:trtcaffe.ScaleParameter)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::trtcaffe::FillerParameter* filler_;
  ::trtcaffe::FillerParameter* bias_filler_;
  bool bias_term_;
  ::PROTOBUF_NAMESPACE_ID::int32 axis_;
  ::PROTOBUF_NAMESPACE_ID::int32 num_axes_;
  friend struct ::TableStruct_trtcaffe_2eproto;
};
// -------------------------------------------------------------------

class SigmoidParameter PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:trtcaffe.SigmoidParameter) */ {
 public:
  inline SigmoidParameter() : SigmoidParameter(nullptr) {};
  virtual ~SigmoidParameter();

  SigmoidParameter(const SigmoidParameter& from);
  SigmoidParameter(SigmoidParameter&& from) noexcept
    : SigmoidParameter() {
    *this = ::std::move(from);
  }

  inline SigmoidParameter& operator=(const SigmoidParameter& from) {
    CopyFrom(from);
    return *this;
  }
  inline SigmoidParameter& operator=(SigmoidParameter&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SigmoidParameter& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SigmoidParameter* internal_default_instance() {
    return reinterpret_cast<const SigmoidParameter*>(
               &_SigmoidParameter_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    58;

  friend void swap(SigmoidParameter& a, SigmoidParameter& b) {
    a.Swap(&b);
  }
  inline void Swap(SigmoidParameter* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SigmoidParameter* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SigmoidParameter* New() const final {
    return CreateMaybeMessage<SigmoidParameter>(nullptr);
  }

  SigmoidParameter* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SigmoidParameter>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SigmoidParameter& from);
  void MergeFrom(const SigmoidParameter& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SigmoidParameter* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "trtcaffe.SigmoidParameter";
  }
  protected:
  explicit SigmoidParameter(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_trtcaffe_2eproto);
    return ::descriptor_table_trtcaffe_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef SigmoidParameter_Engine Engine;
  static constexpr Engine DEFAULT =
    SigmoidParameter_Engine_DEFAULT;
  static constexpr Engine CAFFE =
    SigmoidParameter_Engine_CAFFE;
  static constexpr Engine CUDNN =
    SigmoidParameter_Engine_CUDNN;
  static inline bool Engine_IsValid(int value) {
    return SigmoidParameter_Engine_IsValid(value);
  }
  static constexpr Engine Engine_MIN =
    SigmoidParameter_Engine_Engine_MIN;
  static constexpr Engine Engine_MAX =
    SigmoidParameter_Engine_Engine_MAX;
  static constexpr int Engine_ARRAYSIZE =
    SigmoidParameter_Engine_Engine_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Engine_descriptor() {
    return SigmoidParameter_Engine_descriptor();
  }
  template<typename T>
  static inline const std::string& Engine_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Engine>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Engine_Name.");
    return SigmoidParameter_Engine_Name(enum_t_value);
  }
  static inline bool Engine_Parse(const std::string& name,
      Engine* value) {
    return SigmoidParameter_Engine_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kEngineFieldNumber = 1,
  };
  // optional .trtcaffe.SigmoidParameter.Engine engine = 1 [default = DEFAULT];
  bool has_engine() const;
  private:
  bool _internal_has_engine() const;
  public:
  void clear_engine();
  ::trtcaffe::SigmoidParameter_Engine engine() const;
  void set_engine(::trtcaffe::SigmoidParameter_Engine value);
  private:
  ::trtcaffe::SigmoidParameter_Engine _internal_engine() const;
  void _internal_set_engine(::trtcaffe::SigmoidParameter_Engine value);
  public:

  // @@protoc_insertion_point(class_scope:trtcaffe.SigmoidParameter)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  int engine_;
  friend struct ::TableStruct_trtcaffe_2eproto;
};
// -------------------------------------------------------------------

class SliceParameter PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:trtcaffe.SliceParameter) */ {
 public:
  inline SliceParameter() : SliceParameter(nullptr) {};
  virtual ~SliceParameter();

  SliceParameter(const SliceParameter& from);
  SliceParameter(SliceParameter&& from) noexcept
    : SliceParameter() {
    *this = ::std::move(from);
  }

  inline SliceParameter& operator=(const SliceParameter& from) {
    CopyFrom(from);
    return *this;
  }
  inline SliceParameter& operator=(SliceParameter&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SliceParameter& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SliceParameter* internal_default_instance() {
    return reinterpret_cast<const SliceParameter*>(
               &_SliceParameter_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    59;

  friend void swap(SliceParameter& a, SliceParameter& b) {
    a.Swap(&b);
  }
  inline void Swap(SliceParameter* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SliceParameter* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SliceParameter* New() const final {
    return CreateMaybeMessage<SliceParameter>(nullptr);
  }

  SliceParameter* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SliceParameter>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SliceParameter& from);
  void MergeFrom(const SliceParameter& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SliceParameter* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "trtcaffe.SliceParameter";
  }
  protected:
  explicit SliceParameter(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_trtcaffe_2eproto);
    return ::descriptor_table_trtcaffe_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSlicePointFieldNumber = 2,
    kSliceDimFieldNumber = 1,
    kAxisFieldNumber = 3,
  };
  // repeated uint32 slice_point = 2;
  int slice_point_size() const;
  private:
  int _internal_slice_point_size() const;
  public:
  void clear_slice_point();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_slice_point(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      _internal_slice_point() const;
  void _internal_add_slice_point(::PROTOBUF_NAMESPACE_ID::uint32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      _internal_mutable_slice_point();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint32 slice_point(int index) const;
  void set_slice_point(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value);
  void add_slice_point(::PROTOBUF_NAMESPACE_ID::uint32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      slice_point() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      mutable_slice_point();

  // optional uint32 slice_dim = 1 [default = 1];
  bool has_slice_dim() const;
  private:
  bool _internal_has_slice_dim() const;
  public:
  void clear_slice_dim();
  ::PROTOBUF_NAMESPACE_ID::uint32 slice_dim() const;
  void set_slice_dim(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_slice_dim() const;
  void _internal_set_slice_dim(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional int32 axis = 3 [default = 1];
  bool has_axis() const;
  private:
  bool _internal_has_axis() const;
  public:
  void clear_axis();
  ::PROTOBUF_NAMESPACE_ID::int32 axis() const;
  void set_axis(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_axis() const;
  void _internal_set_axis(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:trtcaffe.SliceParameter)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 > slice_point_;
  ::PROTOBUF_NAMESPACE_ID::uint32 slice_dim_;
  ::PROTOBUF_NAMESPACE_ID::int32 axis_;
  friend struct ::TableStruct_trtcaffe_2eproto;
};
// -------------------------------------------------------------------

class SoftmaxParameter PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:trtcaffe.SoftmaxParameter) */ {
 public:
  inline SoftmaxParameter() : SoftmaxParameter(nullptr) {};
  virtual ~SoftmaxParameter();

  SoftmaxParameter(const SoftmaxParameter& from);
  SoftmaxParameter(SoftmaxParameter&& from) noexcept
    : SoftmaxParameter() {
    *this = ::std::move(from);
  }

  inline SoftmaxParameter& operator=(const SoftmaxParameter& from) {
    CopyFrom(from);
    return *this;
  }
  inline SoftmaxParameter& operator=(SoftmaxParameter&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SoftmaxParameter& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SoftmaxParameter* internal_default_instance() {
    return reinterpret_cast<const SoftmaxParameter*>(
               &_SoftmaxParameter_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    60;

  friend void swap(SoftmaxParameter& a, SoftmaxParameter& b) {
    a.Swap(&b);
  }
  inline void Swap(SoftmaxParameter* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SoftmaxParameter* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SoftmaxParameter* New() const final {
    return CreateMaybeMessage<SoftmaxParameter>(nullptr);
  }

  SoftmaxParameter* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SoftmaxParameter>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SoftmaxParameter& from);
  void MergeFrom(const SoftmaxParameter& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SoftmaxParameter* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "trtcaffe.SoftmaxParameter";
  }
  protected:
  explicit SoftmaxParameter(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_trtcaffe_2eproto);
    return ::descriptor_table_trtcaffe_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef SoftmaxParameter_Engine Engine;
  static constexpr Engine DEFAULT =
    SoftmaxParameter_Engine_DEFAULT;
  static constexpr Engine CAFFE =
    SoftmaxParameter_Engine_CAFFE;
  static constexpr Engine CUDNN =
    SoftmaxParameter_Engine_CUDNN;
  static inline bool Engine_IsValid(int value) {
    return SoftmaxParameter_Engine_IsValid(value);
  }
  static constexpr Engine Engine_MIN =
    SoftmaxParameter_Engine_Engine_MIN;
  static constexpr Engine Engine_MAX =
    SoftmaxParameter_Engine_Engine_MAX;
  static constexpr int Engine_ARRAYSIZE =
    SoftmaxParameter_Engine_Engine_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Engine_descriptor() {
    return SoftmaxParameter_Engine_descriptor();
  }
  template<typename T>
  static inline const std::string& Engine_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Engine>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Engine_Name.");
    return SoftmaxParameter_Engine_Name(enum_t_value);
  }
  static inline bool Engine_Parse(const std::string& name,
      Engine* value) {
    return SoftmaxParameter_Engine_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kEngineFieldNumber = 1,
    kAxisFieldNumber = 2,
  };
  // optional .trtcaffe.SoftmaxParameter.Engine engine = 1 [default = DEFAULT];
  bool has_engine() const;
  private:
  bool _internal_has_engine() const;
  public:
  void clear_engine();
  ::trtcaffe::SoftmaxParameter_Engine engine() const;
  void set_engine(::trtcaffe::SoftmaxParameter_Engine value);
  private:
  ::trtcaffe::SoftmaxParameter_Engine _internal_engine() const;
  void _internal_set_engine(::trtcaffe::SoftmaxParameter_Engine value);
  public:

  // optional int32 axis = 2 [default = 1];
  bool has_axis() const;
  private:
  bool _internal_has_axis() const;
  public:
  void clear_axis();
  ::PROTOBUF_NAMESPACE_ID::int32 axis() const;
  void set_axis(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_axis() const;
  void _internal_set_axis(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:trtcaffe.SoftmaxParameter)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  int engine_;
  ::PROTOBUF_NAMESPACE_ID::int32 axis_;
  friend struct ::TableStruct_trtcaffe_2eproto;
};
// -------------------------------------------------------------------

class TanHParameter PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:trtcaffe.TanHParameter) */ {
 public:
  inline TanHParameter() : TanHParameter(nullptr) {};
  virtual ~TanHParameter();

  TanHParameter(const TanHParameter& from);
  TanHParameter(TanHParameter&& from) noexcept
    : TanHParameter() {
    *this = ::std::move(from);
  }

  inline TanHParameter& operator=(const TanHParameter& from) {
    CopyFrom(from);
    return *this;
  }
  inline TanHParameter& operator=(TanHParameter&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TanHParameter& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TanHParameter* internal_default_instance() {
    return reinterpret_cast<const TanHParameter*>(
               &_TanHParameter_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    61;

  friend void swap(TanHParameter& a, TanHParameter& b) {
    a.Swap(&b);
  }
  inline void Swap(TanHParameter* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TanHParameter* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TanHParameter* New() const final {
    return CreateMaybeMessage<TanHParameter>(nullptr);
  }

  TanHParameter* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TanHParameter>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TanHParameter& from);
  void MergeFrom(const TanHParameter& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TanHParameter* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "trtcaffe.TanHParameter";
  }
  protected:
  explicit TanHParameter(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_trtcaffe_2eproto);
    return ::descriptor_table_trtcaffe_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef TanHParameter_Engine Engine;
  static constexpr Engine DEFAULT =
    TanHParameter_Engine_DEFAULT;
  static constexpr Engine CAFFE =
    TanHParameter_Engine_CAFFE;
  static constexpr Engine CUDNN =
    TanHParameter_Engine_CUDNN;
  static inline bool Engine_IsValid(int value) {
    return TanHParameter_Engine_IsValid(value);
  }
  static constexpr Engine Engine_MIN =
    TanHParameter_Engine_Engine_MIN;
  static constexpr Engine Engine_MAX =
    TanHParameter_Engine_Engine_MAX;
  static constexpr int Engine_ARRAYSIZE =
    TanHParameter_Engine_Engine_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Engine_descriptor() {
    return TanHParameter_Engine_descriptor();
  }
  template<typename T>
  static inline const std::string& Engine_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Engine>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Engine_Name.");
    return TanHParameter_Engine_Name(enum_t_value);
  }
  static inline bool Engine_Parse(const std::string& name,
      Engine* value) {
    return TanHParameter_Engine_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kEngineFieldNumber = 1,
  };
  // optional .trtcaffe.TanHParameter.Engine engine = 1 [default = DEFAULT];
  bool has_engine() const;
  private:
  bool _internal_has_engine() const;
  public:
  void clear_engine();
  ::trtcaffe::TanHParameter_Engine engine() const;
  void set_engine(::trtcaffe::TanHParameter_Engine value);
  private:
  ::trtcaffe::TanHParameter_Engine _internal_engine() const;
  void _internal_set_engine(::trtcaffe::TanHParameter_Engine value);
  public:

  // @@protoc_insertion_point(class_scope:trtcaffe.TanHParameter)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  int engine_;
  friend struct ::TableStruct_trtcaffe_2eproto;
};
// -------------------------------------------------------------------

class TileParameter PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:trtcaffe.TileParameter) */ {
 public:
  inline TileParameter() : TileParameter(nullptr) {};
  virtual ~TileParameter();

  TileParameter(const TileParameter& from);
  TileParameter(TileParameter&& from) noexcept
    : TileParameter() {
    *this = ::std::move(from);
  }

  inline TileParameter& operator=(const TileParameter& from) {
    CopyFrom(from);
    return *this;
  }
  inline TileParameter& operator=(TileParameter&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TileParameter& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TileParameter* internal_default_instance() {
    return reinterpret_cast<const TileParameter*>(
               &_TileParameter_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    62;

  friend void swap(TileParameter& a, TileParameter& b) {
    a.Swap(&b);
  }
  inline void Swap(TileParameter* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TileParameter* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TileParameter* New() const final {
    return CreateMaybeMessage<TileParameter>(nullptr);
  }

  TileParameter* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TileParameter>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TileParameter& from);
  void MergeFrom(const TileParameter& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TileParameter* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "trtcaffe.TileParameter";
  }
  protected:
  explicit TileParameter(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_trtcaffe_2eproto);
    return ::descriptor_table_trtcaffe_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTilesFieldNumber = 2,
    kAxisFieldNumber = 1,
  };
  // optional int32 tiles = 2;
  bool has_tiles() const;
  private:
  bool _internal_has_tiles() const;
  public:
  void clear_tiles();
  ::PROTOBUF_NAMESPACE_ID::int32 tiles() const;
  void set_tiles(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_tiles() const;
  void _internal_set_tiles(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 axis = 1 [default = 1];
  bool has_axis() const;
  private:
  bool _internal_has_axis() const;
  public:
  void clear_axis();
  ::PROTOBUF_NAMESPACE_ID::int32 axis() const;
  void set_axis(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_axis() const;
  void _internal_set_axis(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:trtcaffe.TileParameter)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int32 tiles_;
  ::PROTOBUF_NAMESPACE_ID::int32 axis_;
  friend struct ::TableStruct_trtcaffe_2eproto;
};
// -------------------------------------------------------------------

class ThresholdParameter PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:trtcaffe.ThresholdParameter) */ {
 public:
  inline ThresholdParameter() : ThresholdParameter(nullptr) {};
  virtual ~ThresholdParameter();

  ThresholdParameter(const ThresholdParameter& from);
  ThresholdParameter(ThresholdParameter&& from) noexcept
    : ThresholdParameter() {
    *this = ::std::move(from);
  }

  inline ThresholdParameter& operator=(const ThresholdParameter& from) {
    CopyFrom(from);
    return *this;
  }
  inline ThresholdParameter& operator=(ThresholdParameter&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ThresholdParameter& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ThresholdParameter* internal_default_instance() {
    return reinterpret_cast<const ThresholdParameter*>(
               &_ThresholdParameter_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    63;

  friend void swap(ThresholdParameter& a, ThresholdParameter& b) {
    a.Swap(&b);
  }
  inline void Swap(ThresholdParameter* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ThresholdParameter* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ThresholdParameter* New() const final {
    return CreateMaybeMessage<ThresholdParameter>(nullptr);
  }

  ThresholdParameter* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ThresholdParameter>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ThresholdParameter& from);
  void MergeFrom(const ThresholdParameter& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ThresholdParameter* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "trtcaffe.ThresholdParameter";
  }
  protected:
  explicit ThresholdParameter(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_trtcaffe_2eproto);
    return ::descriptor_table_trtcaffe_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kThresholdFieldNumber = 1,
  };
  // optional float threshold = 1 [default = 0];
  bool has_threshold() const;
  private:
  bool _internal_has_threshold() const;
  public:
  void clear_threshold();
  float threshold() const;
  void set_threshold(float value);
  private:
  float _internal_threshold() const;
  void _internal_set_threshold(float value);
  public:

  // @@protoc_insertion_point(class_scope:trtcaffe.ThresholdParameter)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  float threshold_;
  friend struct ::TableStruct_trtcaffe_2eproto;
};
// -------------------------------------------------------------------

class WindowDataParameter PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:trtcaffe.WindowDataParameter) */ {
 public:
  inline WindowDataParameter() : WindowDataParameter(nullptr) {};
  virtual ~WindowDataParameter();

  WindowDataParameter(const WindowDataParameter& from);
  WindowDataParameter(WindowDataParameter&& from) noexcept
    : WindowDataParameter() {
    *this = ::std::move(from);
  }

  inline WindowDataParameter& operator=(const WindowDataParameter& from) {
    CopyFrom(from);
    return *this;
  }
  inline WindowDataParameter& operator=(WindowDataParameter&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const WindowDataParameter& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const WindowDataParameter* internal_default_instance() {
    return reinterpret_cast<const WindowDataParameter*>(
               &_WindowDataParameter_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    64;

  friend void swap(WindowDataParameter& a, WindowDataParameter& b) {
    a.Swap(&b);
  }
  inline void Swap(WindowDataParameter* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(WindowDataParameter* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline WindowDataParameter* New() const final {
    return CreateMaybeMessage<WindowDataParameter>(nullptr);
  }

  WindowDataParameter* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<WindowDataParameter>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const WindowDataParameter& from);
  void MergeFrom(const WindowDataParameter& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(WindowDataParameter* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "trtcaffe.WindowDataParameter";
  }
  protected:
  explicit WindowDataParameter(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_trtcaffe_2eproto);
    return ::descriptor_table_trtcaffe_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSourceFieldNumber = 1,
    kMeanFileFieldNumber = 3,
    kCropModeFieldNumber = 11,
    kRootFolderFieldNumber = 13,
    kBatchSizeFieldNumber = 4,
    kCropSizeFieldNumber = 5,
    kMirrorFieldNumber = 6,
    kCacheImagesFieldNumber = 12,
    kContextPadFieldNumber = 10,
    kScaleFieldNumber = 2,
    kFgThresholdFieldNumber = 7,
    kBgThresholdFieldNumber = 8,
    kFgFractionFieldNumber = 9,
  };
  // optional string source = 1;
  bool has_source() const;
  private:
  bool _internal_has_source() const;
  public:
  void clear_source();
  const std::string& source() const;
  void set_source(const std::string& value);
  void set_source(std::string&& value);
  void set_source(const char* value);
  void set_source(const char* value, size_t size);
  std::string* mutable_source();
  std::string* release_source();
  void set_allocated_source(std::string* source);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_source();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_source(
      std::string* source);
  private:
  const std::string& _internal_source() const;
  void _internal_set_source(const std::string& value);
  std::string* _internal_mutable_source();
  public:

  // optional string mean_file = 3;
  bool has_mean_file() const;
  private:
  bool _internal_has_mean_file() const;
  public:
  void clear_mean_file();
  const std::string& mean_file() const;
  void set_mean_file(const std::string& value);
  void set_mean_file(std::string&& value);
  void set_mean_file(const char* value);
  void set_mean_file(const char* value, size_t size);
  std::string* mutable_mean_file();
  std::string* release_mean_file();
  void set_allocated_mean_file(std::string* mean_file);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_mean_file();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_mean_file(
      std::string* mean_file);
  private:
  const std::string& _internal_mean_file() const;
  void _internal_set_mean_file(const std::string& value);
  std::string* _internal_mutable_mean_file();
  public:

  // optional string crop_mode = 11 [default = "warp"];
  bool has_crop_mode() const;
  private:
  bool _internal_has_crop_mode() const;
  public:
  void clear_crop_mode();
  const std::string& crop_mode() const;
  void set_crop_mode(const std::string& value);
  void set_crop_mode(std::string&& value);
  void set_crop_mode(const char* value);
  void set_crop_mode(const char* value, size_t size);
  std::string* mutable_crop_mode();
  std::string* release_crop_mode();
  void set_allocated_crop_mode(std::string* crop_mode);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_crop_mode();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_crop_mode(
      std::string* crop_mode);
  private:
  const std::string& _internal_crop_mode() const;
  void _internal_set_crop_mode(const std::string& value);
  std::string* _internal_mutable_crop_mode();
  public:

  // optional string root_folder = 13 [default = ""];
  bool has_root_folder() const;
  private:
  bool _internal_has_root_folder() const;
  public:
  void clear_root_folder();
  const std::string& root_folder() const;
  void set_root_folder(const std::string& value);
  void set_root_folder(std::string&& value);
  void set_root_folder(const char* value);
  void set_root_folder(const char* value, size_t size);
  std::string* mutable_root_folder();
  std::string* release_root_folder();
  void set_allocated_root_folder(std::string* root_folder);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_root_folder();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_root_folder(
      std::string* root_folder);
  private:
  const std::string& _internal_root_folder() const;
  void _internal_set_root_folder(const std::string& value);
  std::string* _internal_mutable_root_folder();
  public:

  // optional uint32 batch_size = 4;
  bool has_batch_size() const;
  private:
  bool _internal_has_batch_size() const;
  public:
  void clear_batch_size();
  ::PROTOBUF_NAMESPACE_ID::uint32 batch_size() const;
  void set_batch_size(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_batch_size() const;
  void _internal_set_batch_size(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 crop_size = 5 [default = 0];
  bool has_crop_size() const;
  private:
  bool _internal_has_crop_size() const;
  public:
  void clear_crop_size();
  ::PROTOBUF_NAMESPACE_ID::uint32 crop_size() const;
  void set_crop_size(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_crop_size() const;
  void _internal_set_crop_size(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional bool mirror = 6 [default = false];
  bool has_mirror() const;
  private:
  bool _internal_has_mirror() const;
  public:
  void clear_mirror();
  bool mirror() const;
  void set_mirror(bool value);
  private:
  bool _internal_mirror() const;
  void _internal_set_mirror(bool value);
  public:

  // optional bool cache_images = 12 [default = false];
  bool has_cache_images() const;
  private:
  bool _internal_has_cache_images() const;
  public:
  void clear_cache_images();
  bool cache_images() const;
  void set_cache_images(bool value);
  private:
  bool _internal_cache_images() const;
  void _internal_set_cache_images(bool value);
  public:

  // optional uint32 context_pad = 10 [default = 0];
  bool has_context_pad() const;
  private:
  bool _internal_has_context_pad() const;
  public:
  void clear_context_pad();
  ::PROTOBUF_NAMESPACE_ID::uint32 context_pad() const;
  void set_context_pad(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_context_pad() const;
  void _internal_set_context_pad(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional float scale = 2 [default = 1];
  bool has_scale() const;
  private:
  bool _internal_has_scale() const;
  public:
  void clear_scale();
  float scale() const;
  void set_scale(float value);
  private:
  float _internal_scale() const;
  void _internal_set_scale(float value);
  public:

  // optional float fg_threshold = 7 [default = 0.5];
  bool has_fg_threshold() const;
  private:
  bool _internal_has_fg_threshold() const;
  public:
  void clear_fg_threshold();
  float fg_threshold() const;
  void set_fg_threshold(float value);
  private:
  float _internal_fg_threshold() const;
  void _internal_set_fg_threshold(float value);
  public:

  // optional float bg_threshold = 8 [default = 0.5];
  bool has_bg_threshold() const;
  private:
  bool _internal_has_bg_threshold() const;
  public:
  void clear_bg_threshold();
  float bg_threshold() const;
  void set_bg_threshold(float value);
  private:
  float _internal_bg_threshold() const;
  void _internal_set_bg_threshold(float value);
  public:

  // optional float fg_fraction = 9 [default = 0.25];
  bool has_fg_fraction() const;
  private:
  bool _internal_has_fg_fraction() const;
  public:
  void clear_fg_fraction();
  float fg_fraction() const;
  void set_fg_fraction(float value);
  private:
  float _internal_fg_fraction() const;
  void _internal_set_fg_fraction(float value);
  public:

  // @@protoc_insertion_point(class_scope:trtcaffe.WindowDataParameter)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr source_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr mean_file_;
  public:
  static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> _i_give_permission_to_break_this_code_default_crop_mode_;
  private:
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr crop_mode_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr root_folder_;
  ::PROTOBUF_NAMESPACE_ID::uint32 batch_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 crop_size_;
  bool mirror_;
  bool cache_images_;
  ::PROTOBUF_NAMESPACE_ID::uint32 context_pad_;
  float scale_;
  float fg_threshold_;
  float bg_threshold_;
  float fg_fraction_;
  friend struct ::TableStruct_trtcaffe_2eproto;
};
// -------------------------------------------------------------------

class SPPParameter PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:trtcaffe.SPPParameter) */ {
 public:
  inline SPPParameter() : SPPParameter(nullptr) {};
  virtual ~SPPParameter();

  SPPParameter(const SPPParameter& from);
  SPPParameter(SPPParameter&& from) noexcept
    : SPPParameter() {
    *this = ::std::move(from);
  }

  inline SPPParameter& operator=(const SPPParameter& from) {
    CopyFrom(from);
    return *this;
  }
  inline SPPParameter& operator=(SPPParameter&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SPPParameter& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SPPParameter* internal_default_instance() {
    return reinterpret_cast<const SPPParameter*>(
               &_SPPParameter_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    65;

  friend void swap(SPPParameter& a, SPPParameter& b) {
    a.Swap(&b);
  }
  inline void Swap(SPPParameter* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SPPParameter* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SPPParameter* New() const final {
    return CreateMaybeMessage<SPPParameter>(nullptr);
  }

  SPPParameter* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SPPParameter>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SPPParameter& from);
  void MergeFrom(const SPPParameter& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SPPParameter* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "trtcaffe.SPPParameter";
  }
  protected:
  explicit SPPParameter(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_trtcaffe_2eproto);
    return ::descriptor_table_trtcaffe_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef SPPParameter_PoolMethod PoolMethod;
  static constexpr PoolMethod MAX =
    SPPParameter_PoolMethod_MAX;
  static constexpr PoolMethod AVE =
    SPPParameter_PoolMethod_AVE;
  static constexpr PoolMethod STOCHASTIC =
    SPPParameter_PoolMethod_STOCHASTIC;
  static inline bool PoolMethod_IsValid(int value) {
    return SPPParameter_PoolMethod_IsValid(value);
  }
  static constexpr PoolMethod PoolMethod_MIN =
    SPPParameter_PoolMethod_PoolMethod_MIN;
  static constexpr PoolMethod PoolMethod_MAX =
    SPPParameter_PoolMethod_PoolMethod_MAX;
  static constexpr int PoolMethod_ARRAYSIZE =
    SPPParameter_PoolMethod_PoolMethod_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  PoolMethod_descriptor() {
    return SPPParameter_PoolMethod_descriptor();
  }
  template<typename T>
  static inline const std::string& PoolMethod_Name(T enum_t_value) {
    static_assert(::std::is_same<T, PoolMethod>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function PoolMethod_Name.");
    return SPPParameter_PoolMethod_Name(enum_t_value);
  }
  static inline bool PoolMethod_Parse(const std::string& name,
      PoolMethod* value) {
    return SPPParameter_PoolMethod_Parse(name, value);
  }

  typedef SPPParameter_Engine Engine;
  static constexpr Engine DEFAULT =
    SPPParameter_Engine_DEFAULT;
  static constexpr Engine CAFFE =
    SPPParameter_Engine_CAFFE;
  static constexpr Engine CUDNN =
    SPPParameter_Engine_CUDNN;
  static inline bool Engine_IsValid(int value) {
    return SPPParameter_Engine_IsValid(value);
  }
  static constexpr Engine Engine_MIN =
    SPPParameter_Engine_Engine_MIN;
  static constexpr Engine Engine_MAX =
    SPPParameter_Engine_Engine_MAX;
  static constexpr int Engine_ARRAYSIZE =
    SPPParameter_Engine_Engine_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Engine_descriptor() {
    return SPPParameter_Engine_descriptor();
  }
  template<typename T>
  static inline const std::string& Engine_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Engine>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Engine_Name.");
    return SPPParameter_Engine_Name(enum_t_value);
  }
  static inline bool Engine_Parse(const std::string& name,
      Engine* value) {
    return SPPParameter_Engine_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kPyramidHeightFieldNumber = 1,
    kPoolFieldNumber = 2,
    kEngineFieldNumber = 6,
  };
  // optional uint32 pyramid_height = 1;
  bool has_pyramid_height() const;
  private:
  bool _internal_has_pyramid_height() const;
  public:
  void clear_pyramid_height();
  ::PROTOBUF_NAMESPACE_ID::uint32 pyramid_height() const;
  void set_pyramid_height(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_pyramid_height() const;
  void _internal_set_pyramid_height(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional .trtcaffe.SPPParameter.PoolMethod pool = 2 [default = MAX];
  bool has_pool() const;
  private:
  bool _internal_has_pool() const;
  public:
  void clear_pool();
  ::trtcaffe::SPPParameter_PoolMethod pool() const;
  void set_pool(::trtcaffe::SPPParameter_PoolMethod value);
  private:
  ::trtcaffe::SPPParameter_PoolMethod _internal_pool() const;
  void _internal_set_pool(::trtcaffe::SPPParameter_PoolMethod value);
  public:

  // optional .trtcaffe.SPPParameter.Engine engine = 6 [default = DEFAULT];
  bool has_engine() const;
  private:
  bool _internal_has_engine() const;
  public:
  void clear_engine();
  ::trtcaffe::SPPParameter_Engine engine() const;
  void set_engine(::trtcaffe::SPPParameter_Engine value);
  private:
  ::trtcaffe::SPPParameter_Engine _internal_engine() const;
  void _internal_set_engine(::trtcaffe::SPPParameter_Engine value);
  public:

  // @@protoc_insertion_point(class_scope:trtcaffe.SPPParameter)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 pyramid_height_;
  int pool_;
  int engine_;
  friend struct ::TableStruct_trtcaffe_2eproto;
};
// -------------------------------------------------------------------

class V1LayerParameter PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:trtcaffe.V1LayerParameter) */ {
 public:
  inline V1LayerParameter() : V1LayerParameter(nullptr) {};
  virtual ~V1LayerParameter();

  V1LayerParameter(const V1LayerParameter& from);
  V1LayerParameter(V1LayerParameter&& from) noexcept
    : V1LayerParameter() {
    *this = ::std::move(from);
  }

  inline V1LayerParameter& operator=(const V1LayerParameter& from) {
    CopyFrom(from);
    return *this;
  }
  inline V1LayerParameter& operator=(V1LayerParameter&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const V1LayerParameter& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const V1LayerParameter* internal_default_instance() {
    return reinterpret_cast<const V1LayerParameter*>(
               &_V1LayerParameter_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    66;

  friend void swap(V1LayerParameter& a, V1LayerParameter& b) {
    a.Swap(&b);
  }
  inline void Swap(V1LayerParameter* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(V1LayerParameter* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline V1LayerParameter* New() const final {
    return CreateMaybeMessage<V1LayerParameter>(nullptr);
  }

  V1LayerParameter* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<V1LayerParameter>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const V1LayerParameter& from);
  void MergeFrom(const V1LayerParameter& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(V1LayerParameter* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "trtcaffe.V1LayerParameter";
  }
  protected:
  explicit V1LayerParameter(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_trtcaffe_2eproto);
    return ::descriptor_table_trtcaffe_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef V1LayerParameter_LayerType LayerType;
  static constexpr LayerType NONE =
    V1LayerParameter_LayerType_NONE;
  static constexpr LayerType ABSVAL =
    V1LayerParameter_LayerType_ABSVAL;
  static constexpr LayerType ACCURACY =
    V1LayerParameter_LayerType_ACCURACY;
  static constexpr LayerType ARGMAX =
    V1LayerParameter_LayerType_ARGMAX;
  static constexpr LayerType BNLL =
    V1LayerParameter_LayerType_BNLL;
  static constexpr LayerType CONCAT =
    V1LayerParameter_LayerType_CONCAT;
  static constexpr LayerType CONTRASTIVE_LOSS =
    V1LayerParameter_LayerType_CONTRASTIVE_LOSS;
  static constexpr LayerType CONVOLUTION =
    V1LayerParameter_LayerType_CONVOLUTION;
  static constexpr LayerType CROP =
    V1LayerParameter_LayerType_CROP;
  static constexpr LayerType DATA =
    V1LayerParameter_LayerType_DATA;
  static constexpr LayerType DECONVOLUTION =
    V1LayerParameter_LayerType_DECONVOLUTION;
  static constexpr LayerType DROPOUT =
    V1LayerParameter_LayerType_DROPOUT;
  static constexpr LayerType DUMMY_DATA =
    V1LayerParameter_LayerType_DUMMY_DATA;
  static constexpr LayerType EUCLIDEAN_LOSS =
    V1LayerParameter_LayerType_EUCLIDEAN_LOSS;
  static constexpr LayerType ELTWISE =
    V1LayerParameter_LayerType_ELTWISE;
  static constexpr LayerType EXP =
    V1LayerParameter_LayerType_EXP;
  static constexpr LayerType FLATTEN =
    V1LayerParameter_LayerType_FLATTEN;
  static constexpr LayerType HDF5_DATA =
    V1LayerParameter_LayerType_HDF5_DATA;
  static constexpr LayerType HDF5_OUTPUT =
    V1LayerParameter_LayerType_HDF5_OUTPUT;
  static constexpr LayerType HINGE_LOSS =
    V1LayerParameter_LayerType_HINGE_LOSS;
  static constexpr LayerType IM2COL =
    V1LayerParameter_LayerType_IM2COL;
  static constexpr LayerType IMAGE_DATA =
    V1LayerParameter_LayerType_IMAGE_DATA;
  static constexpr LayerType INFOGAIN_LOSS =
    V1LayerParameter_LayerType_INFOGAIN_LOSS;
  static constexpr LayerType INNER_PRODUCT =
    V1LayerParameter_LayerType_INNER_PRODUCT;
  static constexpr LayerType LRN =
    V1LayerParameter_LayerType_LRN;
  static constexpr LayerType MEMORY_DATA =
    V1LayerParameter_LayerType_MEMORY_DATA;
  static constexpr LayerType MULTINOMIAL_LOGISTIC_LOSS =
    V1LayerParameter_LayerType_MULTINOMIAL_LOGISTIC_LOSS;
  static constexpr LayerType MVN =
    V1LayerParameter_LayerType_MVN;
  static constexpr LayerType POOLING =
    V1LayerParameter_LayerType_POOLING;
  static constexpr LayerType POWER =
    V1LayerParameter_LayerType_POWER;
  static constexpr LayerType RELU =
    V1LayerParameter_LayerType_RELU;
  static constexpr LayerType SIGMOID =
    V1LayerParameter_LayerType_SIGMOID;
  static constexpr LayerType SIGMOID_CROSS_ENTROPY_LOSS =
    V1LayerParameter_LayerType_SIGMOID_CROSS_ENTROPY_LOSS;
  static constexpr LayerType SILENCE =
    V1LayerParameter_LayerType_SILENCE;
  static constexpr LayerType SOFTMAX =
    V1LayerParameter_LayerType_SOFTMAX;
  static constexpr LayerType SOFTMAX_LOSS =
    V1LayerParameter_LayerType_SOFTMAX_LOSS;
  static constexpr LayerType SPLIT =
    V1LayerParameter_LayerType_SPLIT;
  static constexpr LayerType SLICE =
    V1LayerParameter_LayerType_SLICE;
  static constexpr LayerType TANH =
    V1LayerParameter_LayerType_TANH;
  static constexpr LayerType WINDOW_DATA =
    V1LayerParameter_LayerType_WINDOW_DATA;
  static constexpr LayerType THRESHOLD =
    V1LayerParameter_LayerType_THRESHOLD;
  static inline bool LayerType_IsValid(int value) {
    return V1LayerParameter_LayerType_IsValid(value);
  }
  static constexpr LayerType LayerType_MIN =
    V1LayerParameter_LayerType_LayerType_MIN;
  static constexpr LayerType LayerType_MAX =
    V1LayerParameter_LayerType_LayerType_MAX;
  static constexpr int LayerType_ARRAYSIZE =
    V1LayerParameter_LayerType_LayerType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  LayerType_descriptor() {
    return V1LayerParameter_LayerType_descriptor();
  }
  template<typename T>
  static inline const std::string& LayerType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, LayerType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function LayerType_Name.");
    return V1LayerParameter_LayerType_Name(enum_t_value);
  }
  static inline bool LayerType_Parse(const std::string& name,
      LayerType* value) {
    return V1LayerParameter_LayerType_Parse(name, value);
  }

  typedef V1LayerParameter_DimCheckMode DimCheckMode;
  static constexpr DimCheckMode STRICT =
    V1LayerParameter_DimCheckMode_STRICT;
  static constexpr DimCheckMode PERMISSIVE =
    V1LayerParameter_DimCheckMode_PERMISSIVE;
  static inline bool DimCheckMode_IsValid(int value) {
    return V1LayerParameter_DimCheckMode_IsValid(value);
  }
  static constexpr DimCheckMode DimCheckMode_MIN =
    V1LayerParameter_DimCheckMode_DimCheckMode_MIN;
  static constexpr DimCheckMode DimCheckMode_MAX =
    V1LayerParameter_DimCheckMode_DimCheckMode_MAX;
  static constexpr int DimCheckMode_ARRAYSIZE =
    V1LayerParameter_DimCheckMode_DimCheckMode_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  DimCheckMode_descriptor() {
    return V1LayerParameter_DimCheckMode_descriptor();
  }
  template<typename T>
  static inline const std::string& DimCheckMode_Name(T enum_t_value) {
    static_assert(::std::is_same<T, DimCheckMode>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function DimCheckMode_Name.");
    return V1LayerParameter_DimCheckMode_Name(enum_t_value);
  }
  static inline bool DimCheckMode_Parse(const std::string& name,
      DimCheckMode* value) {
    return V1LayerParameter_DimCheckMode_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kBottomFieldNumber = 2,
    kTopFieldNumber = 3,
    kBlobsFieldNumber = 6,
    kBlobsLrFieldNumber = 7,
    kWeightDecayFieldNumber = 8,
    kIncludeFieldNumber = 32,
    kExcludeFieldNumber = 33,
    kLossWeightFieldNumber = 35,
    kParamFieldNumber = 1001,
    kBlobShareModeFieldNumber = 1002,
    kNameFieldNumber = 4,
    kLayerFieldNumber = 1,
    kConcatParamFieldNumber = 9,
    kConvolutionParamFieldNumber = 10,
    kDataParamFieldNumber = 11,
    kDropoutParamFieldNumber = 12,
    kHdf5DataParamFieldNumber = 13,
    kHdf5OutputParamFieldNumber = 14,
    kImageDataParamFieldNumber = 15,
    kInfogainLossParamFieldNumber = 16,
    kInnerProductParamFieldNumber = 17,
    kLrnParamFieldNumber = 18,
    kPoolingParamFieldNumber = 19,
    kWindowDataParamFieldNumber = 20,
    kPowerParamFieldNumber = 21,
    kMemoryDataParamFieldNumber = 22,
    kArgmaxParamFieldNumber = 23,
    kEltwiseParamFieldNumber = 24,
    kThresholdParamFieldNumber = 25,
    kDummyDataParamFieldNumber = 26,
    kAccuracyParamFieldNumber = 27,
    kHingeLossParamFieldNumber = 29,
    kReluParamFieldNumber = 30,
    kSliceParamFieldNumber = 31,
    kMvnParamFieldNumber = 34,
    kTransformParamFieldNumber = 36,
    kTanhParamFieldNumber = 37,
    kSigmoidParamFieldNumber = 38,
    kSoftmaxParamFieldNumber = 39,
    kContrastiveLossParamFieldNumber = 40,
    kExpParamFieldNumber = 41,
    kLossParamFieldNumber = 42,
    kCropParamFieldNumber = 44,
    kTypeFieldNumber = 5,
  };
  // repeated string bottom = 2;
  int bottom_size() const;
  private:
  int _internal_bottom_size() const;
  public:
  void clear_bottom();
  const std::string& bottom(int index) const;
  std::string* mutable_bottom(int index);
  void set_bottom(int index, const std::string& value);
  void set_bottom(int index, std::string&& value);
  void set_bottom(int index, const char* value);
  void set_bottom(int index, const char* value, size_t size);
  std::string* add_bottom();
  void add_bottom(const std::string& value);
  void add_bottom(std::string&& value);
  void add_bottom(const char* value);
  void add_bottom(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& bottom() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_bottom();
  private:
  const std::string& _internal_bottom(int index) const;
  std::string* _internal_add_bottom();
  public:

  // repeated string top = 3;
  int top_size() const;
  private:
  int _internal_top_size() const;
  public:
  void clear_top();
  const std::string& top(int index) const;
  std::string* mutable_top(int index);
  void set_top(int index, const std::string& value);
  void set_top(int index, std::string&& value);
  void set_top(int index, const char* value);
  void set_top(int index, const char* value, size_t size);
  std::string* add_top();
  void add_top(const std::string& value);
  void add_top(std::string&& value);
  void add_top(const char* value);
  void add_top(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& top() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_top();
  private:
  const std::string& _internal_top(int index) const;
  std::string* _internal_add_top();
  public:

  // repeated .trtcaffe.BlobProto blobs = 6;
  int blobs_size() const;
  private:
  int _internal_blobs_size() const;
  public:
  void clear_blobs();
  ::trtcaffe::BlobProto* mutable_blobs(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::trtcaffe::BlobProto >*
      mutable_blobs();
  private:
  const ::trtcaffe::BlobProto& _internal_blobs(int index) const;
  ::trtcaffe::BlobProto* _internal_add_blobs();
  public:
  const ::trtcaffe::BlobProto& blobs(int index) const;
  ::trtcaffe::BlobProto* add_blobs();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::trtcaffe::BlobProto >&
      blobs() const;

  // repeated float blobs_lr = 7;
  int blobs_lr_size() const;
  private:
  int _internal_blobs_lr_size() const;
  public:
  void clear_blobs_lr();
  private:
  float _internal_blobs_lr(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_blobs_lr() const;
  void _internal_add_blobs_lr(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_blobs_lr();
  public:
  float blobs_lr(int index) const;
  void set_blobs_lr(int index, float value);
  void add_blobs_lr(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      blobs_lr() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_blobs_lr();

  // repeated float weight_decay = 8;
  int weight_decay_size() const;
  private:
  int _internal_weight_decay_size() const;
  public:
  void clear_weight_decay();
  private:
  float _internal_weight_decay(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_weight_decay() const;
  void _internal_add_weight_decay(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_weight_decay();
  public:
  float weight_decay(int index) const;
  void set_weight_decay(int index, float value);
  void add_weight_decay(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      weight_decay() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_weight_decay();

  // repeated .trtcaffe.NetStateRule include = 32;
  int include_size() const;
  private:
  int _internal_include_size() const;
  public:
  void clear_include();
  ::trtcaffe::NetStateRule* mutable_include(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::trtcaffe::NetStateRule >*
      mutable_include();
  private:
  const ::trtcaffe::NetStateRule& _internal_include(int index) const;
  ::trtcaffe::NetStateRule* _internal_add_include();
  public:
  const ::trtcaffe::NetStateRule& include(int index) const;
  ::trtcaffe::NetStateRule* add_include();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::trtcaffe::NetStateRule >&
      include() const;

  // repeated .trtcaffe.NetStateRule exclude = 33;
  int exclude_size() const;
  private:
  int _internal_exclude_size() const;
  public:
  void clear_exclude();
  ::trtcaffe::NetStateRule* mutable_exclude(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::trtcaffe::NetStateRule >*
      mutable_exclude();
  private:
  const ::trtcaffe::NetStateRule& _internal_exclude(int index) const;
  ::trtcaffe::NetStateRule* _internal_add_exclude();
  public:
  const ::trtcaffe::NetStateRule& exclude(int index) const;
  ::trtcaffe::NetStateRule* add_exclude();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::trtcaffe::NetStateRule >&
      exclude() const;

  // repeated float loss_weight = 35;
  int loss_weight_size() const;
  private:
  int _internal_loss_weight_size() const;
  public:
  void clear_loss_weight();
  private:
  float _internal_loss_weight(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_loss_weight() const;
  void _internal_add_loss_weight(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_loss_weight();
  public:
  float loss_weight(int index) const;
  void set_loss_weight(int index, float value);
  void add_loss_weight(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      loss_weight() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_loss_weight();

  // repeated string param = 1001;
  int param_size() const;
  private:
  int _internal_param_size() const;
  public:
  void clear_param();
  const std::string& param(int index) const;
  std::string* mutable_param(int index);
  void set_param(int index, const std::string& value);
  void set_param(int index, std::string&& value);
  void set_param(int index, const char* value);
  void set_param(int index, const char* value, size_t size);
  std::string* add_param();
  void add_param(const std::string& value);
  void add_param(std::string&& value);
  void add_param(const char* value);
  void add_param(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& param() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_param();
  private:
  const std::string& _internal_param(int index) const;
  std::string* _internal_add_param();
  public:

  // repeated .trtcaffe.V1LayerParameter.DimCheckMode blob_share_mode = 1002;
  int blob_share_mode_size() const;
  private:
  int _internal_blob_share_mode_size() const;
  public:
  void clear_blob_share_mode();
  private:
  ::trtcaffe::V1LayerParameter_DimCheckMode _internal_blob_share_mode(int index) const;
  void _internal_add_blob_share_mode(::trtcaffe::V1LayerParameter_DimCheckMode value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* _internal_mutable_blob_share_mode();
  public:
  ::trtcaffe::V1LayerParameter_DimCheckMode blob_share_mode(int index) const;
  void set_blob_share_mode(int index, ::trtcaffe::V1LayerParameter_DimCheckMode value);
  void add_blob_share_mode(::trtcaffe::V1LayerParameter_DimCheckMode value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>& blob_share_mode() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* mutable_blob_share_mode();

  // optional string name = 4;
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_name();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_name(
      std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // optional .trtcaffe.V0LayerParameter layer = 1;
  bool has_layer() const;
  private:
  bool _internal_has_layer() const;
  public:
  void clear_layer();
  const ::trtcaffe::V0LayerParameter& layer() const;
  ::trtcaffe::V0LayerParameter* release_layer();
  ::trtcaffe::V0LayerParameter* mutable_layer();
  void set_allocated_layer(::trtcaffe::V0LayerParameter* layer);
  private:
  const ::trtcaffe::V0LayerParameter& _internal_layer() const;
  ::trtcaffe::V0LayerParameter* _internal_mutable_layer();
  public:
  void unsafe_arena_set_allocated_layer(
      ::trtcaffe::V0LayerParameter* layer);
  ::trtcaffe::V0LayerParameter* unsafe_arena_release_layer();

  // optional .trtcaffe.ConcatParameter concat_param = 9;
  bool has_concat_param() const;
  private:
  bool _internal_has_concat_param() const;
  public:
  void clear_concat_param();
  const ::trtcaffe::ConcatParameter& concat_param() const;
  ::trtcaffe::ConcatParameter* release_concat_param();
  ::trtcaffe::ConcatParameter* mutable_concat_param();
  void set_allocated_concat_param(::trtcaffe::ConcatParameter* concat_param);
  private:
  const ::trtcaffe::ConcatParameter& _internal_concat_param() const;
  ::trtcaffe::ConcatParameter* _internal_mutable_concat_param();
  public:
  void unsafe_arena_set_allocated_concat_param(
      ::trtcaffe::ConcatParameter* concat_param);
  ::trtcaffe::ConcatParameter* unsafe_arena_release_concat_param();

  // optional .trtcaffe.ConvolutionParameter convolution_param = 10;
  bool has_convolution_param() const;
  private:
  bool _internal_has_convolution_param() const;
  public:
  void clear_convolution_param();
  const ::trtcaffe::ConvolutionParameter& convolution_param() const;
  ::trtcaffe::ConvolutionParameter* release_convolution_param();
  ::trtcaffe::ConvolutionParameter* mutable_convolution_param();
  void set_allocated_convolution_param(::trtcaffe::ConvolutionParameter* convolution_param);
  private:
  const ::trtcaffe::ConvolutionParameter& _internal_convolution_param() const;
  ::trtcaffe::ConvolutionParameter* _internal_mutable_convolution_param();
  public:
  void unsafe_arena_set_allocated_convolution_param(
      ::trtcaffe::ConvolutionParameter* convolution_param);
  ::trtcaffe::ConvolutionParameter* unsafe_arena_release_convolution_param();

  // optional .trtcaffe.DataParameter data_param = 11;
  bool has_data_param() const;
  private:
  bool _internal_has_data_param() const;
  public:
  void clear_data_param();
  const ::trtcaffe::DataParameter& data_param() const;
  ::trtcaffe::DataParameter* release_data_param();
  ::trtcaffe::DataParameter* mutable_data_param();
  void set_allocated_data_param(::trtcaffe::DataParameter* data_param);
  private:
  const ::trtcaffe::DataParameter& _internal_data_param() const;
  ::trtcaffe::DataParameter* _internal_mutable_data_param();
  public:
  void unsafe_arena_set_allocated_data_param(
      ::trtcaffe::DataParameter* data_param);
  ::trtcaffe::DataParameter* unsafe_arena_release_data_param();

  // optional .trtcaffe.DropoutParameter dropout_param = 12;
  bool has_dropout_param() const;
  private:
  bool _internal_has_dropout_param() const;
  public:
  void clear_dropout_param();
  const ::trtcaffe::DropoutParameter& dropout_param() const;
  ::trtcaffe::DropoutParameter* release_dropout_param();
  ::trtcaffe::DropoutParameter* mutable_dropout_param();
  void set_allocated_dropout_param(::trtcaffe::DropoutParameter* dropout_param);
  private:
  const ::trtcaffe::DropoutParameter& _internal_dropout_param() const;
  ::trtcaffe::DropoutParameter* _internal_mutable_dropout_param();
  public:
  void unsafe_arena_set_allocated_dropout_param(
      ::trtcaffe::DropoutParameter* dropout_param);
  ::trtcaffe::DropoutParameter* unsafe_arena_release_dropout_param();

  // optional .trtcaffe.HDF5DataParameter hdf5_data_param = 13;
  bool has_hdf5_data_param() const;
  private:
  bool _internal_has_hdf5_data_param() const;
  public:
  void clear_hdf5_data_param();
  const ::trtcaffe::HDF5DataParameter& hdf5_data_param() const;
  ::trtcaffe::HDF5DataParameter* release_hdf5_data_param();
  ::trtcaffe::HDF5DataParameter* mutable_hdf5_data_param();
  void set_allocated_hdf5_data_param(::trtcaffe::HDF5DataParameter* hdf5_data_param);
  private:
  const ::trtcaffe::HDF5DataParameter& _internal_hdf5_data_param() const;
  ::trtcaffe::HDF5DataParameter* _internal_mutable_hdf5_data_param();
  public:
  void unsafe_arena_set_allocated_hdf5_data_param(
      ::trtcaffe::HDF5DataParameter* hdf5_data_param);
  ::trtcaffe::HDF5DataParameter* unsafe_arena_release_hdf5_data_param();

  // optional .trtcaffe.HDF5OutputParameter hdf5_output_param = 14;
  bool has_hdf5_output_param() const;
  private:
  bool _internal_has_hdf5_output_param() const;
  public:
  void clear_hdf5_output_param();
  const ::trtcaffe::HDF5OutputParameter& hdf5_output_param() const;
  ::trtcaffe::HDF5OutputParameter* release_hdf5_output_param();
  ::trtcaffe::HDF5OutputParameter* mutable_hdf5_output_param();
  void set_allocated_hdf5_output_param(::trtcaffe::HDF5OutputParameter* hdf5_output_param);
  private:
  const ::trtcaffe::HDF5OutputParameter& _internal_hdf5_output_param() const;
  ::trtcaffe::HDF5OutputParameter* _internal_mutable_hdf5_output_param();
  public:
  void unsafe_arena_set_allocated_hdf5_output_param(
      ::trtcaffe::HDF5OutputParameter* hdf5_output_param);
  ::trtcaffe::HDF5OutputParameter* unsafe_arena_release_hdf5_output_param();

  // optional .trtcaffe.ImageDataParameter image_data_param = 15;
  bool has_image_data_param() const;
  private:
  bool _internal_has_image_data_param() const;
  public:
  void clear_image_data_param();
  const ::trtcaffe::ImageDataParameter& image_data_param() const;
  ::trtcaffe::ImageDataParameter* release_image_data_param();
  ::trtcaffe::ImageDataParameter* mutable_image_data_param();
  void set_allocated_image_data_param(::trtcaffe::ImageDataParameter* image_data_param);
  private:
  const ::trtcaffe::ImageDataParameter& _internal_image_data_param() const;
  ::trtcaffe::ImageDataParameter* _internal_mutable_image_data_param();
  public:
  void unsafe_arena_set_allocated_image_data_param(
      ::trtcaffe::ImageDataParameter* image_data_param);
  ::trtcaffe::ImageDataParameter* unsafe_arena_release_image_data_param();

  // optional .trtcaffe.InfogainLossParameter infogain_loss_param = 16;
  bool has_infogain_loss_param() const;
  private:
  bool _internal_has_infogain_loss_param() const;
  public:
  void clear_infogain_loss_param();
  const ::trtcaffe::InfogainLossParameter& infogain_loss_param() const;
  ::trtcaffe::InfogainLossParameter* release_infogain_loss_param();
  ::trtcaffe::InfogainLossParameter* mutable_infogain_loss_param();
  void set_allocated_infogain_loss_param(::trtcaffe::InfogainLossParameter* infogain_loss_param);
  private:
  const ::trtcaffe::InfogainLossParameter& _internal_infogain_loss_param() const;
  ::trtcaffe::InfogainLossParameter* _internal_mutable_infogain_loss_param();
  public:
  void unsafe_arena_set_allocated_infogain_loss_param(
      ::trtcaffe::InfogainLossParameter* infogain_loss_param);
  ::trtcaffe::InfogainLossParameter* unsafe_arena_release_infogain_loss_param();

  // optional .trtcaffe.InnerProductParameter inner_product_param = 17;
  bool has_inner_product_param() const;
  private:
  bool _internal_has_inner_product_param() const;
  public:
  void clear_inner_product_param();
  const ::trtcaffe::InnerProductParameter& inner_product_param() const;
  ::trtcaffe::InnerProductParameter* release_inner_product_param();
  ::trtcaffe::InnerProductParameter* mutable_inner_product_param();
  void set_allocated_inner_product_param(::trtcaffe::InnerProductParameter* inner_product_param);
  private:
  const ::trtcaffe::InnerProductParameter& _internal_inner_product_param() const;
  ::trtcaffe::InnerProductParameter* _internal_mutable_inner_product_param();
  public:
  void unsafe_arena_set_allocated_inner_product_param(
      ::trtcaffe::InnerProductParameter* inner_product_param);
  ::trtcaffe::InnerProductParameter* unsafe_arena_release_inner_product_param();

  // optional .trtcaffe.LRNParameter lrn_param = 18;
  bool has_lrn_param() const;
  private:
  bool _internal_has_lrn_param() const;
  public:
  void clear_lrn_param();
  const ::trtcaffe::LRNParameter& lrn_param() const;
  ::trtcaffe::LRNParameter* release_lrn_param();
  ::trtcaffe::LRNParameter* mutable_lrn_param();
  void set_allocated_lrn_param(::trtcaffe::LRNParameter* lrn_param);
  private:
  const ::trtcaffe::LRNParameter& _internal_lrn_param() const;
  ::trtcaffe::LRNParameter* _internal_mutable_lrn_param();
  public:
  void unsafe_arena_set_allocated_lrn_param(
      ::trtcaffe::LRNParameter* lrn_param);
  ::trtcaffe::LRNParameter* unsafe_arena_release_lrn_param();

  // optional .trtcaffe.PoolingParameter pooling_param = 19;
  bool has_pooling_param() const;
  private:
  bool _internal_has_pooling_param() const;
  public:
  void clear_pooling_param();
  const ::trtcaffe::PoolingParameter& pooling_param() const;
  ::trtcaffe::PoolingParameter* release_pooling_param();
  ::trtcaffe::PoolingParameter* mutable_pooling_param();
  void set_allocated_pooling_param(::trtcaffe::PoolingParameter* pooling_param);
  private:
  const ::trtcaffe::PoolingParameter& _internal_pooling_param() const;
  ::trtcaffe::PoolingParameter* _internal_mutable_pooling_param();
  public:
  void unsafe_arena_set_allocated_pooling_param(
      ::trtcaffe::PoolingParameter* pooling_param);
  ::trtcaffe::PoolingParameter* unsafe_arena_release_pooling_param();

  // optional .trtcaffe.WindowDataParameter window_data_param = 20;
  bool has_window_data_param() const;
  private:
  bool _internal_has_window_data_param() const;
  public:
  void clear_window_data_param();
  const ::trtcaffe::WindowDataParameter& window_data_param() const;
  ::trtcaffe::WindowDataParameter* release_window_data_param();
  ::trtcaffe::WindowDataParameter* mutable_window_data_param();
  void set_allocated_window_data_param(::trtcaffe::WindowDataParameter* window_data_param);
  private:
  const ::trtcaffe::WindowDataParameter& _internal_window_data_param() const;
  ::trtcaffe::WindowDataParameter* _internal_mutable_window_data_param();
  public:
  void unsafe_arena_set_allocated_window_data_param(
      ::trtcaffe::WindowDataParameter* window_data_param);
  ::trtcaffe::WindowDataParameter* unsafe_arena_release_window_data_param();

  // optional .trtcaffe.PowerParameter power_param = 21;
  bool has_power_param() const;
  private:
  bool _internal_has_power_param() const;
  public:
  void clear_power_param();
  const ::trtcaffe::PowerParameter& power_param() const;
  ::trtcaffe::PowerParameter* release_power_param();
  ::trtcaffe::PowerParameter* mutable_power_param();
  void set_allocated_power_param(::trtcaffe::PowerParameter* power_param);
  private:
  const ::trtcaffe::PowerParameter& _internal_power_param() const;
  ::trtcaffe::PowerParameter* _internal_mutable_power_param();
  public:
  void unsafe_arena_set_allocated_power_param(
      ::trtcaffe::PowerParameter* power_param);
  ::trtcaffe::PowerParameter* unsafe_arena_release_power_param();

  // optional .trtcaffe.MemoryDataParameter memory_data_param = 22;
  bool has_memory_data_param() const;
  private:
  bool _internal_has_memory_data_param() const;
  public:
  void clear_memory_data_param();
  const ::trtcaffe::MemoryDataParameter& memory_data_param() const;
  ::trtcaffe::MemoryDataParameter* release_memory_data_param();
  ::trtcaffe::MemoryDataParameter* mutable_memory_data_param();
  void set_allocated_memory_data_param(::trtcaffe::MemoryDataParameter* memory_data_param);
  private:
  const ::trtcaffe::MemoryDataParameter& _internal_memory_data_param() const;
  ::trtcaffe::MemoryDataParameter* _internal_mutable_memory_data_param();
  public:
  void unsafe_arena_set_allocated_memory_data_param(
      ::trtcaffe::MemoryDataParameter* memory_data_param);
  ::trtcaffe::MemoryDataParameter* unsafe_arena_release_memory_data_param();

  // optional .trtcaffe.ArgMaxParameter argmax_param = 23;
  bool has_argmax_param() const;
  private:
  bool _internal_has_argmax_param() const;
  public:
  void clear_argmax_param();
  const ::trtcaffe::ArgMaxParameter& argmax_param() const;
  ::trtcaffe::ArgMaxParameter* release_argmax_param();
  ::trtcaffe::ArgMaxParameter* mutable_argmax_param();
  void set_allocated_argmax_param(::trtcaffe::ArgMaxParameter* argmax_param);
  private:
  const ::trtcaffe::ArgMaxParameter& _internal_argmax_param() const;
  ::trtcaffe::ArgMaxParameter* _internal_mutable_argmax_param();
  public:
  void unsafe_arena_set_allocated_argmax_param(
      ::trtcaffe::ArgMaxParameter* argmax_param);
  ::trtcaffe::ArgMaxParameter* unsafe_arena_release_argmax_param();

  // optional .trtcaffe.EltwiseParameter eltwise_param = 24;
  bool has_eltwise_param() const;
  private:
  bool _internal_has_eltwise_param() const;
  public:
  void clear_eltwise_param();
  const ::trtcaffe::EltwiseParameter& eltwise_param() const;
  ::trtcaffe::EltwiseParameter* release_eltwise_param();
  ::trtcaffe::EltwiseParameter* mutable_eltwise_param();
  void set_allocated_eltwise_param(::trtcaffe::EltwiseParameter* eltwise_param);
  private:
  const ::trtcaffe::EltwiseParameter& _internal_eltwise_param() const;
  ::trtcaffe::EltwiseParameter* _internal_mutable_eltwise_param();
  public:
  void unsafe_arena_set_allocated_eltwise_param(
      ::trtcaffe::EltwiseParameter* eltwise_param);
  ::trtcaffe::EltwiseParameter* unsafe_arena_release_eltwise_param();

  // optional .trtcaffe.ThresholdParameter threshold_param = 25;
  bool has_threshold_param() const;
  private:
  bool _internal_has_threshold_param() const;
  public:
  void clear_threshold_param();
  const ::trtcaffe::ThresholdParameter& threshold_param() const;
  ::trtcaffe::ThresholdParameter* release_threshold_param();
  ::trtcaffe::ThresholdParameter* mutable_threshold_param();
  void set_allocated_threshold_param(::trtcaffe::ThresholdParameter* threshold_param);
  private:
  const ::trtcaffe::ThresholdParameter& _internal_threshold_param() const;
  ::trtcaffe::ThresholdParameter* _internal_mutable_threshold_param();
  public:
  void unsafe_arena_set_allocated_threshold_param(
      ::trtcaffe::ThresholdParameter* threshold_param);
  ::trtcaffe::ThresholdParameter* unsafe_arena_release_threshold_param();

  // optional .trtcaffe.DummyDataParameter dummy_data_param = 26;
  bool has_dummy_data_param() const;
  private:
  bool _internal_has_dummy_data_param() const;
  public:
  void clear_dummy_data_param();
  const ::trtcaffe::DummyDataParameter& dummy_data_param() const;
  ::trtcaffe::DummyDataParameter* release_dummy_data_param();
  ::trtcaffe::DummyDataParameter* mutable_dummy_data_param();
  void set_allocated_dummy_data_param(::trtcaffe::DummyDataParameter* dummy_data_param);
  private:
  const ::trtcaffe::DummyDataParameter& _internal_dummy_data_param() const;
  ::trtcaffe::DummyDataParameter* _internal_mutable_dummy_data_param();
  public:
  void unsafe_arena_set_allocated_dummy_data_param(
      ::trtcaffe::DummyDataParameter* dummy_data_param);
  ::trtcaffe::DummyDataParameter* unsafe_arena_release_dummy_data_param();

  // optional .trtcaffe.AccuracyParameter accuracy_param = 27;
  bool has_accuracy_param() const;
  private:
  bool _internal_has_accuracy_param() const;
  public:
  void clear_accuracy_param();
  const ::trtcaffe::AccuracyParameter& accuracy_param() const;
  ::trtcaffe::AccuracyParameter* release_accuracy_param();
  ::trtcaffe::AccuracyParameter* mutable_accuracy_param();
  void set_allocated_accuracy_param(::trtcaffe::AccuracyParameter* accuracy_param);
  private:
  const ::trtcaffe::AccuracyParameter& _internal_accuracy_param() const;
  ::trtcaffe::AccuracyParameter* _internal_mutable_accuracy_param();
  public:
  void unsafe_arena_set_allocated_accuracy_param(
      ::trtcaffe::AccuracyParameter* accuracy_param);
  ::trtcaffe::AccuracyParameter* unsafe_arena_release_accuracy_param();

  // optional .trtcaffe.HingeLossParameter hinge_loss_param = 29;
  bool has_hinge_loss_param() const;
  private:
  bool _internal_has_hinge_loss_param() const;
  public:
  void clear_hinge_loss_param();
  const ::trtcaffe::HingeLossParameter& hinge_loss_param() const;
  ::trtcaffe::HingeLossParameter* release_hinge_loss_param();
  ::trtcaffe::HingeLossParameter* mutable_hinge_loss_param();
  void set_allocated_hinge_loss_param(::trtcaffe::HingeLossParameter* hinge_loss_param);
  private:
  const ::trtcaffe::HingeLossParameter& _internal_hinge_loss_param() const;
  ::trtcaffe::HingeLossParameter* _internal_mutable_hinge_loss_param();
  public:
  void unsafe_arena_set_allocated_hinge_loss_param(
      ::trtcaffe::HingeLossParameter* hinge_loss_param);
  ::trtcaffe::HingeLossParameter* unsafe_arena_release_hinge_loss_param();

  // optional .trtcaffe.ReLUParameter relu_param = 30;
  bool has_relu_param() const;
  private:
  bool _internal_has_relu_param() const;
  public:
  void clear_relu_param();
  const ::trtcaffe::ReLUParameter& relu_param() const;
  ::trtcaffe::ReLUParameter* release_relu_param();
  ::trtcaffe::ReLUParameter* mutable_relu_param();
  void set_allocated_relu_param(::trtcaffe::ReLUParameter* relu_param);
  private:
  const ::trtcaffe::ReLUParameter& _internal_relu_param() const;
  ::trtcaffe::ReLUParameter* _internal_mutable_relu_param();
  public:
  void unsafe_arena_set_allocated_relu_param(
      ::trtcaffe::ReLUParameter* relu_param);
  ::trtcaffe::ReLUParameter* unsafe_arena_release_relu_param();

  // optional .trtcaffe.SliceParameter slice_param = 31;
  bool has_slice_param() const;
  private:
  bool _internal_has_slice_param() const;
  public:
  void clear_slice_param();
  const ::trtcaffe::SliceParameter& slice_param() const;
  ::trtcaffe::SliceParameter* release_slice_param();
  ::trtcaffe::SliceParameter* mutable_slice_param();
  void set_allocated_slice_param(::trtcaffe::SliceParameter* slice_param);
  private:
  const ::trtcaffe::SliceParameter& _internal_slice_param() const;
  ::trtcaffe::SliceParameter* _internal_mutable_slice_param();
  public:
  void unsafe_arena_set_allocated_slice_param(
      ::trtcaffe::SliceParameter* slice_param);
  ::trtcaffe::SliceParameter* unsafe_arena_release_slice_param();

  // optional .trtcaffe.MVNParameter mvn_param = 34;
  bool has_mvn_param() const;
  private:
  bool _internal_has_mvn_param() const;
  public:
  void clear_mvn_param();
  const ::trtcaffe::MVNParameter& mvn_param() const;
  ::trtcaffe::MVNParameter* release_mvn_param();
  ::trtcaffe::MVNParameter* mutable_mvn_param();
  void set_allocated_mvn_param(::trtcaffe::MVNParameter* mvn_param);
  private:
  const ::trtcaffe::MVNParameter& _internal_mvn_param() const;
  ::trtcaffe::MVNParameter* _internal_mutable_mvn_param();
  public:
  void unsafe_arena_set_allocated_mvn_param(
      ::trtcaffe::MVNParameter* mvn_param);
  ::trtcaffe::MVNParameter* unsafe_arena_release_mvn_param();

  // optional .trtcaffe.TransformationParameter transform_param = 36;
  bool has_transform_param() const;
  private:
  bool _internal_has_transform_param() const;
  public:
  void clear_transform_param();
  const ::trtcaffe::TransformationParameter& transform_param() const;
  ::trtcaffe::TransformationParameter* release_transform_param();
  ::trtcaffe::TransformationParameter* mutable_transform_param();
  void set_allocated_transform_param(::trtcaffe::TransformationParameter* transform_param);
  private:
  const ::trtcaffe::TransformationParameter& _internal_transform_param() const;
  ::trtcaffe::TransformationParameter* _internal_mutable_transform_param();
  public:
  void unsafe_arena_set_allocated_transform_param(
      ::trtcaffe::TransformationParameter* transform_param);
  ::trtcaffe::TransformationParameter* unsafe_arena_release_transform_param();

  // optional .trtcaffe.TanHParameter tanh_param = 37;
  bool has_tanh_param() const;
  private:
  bool _internal_has_tanh_param() const;
  public:
  void clear_tanh_param();
  const ::trtcaffe::TanHParameter& tanh_param() const;
  ::trtcaffe::TanHParameter* release_tanh_param();
  ::trtcaffe::TanHParameter* mutable_tanh_param();
  void set_allocated_tanh_param(::trtcaffe::TanHParameter* tanh_param);
  private:
  const ::trtcaffe::TanHParameter& _internal_tanh_param() const;
  ::trtcaffe::TanHParameter* _internal_mutable_tanh_param();
  public:
  void unsafe_arena_set_allocated_tanh_param(
      ::trtcaffe::TanHParameter* tanh_param);
  ::trtcaffe::TanHParameter* unsafe_arena_release_tanh_param();

  // optional .trtcaffe.SigmoidParameter sigmoid_param = 38;
  bool has_sigmoid_param() const;
  private:
  bool _internal_has_sigmoid_param() const;
  public:
  void clear_sigmoid_param();
  const ::trtcaffe::SigmoidParameter& sigmoid_param() const;
  ::trtcaffe::SigmoidParameter* release_sigmoid_param();
  ::trtcaffe::SigmoidParameter* mutable_sigmoid_param();
  void set_allocated_sigmoid_param(::trtcaffe::SigmoidParameter* sigmoid_param);
  private:
  const ::trtcaffe::SigmoidParameter& _internal_sigmoid_param() const;
  ::trtcaffe::SigmoidParameter* _internal_mutable_sigmoid_param();
  public:
  void unsafe_arena_set_allocated_sigmoid_param(
      ::trtcaffe::SigmoidParameter* sigmoid_param);
  ::trtcaffe::SigmoidParameter* unsafe_arena_release_sigmoid_param();

  // optional .trtcaffe.SoftmaxParameter softmax_param = 39;
  bool has_softmax_param() const;
  private:
  bool _internal_has_softmax_param() const;
  public:
  void clear_softmax_param();
  const ::trtcaffe::SoftmaxParameter& softmax_param() const;
  ::trtcaffe::SoftmaxParameter* release_softmax_param();
  ::trtcaffe::SoftmaxParameter* mutable_softmax_param();
  void set_allocated_softmax_param(::trtcaffe::SoftmaxParameter* softmax_param);
  private:
  const ::trtcaffe::SoftmaxParameter& _internal_softmax_param() const;
  ::trtcaffe::SoftmaxParameter* _internal_mutable_softmax_param();
  public:
  void unsafe_arena_set_allocated_softmax_param(
      ::trtcaffe::SoftmaxParameter* softmax_param);
  ::trtcaffe::SoftmaxParameter* unsafe_arena_release_softmax_param();

  // optional .trtcaffe.ContrastiveLossParameter contrastive_loss_param = 40;
  bool has_contrastive_loss_param() const;
  private:
  bool _internal_has_contrastive_loss_param() const;
  public:
  void clear_contrastive_loss_param();
  const ::trtcaffe::ContrastiveLossParameter& contrastive_loss_param() const;
  ::trtcaffe::ContrastiveLossParameter* release_contrastive_loss_param();
  ::trtcaffe::ContrastiveLossParameter* mutable_contrastive_loss_param();
  void set_allocated_contrastive_loss_param(::trtcaffe::ContrastiveLossParameter* contrastive_loss_param);
  private:
  const ::trtcaffe::ContrastiveLossParameter& _internal_contrastive_loss_param() const;
  ::trtcaffe::ContrastiveLossParameter* _internal_mutable_contrastive_loss_param();
  public:
  void unsafe_arena_set_allocated_contrastive_loss_param(
      ::trtcaffe::ContrastiveLossParameter* contrastive_loss_param);
  ::trtcaffe::ContrastiveLossParameter* unsafe_arena_release_contrastive_loss_param();

  // optional .trtcaffe.ExpParameter exp_param = 41;
  bool has_exp_param() const;
  private:
  bool _internal_has_exp_param() const;
  public:
  void clear_exp_param();
  const ::trtcaffe::ExpParameter& exp_param() const;
  ::trtcaffe::ExpParameter* release_exp_param();
  ::trtcaffe::ExpParameter* mutable_exp_param();
  void set_allocated_exp_param(::trtcaffe::ExpParameter* exp_param);
  private:
  const ::trtcaffe::ExpParameter& _internal_exp_param() const;
  ::trtcaffe::ExpParameter* _internal_mutable_exp_param();
  public:
  void unsafe_arena_set_allocated_exp_param(
      ::trtcaffe::ExpParameter* exp_param);
  ::trtcaffe::ExpParameter* unsafe_arena_release_exp_param();

  // optional .trtcaffe.LossParameter loss_param = 42;
  bool has_loss_param() const;
  private:
  bool _internal_has_loss_param() const;
  public:
  void clear_loss_param();
  const ::trtcaffe::LossParameter& loss_param() const;
  ::trtcaffe::LossParameter* release_loss_param();
  ::trtcaffe::LossParameter* mutable_loss_param();
  void set_allocated_loss_param(::trtcaffe::LossParameter* loss_param);
  private:
  const ::trtcaffe::LossParameter& _internal_loss_param() const;
  ::trtcaffe::LossParameter* _internal_mutable_loss_param();
  public:
  void unsafe_arena_set_allocated_loss_param(
      ::trtcaffe::LossParameter* loss_param);
  ::trtcaffe::LossParameter* unsafe_arena_release_loss_param();

  // optional .trtcaffe.CropParameter crop_param = 44;
  bool has_crop_param() const;
  private:
  bool _internal_has_crop_param() const;
  public:
  void clear_crop_param();
  const ::trtcaffe::CropParameter& crop_param() const;
  ::trtcaffe::CropParameter* release_crop_param();
  ::trtcaffe::CropParameter* mutable_crop_param();
  void set_allocated_crop_param(::trtcaffe::CropParameter* crop_param);
  private:
  const ::trtcaffe::CropParameter& _internal_crop_param() const;
  ::trtcaffe::CropParameter* _internal_mutable_crop_param();
  public:
  void unsafe_arena_set_allocated_crop_param(
      ::trtcaffe::CropParameter* crop_param);
  ::trtcaffe::CropParameter* unsafe_arena_release_crop_param();

  // optional .trtcaffe.V1LayerParameter.LayerType type = 5;
  bool has_type() const;
  private:
  bool _internal_has_type() const;
  public:
  void clear_type();
  ::trtcaffe::V1LayerParameter_LayerType type() const;
  void set_type(::trtcaffe::V1LayerParameter_LayerType value);
  private:
  ::trtcaffe::V1LayerParameter_LayerType _internal_type() const;
  void _internal_set_type(::trtcaffe::V1LayerParameter_LayerType value);
  public:

  // @@protoc_insertion_point(class_scope:trtcaffe.V1LayerParameter)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<2> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> bottom_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> top_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::trtcaffe::BlobProto > blobs_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > blobs_lr_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > weight_decay_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::trtcaffe::NetStateRule > include_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::trtcaffe::NetStateRule > exclude_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > loss_weight_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> param_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int> blob_share_mode_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::trtcaffe::V0LayerParameter* layer_;
  ::trtcaffe::ConcatParameter* concat_param_;
  ::trtcaffe::ConvolutionParameter* convolution_param_;
  ::trtcaffe::DataParameter* data_param_;
  ::trtcaffe::DropoutParameter* dropout_param_;
  ::trtcaffe::HDF5DataParameter* hdf5_data_param_;
  ::trtcaffe::HDF5OutputParameter* hdf5_output_param_;
  ::trtcaffe::ImageDataParameter* image_data_param_;
  ::trtcaffe::InfogainLossParameter* infogain_loss_param_;
  ::trtcaffe::InnerProductParameter* inner_product_param_;
  ::trtcaffe::LRNParameter* lrn_param_;
  ::trtcaffe::PoolingParameter* pooling_param_;
  ::trtcaffe::WindowDataParameter* window_data_param_;
  ::trtcaffe::PowerParameter* power_param_;
  ::trtcaffe::MemoryDataParameter* memory_data_param_;
  ::trtcaffe::ArgMaxParameter* argmax_param_;
  ::trtcaffe::EltwiseParameter* eltwise_param_;
  ::trtcaffe::ThresholdParameter* threshold_param_;
  ::trtcaffe::DummyDataParameter* dummy_data_param_;
  ::trtcaffe::AccuracyParameter* accuracy_param_;
  ::trtcaffe::HingeLossParameter* hinge_loss_param_;
  ::trtcaffe::ReLUParameter* relu_param_;
  ::trtcaffe::SliceParameter* slice_param_;
  ::trtcaffe::MVNParameter* mvn_param_;
  ::trtcaffe::TransformationParameter* transform_param_;
  ::trtcaffe::TanHParameter* tanh_param_;
  ::trtcaffe::SigmoidParameter* sigmoid_param_;
  ::trtcaffe::SoftmaxParameter* softmax_param_;
  ::trtcaffe::ContrastiveLossParameter* contrastive_loss_param_;
  ::trtcaffe::ExpParameter* exp_param_;
  ::trtcaffe::LossParameter* loss_param_;
  ::trtcaffe::CropParameter* crop_param_;
  int type_;
  friend struct ::TableStruct_trtcaffe_2eproto;
};
// -------------------------------------------------------------------

class V0LayerParameter PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:trtcaffe.V0LayerParameter) */ {
 public:
  inline V0LayerParameter() : V0LayerParameter(nullptr) {};
  virtual ~V0LayerParameter();

  V0LayerParameter(const V0LayerParameter& from);
  V0LayerParameter(V0LayerParameter&& from) noexcept
    : V0LayerParameter() {
    *this = ::std::move(from);
  }

  inline V0LayerParameter& operator=(const V0LayerParameter& from) {
    CopyFrom(from);
    return *this;
  }
  inline V0LayerParameter& operator=(V0LayerParameter&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const V0LayerParameter& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const V0LayerParameter* internal_default_instance() {
    return reinterpret_cast<const V0LayerParameter*>(
               &_V0LayerParameter_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    67;

  friend void swap(V0LayerParameter& a, V0LayerParameter& b) {
    a.Swap(&b);
  }
  inline void Swap(V0LayerParameter* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(V0LayerParameter* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline V0LayerParameter* New() const final {
    return CreateMaybeMessage<V0LayerParameter>(nullptr);
  }

  V0LayerParameter* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<V0LayerParameter>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const V0LayerParameter& from);
  void MergeFrom(const V0LayerParameter& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(V0LayerParameter* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "trtcaffe.V0LayerParameter";
  }
  protected:
  explicit V0LayerParameter(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_trtcaffe_2eproto);
    return ::descriptor_table_trtcaffe_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef V0LayerParameter_PoolMethod PoolMethod;
  static constexpr PoolMethod MAX =
    V0LayerParameter_PoolMethod_MAX;
  static constexpr PoolMethod AVE =
    V0LayerParameter_PoolMethod_AVE;
  static constexpr PoolMethod STOCHASTIC =
    V0LayerParameter_PoolMethod_STOCHASTIC;
  static inline bool PoolMethod_IsValid(int value) {
    return V0LayerParameter_PoolMethod_IsValid(value);
  }
  static constexpr PoolMethod PoolMethod_MIN =
    V0LayerParameter_PoolMethod_PoolMethod_MIN;
  static constexpr PoolMethod PoolMethod_MAX =
    V0LayerParameter_PoolMethod_PoolMethod_MAX;
  static constexpr int PoolMethod_ARRAYSIZE =
    V0LayerParameter_PoolMethod_PoolMethod_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  PoolMethod_descriptor() {
    return V0LayerParameter_PoolMethod_descriptor();
  }
  template<typename T>
  static inline const std::string& PoolMethod_Name(T enum_t_value) {
    static_assert(::std::is_same<T, PoolMethod>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function PoolMethod_Name.");
    return V0LayerParameter_PoolMethod_Name(enum_t_value);
  }
  static inline bool PoolMethod_Parse(const std::string& name,
      PoolMethod* value) {
    return V0LayerParameter_PoolMethod_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kBlobsFieldNumber = 50,
    kBlobsLrFieldNumber = 51,
    kWeightDecayFieldNumber = 52,
    kNameFieldNumber = 1,
    kTypeFieldNumber = 2,
    kSourceFieldNumber = 16,
    kMeanfileFieldNumber = 18,
    kDetCropModeFieldNumber = 59,
    kWeightFillerFieldNumber = 5,
    kBiasFillerFieldNumber = 6,
    kHdf5OutputParamFieldNumber = 1001,
    kNumOutputFieldNumber = 3,
    kPadFieldNumber = 7,
    kKernelsizeFieldNumber = 8,
    kPoolFieldNumber = 11,
    kBatchsizeFieldNumber = 19,
    kCropsizeFieldNumber = 20,
    kNewWidthFieldNumber = 63,
    kMirrorFieldNumber = 21,
    kShuffleImagesFieldNumber = 64,
    kRandSkipFieldNumber = 53,
    kDetContextPadFieldNumber = 58,
    kNewNumFieldNumber = 60,
    kNewChannelsFieldNumber = 61,
    kNewHeightFieldNumber = 62,
    kConcatDimFieldNumber = 65,
    kBiastermFieldNumber = 4,
    kGroupFieldNumber = 9,
    kStrideFieldNumber = 10,
    kDropoutRatioFieldNumber = 12,
    kLocalSizeFieldNumber = 13,
    kAlphaFieldNumber = 14,
    kBetaFieldNumber = 15,
    kScaleFieldNumber = 17,
    kKFieldNumber = 22,
    kDetFgThresholdFieldNumber = 54,
    kDetBgThresholdFieldNumber = 55,
    kDetFgFractionFieldNumber = 56,
  };
  // repeated .trtcaffe.BlobProto blobs = 50;
  int blobs_size() const;
  private:
  int _internal_blobs_size() const;
  public:
  void clear_blobs();
  ::trtcaffe::BlobProto* mutable_blobs(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::trtcaffe::BlobProto >*
      mutable_blobs();
  private:
  const ::trtcaffe::BlobProto& _internal_blobs(int index) const;
  ::trtcaffe::BlobProto* _internal_add_blobs();
  public:
  const ::trtcaffe::BlobProto& blobs(int index) const;
  ::trtcaffe::BlobProto* add_blobs();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::trtcaffe::BlobProto >&
      blobs() const;

  // repeated float blobs_lr = 51;
  int blobs_lr_size() const;
  private:
  int _internal_blobs_lr_size() const;
  public:
  void clear_blobs_lr();
  private:
  float _internal_blobs_lr(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_blobs_lr() const;
  void _internal_add_blobs_lr(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_blobs_lr();
  public:
  float blobs_lr(int index) const;
  void set_blobs_lr(int index, float value);
  void add_blobs_lr(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      blobs_lr() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_blobs_lr();

  // repeated float weight_decay = 52;
  int weight_decay_size() const;
  private:
  int _internal_weight_decay_size() const;
  public:
  void clear_weight_decay();
  private:
  float _internal_weight_decay(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_weight_decay() const;
  void _internal_add_weight_decay(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_weight_decay();
  public:
  float weight_decay(int index) const;
  void set_weight_decay(int index, float value);
  void add_weight_decay(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      weight_decay() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_weight_decay();

  // optional string name = 1;
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_name();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_name(
      std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // optional string type = 2;
  bool has_type() const;
  private:
  bool _internal_has_type() const;
  public:
  void clear_type();
  const std::string& type() const;
  void set_type(const std::string& value);
  void set_type(std::string&& value);
  void set_type(const char* value);
  void set_type(const char* value, size_t size);
  std::string* mutable_type();
  std::string* release_type();
  void set_allocated_type(std::string* type);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_type();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_type(
      std::string* type);
  private:
  const std::string& _internal_type() const;
  void _internal_set_type(const std::string& value);
  std::string* _internal_mutable_type();
  public:

  // optional string source = 16;
  bool has_source() const;
  private:
  bool _internal_has_source() const;
  public:
  void clear_source();
  const std::string& source() const;
  void set_source(const std::string& value);
  void set_source(std::string&& value);
  void set_source(const char* value);
  void set_source(const char* value, size_t size);
  std::string* mutable_source();
  std::string* release_source();
  void set_allocated_source(std::string* source);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_source();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_source(
      std::string* source);
  private:
  const std::string& _internal_source() const;
  void _internal_set_source(const std::string& value);
  std::string* _internal_mutable_source();
  public:

  // optional string meanfile = 18;
  bool has_meanfile() const;
  private:
  bool _internal_has_meanfile() const;
  public:
  void clear_meanfile();
  const std::string& meanfile() const;
  void set_meanfile(const std::string& value);
  void set_meanfile(std::string&& value);
  void set_meanfile(const char* value);
  void set_meanfile(const char* value, size_t size);
  std::string* mutable_meanfile();
  std::string* release_meanfile();
  void set_allocated_meanfile(std::string* meanfile);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_meanfile();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_meanfile(
      std::string* meanfile);
  private:
  const std::string& _internal_meanfile() const;
  void _internal_set_meanfile(const std::string& value);
  std::string* _internal_mutable_meanfile();
  public:

  // optional string det_crop_mode = 59 [default = "warp"];
  bool has_det_crop_mode() const;
  private:
  bool _internal_has_det_crop_mode() const;
  public:
  void clear_det_crop_mode();
  const std::string& det_crop_mode() const;
  void set_det_crop_mode(const std::string& value);
  void set_det_crop_mode(std::string&& value);
  void set_det_crop_mode(const char* value);
  void set_det_crop_mode(const char* value, size_t size);
  std::string* mutable_det_crop_mode();
  std::string* release_det_crop_mode();
  void set_allocated_det_crop_mode(std::string* det_crop_mode);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_det_crop_mode();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_det_crop_mode(
      std::string* det_crop_mode);
  private:
  const std::string& _internal_det_crop_mode() const;
  void _internal_set_det_crop_mode(const std::string& value);
  std::string* _internal_mutable_det_crop_mode();
  public:

  // optional .trtcaffe.FillerParameter weight_filler = 5;
  bool has_weight_filler() const;
  private:
  bool _internal_has_weight_filler() const;
  public:
  void clear_weight_filler();
  const ::trtcaffe::FillerParameter& weight_filler() const;
  ::trtcaffe::FillerParameter* release_weight_filler();
  ::trtcaffe::FillerParameter* mutable_weight_filler();
  void set_allocated_weight_filler(::trtcaffe::FillerParameter* weight_filler);
  private:
  const ::trtcaffe::FillerParameter& _internal_weight_filler() const;
  ::trtcaffe::FillerParameter* _internal_mutable_weight_filler();
  public:
  void unsafe_arena_set_allocated_weight_filler(
      ::trtcaffe::FillerParameter* weight_filler);
  ::trtcaffe::FillerParameter* unsafe_arena_release_weight_filler();

  // optional .trtcaffe.FillerParameter bias_filler = 6;
  bool has_bias_filler() const;
  private:
  bool _internal_has_bias_filler() const;
  public:
  void clear_bias_filler();
  const ::trtcaffe::FillerParameter& bias_filler() const;
  ::trtcaffe::FillerParameter* release_bias_filler();
  ::trtcaffe::FillerParameter* mutable_bias_filler();
  void set_allocated_bias_filler(::trtcaffe::FillerParameter* bias_filler);
  private:
  const ::trtcaffe::FillerParameter& _internal_bias_filler() const;
  ::trtcaffe::FillerParameter* _internal_mutable_bias_filler();
  public:
  void unsafe_arena_set_allocated_bias_filler(
      ::trtcaffe::FillerParameter* bias_filler);
  ::trtcaffe::FillerParameter* unsafe_arena_release_bias_filler();

  // optional .trtcaffe.HDF5OutputParameter hdf5_output_param = 1001;
  bool has_hdf5_output_param() const;
  private:
  bool _internal_has_hdf5_output_param() const;
  public:
  void clear_hdf5_output_param();
  const ::trtcaffe::HDF5OutputParameter& hdf5_output_param() const;
  ::trtcaffe::HDF5OutputParameter* release_hdf5_output_param();
  ::trtcaffe::HDF5OutputParameter* mutable_hdf5_output_param();
  void set_allocated_hdf5_output_param(::trtcaffe::HDF5OutputParameter* hdf5_output_param);
  private:
  const ::trtcaffe::HDF5OutputParameter& _internal_hdf5_output_param() const;
  ::trtcaffe::HDF5OutputParameter* _internal_mutable_hdf5_output_param();
  public:
  void unsafe_arena_set_allocated_hdf5_output_param(
      ::trtcaffe::HDF5OutputParameter* hdf5_output_param);
  ::trtcaffe::HDF5OutputParameter* unsafe_arena_release_hdf5_output_param();

  // optional uint32 num_output = 3;
  bool has_num_output() const;
  private:
  bool _internal_has_num_output() const;
  public:
  void clear_num_output();
  ::PROTOBUF_NAMESPACE_ID::uint32 num_output() const;
  void set_num_output(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_num_output() const;
  void _internal_set_num_output(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 pad = 7 [default = 0];
  bool has_pad() const;
  private:
  bool _internal_has_pad() const;
  public:
  void clear_pad();
  ::PROTOBUF_NAMESPACE_ID::uint32 pad() const;
  void set_pad(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_pad() const;
  void _internal_set_pad(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 kernelsize = 8;
  bool has_kernelsize() const;
  private:
  bool _internal_has_kernelsize() const;
  public:
  void clear_kernelsize();
  ::PROTOBUF_NAMESPACE_ID::uint32 kernelsize() const;
  void set_kernelsize(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_kernelsize() const;
  void _internal_set_kernelsize(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional .trtcaffe.V0LayerParameter.PoolMethod pool = 11 [default = MAX];
  bool has_pool() const;
  private:
  bool _internal_has_pool() const;
  public:
  void clear_pool();
  ::trtcaffe::V0LayerParameter_PoolMethod pool() const;
  void set_pool(::trtcaffe::V0LayerParameter_PoolMethod value);
  private:
  ::trtcaffe::V0LayerParameter_PoolMethod _internal_pool() const;
  void _internal_set_pool(::trtcaffe::V0LayerParameter_PoolMethod value);
  public:

  // optional uint32 batchsize = 19;
  bool has_batchsize() const;
  private:
  bool _internal_has_batchsize() const;
  public:
  void clear_batchsize();
  ::PROTOBUF_NAMESPACE_ID::uint32 batchsize() const;
  void set_batchsize(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_batchsize() const;
  void _internal_set_batchsize(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 cropsize = 20 [default = 0];
  bool has_cropsize() const;
  private:
  bool _internal_has_cropsize() const;
  public:
  void clear_cropsize();
  ::PROTOBUF_NAMESPACE_ID::uint32 cropsize() const;
  void set_cropsize(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_cropsize() const;
  void _internal_set_cropsize(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional int32 new_width = 63 [default = 0];
  bool has_new_width() const;
  private:
  bool _internal_has_new_width() const;
  public:
  void clear_new_width();
  ::PROTOBUF_NAMESPACE_ID::int32 new_width() const;
  void set_new_width(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_new_width() const;
  void _internal_set_new_width(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional bool mirror = 21 [default = false];
  bool has_mirror() const;
  private:
  bool _internal_has_mirror() const;
  public:
  void clear_mirror();
  bool mirror() const;
  void set_mirror(bool value);
  private:
  bool _internal_mirror() const;
  void _internal_set_mirror(bool value);
  public:

  // optional bool shuffle_images = 64 [default = false];
  bool has_shuffle_images() const;
  private:
  bool _internal_has_shuffle_images() const;
  public:
  void clear_shuffle_images();
  bool shuffle_images() const;
  void set_shuffle_images(bool value);
  private:
  bool _internal_shuffle_images() const;
  void _internal_set_shuffle_images(bool value);
  public:

  // optional uint32 rand_skip = 53 [default = 0];
  bool has_rand_skip() const;
  private:
  bool _internal_has_rand_skip() const;
  public:
  void clear_rand_skip();
  ::PROTOBUF_NAMESPACE_ID::uint32 rand_skip() const;
  void set_rand_skip(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_rand_skip() const;
  void _internal_set_rand_skip(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 det_context_pad = 58 [default = 0];
  bool has_det_context_pad() const;
  private:
  bool _internal_has_det_context_pad() const;
  public:
  void clear_det_context_pad();
  ::PROTOBUF_NAMESPACE_ID::uint32 det_context_pad() const;
  void set_det_context_pad(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_det_context_pad() const;
  void _internal_set_det_context_pad(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional int32 new_num = 60 [default = 0];
  bool has_new_num() const;
  private:
  bool _internal_has_new_num() const;
  public:
  void clear_new_num();
  ::PROTOBUF_NAMESPACE_ID::int32 new_num() const;
  void set_new_num(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_new_num() const;
  void _internal_set_new_num(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 new_channels = 61 [default = 0];
  bool has_new_channels() const;
  private:
  bool _internal_has_new_channels() const;
  public:
  void clear_new_channels();
  ::PROTOBUF_NAMESPACE_ID::int32 new_channels() const;
  void set_new_channels(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_new_channels() const;
  void _internal_set_new_channels(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 new_height = 62 [default = 0];
  bool has_new_height() const;
  private:
  bool _internal_has_new_height() const;
  public:
  void clear_new_height();
  ::PROTOBUF_NAMESPACE_ID::int32 new_height() const;
  void set_new_height(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_new_height() const;
  void _internal_set_new_height(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional uint32 concat_dim = 65 [default = 1];
  bool has_concat_dim() const;
  private:
  bool _internal_has_concat_dim() const;
  public:
  void clear_concat_dim();
  ::PROTOBUF_NAMESPACE_ID::uint32 concat_dim() const;
  void set_concat_dim(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_concat_dim() const;
  void _internal_set_concat_dim(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional bool biasterm = 4 [default = true];
  bool has_biasterm() const;
  private:
  bool _internal_has_biasterm() const;
  public:
  void clear_biasterm();
  bool biasterm() const;
  void set_biasterm(bool value);
  private:
  bool _internal_biasterm() const;
  void _internal_set_biasterm(bool value);
  public:

  // optional uint32 group = 9 [default = 1];
  bool has_group() const;
  private:
  bool _internal_has_group() const;
  public:
  void clear_group();
  ::PROTOBUF_NAMESPACE_ID::uint32 group() const;
  void set_group(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_group() const;
  void _internal_set_group(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 stride = 10 [default = 1];
  bool has_stride() const;
  private:
  bool _internal_has_stride() const;
  public:
  void clear_stride();
  ::PROTOBUF_NAMESPACE_ID::uint32 stride() const;
  void set_stride(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_stride() const;
  void _internal_set_stride(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional float dropout_ratio = 12 [default = 0.5];
  bool has_dropout_ratio() const;
  private:
  bool _internal_has_dropout_ratio() const;
  public:
  void clear_dropout_ratio();
  float dropout_ratio() const;
  void set_dropout_ratio(float value);
  private:
  float _internal_dropout_ratio() const;
  void _internal_set_dropout_ratio(float value);
  public:

  // optional uint32 local_size = 13 [default = 5];
  bool has_local_size() const;
  private:
  bool _internal_has_local_size() const;
  public:
  void clear_local_size();
  ::PROTOBUF_NAMESPACE_ID::uint32 local_size() const;
  void set_local_size(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_local_size() const;
  void _internal_set_local_size(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional float alpha = 14 [default = 1];
  bool has_alpha() const;
  private:
  bool _internal_has_alpha() const;
  public:
  void clear_alpha();
  float alpha() const;
  void set_alpha(float value);
  private:
  float _internal_alpha() const;
  void _internal_set_alpha(float value);
  public:

  // optional float beta = 15 [default = 0.75];
  bool has_beta() const;
  private:
  bool _internal_has_beta() const;
  public:
  void clear_beta();
  float beta() const;
  void set_beta(float value);
  private:
  float _internal_beta() const;
  void _internal_set_beta(float value);
  public:

  // optional float scale = 17 [default = 1];
  bool has_scale() const;
  private:
  bool _internal_has_scale() const;
  public:
  void clear_scale();
  float scale() const;
  void set_scale(float value);
  private:
  float _internal_scale() const;
  void _internal_set_scale(float value);
  public:

  // optional float k = 22 [default = 1];
  bool has_k() const;
  private:
  bool _internal_has_k() const;
  public:
  void clear_k();
  float k() const;
  void set_k(float value);
  private:
  float _internal_k() const;
  void _internal_set_k(float value);
  public:

  // optional float det_fg_threshold = 54 [default = 0.5];
  bool has_det_fg_threshold() const;
  private:
  bool _internal_has_det_fg_threshold() const;
  public:
  void clear_det_fg_threshold();
  float det_fg_threshold() const;
  void set_det_fg_threshold(float value);
  private:
  float _internal_det_fg_threshold() const;
  void _internal_set_det_fg_threshold(float value);
  public:

  // optional float det_bg_threshold = 55 [default = 0.5];
  bool has_det_bg_threshold() const;
  private:
  bool _internal_has_det_bg_threshold() const;
  public:
  void clear_det_bg_threshold();
  float det_bg_threshold() const;
  void set_det_bg_threshold(float value);
  private:
  float _internal_det_bg_threshold() const;
  void _internal_set_det_bg_threshold(float value);
  public:

  // optional float det_fg_fraction = 56 [default = 0.25];
  bool has_det_fg_fraction() const;
  private:
  bool _internal_has_det_fg_fraction() const;
  public:
  void clear_det_fg_fraction();
  float det_fg_fraction() const;
  void set_det_fg_fraction(float value);
  private:
  float _internal_det_fg_fraction() const;
  void _internal_set_det_fg_fraction(float value);
  public:

  // @@protoc_insertion_point(class_scope:trtcaffe.V0LayerParameter)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<2> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::trtcaffe::BlobProto > blobs_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > blobs_lr_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > weight_decay_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr type_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr source_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr meanfile_;
  public:
  static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> _i_give_permission_to_break_this_code_default_det_crop_mode_;
  private:
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr det_crop_mode_;
  ::trtcaffe::FillerParameter* weight_filler_;
  ::trtcaffe::FillerParameter* bias_filler_;
  ::trtcaffe::HDF5OutputParameter* hdf5_output_param_;
  ::PROTOBUF_NAMESPACE_ID::uint32 num_output_;
  ::PROTOBUF_NAMESPACE_ID::uint32 pad_;
  ::PROTOBUF_NAMESPACE_ID::uint32 kernelsize_;
  int pool_;
  ::PROTOBUF_NAMESPACE_ID::uint32 batchsize_;
  ::PROTOBUF_NAMESPACE_ID::uint32 cropsize_;
  ::PROTOBUF_NAMESPACE_ID::int32 new_width_;
  bool mirror_;
  bool shuffle_images_;
  ::PROTOBUF_NAMESPACE_ID::uint32 rand_skip_;
  ::PROTOBUF_NAMESPACE_ID::uint32 det_context_pad_;
  ::PROTOBUF_NAMESPACE_ID::int32 new_num_;
  ::PROTOBUF_NAMESPACE_ID::int32 new_channels_;
  ::PROTOBUF_NAMESPACE_ID::int32 new_height_;
  ::PROTOBUF_NAMESPACE_ID::uint32 concat_dim_;
  bool biasterm_;
  ::PROTOBUF_NAMESPACE_ID::uint32 group_;
  ::PROTOBUF_NAMESPACE_ID::uint32 stride_;
  float dropout_ratio_;
  ::PROTOBUF_NAMESPACE_ID::uint32 local_size_;
  float alpha_;
  float beta_;
  float scale_;
  float k_;
  float det_fg_threshold_;
  float det_bg_threshold_;
  float det_fg_fraction_;
  friend struct ::TableStruct_trtcaffe_2eproto;
};
// -------------------------------------------------------------------

class PReLUParameter PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:trtcaffe.PReLUParameter) */ {
 public:
  inline PReLUParameter() : PReLUParameter(nullptr) {};
  virtual ~PReLUParameter();

  PReLUParameter(const PReLUParameter& from);
  PReLUParameter(PReLUParameter&& from) noexcept
    : PReLUParameter() {
    *this = ::std::move(from);
  }

  inline PReLUParameter& operator=(const PReLUParameter& from) {
    CopyFrom(from);
    return *this;
  }
  inline PReLUParameter& operator=(PReLUParameter&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PReLUParameter& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PReLUParameter* internal_default_instance() {
    return reinterpret_cast<const PReLUParameter*>(
               &_PReLUParameter_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    68;

  friend void swap(PReLUParameter& a, PReLUParameter& b) {
    a.Swap(&b);
  }
  inline void Swap(PReLUParameter* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PReLUParameter* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PReLUParameter* New() const final {
    return CreateMaybeMessage<PReLUParameter>(nullptr);
  }

  PReLUParameter* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PReLUParameter>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PReLUParameter& from);
  void MergeFrom(const PReLUParameter& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PReLUParameter* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "trtcaffe.PReLUParameter";
  }
  protected:
  explicit PReLUParameter(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_trtcaffe_2eproto);
    return ::descriptor_table_trtcaffe_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFillerFieldNumber = 1,
    kChannelSharedFieldNumber = 2,
  };
  // optional .trtcaffe.FillerParameter filler = 1;
  bool has_filler() const;
  private:
  bool _internal_has_filler() const;
  public:
  void clear_filler();
  const ::trtcaffe::FillerParameter& filler() const;
  ::trtcaffe::FillerParameter* release_filler();
  ::trtcaffe::FillerParameter* mutable_filler();
  void set_allocated_filler(::trtcaffe::FillerParameter* filler);
  private:
  const ::trtcaffe::FillerParameter& _internal_filler() const;
  ::trtcaffe::FillerParameter* _internal_mutable_filler();
  public:
  void unsafe_arena_set_allocated_filler(
      ::trtcaffe::FillerParameter* filler);
  ::trtcaffe::FillerParameter* unsafe_arena_release_filler();

  // optional bool channel_shared = 2 [default = false];
  bool has_channel_shared() const;
  private:
  bool _internal_has_channel_shared() const;
  public:
  void clear_channel_shared();
  bool channel_shared() const;
  void set_channel_shared(bool value);
  private:
  bool _internal_channel_shared() const;
  void _internal_set_channel_shared(bool value);
  public:

  // @@protoc_insertion_point(class_scope:trtcaffe.PReLUParameter)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::trtcaffe::FillerParameter* filler_;
  bool channel_shared_;
  friend struct ::TableStruct_trtcaffe_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// BlobShape

// repeated int64 dim = 1 [packed = true];
inline int BlobShape::_internal_dim_size() const {
  return dim_.size();
}
inline int BlobShape::dim_size() const {
  return _internal_dim_size();
}
inline void BlobShape::clear_dim() {
  dim_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int64 BlobShape::_internal_dim(int index) const {
  return dim_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 BlobShape::dim(int index) const {
  // @@protoc_insertion_point(field_get:trtcaffe.BlobShape.dim)
  return _internal_dim(index);
}
inline void BlobShape::set_dim(int index, ::PROTOBUF_NAMESPACE_ID::int64 value) {
  dim_.Set(index, value);
  // @@protoc_insertion_point(field_set:trtcaffe.BlobShape.dim)
}
inline void BlobShape::_internal_add_dim(::PROTOBUF_NAMESPACE_ID::int64 value) {
  dim_.Add(value);
}
inline void BlobShape::add_dim(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_add_dim(value);
  // @@protoc_insertion_point(field_add:trtcaffe.BlobShape.dim)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
BlobShape::_internal_dim() const {
  return dim_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
BlobShape::dim() const {
  // @@protoc_insertion_point(field_list:trtcaffe.BlobShape.dim)
  return _internal_dim();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
BlobShape::_internal_mutable_dim() {
  return &dim_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
BlobShape::mutable_dim() {
  // @@protoc_insertion_point(field_mutable_list:trtcaffe.BlobShape.dim)
  return _internal_mutable_dim();
}

// -------------------------------------------------------------------

// BlobProto

// optional .trtcaffe.BlobShape shape = 7;
inline bool BlobProto::_internal_has_shape() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || shape_ != nullptr);
  return value;
}
inline bool BlobProto::has_shape() const {
  return _internal_has_shape();
}
inline void BlobProto::clear_shape() {
  if (shape_ != nullptr) shape_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::trtcaffe::BlobShape& BlobProto::_internal_shape() const {
  const ::trtcaffe::BlobShape* p = shape_;
  return p != nullptr ? *p : *reinterpret_cast<const ::trtcaffe::BlobShape*>(
      &::trtcaffe::_BlobShape_default_instance_);
}
inline const ::trtcaffe::BlobShape& BlobProto::shape() const {
  // @@protoc_insertion_point(field_get:trtcaffe.BlobProto.shape)
  return _internal_shape();
}
inline void BlobProto::unsafe_arena_set_allocated_shape(
    ::trtcaffe::BlobShape* shape) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(shape_);
  }
  shape_ = shape;
  if (shape) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:trtcaffe.BlobProto.shape)
}
inline ::trtcaffe::BlobShape* BlobProto::release_shape() {
  auto temp = unsafe_arena_release_shape();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::trtcaffe::BlobShape* BlobProto::unsafe_arena_release_shape() {
  // @@protoc_insertion_point(field_release:trtcaffe.BlobProto.shape)
  _has_bits_[0] &= ~0x00000004u;
  ::trtcaffe::BlobShape* temp = shape_;
  shape_ = nullptr;
  return temp;
}
inline ::trtcaffe::BlobShape* BlobProto::_internal_mutable_shape() {
  _has_bits_[0] |= 0x00000004u;
  if (shape_ == nullptr) {
    auto* p = CreateMaybeMessage<::trtcaffe::BlobShape>(GetArena());
    shape_ = p;
  }
  return shape_;
}
inline ::trtcaffe::BlobShape* BlobProto::mutable_shape() {
  // @@protoc_insertion_point(field_mutable:trtcaffe.BlobProto.shape)
  return _internal_mutable_shape();
}
inline void BlobProto::set_allocated_shape(::trtcaffe::BlobShape* shape) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete shape_;
  }
  if (shape) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(shape);
    if (message_arena != submessage_arena) {
      shape = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, shape, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  shape_ = shape;
  // @@protoc_insertion_point(field_set_allocated:trtcaffe.BlobProto.shape)
}

// repeated float data = 5 [packed = true];
inline int BlobProto::_internal_data_size() const {
  return data_.size();
}
inline int BlobProto::data_size() const {
  return _internal_data_size();
}
inline void BlobProto::clear_data() {
  data_.Clear();
}
inline float BlobProto::_internal_data(int index) const {
  return data_.Get(index);
}
inline float BlobProto::data(int index) const {
  // @@protoc_insertion_point(field_get:trtcaffe.BlobProto.data)
  return _internal_data(index);
}
inline void BlobProto::set_data(int index, float value) {
  data_.Set(index, value);
  // @@protoc_insertion_point(field_set:trtcaffe.BlobProto.data)
}
inline void BlobProto::_internal_add_data(float value) {
  data_.Add(value);
}
inline void BlobProto::add_data(float value) {
  _internal_add_data(value);
  // @@protoc_insertion_point(field_add:trtcaffe.BlobProto.data)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
BlobProto::_internal_data() const {
  return data_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
BlobProto::data() const {
  // @@protoc_insertion_point(field_list:trtcaffe.BlobProto.data)
  return _internal_data();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
BlobProto::_internal_mutable_data() {
  return &data_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
BlobProto::mutable_data() {
  // @@protoc_insertion_point(field_mutable_list:trtcaffe.BlobProto.data)
  return _internal_mutable_data();
}

// repeated float diff = 6 [packed = true];
inline int BlobProto::_internal_diff_size() const {
  return diff_.size();
}
inline int BlobProto::diff_size() const {
  return _internal_diff_size();
}
inline void BlobProto::clear_diff() {
  diff_.Clear();
}
inline float BlobProto::_internal_diff(int index) const {
  return diff_.Get(index);
}
inline float BlobProto::diff(int index) const {
  // @@protoc_insertion_point(field_get:trtcaffe.BlobProto.diff)
  return _internal_diff(index);
}
inline void BlobProto::set_diff(int index, float value) {
  diff_.Set(index, value);
  // @@protoc_insertion_point(field_set:trtcaffe.BlobProto.diff)
}
inline void BlobProto::_internal_add_diff(float value) {
  diff_.Add(value);
}
inline void BlobProto::add_diff(float value) {
  _internal_add_diff(value);
  // @@protoc_insertion_point(field_add:trtcaffe.BlobProto.diff)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
BlobProto::_internal_diff() const {
  return diff_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
BlobProto::diff() const {
  // @@protoc_insertion_point(field_list:trtcaffe.BlobProto.diff)
  return _internal_diff();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
BlobProto::_internal_mutable_diff() {
  return &diff_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
BlobProto::mutable_diff() {
  // @@protoc_insertion_point(field_mutable_list:trtcaffe.BlobProto.diff)
  return _internal_mutable_diff();
}

// repeated double double_data = 8 [packed = true];
inline int BlobProto::_internal_double_data_size() const {
  return double_data_.size();
}
inline int BlobProto::double_data_size() const {
  return _internal_double_data_size();
}
inline void BlobProto::clear_double_data() {
  double_data_.Clear();
}
inline double BlobProto::_internal_double_data(int index) const {
  return double_data_.Get(index);
}
inline double BlobProto::double_data(int index) const {
  // @@protoc_insertion_point(field_get:trtcaffe.BlobProto.double_data)
  return _internal_double_data(index);
}
inline void BlobProto::set_double_data(int index, double value) {
  double_data_.Set(index, value);
  // @@protoc_insertion_point(field_set:trtcaffe.BlobProto.double_data)
}
inline void BlobProto::_internal_add_double_data(double value) {
  double_data_.Add(value);
}
inline void BlobProto::add_double_data(double value) {
  _internal_add_double_data(value);
  // @@protoc_insertion_point(field_add:trtcaffe.BlobProto.double_data)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
BlobProto::_internal_double_data() const {
  return double_data_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
BlobProto::double_data() const {
  // @@protoc_insertion_point(field_list:trtcaffe.BlobProto.double_data)
  return _internal_double_data();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
BlobProto::_internal_mutable_double_data() {
  return &double_data_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
BlobProto::mutable_double_data() {
  // @@protoc_insertion_point(field_mutable_list:trtcaffe.BlobProto.double_data)
  return _internal_mutable_double_data();
}

// repeated double double_diff = 9 [packed = true];
inline int BlobProto::_internal_double_diff_size() const {
  return double_diff_.size();
}
inline int BlobProto::double_diff_size() const {
  return _internal_double_diff_size();
}
inline void BlobProto::clear_double_diff() {
  double_diff_.Clear();
}
inline double BlobProto::_internal_double_diff(int index) const {
  return double_diff_.Get(index);
}
inline double BlobProto::double_diff(int index) const {
  // @@protoc_insertion_point(field_get:trtcaffe.BlobProto.double_diff)
  return _internal_double_diff(index);
}
inline void BlobProto::set_double_diff(int index, double value) {
  double_diff_.Set(index, value);
  // @@protoc_insertion_point(field_set:trtcaffe.BlobProto.double_diff)
}
inline void BlobProto::_internal_add_double_diff(double value) {
  double_diff_.Add(value);
}
inline void BlobProto::add_double_diff(double value) {
  _internal_add_double_diff(value);
  // @@protoc_insertion_point(field_add:trtcaffe.BlobProto.double_diff)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
BlobProto::_internal_double_diff() const {
  return double_diff_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
BlobProto::double_diff() const {
  // @@protoc_insertion_point(field_list:trtcaffe.BlobProto.double_diff)
  return _internal_double_diff();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
BlobProto::_internal_mutable_double_diff() {
  return &double_diff_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
BlobProto::mutable_double_diff() {
  // @@protoc_insertion_point(field_mutable_list:trtcaffe.BlobProto.double_diff)
  return _internal_mutable_double_diff();
}

// optional .trtcaffe.Type raw_data_type = 10;
inline bool BlobProto::_internal_has_raw_data_type() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool BlobProto::has_raw_data_type() const {
  return _internal_has_raw_data_type();
}
inline void BlobProto::clear_raw_data_type() {
  raw_data_type_ = 0;
  _has_bits_[0] &= ~0x00000080u;
}
inline ::trtcaffe::Type BlobProto::_internal_raw_data_type() const {
  return static_cast< ::trtcaffe::Type >(raw_data_type_);
}
inline ::trtcaffe::Type BlobProto::raw_data_type() const {
  // @@protoc_insertion_point(field_get:trtcaffe.BlobProto.raw_data_type)
  return _internal_raw_data_type();
}
inline void BlobProto::_internal_set_raw_data_type(::trtcaffe::Type value) {
  assert(::trtcaffe::Type_IsValid(value));
  _has_bits_[0] |= 0x00000080u;
  raw_data_type_ = value;
}
inline void BlobProto::set_raw_data_type(::trtcaffe::Type value) {
  _internal_set_raw_data_type(value);
  // @@protoc_insertion_point(field_set:trtcaffe.BlobProto.raw_data_type)
}

// optional .trtcaffe.Type raw_diff_type = 11;
inline bool BlobProto::_internal_has_raw_diff_type() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool BlobProto::has_raw_diff_type() const {
  return _internal_has_raw_diff_type();
}
inline void BlobProto::clear_raw_diff_type() {
  raw_diff_type_ = 0;
  _has_bits_[0] &= ~0x00000100u;
}
inline ::trtcaffe::Type BlobProto::_internal_raw_diff_type() const {
  return static_cast< ::trtcaffe::Type >(raw_diff_type_);
}
inline ::trtcaffe::Type BlobProto::raw_diff_type() const {
  // @@protoc_insertion_point(field_get:trtcaffe.BlobProto.raw_diff_type)
  return _internal_raw_diff_type();
}
inline void BlobProto::_internal_set_raw_diff_type(::trtcaffe::Type value) {
  assert(::trtcaffe::Type_IsValid(value));
  _has_bits_[0] |= 0x00000100u;
  raw_diff_type_ = value;
}
inline void BlobProto::set_raw_diff_type(::trtcaffe::Type value) {
  _internal_set_raw_diff_type(value);
  // @@protoc_insertion_point(field_set:trtcaffe.BlobProto.raw_diff_type)
}

// optional bytes raw_data = 12 [packed = false];
inline bool BlobProto::_internal_has_raw_data() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool BlobProto::has_raw_data() const {
  return _internal_has_raw_data();
}
inline void BlobProto::clear_raw_data() {
  raw_data_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& BlobProto::raw_data() const {
  // @@protoc_insertion_point(field_get:trtcaffe.BlobProto.raw_data)
  return _internal_raw_data();
}
inline void BlobProto::set_raw_data(const std::string& value) {
  _internal_set_raw_data(value);
  // @@protoc_insertion_point(field_set:trtcaffe.BlobProto.raw_data)
}
inline std::string* BlobProto::mutable_raw_data() {
  // @@protoc_insertion_point(field_mutable:trtcaffe.BlobProto.raw_data)
  return _internal_mutable_raw_data();
}
inline const std::string& BlobProto::_internal_raw_data() const {
  return raw_data_.Get();
}
inline void BlobProto::_internal_set_raw_data(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  raw_data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void BlobProto::set_raw_data(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  raw_data_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:trtcaffe.BlobProto.raw_data)
}
inline void BlobProto::set_raw_data(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  raw_data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:trtcaffe.BlobProto.raw_data)
}
inline void BlobProto::set_raw_data(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  raw_data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:trtcaffe.BlobProto.raw_data)
}
inline std::string* BlobProto::_internal_mutable_raw_data() {
  _has_bits_[0] |= 0x00000001u;
  return raw_data_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* BlobProto::release_raw_data() {
  // @@protoc_insertion_point(field_release:trtcaffe.BlobProto.raw_data)
  if (!_internal_has_raw_data()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return raw_data_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void BlobProto::set_allocated_raw_data(std::string* raw_data) {
  if (raw_data != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  raw_data_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), raw_data,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:trtcaffe.BlobProto.raw_data)
}
inline std::string* BlobProto::unsafe_arena_release_raw_data() {
  // @@protoc_insertion_point(field_unsafe_arena_release:trtcaffe.BlobProto.raw_data)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000001u;
  return raw_data_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void BlobProto::unsafe_arena_set_allocated_raw_data(
    std::string* raw_data) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (raw_data != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  raw_data_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      raw_data, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:trtcaffe.BlobProto.raw_data)
}

// optional bytes raw_diff = 13 [packed = false];
inline bool BlobProto::_internal_has_raw_diff() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool BlobProto::has_raw_diff() const {
  return _internal_has_raw_diff();
}
inline void BlobProto::clear_raw_diff() {
  raw_diff_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& BlobProto::raw_diff() const {
  // @@protoc_insertion_point(field_get:trtcaffe.BlobProto.raw_diff)
  return _internal_raw_diff();
}
inline void BlobProto::set_raw_diff(const std::string& value) {
  _internal_set_raw_diff(value);
  // @@protoc_insertion_point(field_set:trtcaffe.BlobProto.raw_diff)
}
inline std::string* BlobProto::mutable_raw_diff() {
  // @@protoc_insertion_point(field_mutable:trtcaffe.BlobProto.raw_diff)
  return _internal_mutable_raw_diff();
}
inline const std::string& BlobProto::_internal_raw_diff() const {
  return raw_diff_.Get();
}
inline void BlobProto::_internal_set_raw_diff(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  raw_diff_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void BlobProto::set_raw_diff(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  raw_diff_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:trtcaffe.BlobProto.raw_diff)
}
inline void BlobProto::set_raw_diff(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  raw_diff_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:trtcaffe.BlobProto.raw_diff)
}
inline void BlobProto::set_raw_diff(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  raw_diff_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:trtcaffe.BlobProto.raw_diff)
}
inline std::string* BlobProto::_internal_mutable_raw_diff() {
  _has_bits_[0] |= 0x00000002u;
  return raw_diff_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* BlobProto::release_raw_diff() {
  // @@protoc_insertion_point(field_release:trtcaffe.BlobProto.raw_diff)
  if (!_internal_has_raw_diff()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return raw_diff_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void BlobProto::set_allocated_raw_diff(std::string* raw_diff) {
  if (raw_diff != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  raw_diff_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), raw_diff,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:trtcaffe.BlobProto.raw_diff)
}
inline std::string* BlobProto::unsafe_arena_release_raw_diff() {
  // @@protoc_insertion_point(field_unsafe_arena_release:trtcaffe.BlobProto.raw_diff)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000002u;
  return raw_diff_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void BlobProto::unsafe_arena_set_allocated_raw_diff(
    std::string* raw_diff) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (raw_diff != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  raw_diff_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      raw_diff, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:trtcaffe.BlobProto.raw_diff)
}

// optional int32 num = 1 [default = 0];
inline bool BlobProto::_internal_has_num() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool BlobProto::has_num() const {
  return _internal_has_num();
}
inline void BlobProto::clear_num() {
  num_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BlobProto::_internal_num() const {
  return num_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BlobProto::num() const {
  // @@protoc_insertion_point(field_get:trtcaffe.BlobProto.num)
  return _internal_num();
}
inline void BlobProto::_internal_set_num(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000008u;
  num_ = value;
}
inline void BlobProto::set_num(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_num(value);
  // @@protoc_insertion_point(field_set:trtcaffe.BlobProto.num)
}

// optional int32 channels = 2 [default = 0];
inline bool BlobProto::_internal_has_channels() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool BlobProto::has_channels() const {
  return _internal_has_channels();
}
inline void BlobProto::clear_channels() {
  channels_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BlobProto::_internal_channels() const {
  return channels_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BlobProto::channels() const {
  // @@protoc_insertion_point(field_get:trtcaffe.BlobProto.channels)
  return _internal_channels();
}
inline void BlobProto::_internal_set_channels(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000010u;
  channels_ = value;
}
inline void BlobProto::set_channels(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_channels(value);
  // @@protoc_insertion_point(field_set:trtcaffe.BlobProto.channels)
}

// optional int32 height = 3 [default = 0];
inline bool BlobProto::_internal_has_height() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool BlobProto::has_height() const {
  return _internal_has_height();
}
inline void BlobProto::clear_height() {
  height_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BlobProto::_internal_height() const {
  return height_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BlobProto::height() const {
  // @@protoc_insertion_point(field_get:trtcaffe.BlobProto.height)
  return _internal_height();
}
inline void BlobProto::_internal_set_height(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000020u;
  height_ = value;
}
inline void BlobProto::set_height(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_height(value);
  // @@protoc_insertion_point(field_set:trtcaffe.BlobProto.height)
}

// optional int32 width = 4 [default = 0];
inline bool BlobProto::_internal_has_width() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool BlobProto::has_width() const {
  return _internal_has_width();
}
inline void BlobProto::clear_width() {
  width_ = 0;
  _has_bits_[0] &= ~0x00000040u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BlobProto::_internal_width() const {
  return width_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BlobProto::width() const {
  // @@protoc_insertion_point(field_get:trtcaffe.BlobProto.width)
  return _internal_width();
}
inline void BlobProto::_internal_set_width(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000040u;
  width_ = value;
}
inline void BlobProto::set_width(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_width(value);
  // @@protoc_insertion_point(field_set:trtcaffe.BlobProto.width)
}

// -------------------------------------------------------------------

// BlobProtoVector

// repeated .trtcaffe.BlobProto blobs = 1;
inline int BlobProtoVector::_internal_blobs_size() const {
  return blobs_.size();
}
inline int BlobProtoVector::blobs_size() const {
  return _internal_blobs_size();
}
inline void BlobProtoVector::clear_blobs() {
  blobs_.Clear();
}
inline ::trtcaffe::BlobProto* BlobProtoVector::mutable_blobs(int index) {
  // @@protoc_insertion_point(field_mutable:trtcaffe.BlobProtoVector.blobs)
  return blobs_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::trtcaffe::BlobProto >*
BlobProtoVector::mutable_blobs() {
  // @@protoc_insertion_point(field_mutable_list:trtcaffe.BlobProtoVector.blobs)
  return &blobs_;
}
inline const ::trtcaffe::BlobProto& BlobProtoVector::_internal_blobs(int index) const {
  return blobs_.Get(index);
}
inline const ::trtcaffe::BlobProto& BlobProtoVector::blobs(int index) const {
  // @@protoc_insertion_point(field_get:trtcaffe.BlobProtoVector.blobs)
  return _internal_blobs(index);
}
inline ::trtcaffe::BlobProto* BlobProtoVector::_internal_add_blobs() {
  return blobs_.Add();
}
inline ::trtcaffe::BlobProto* BlobProtoVector::add_blobs() {
  // @@protoc_insertion_point(field_add:trtcaffe.BlobProtoVector.blobs)
  return _internal_add_blobs();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::trtcaffe::BlobProto >&
BlobProtoVector::blobs() const {
  // @@protoc_insertion_point(field_list:trtcaffe.BlobProtoVector.blobs)
  return blobs_;
}

// -------------------------------------------------------------------

// Datum

// optional int32 channels = 1;
inline bool Datum::_internal_has_channels() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Datum::has_channels() const {
  return _internal_has_channels();
}
inline void Datum::clear_channels() {
  channels_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Datum::_internal_channels() const {
  return channels_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Datum::channels() const {
  // @@protoc_insertion_point(field_get:trtcaffe.Datum.channels)
  return _internal_channels();
}
inline void Datum::_internal_set_channels(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  channels_ = value;
}
inline void Datum::set_channels(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_channels(value);
  // @@protoc_insertion_point(field_set:trtcaffe.Datum.channels)
}

// optional int32 height = 2;
inline bool Datum::_internal_has_height() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool Datum::has_height() const {
  return _internal_has_height();
}
inline void Datum::clear_height() {
  height_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Datum::_internal_height() const {
  return height_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Datum::height() const {
  // @@protoc_insertion_point(field_get:trtcaffe.Datum.height)
  return _internal_height();
}
inline void Datum::_internal_set_height(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000004u;
  height_ = value;
}
inline void Datum::set_height(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_height(value);
  // @@protoc_insertion_point(field_set:trtcaffe.Datum.height)
}

// optional int32 width = 3;
inline bool Datum::_internal_has_width() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool Datum::has_width() const {
  return _internal_has_width();
}
inline void Datum::clear_width() {
  width_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Datum::_internal_width() const {
  return width_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Datum::width() const {
  // @@protoc_insertion_point(field_get:trtcaffe.Datum.width)
  return _internal_width();
}
inline void Datum::_internal_set_width(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000008u;
  width_ = value;
}
inline void Datum::set_width(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_width(value);
  // @@protoc_insertion_point(field_set:trtcaffe.Datum.width)
}

// optional bytes data = 4;
inline bool Datum::_internal_has_data() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Datum::has_data() const {
  return _internal_has_data();
}
inline void Datum::clear_data() {
  data_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Datum::data() const {
  // @@protoc_insertion_point(field_get:trtcaffe.Datum.data)
  return _internal_data();
}
inline void Datum::set_data(const std::string& value) {
  _internal_set_data(value);
  // @@protoc_insertion_point(field_set:trtcaffe.Datum.data)
}
inline std::string* Datum::mutable_data() {
  // @@protoc_insertion_point(field_mutable:trtcaffe.Datum.data)
  return _internal_mutable_data();
}
inline const std::string& Datum::_internal_data() const {
  return data_.Get();
}
inline void Datum::_internal_set_data(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Datum::set_data(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  data_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:trtcaffe.Datum.data)
}
inline void Datum::set_data(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:trtcaffe.Datum.data)
}
inline void Datum::set_data(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:trtcaffe.Datum.data)
}
inline std::string* Datum::_internal_mutable_data() {
  _has_bits_[0] |= 0x00000001u;
  return data_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Datum::release_data() {
  // @@protoc_insertion_point(field_release:trtcaffe.Datum.data)
  if (!_internal_has_data()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return data_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Datum::set_allocated_data(std::string* data) {
  if (data != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  data_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), data,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:trtcaffe.Datum.data)
}
inline std::string* Datum::unsafe_arena_release_data() {
  // @@protoc_insertion_point(field_unsafe_arena_release:trtcaffe.Datum.data)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000001u;
  return data_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Datum::unsafe_arena_set_allocated_data(
    std::string* data) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (data != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  data_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      data, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:trtcaffe.Datum.data)
}

// optional int32 label = 5;
inline bool Datum::_internal_has_label() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool Datum::has_label() const {
  return _internal_has_label();
}
inline void Datum::clear_label() {
  label_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Datum::_internal_label() const {
  return label_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Datum::label() const {
  // @@protoc_insertion_point(field_get:trtcaffe.Datum.label)
  return _internal_label();
}
inline void Datum::_internal_set_label(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000010u;
  label_ = value;
}
inline void Datum::set_label(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_label(value);
  // @@protoc_insertion_point(field_set:trtcaffe.Datum.label)
}

// repeated float float_data = 6;
inline int Datum::_internal_float_data_size() const {
  return float_data_.size();
}
inline int Datum::float_data_size() const {
  return _internal_float_data_size();
}
inline void Datum::clear_float_data() {
  float_data_.Clear();
}
inline float Datum::_internal_float_data(int index) const {
  return float_data_.Get(index);
}
inline float Datum::float_data(int index) const {
  // @@protoc_insertion_point(field_get:trtcaffe.Datum.float_data)
  return _internal_float_data(index);
}
inline void Datum::set_float_data(int index, float value) {
  float_data_.Set(index, value);
  // @@protoc_insertion_point(field_set:trtcaffe.Datum.float_data)
}
inline void Datum::_internal_add_float_data(float value) {
  float_data_.Add(value);
}
inline void Datum::add_float_data(float value) {
  _internal_add_float_data(value);
  // @@protoc_insertion_point(field_add:trtcaffe.Datum.float_data)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
Datum::_internal_float_data() const {
  return float_data_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
Datum::float_data() const {
  // @@protoc_insertion_point(field_list:trtcaffe.Datum.float_data)
  return _internal_float_data();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
Datum::_internal_mutable_float_data() {
  return &float_data_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
Datum::mutable_float_data() {
  // @@protoc_insertion_point(field_mutable_list:trtcaffe.Datum.float_data)
  return _internal_mutable_float_data();
}

// optional bool encoded = 7 [default = false];
inline bool Datum::_internal_has_encoded() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool Datum::has_encoded() const {
  return _internal_has_encoded();
}
inline void Datum::clear_encoded() {
  encoded_ = false;
  _has_bits_[0] &= ~0x00000020u;
}
inline bool Datum::_internal_encoded() const {
  return encoded_;
}
inline bool Datum::encoded() const {
  // @@protoc_insertion_point(field_get:trtcaffe.Datum.encoded)
  return _internal_encoded();
}
inline void Datum::_internal_set_encoded(bool value) {
  _has_bits_[0] |= 0x00000020u;
  encoded_ = value;
}
inline void Datum::set_encoded(bool value) {
  _internal_set_encoded(value);
  // @@protoc_insertion_point(field_set:trtcaffe.Datum.encoded)
}

// -------------------------------------------------------------------

// FillerParameter

// optional string type = 1 [default = "constant"];
inline bool FillerParameter::_internal_has_type() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool FillerParameter::has_type() const {
  return _internal_has_type();
}
inline void FillerParameter::clear_type() {
  type_.ClearToDefault(&::trtcaffe::FillerParameter::_i_give_permission_to_break_this_code_default_type_.get(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& FillerParameter::type() const {
  // @@protoc_insertion_point(field_get:trtcaffe.FillerParameter.type)
  return _internal_type();
}
inline void FillerParameter::set_type(const std::string& value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:trtcaffe.FillerParameter.type)
}
inline std::string* FillerParameter::mutable_type() {
  // @@protoc_insertion_point(field_mutable:trtcaffe.FillerParameter.type)
  return _internal_mutable_type();
}
inline const std::string& FillerParameter::_internal_type() const {
  return type_.Get();
}
inline void FillerParameter::_internal_set_type(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  type_.Set(&::trtcaffe::FillerParameter::_i_give_permission_to_break_this_code_default_type_.get(), value, GetArena());
}
inline void FillerParameter::set_type(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  type_.Set(
    &::trtcaffe::FillerParameter::_i_give_permission_to_break_this_code_default_type_.get(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:trtcaffe.FillerParameter.type)
}
inline void FillerParameter::set_type(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  type_.Set(&::trtcaffe::FillerParameter::_i_give_permission_to_break_this_code_default_type_.get(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:trtcaffe.FillerParameter.type)
}
inline void FillerParameter::set_type(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  type_.Set(&::trtcaffe::FillerParameter::_i_give_permission_to_break_this_code_default_type_.get(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:trtcaffe.FillerParameter.type)
}
inline std::string* FillerParameter::_internal_mutable_type() {
  _has_bits_[0] |= 0x00000001u;
  return type_.Mutable(&::trtcaffe::FillerParameter::_i_give_permission_to_break_this_code_default_type_.get(), GetArena());
}
inline std::string* FillerParameter::release_type() {
  // @@protoc_insertion_point(field_release:trtcaffe.FillerParameter.type)
  if (!_internal_has_type()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return type_.ReleaseNonDefault(&::trtcaffe::FillerParameter::_i_give_permission_to_break_this_code_default_type_.get(), GetArena());
}
inline void FillerParameter::set_allocated_type(std::string* type) {
  if (type != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  type_.SetAllocated(&::trtcaffe::FillerParameter::_i_give_permission_to_break_this_code_default_type_.get(), type,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:trtcaffe.FillerParameter.type)
}
inline std::string* FillerParameter::unsafe_arena_release_type() {
  // @@protoc_insertion_point(field_unsafe_arena_release:trtcaffe.FillerParameter.type)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000001u;
  return type_.UnsafeArenaRelease(&::trtcaffe::FillerParameter::_i_give_permission_to_break_this_code_default_type_.get(),
      GetArena());
}
inline void FillerParameter::unsafe_arena_set_allocated_type(
    std::string* type) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (type != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  type_.UnsafeArenaSetAllocated(&::trtcaffe::FillerParameter::_i_give_permission_to_break_this_code_default_type_.get(),
      type, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:trtcaffe.FillerParameter.type)
}

// optional float value = 2 [default = 0];
inline bool FillerParameter::_internal_has_value() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool FillerParameter::has_value() const {
  return _internal_has_value();
}
inline void FillerParameter::clear_value() {
  value_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline float FillerParameter::_internal_value() const {
  return value_;
}
inline float FillerParameter::value() const {
  // @@protoc_insertion_point(field_get:trtcaffe.FillerParameter.value)
  return _internal_value();
}
inline void FillerParameter::_internal_set_value(float value) {
  _has_bits_[0] |= 0x00000002u;
  value_ = value;
}
inline void FillerParameter::set_value(float value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:trtcaffe.FillerParameter.value)
}

// optional float min = 3 [default = 0];
inline bool FillerParameter::_internal_has_min() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool FillerParameter::has_min() const {
  return _internal_has_min();
}
inline void FillerParameter::clear_min() {
  min_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline float FillerParameter::_internal_min() const {
  return min_;
}
inline float FillerParameter::min() const {
  // @@protoc_insertion_point(field_get:trtcaffe.FillerParameter.min)
  return _internal_min();
}
inline void FillerParameter::_internal_set_min(float value) {
  _has_bits_[0] |= 0x00000004u;
  min_ = value;
}
inline void FillerParameter::set_min(float value) {
  _internal_set_min(value);
  // @@protoc_insertion_point(field_set:trtcaffe.FillerParameter.min)
}

// optional float max = 4 [default = 1];
inline bool FillerParameter::_internal_has_max() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool FillerParameter::has_max() const {
  return _internal_has_max();
}
inline void FillerParameter::clear_max() {
  max_ = 1;
  _has_bits_[0] &= ~0x00000040u;
}
inline float FillerParameter::_internal_max() const {
  return max_;
}
inline float FillerParameter::max() const {
  // @@protoc_insertion_point(field_get:trtcaffe.FillerParameter.max)
  return _internal_max();
}
inline void FillerParameter::_internal_set_max(float value) {
  _has_bits_[0] |= 0x00000040u;
  max_ = value;
}
inline void FillerParameter::set_max(float value) {
  _internal_set_max(value);
  // @@protoc_insertion_point(field_set:trtcaffe.FillerParameter.max)
}

// optional float mean = 5 [default = 0];
inline bool FillerParameter::_internal_has_mean() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool FillerParameter::has_mean() const {
  return _internal_has_mean();
}
inline void FillerParameter::clear_mean() {
  mean_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline float FillerParameter::_internal_mean() const {
  return mean_;
}
inline float FillerParameter::mean() const {
  // @@protoc_insertion_point(field_get:trtcaffe.FillerParameter.mean)
  return _internal_mean();
}
inline void FillerParameter::_internal_set_mean(float value) {
  _has_bits_[0] |= 0x00000008u;
  mean_ = value;
}
inline void FillerParameter::set_mean(float value) {
  _internal_set_mean(value);
  // @@protoc_insertion_point(field_set:trtcaffe.FillerParameter.mean)
}

// optional float std = 6 [default = 1];
inline bool FillerParameter::_internal_has_std() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool FillerParameter::has_std() const {
  return _internal_has_std();
}
inline void FillerParameter::clear_std() {
  std_ = 1;
  _has_bits_[0] &= ~0x00000080u;
}
inline float FillerParameter::_internal_std() const {
  return std_;
}
inline float FillerParameter::std() const {
  // @@protoc_insertion_point(field_get:trtcaffe.FillerParameter.std)
  return _internal_std();
}
inline void FillerParameter::_internal_set_std(float value) {
  _has_bits_[0] |= 0x00000080u;
  std_ = value;
}
inline void FillerParameter::set_std(float value) {
  _internal_set_std(value);
  // @@protoc_insertion_point(field_set:trtcaffe.FillerParameter.std)
}

// optional int32 sparse = 7 [default = -1];
inline bool FillerParameter::_internal_has_sparse() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool FillerParameter::has_sparse() const {
  return _internal_has_sparse();
}
inline void FillerParameter::clear_sparse() {
  sparse_ = -1;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 FillerParameter::_internal_sparse() const {
  return sparse_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 FillerParameter::sparse() const {
  // @@protoc_insertion_point(field_get:trtcaffe.FillerParameter.sparse)
  return _internal_sparse();
}
inline void FillerParameter::_internal_set_sparse(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000020u;
  sparse_ = value;
}
inline void FillerParameter::set_sparse(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_sparse(value);
  // @@protoc_insertion_point(field_set:trtcaffe.FillerParameter.sparse)
}

// optional .trtcaffe.FillerParameter.VarianceNorm variance_norm = 8 [default = FAN_IN];
inline bool FillerParameter::_internal_has_variance_norm() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool FillerParameter::has_variance_norm() const {
  return _internal_has_variance_norm();
}
inline void FillerParameter::clear_variance_norm() {
  variance_norm_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::trtcaffe::FillerParameter_VarianceNorm FillerParameter::_internal_variance_norm() const {
  return static_cast< ::trtcaffe::FillerParameter_VarianceNorm >(variance_norm_);
}
inline ::trtcaffe::FillerParameter_VarianceNorm FillerParameter::variance_norm() const {
  // @@protoc_insertion_point(field_get:trtcaffe.FillerParameter.variance_norm)
  return _internal_variance_norm();
}
inline void FillerParameter::_internal_set_variance_norm(::trtcaffe::FillerParameter_VarianceNorm value) {
  assert(::trtcaffe::FillerParameter_VarianceNorm_IsValid(value));
  _has_bits_[0] |= 0x00000010u;
  variance_norm_ = value;
}
inline void FillerParameter::set_variance_norm(::trtcaffe::FillerParameter_VarianceNorm value) {
  _internal_set_variance_norm(value);
  // @@protoc_insertion_point(field_set:trtcaffe.FillerParameter.variance_norm)
}

// -------------------------------------------------------------------

// NetParameter

// optional string name = 1;
inline bool NetParameter::_internal_has_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool NetParameter::has_name() const {
  return _internal_has_name();
}
inline void NetParameter::clear_name() {
  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& NetParameter::name() const {
  // @@protoc_insertion_point(field_get:trtcaffe.NetParameter.name)
  return _internal_name();
}
inline void NetParameter::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:trtcaffe.NetParameter.name)
}
inline std::string* NetParameter::mutable_name() {
  // @@protoc_insertion_point(field_mutable:trtcaffe.NetParameter.name)
  return _internal_mutable_name();
}
inline const std::string& NetParameter::_internal_name() const {
  return name_.Get();
}
inline void NetParameter::_internal_set_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void NetParameter::set_name(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:trtcaffe.NetParameter.name)
}
inline void NetParameter::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:trtcaffe.NetParameter.name)
}
inline void NetParameter::set_name(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:trtcaffe.NetParameter.name)
}
inline std::string* NetParameter::_internal_mutable_name() {
  _has_bits_[0] |= 0x00000001u;
  return name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* NetParameter::release_name() {
  // @@protoc_insertion_point(field_release:trtcaffe.NetParameter.name)
  if (!_internal_has_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void NetParameter::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:trtcaffe.NetParameter.name)
}
inline std::string* NetParameter::unsafe_arena_release_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:trtcaffe.NetParameter.name)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000001u;
  return name_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void NetParameter::unsafe_arena_set_allocated_name(
    std::string* name) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  name_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      name, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:trtcaffe.NetParameter.name)
}

// repeated string input = 3;
inline int NetParameter::_internal_input_size() const {
  return input_.size();
}
inline int NetParameter::input_size() const {
  return _internal_input_size();
}
inline void NetParameter::clear_input() {
  input_.Clear();
}
inline std::string* NetParameter::add_input() {
  // @@protoc_insertion_point(field_add_mutable:trtcaffe.NetParameter.input)
  return _internal_add_input();
}
inline const std::string& NetParameter::_internal_input(int index) const {
  return input_.Get(index);
}
inline const std::string& NetParameter::input(int index) const {
  // @@protoc_insertion_point(field_get:trtcaffe.NetParameter.input)
  return _internal_input(index);
}
inline std::string* NetParameter::mutable_input(int index) {
  // @@protoc_insertion_point(field_mutable:trtcaffe.NetParameter.input)
  return input_.Mutable(index);
}
inline void NetParameter::set_input(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:trtcaffe.NetParameter.input)
  input_.Mutable(index)->assign(value);
}
inline void NetParameter::set_input(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:trtcaffe.NetParameter.input)
  input_.Mutable(index)->assign(std::move(value));
}
inline void NetParameter::set_input(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  input_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:trtcaffe.NetParameter.input)
}
inline void NetParameter::set_input(int index, const char* value, size_t size) {
  input_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:trtcaffe.NetParameter.input)
}
inline std::string* NetParameter::_internal_add_input() {
  return input_.Add();
}
inline void NetParameter::add_input(const std::string& value) {
  input_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:trtcaffe.NetParameter.input)
}
inline void NetParameter::add_input(std::string&& value) {
  input_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:trtcaffe.NetParameter.input)
}
inline void NetParameter::add_input(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  input_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:trtcaffe.NetParameter.input)
}
inline void NetParameter::add_input(const char* value, size_t size) {
  input_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:trtcaffe.NetParameter.input)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
NetParameter::input() const {
  // @@protoc_insertion_point(field_list:trtcaffe.NetParameter.input)
  return input_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
NetParameter::mutable_input() {
  // @@protoc_insertion_point(field_mutable_list:trtcaffe.NetParameter.input)
  return &input_;
}

// repeated .trtcaffe.BlobShape input_shape = 8;
inline int NetParameter::_internal_input_shape_size() const {
  return input_shape_.size();
}
inline int NetParameter::input_shape_size() const {
  return _internal_input_shape_size();
}
inline void NetParameter::clear_input_shape() {
  input_shape_.Clear();
}
inline ::trtcaffe::BlobShape* NetParameter::mutable_input_shape(int index) {
  // @@protoc_insertion_point(field_mutable:trtcaffe.NetParameter.input_shape)
  return input_shape_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::trtcaffe::BlobShape >*
NetParameter::mutable_input_shape() {
  // @@protoc_insertion_point(field_mutable_list:trtcaffe.NetParameter.input_shape)
  return &input_shape_;
}
inline const ::trtcaffe::BlobShape& NetParameter::_internal_input_shape(int index) const {
  return input_shape_.Get(index);
}
inline const ::trtcaffe::BlobShape& NetParameter::input_shape(int index) const {
  // @@protoc_insertion_point(field_get:trtcaffe.NetParameter.input_shape)
  return _internal_input_shape(index);
}
inline ::trtcaffe::BlobShape* NetParameter::_internal_add_input_shape() {
  return input_shape_.Add();
}
inline ::trtcaffe::BlobShape* NetParameter::add_input_shape() {
  // @@protoc_insertion_point(field_add:trtcaffe.NetParameter.input_shape)
  return _internal_add_input_shape();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::trtcaffe::BlobShape >&
NetParameter::input_shape() const {
  // @@protoc_insertion_point(field_list:trtcaffe.NetParameter.input_shape)
  return input_shape_;
}

// repeated int32 input_dim = 4;
inline int NetParameter::_internal_input_dim_size() const {
  return input_dim_.size();
}
inline int NetParameter::input_dim_size() const {
  return _internal_input_dim_size();
}
inline void NetParameter::clear_input_dim() {
  input_dim_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 NetParameter::_internal_input_dim(int index) const {
  return input_dim_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int32 NetParameter::input_dim(int index) const {
  // @@protoc_insertion_point(field_get:trtcaffe.NetParameter.input_dim)
  return _internal_input_dim(index);
}
inline void NetParameter::set_input_dim(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  input_dim_.Set(index, value);
  // @@protoc_insertion_point(field_set:trtcaffe.NetParameter.input_dim)
}
inline void NetParameter::_internal_add_input_dim(::PROTOBUF_NAMESPACE_ID::int32 value) {
  input_dim_.Add(value);
}
inline void NetParameter::add_input_dim(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_add_input_dim(value);
  // @@protoc_insertion_point(field_add:trtcaffe.NetParameter.input_dim)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
NetParameter::_internal_input_dim() const {
  return input_dim_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
NetParameter::input_dim() const {
  // @@protoc_insertion_point(field_list:trtcaffe.NetParameter.input_dim)
  return _internal_input_dim();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
NetParameter::_internal_mutable_input_dim() {
  return &input_dim_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
NetParameter::mutable_input_dim() {
  // @@protoc_insertion_point(field_mutable_list:trtcaffe.NetParameter.input_dim)
  return _internal_mutable_input_dim();
}

// optional bool force_backward = 5 [default = false];
inline bool NetParameter::_internal_has_force_backward() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool NetParameter::has_force_backward() const {
  return _internal_has_force_backward();
}
inline void NetParameter::clear_force_backward() {
  force_backward_ = false;
  _has_bits_[0] &= ~0x00000008u;
}
inline bool NetParameter::_internal_force_backward() const {
  return force_backward_;
}
inline bool NetParameter::force_backward() const {
  // @@protoc_insertion_point(field_get:trtcaffe.NetParameter.force_backward)
  return _internal_force_backward();
}
inline void NetParameter::_internal_set_force_backward(bool value) {
  _has_bits_[0] |= 0x00000008u;
  force_backward_ = value;
}
inline void NetParameter::set_force_backward(bool value) {
  _internal_set_force_backward(value);
  // @@protoc_insertion_point(field_set:trtcaffe.NetParameter.force_backward)
}

// optional .trtcaffe.NetState state = 6;
inline bool NetParameter::_internal_has_state() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || state_ != nullptr);
  return value;
}
inline bool NetParameter::has_state() const {
  return _internal_has_state();
}
inline void NetParameter::clear_state() {
  if (state_ != nullptr) state_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::trtcaffe::NetState& NetParameter::_internal_state() const {
  const ::trtcaffe::NetState* p = state_;
  return p != nullptr ? *p : *reinterpret_cast<const ::trtcaffe::NetState*>(
      &::trtcaffe::_NetState_default_instance_);
}
inline const ::trtcaffe::NetState& NetParameter::state() const {
  // @@protoc_insertion_point(field_get:trtcaffe.NetParameter.state)
  return _internal_state();
}
inline void NetParameter::unsafe_arena_set_allocated_state(
    ::trtcaffe::NetState* state) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(state_);
  }
  state_ = state;
  if (state) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:trtcaffe.NetParameter.state)
}
inline ::trtcaffe::NetState* NetParameter::release_state() {
  auto temp = unsafe_arena_release_state();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::trtcaffe::NetState* NetParameter::unsafe_arena_release_state() {
  // @@protoc_insertion_point(field_release:trtcaffe.NetParameter.state)
  _has_bits_[0] &= ~0x00000004u;
  ::trtcaffe::NetState* temp = state_;
  state_ = nullptr;
  return temp;
}
inline ::trtcaffe::NetState* NetParameter::_internal_mutable_state() {
  _has_bits_[0] |= 0x00000004u;
  if (state_ == nullptr) {
    auto* p = CreateMaybeMessage<::trtcaffe::NetState>(GetArena());
    state_ = p;
  }
  return state_;
}
inline ::trtcaffe::NetState* NetParameter::mutable_state() {
  // @@protoc_insertion_point(field_mutable:trtcaffe.NetParameter.state)
  return _internal_mutable_state();
}
inline void NetParameter::set_allocated_state(::trtcaffe::NetState* state) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete state_;
  }
  if (state) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(state);
    if (message_arena != submessage_arena) {
      state = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, state, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  state_ = state;
  // @@protoc_insertion_point(field_set_allocated:trtcaffe.NetParameter.state)
}

// optional bool debug_info = 7 [default = false];
inline bool NetParameter::_internal_has_debug_info() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool NetParameter::has_debug_info() const {
  return _internal_has_debug_info();
}
inline void NetParameter::clear_debug_info() {
  debug_info_ = false;
  _has_bits_[0] &= ~0x00000010u;
}
inline bool NetParameter::_internal_debug_info() const {
  return debug_info_;
}
inline bool NetParameter::debug_info() const {
  // @@protoc_insertion_point(field_get:trtcaffe.NetParameter.debug_info)
  return _internal_debug_info();
}
inline void NetParameter::_internal_set_debug_info(bool value) {
  _has_bits_[0] |= 0x00000010u;
  debug_info_ = value;
}
inline void NetParameter::set_debug_info(bool value) {
  _internal_set_debug_info(value);
  // @@protoc_insertion_point(field_set:trtcaffe.NetParameter.debug_info)
}

// repeated .trtcaffe.LayerParameter layer = 100;
inline int NetParameter::_internal_layer_size() const {
  return layer_.size();
}
inline int NetParameter::layer_size() const {
  return _internal_layer_size();
}
inline void NetParameter::clear_layer() {
  layer_.Clear();
}
inline ::trtcaffe::LayerParameter* NetParameter::mutable_layer(int index) {
  // @@protoc_insertion_point(field_mutable:trtcaffe.NetParameter.layer)
  return layer_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::trtcaffe::LayerParameter >*
NetParameter::mutable_layer() {
  // @@protoc_insertion_point(field_mutable_list:trtcaffe.NetParameter.layer)
  return &layer_;
}
inline const ::trtcaffe::LayerParameter& NetParameter::_internal_layer(int index) const {
  return layer_.Get(index);
}
inline const ::trtcaffe::LayerParameter& NetParameter::layer(int index) const {
  // @@protoc_insertion_point(field_get:trtcaffe.NetParameter.layer)
  return _internal_layer(index);
}
inline ::trtcaffe::LayerParameter* NetParameter::_internal_add_layer() {
  return layer_.Add();
}
inline ::trtcaffe::LayerParameter* NetParameter::add_layer() {
  // @@protoc_insertion_point(field_add:trtcaffe.NetParameter.layer)
  return _internal_add_layer();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::trtcaffe::LayerParameter >&
NetParameter::layer() const {
  // @@protoc_insertion_point(field_list:trtcaffe.NetParameter.layer)
  return layer_;
}

// repeated .trtcaffe.V1LayerParameter layers = 2;
inline int NetParameter::_internal_layers_size() const {
  return layers_.size();
}
inline int NetParameter::layers_size() const {
  return _internal_layers_size();
}
inline void NetParameter::clear_layers() {
  layers_.Clear();
}
inline ::trtcaffe::V1LayerParameter* NetParameter::mutable_layers(int index) {
  // @@protoc_insertion_point(field_mutable:trtcaffe.NetParameter.layers)
  return layers_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::trtcaffe::V1LayerParameter >*
NetParameter::mutable_layers() {
  // @@protoc_insertion_point(field_mutable_list:trtcaffe.NetParameter.layers)
  return &layers_;
}
inline const ::trtcaffe::V1LayerParameter& NetParameter::_internal_layers(int index) const {
  return layers_.Get(index);
}
inline const ::trtcaffe::V1LayerParameter& NetParameter::layers(int index) const {
  // @@protoc_insertion_point(field_get:trtcaffe.NetParameter.layers)
  return _internal_layers(index);
}
inline ::trtcaffe::V1LayerParameter* NetParameter::_internal_add_layers() {
  return layers_.Add();
}
inline ::trtcaffe::V1LayerParameter* NetParameter::add_layers() {
  // @@protoc_insertion_point(field_add:trtcaffe.NetParameter.layers)
  return _internal_add_layers();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::trtcaffe::V1LayerParameter >&
NetParameter::layers() const {
  // @@protoc_insertion_point(field_list:trtcaffe.NetParameter.layers)
  return layers_;
}

// optional .trtcaffe.Type default_forward_type = 11 [default = FLOAT];
inline bool NetParameter::_internal_has_default_forward_type() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool NetParameter::has_default_forward_type() const {
  return _internal_has_default_forward_type();
}
inline void NetParameter::clear_default_forward_type() {
  default_forward_type_ = 1;
  _has_bits_[0] &= ~0x00000040u;
}
inline ::trtcaffe::Type NetParameter::_internal_default_forward_type() const {
  return static_cast< ::trtcaffe::Type >(default_forward_type_);
}
inline ::trtcaffe::Type NetParameter::default_forward_type() const {
  // @@protoc_insertion_point(field_get:trtcaffe.NetParameter.default_forward_type)
  return _internal_default_forward_type();
}
inline void NetParameter::_internal_set_default_forward_type(::trtcaffe::Type value) {
  assert(::trtcaffe::Type_IsValid(value));
  _has_bits_[0] |= 0x00000040u;
  default_forward_type_ = value;
}
inline void NetParameter::set_default_forward_type(::trtcaffe::Type value) {
  _internal_set_default_forward_type(value);
  // @@protoc_insertion_point(field_set:trtcaffe.NetParameter.default_forward_type)
}

// optional .trtcaffe.Type default_backward_type = 12 [default = FLOAT];
inline bool NetParameter::_internal_has_default_backward_type() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool NetParameter::has_default_backward_type() const {
  return _internal_has_default_backward_type();
}
inline void NetParameter::clear_default_backward_type() {
  default_backward_type_ = 1;
  _has_bits_[0] &= ~0x00000080u;
}
inline ::trtcaffe::Type NetParameter::_internal_default_backward_type() const {
  return static_cast< ::trtcaffe::Type >(default_backward_type_);
}
inline ::trtcaffe::Type NetParameter::default_backward_type() const {
  // @@protoc_insertion_point(field_get:trtcaffe.NetParameter.default_backward_type)
  return _internal_default_backward_type();
}
inline void NetParameter::_internal_set_default_backward_type(::trtcaffe::Type value) {
  assert(::trtcaffe::Type_IsValid(value));
  _has_bits_[0] |= 0x00000080u;
  default_backward_type_ = value;
}
inline void NetParameter::set_default_backward_type(::trtcaffe::Type value) {
  _internal_set_default_backward_type(value);
  // @@protoc_insertion_point(field_set:trtcaffe.NetParameter.default_backward_type)
}

// optional .trtcaffe.Type default_forward_math = 13 [default = FLOAT];
inline bool NetParameter::_internal_has_default_forward_math() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool NetParameter::has_default_forward_math() const {
  return _internal_has_default_forward_math();
}
inline void NetParameter::clear_default_forward_math() {
  default_forward_math_ = 1;
  _has_bits_[0] &= ~0x00000100u;
}
inline ::trtcaffe::Type NetParameter::_internal_default_forward_math() const {
  return static_cast< ::trtcaffe::Type >(default_forward_math_);
}
inline ::trtcaffe::Type NetParameter::default_forward_math() const {
  // @@protoc_insertion_point(field_get:trtcaffe.NetParameter.default_forward_math)
  return _internal_default_forward_math();
}
inline void NetParameter::_internal_set_default_forward_math(::trtcaffe::Type value) {
  assert(::trtcaffe::Type_IsValid(value));
  _has_bits_[0] |= 0x00000100u;
  default_forward_math_ = value;
}
inline void NetParameter::set_default_forward_math(::trtcaffe::Type value) {
  _internal_set_default_forward_math(value);
  // @@protoc_insertion_point(field_set:trtcaffe.NetParameter.default_forward_math)
}

// optional .trtcaffe.Type default_backward_math = 14 [default = FLOAT];
inline bool NetParameter::_internal_has_default_backward_math() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool NetParameter::has_default_backward_math() const {
  return _internal_has_default_backward_math();
}
inline void NetParameter::clear_default_backward_math() {
  default_backward_math_ = 1;
  _has_bits_[0] &= ~0x00000200u;
}
inline ::trtcaffe::Type NetParameter::_internal_default_backward_math() const {
  return static_cast< ::trtcaffe::Type >(default_backward_math_);
}
inline ::trtcaffe::Type NetParameter::default_backward_math() const {
  // @@protoc_insertion_point(field_get:trtcaffe.NetParameter.default_backward_math)
  return _internal_default_backward_math();
}
inline void NetParameter::_internal_set_default_backward_math(::trtcaffe::Type value) {
  assert(::trtcaffe::Type_IsValid(value));
  _has_bits_[0] |= 0x00000200u;
  default_backward_math_ = value;
}
inline void NetParameter::set_default_backward_math(::trtcaffe::Type value) {
  _internal_set_default_backward_math(value);
  // @@protoc_insertion_point(field_set:trtcaffe.NetParameter.default_backward_math)
}

// optional float global_grad_scale = 15 [default = 1];
inline bool NetParameter::_internal_has_global_grad_scale() const {
  bool value = (_has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool NetParameter::has_global_grad_scale() const {
  return _internal_has_global_grad_scale();
}
inline void NetParameter::clear_global_grad_scale() {
  global_grad_scale_ = 1;
  _has_bits_[0] &= ~0x00000400u;
}
inline float NetParameter::_internal_global_grad_scale() const {
  return global_grad_scale_;
}
inline float NetParameter::global_grad_scale() const {
  // @@protoc_insertion_point(field_get:trtcaffe.NetParameter.global_grad_scale)
  return _internal_global_grad_scale();
}
inline void NetParameter::_internal_set_global_grad_scale(float value) {
  _has_bits_[0] |= 0x00000400u;
  global_grad_scale_ = value;
}
inline void NetParameter::set_global_grad_scale(float value) {
  _internal_set_global_grad_scale(value);
  // @@protoc_insertion_point(field_set:trtcaffe.NetParameter.global_grad_scale)
}

// optional string default_conv_algos_override = 17 [default = "-1,-1,-1"];
inline bool NetParameter::_internal_has_default_conv_algos_override() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool NetParameter::has_default_conv_algos_override() const {
  return _internal_has_default_conv_algos_override();
}
inline void NetParameter::clear_default_conv_algos_override() {
  default_conv_algos_override_.ClearToDefault(&::trtcaffe::NetParameter::_i_give_permission_to_break_this_code_default_default_conv_algos_override_.get(), GetArena());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& NetParameter::default_conv_algos_override() const {
  // @@protoc_insertion_point(field_get:trtcaffe.NetParameter.default_conv_algos_override)
  return _internal_default_conv_algos_override();
}
inline void NetParameter::set_default_conv_algos_override(const std::string& value) {
  _internal_set_default_conv_algos_override(value);
  // @@protoc_insertion_point(field_set:trtcaffe.NetParameter.default_conv_algos_override)
}
inline std::string* NetParameter::mutable_default_conv_algos_override() {
  // @@protoc_insertion_point(field_mutable:trtcaffe.NetParameter.default_conv_algos_override)
  return _internal_mutable_default_conv_algos_override();
}
inline const std::string& NetParameter::_internal_default_conv_algos_override() const {
  return default_conv_algos_override_.Get();
}
inline void NetParameter::_internal_set_default_conv_algos_override(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  default_conv_algos_override_.Set(&::trtcaffe::NetParameter::_i_give_permission_to_break_this_code_default_default_conv_algos_override_.get(), value, GetArena());
}
inline void NetParameter::set_default_conv_algos_override(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  default_conv_algos_override_.Set(
    &::trtcaffe::NetParameter::_i_give_permission_to_break_this_code_default_default_conv_algos_override_.get(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:trtcaffe.NetParameter.default_conv_algos_override)
}
inline void NetParameter::set_default_conv_algos_override(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  default_conv_algos_override_.Set(&::trtcaffe::NetParameter::_i_give_permission_to_break_this_code_default_default_conv_algos_override_.get(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:trtcaffe.NetParameter.default_conv_algos_override)
}
inline void NetParameter::set_default_conv_algos_override(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  default_conv_algos_override_.Set(&::trtcaffe::NetParameter::_i_give_permission_to_break_this_code_default_default_conv_algos_override_.get(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:trtcaffe.NetParameter.default_conv_algos_override)
}
inline std::string* NetParameter::_internal_mutable_default_conv_algos_override() {
  _has_bits_[0] |= 0x00000002u;
  return default_conv_algos_override_.Mutable(&::trtcaffe::NetParameter::_i_give_permission_to_break_this_code_default_default_conv_algos_override_.get(), GetArena());
}
inline std::string* NetParameter::release_default_conv_algos_override() {
  // @@protoc_insertion_point(field_release:trtcaffe.NetParameter.default_conv_algos_override)
  if (!_internal_has_default_conv_algos_override()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return default_conv_algos_override_.ReleaseNonDefault(&::trtcaffe::NetParameter::_i_give_permission_to_break_this_code_default_default_conv_algos_override_.get(), GetArena());
}
inline void NetParameter::set_allocated_default_conv_algos_override(std::string* default_conv_algos_override) {
  if (default_conv_algos_override != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  default_conv_algos_override_.SetAllocated(&::trtcaffe::NetParameter::_i_give_permission_to_break_this_code_default_default_conv_algos_override_.get(), default_conv_algos_override,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:trtcaffe.NetParameter.default_conv_algos_override)
}
inline std::string* NetParameter::unsafe_arena_release_default_conv_algos_override() {
  // @@protoc_insertion_point(field_unsafe_arena_release:trtcaffe.NetParameter.default_conv_algos_override)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000002u;
  return default_conv_algos_override_.UnsafeArenaRelease(&::trtcaffe::NetParameter::_i_give_permission_to_break_this_code_default_default_conv_algos_override_.get(),
      GetArena());
}
inline void NetParameter::unsafe_arena_set_allocated_default_conv_algos_override(
    std::string* default_conv_algos_override) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (default_conv_algos_override != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  default_conv_algos_override_.UnsafeArenaSetAllocated(&::trtcaffe::NetParameter::_i_give_permission_to_break_this_code_default_default_conv_algos_override_.get(),
      default_conv_algos_override, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:trtcaffe.NetParameter.default_conv_algos_override)
}

// optional int32 reduce_buckets = 18 [default = 3];
inline bool NetParameter::_internal_has_reduce_buckets() const {
  bool value = (_has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool NetParameter::has_reduce_buckets() const {
  return _internal_has_reduce_buckets();
}
inline void NetParameter::clear_reduce_buckets() {
  reduce_buckets_ = 3;
  _has_bits_[0] &= ~0x00000800u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 NetParameter::_internal_reduce_buckets() const {
  return reduce_buckets_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 NetParameter::reduce_buckets() const {
  // @@protoc_insertion_point(field_get:trtcaffe.NetParameter.reduce_buckets)
  return _internal_reduce_buckets();
}
inline void NetParameter::_internal_set_reduce_buckets(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000800u;
  reduce_buckets_ = value;
}
inline void NetParameter::set_reduce_buckets(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_reduce_buckets(value);
  // @@protoc_insertion_point(field_set:trtcaffe.NetParameter.reduce_buckets)
}

// optional int32 default_cudnn_math_override = 19 [default = -1];
inline bool NetParameter::_internal_has_default_cudnn_math_override() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool NetParameter::has_default_cudnn_math_override() const {
  return _internal_has_default_cudnn_math_override();
}
inline void NetParameter::clear_default_cudnn_math_override() {
  default_cudnn_math_override_ = -1;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 NetParameter::_internal_default_cudnn_math_override() const {
  return default_cudnn_math_override_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 NetParameter::default_cudnn_math_override() const {
  // @@protoc_insertion_point(field_get:trtcaffe.NetParameter.default_cudnn_math_override)
  return _internal_default_cudnn_math_override();
}
inline void NetParameter::_internal_set_default_cudnn_math_override(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000020u;
  default_cudnn_math_override_ = value;
}
inline void NetParameter::set_default_cudnn_math_override(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_default_cudnn_math_override(value);
  // @@protoc_insertion_point(field_set:trtcaffe.NetParameter.default_cudnn_math_override)
}

// -------------------------------------------------------------------

// SolverParameter

// optional string net = 24;
inline bool SolverParameter::_internal_has_net() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool SolverParameter::has_net() const {
  return _internal_has_net();
}
inline void SolverParameter::clear_net() {
  net_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000008u;
}
inline const std::string& SolverParameter::net() const {
  // @@protoc_insertion_point(field_get:trtcaffe.SolverParameter.net)
  return _internal_net();
}
inline void SolverParameter::set_net(const std::string& value) {
  _internal_set_net(value);
  // @@protoc_insertion_point(field_set:trtcaffe.SolverParameter.net)
}
inline std::string* SolverParameter::mutable_net() {
  // @@protoc_insertion_point(field_mutable:trtcaffe.SolverParameter.net)
  return _internal_mutable_net();
}
inline const std::string& SolverParameter::_internal_net() const {
  return net_.Get();
}
inline void SolverParameter::_internal_set_net(const std::string& value) {
  _has_bits_[0] |= 0x00000008u;
  net_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void SolverParameter::set_net(std::string&& value) {
  _has_bits_[0] |= 0x00000008u;
  net_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:trtcaffe.SolverParameter.net)
}
inline void SolverParameter::set_net(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000008u;
  net_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:trtcaffe.SolverParameter.net)
}
inline void SolverParameter::set_net(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000008u;
  net_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:trtcaffe.SolverParameter.net)
}
inline std::string* SolverParameter::_internal_mutable_net() {
  _has_bits_[0] |= 0x00000008u;
  return net_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* SolverParameter::release_net() {
  // @@protoc_insertion_point(field_release:trtcaffe.SolverParameter.net)
  if (!_internal_has_net()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000008u;
  return net_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SolverParameter::set_allocated_net(std::string* net) {
  if (net != nullptr) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  net_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), net,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:trtcaffe.SolverParameter.net)
}
inline std::string* SolverParameter::unsafe_arena_release_net() {
  // @@protoc_insertion_point(field_unsafe_arena_release:trtcaffe.SolverParameter.net)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000008u;
  return net_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void SolverParameter::unsafe_arena_set_allocated_net(
    std::string* net) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (net != nullptr) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  net_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      net, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:trtcaffe.SolverParameter.net)
}

// optional .trtcaffe.NetParameter net_param = 25;
inline bool SolverParameter::_internal_has_net_param() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  PROTOBUF_ASSUME(!value || net_param_ != nullptr);
  return value;
}
inline bool SolverParameter::has_net_param() const {
  return _internal_has_net_param();
}
inline void SolverParameter::clear_net_param() {
  if (net_param_ != nullptr) net_param_->Clear();
  _has_bits_[0] &= ~0x00000100u;
}
inline const ::trtcaffe::NetParameter& SolverParameter::_internal_net_param() const {
  const ::trtcaffe::NetParameter* p = net_param_;
  return p != nullptr ? *p : *reinterpret_cast<const ::trtcaffe::NetParameter*>(
      &::trtcaffe::_NetParameter_default_instance_);
}
inline const ::trtcaffe::NetParameter& SolverParameter::net_param() const {
  // @@protoc_insertion_point(field_get:trtcaffe.SolverParameter.net_param)
  return _internal_net_param();
}
inline void SolverParameter::unsafe_arena_set_allocated_net_param(
    ::trtcaffe::NetParameter* net_param) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(net_param_);
  }
  net_param_ = net_param;
  if (net_param) {
    _has_bits_[0] |= 0x00000100u;
  } else {
    _has_bits_[0] &= ~0x00000100u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:trtcaffe.SolverParameter.net_param)
}
inline ::trtcaffe::NetParameter* SolverParameter::release_net_param() {
  auto temp = unsafe_arena_release_net_param();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::trtcaffe::NetParameter* SolverParameter::unsafe_arena_release_net_param() {
  // @@protoc_insertion_point(field_release:trtcaffe.SolverParameter.net_param)
  _has_bits_[0] &= ~0x00000100u;
  ::trtcaffe::NetParameter* temp = net_param_;
  net_param_ = nullptr;
  return temp;
}
inline ::trtcaffe::NetParameter* SolverParameter::_internal_mutable_net_param() {
  _has_bits_[0] |= 0x00000100u;
  if (net_param_ == nullptr) {
    auto* p = CreateMaybeMessage<::trtcaffe::NetParameter>(GetArena());
    net_param_ = p;
  }
  return net_param_;
}
inline ::trtcaffe::NetParameter* SolverParameter::mutable_net_param() {
  // @@protoc_insertion_point(field_mutable:trtcaffe.SolverParameter.net_param)
  return _internal_mutable_net_param();
}
inline void SolverParameter::set_allocated_net_param(::trtcaffe::NetParameter* net_param) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete net_param_;
  }
  if (net_param) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(net_param);
    if (message_arena != submessage_arena) {
      net_param = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, net_param, submessage_arena);
    }
    _has_bits_[0] |= 0x00000100u;
  } else {
    _has_bits_[0] &= ~0x00000100u;
  }
  net_param_ = net_param;
  // @@protoc_insertion_point(field_set_allocated:trtcaffe.SolverParameter.net_param)
}

// optional string train_net = 1;
inline bool SolverParameter::_internal_has_train_net() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool SolverParameter::has_train_net() const {
  return _internal_has_train_net();
}
inline void SolverParameter::clear_train_net() {
  train_net_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& SolverParameter::train_net() const {
  // @@protoc_insertion_point(field_get:trtcaffe.SolverParameter.train_net)
  return _internal_train_net();
}
inline void SolverParameter::set_train_net(const std::string& value) {
  _internal_set_train_net(value);
  // @@protoc_insertion_point(field_set:trtcaffe.SolverParameter.train_net)
}
inline std::string* SolverParameter::mutable_train_net() {
  // @@protoc_insertion_point(field_mutable:trtcaffe.SolverParameter.train_net)
  return _internal_mutable_train_net();
}
inline const std::string& SolverParameter::_internal_train_net() const {
  return train_net_.Get();
}
inline void SolverParameter::_internal_set_train_net(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  train_net_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void SolverParameter::set_train_net(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  train_net_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:trtcaffe.SolverParameter.train_net)
}
inline void SolverParameter::set_train_net(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  train_net_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:trtcaffe.SolverParameter.train_net)
}
inline void SolverParameter::set_train_net(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  train_net_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:trtcaffe.SolverParameter.train_net)
}
inline std::string* SolverParameter::_internal_mutable_train_net() {
  _has_bits_[0] |= 0x00000001u;
  return train_net_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* SolverParameter::release_train_net() {
  // @@protoc_insertion_point(field_release:trtcaffe.SolverParameter.train_net)
  if (!_internal_has_train_net()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return train_net_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SolverParameter::set_allocated_train_net(std::string* train_net) {
  if (train_net != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  train_net_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), train_net,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:trtcaffe.SolverParameter.train_net)
}
inline std::string* SolverParameter::unsafe_arena_release_train_net() {
  // @@protoc_insertion_point(field_unsafe_arena_release:trtcaffe.SolverParameter.train_net)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000001u;
  return train_net_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void SolverParameter::unsafe_arena_set_allocated_train_net(
    std::string* train_net) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (train_net != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  train_net_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      train_net, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:trtcaffe.SolverParameter.train_net)
}

// repeated string test_net = 2;
inline int SolverParameter::_internal_test_net_size() const {
  return test_net_.size();
}
inline int SolverParameter::test_net_size() const {
  return _internal_test_net_size();
}
inline void SolverParameter::clear_test_net() {
  test_net_.Clear();
}
inline std::string* SolverParameter::add_test_net() {
  // @@protoc_insertion_point(field_add_mutable:trtcaffe.SolverParameter.test_net)
  return _internal_add_test_net();
}
inline const std::string& SolverParameter::_internal_test_net(int index) const {
  return test_net_.Get(index);
}
inline const std::string& SolverParameter::test_net(int index) const {
  // @@protoc_insertion_point(field_get:trtcaffe.SolverParameter.test_net)
  return _internal_test_net(index);
}
inline std::string* SolverParameter::mutable_test_net(int index) {
  // @@protoc_insertion_point(field_mutable:trtcaffe.SolverParameter.test_net)
  return test_net_.Mutable(index);
}
inline void SolverParameter::set_test_net(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:trtcaffe.SolverParameter.test_net)
  test_net_.Mutable(index)->assign(value);
}
inline void SolverParameter::set_test_net(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:trtcaffe.SolverParameter.test_net)
  test_net_.Mutable(index)->assign(std::move(value));
}
inline void SolverParameter::set_test_net(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  test_net_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:trtcaffe.SolverParameter.test_net)
}
inline void SolverParameter::set_test_net(int index, const char* value, size_t size) {
  test_net_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:trtcaffe.SolverParameter.test_net)
}
inline std::string* SolverParameter::_internal_add_test_net() {
  return test_net_.Add();
}
inline void SolverParameter::add_test_net(const std::string& value) {
  test_net_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:trtcaffe.SolverParameter.test_net)
}
inline void SolverParameter::add_test_net(std::string&& value) {
  test_net_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:trtcaffe.SolverParameter.test_net)
}
inline void SolverParameter::add_test_net(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  test_net_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:trtcaffe.SolverParameter.test_net)
}
inline void SolverParameter::add_test_net(const char* value, size_t size) {
  test_net_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:trtcaffe.SolverParameter.test_net)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
SolverParameter::test_net() const {
  // @@protoc_insertion_point(field_list:trtcaffe.SolverParameter.test_net)
  return test_net_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
SolverParameter::mutable_test_net() {
  // @@protoc_insertion_point(field_mutable_list:trtcaffe.SolverParameter.test_net)
  return &test_net_;
}

// optional .trtcaffe.NetParameter train_net_param = 21;
inline bool SolverParameter::_internal_has_train_net_param() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  PROTOBUF_ASSUME(!value || train_net_param_ != nullptr);
  return value;
}
inline bool SolverParameter::has_train_net_param() const {
  return _internal_has_train_net_param();
}
inline void SolverParameter::clear_train_net_param() {
  if (train_net_param_ != nullptr) train_net_param_->Clear();
  _has_bits_[0] &= ~0x00000080u;
}
inline const ::trtcaffe::NetParameter& SolverParameter::_internal_train_net_param() const {
  const ::trtcaffe::NetParameter* p = train_net_param_;
  return p != nullptr ? *p : *reinterpret_cast<const ::trtcaffe::NetParameter*>(
      &::trtcaffe::_NetParameter_default_instance_);
}
inline const ::trtcaffe::NetParameter& SolverParameter::train_net_param() const {
  // @@protoc_insertion_point(field_get:trtcaffe.SolverParameter.train_net_param)
  return _internal_train_net_param();
}
inline void SolverParameter::unsafe_arena_set_allocated_train_net_param(
    ::trtcaffe::NetParameter* train_net_param) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(train_net_param_);
  }
  train_net_param_ = train_net_param;
  if (train_net_param) {
    _has_bits_[0] |= 0x00000080u;
  } else {
    _has_bits_[0] &= ~0x00000080u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:trtcaffe.SolverParameter.train_net_param)
}
inline ::trtcaffe::NetParameter* SolverParameter::release_train_net_param() {
  auto temp = unsafe_arena_release_train_net_param();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::trtcaffe::NetParameter* SolverParameter::unsafe_arena_release_train_net_param() {
  // @@protoc_insertion_point(field_release:trtcaffe.SolverParameter.train_net_param)
  _has_bits_[0] &= ~0x00000080u;
  ::trtcaffe::NetParameter* temp = train_net_param_;
  train_net_param_ = nullptr;
  return temp;
}
inline ::trtcaffe::NetParameter* SolverParameter::_internal_mutable_train_net_param() {
  _has_bits_[0] |= 0x00000080u;
  if (train_net_param_ == nullptr) {
    auto* p = CreateMaybeMessage<::trtcaffe::NetParameter>(GetArena());
    train_net_param_ = p;
  }
  return train_net_param_;
}
inline ::trtcaffe::NetParameter* SolverParameter::mutable_train_net_param() {
  // @@protoc_insertion_point(field_mutable:trtcaffe.SolverParameter.train_net_param)
  return _internal_mutable_train_net_param();
}
inline void SolverParameter::set_allocated_train_net_param(::trtcaffe::NetParameter* train_net_param) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete train_net_param_;
  }
  if (train_net_param) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(train_net_param);
    if (message_arena != submessage_arena) {
      train_net_param = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, train_net_param, submessage_arena);
    }
    _has_bits_[0] |= 0x00000080u;
  } else {
    _has_bits_[0] &= ~0x00000080u;
  }
  train_net_param_ = train_net_param;
  // @@protoc_insertion_point(field_set_allocated:trtcaffe.SolverParameter.train_net_param)
}

// repeated .trtcaffe.NetParameter test_net_param = 22;
inline int SolverParameter::_internal_test_net_param_size() const {
  return test_net_param_.size();
}
inline int SolverParameter::test_net_param_size() const {
  return _internal_test_net_param_size();
}
inline void SolverParameter::clear_test_net_param() {
  test_net_param_.Clear();
}
inline ::trtcaffe::NetParameter* SolverParameter::mutable_test_net_param(int index) {
  // @@protoc_insertion_point(field_mutable:trtcaffe.SolverParameter.test_net_param)
  return test_net_param_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::trtcaffe::NetParameter >*
SolverParameter::mutable_test_net_param() {
  // @@protoc_insertion_point(field_mutable_list:trtcaffe.SolverParameter.test_net_param)
  return &test_net_param_;
}
inline const ::trtcaffe::NetParameter& SolverParameter::_internal_test_net_param(int index) const {
  return test_net_param_.Get(index);
}
inline const ::trtcaffe::NetParameter& SolverParameter::test_net_param(int index) const {
  // @@protoc_insertion_point(field_get:trtcaffe.SolverParameter.test_net_param)
  return _internal_test_net_param(index);
}
inline ::trtcaffe::NetParameter* SolverParameter::_internal_add_test_net_param() {
  return test_net_param_.Add();
}
inline ::trtcaffe::NetParameter* SolverParameter::add_test_net_param() {
  // @@protoc_insertion_point(field_add:trtcaffe.SolverParameter.test_net_param)
  return _internal_add_test_net_param();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::trtcaffe::NetParameter >&
SolverParameter::test_net_param() const {
  // @@protoc_insertion_point(field_list:trtcaffe.SolverParameter.test_net_param)
  return test_net_param_;
}

// optional .trtcaffe.NetState train_state = 26;
inline bool SolverParameter::_internal_has_train_state() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  PROTOBUF_ASSUME(!value || train_state_ != nullptr);
  return value;
}
inline bool SolverParameter::has_train_state() const {
  return _internal_has_train_state();
}
inline void SolverParameter::clear_train_state() {
  if (train_state_ != nullptr) train_state_->Clear();
  _has_bits_[0] &= ~0x00000200u;
}
inline const ::trtcaffe::NetState& SolverParameter::_internal_train_state() const {
  const ::trtcaffe::NetState* p = train_state_;
  return p != nullptr ? *p : *reinterpret_cast<const ::trtcaffe::NetState*>(
      &::trtcaffe::_NetState_default_instance_);
}
inline const ::trtcaffe::NetState& SolverParameter::train_state() const {
  // @@protoc_insertion_point(field_get:trtcaffe.SolverParameter.train_state)
  return _internal_train_state();
}
inline void SolverParameter::unsafe_arena_set_allocated_train_state(
    ::trtcaffe::NetState* train_state) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(train_state_);
  }
  train_state_ = train_state;
  if (train_state) {
    _has_bits_[0] |= 0x00000200u;
  } else {
    _has_bits_[0] &= ~0x00000200u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:trtcaffe.SolverParameter.train_state)
}
inline ::trtcaffe::NetState* SolverParameter::release_train_state() {
  auto temp = unsafe_arena_release_train_state();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::trtcaffe::NetState* SolverParameter::unsafe_arena_release_train_state() {
  // @@protoc_insertion_point(field_release:trtcaffe.SolverParameter.train_state)
  _has_bits_[0] &= ~0x00000200u;
  ::trtcaffe::NetState* temp = train_state_;
  train_state_ = nullptr;
  return temp;
}
inline ::trtcaffe::NetState* SolverParameter::_internal_mutable_train_state() {
  _has_bits_[0] |= 0x00000200u;
  if (train_state_ == nullptr) {
    auto* p = CreateMaybeMessage<::trtcaffe::NetState>(GetArena());
    train_state_ = p;
  }
  return train_state_;
}
inline ::trtcaffe::NetState* SolverParameter::mutable_train_state() {
  // @@protoc_insertion_point(field_mutable:trtcaffe.SolverParameter.train_state)
  return _internal_mutable_train_state();
}
inline void SolverParameter::set_allocated_train_state(::trtcaffe::NetState* train_state) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete train_state_;
  }
  if (train_state) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(train_state);
    if (message_arena != submessage_arena) {
      train_state = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, train_state, submessage_arena);
    }
    _has_bits_[0] |= 0x00000200u;
  } else {
    _has_bits_[0] &= ~0x00000200u;
  }
  train_state_ = train_state;
  // @@protoc_insertion_point(field_set_allocated:trtcaffe.SolverParameter.train_state)
}

// repeated .trtcaffe.NetState test_state = 27;
inline int SolverParameter::_internal_test_state_size() const {
  return test_state_.size();
}
inline int SolverParameter::test_state_size() const {
  return _internal_test_state_size();
}
inline void SolverParameter::clear_test_state() {
  test_state_.Clear();
}
inline ::trtcaffe::NetState* SolverParameter::mutable_test_state(int index) {
  // @@protoc_insertion_point(field_mutable:trtcaffe.SolverParameter.test_state)
  return test_state_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::trtcaffe::NetState >*
SolverParameter::mutable_test_state() {
  // @@protoc_insertion_point(field_mutable_list:trtcaffe.SolverParameter.test_state)
  return &test_state_;
}
inline const ::trtcaffe::NetState& SolverParameter::_internal_test_state(int index) const {
  return test_state_.Get(index);
}
inline const ::trtcaffe::NetState& SolverParameter::test_state(int index) const {
  // @@protoc_insertion_point(field_get:trtcaffe.SolverParameter.test_state)
  return _internal_test_state(index);
}
inline ::trtcaffe::NetState* SolverParameter::_internal_add_test_state() {
  return test_state_.Add();
}
inline ::trtcaffe::NetState* SolverParameter::add_test_state() {
  // @@protoc_insertion_point(field_add:trtcaffe.SolverParameter.test_state)
  return _internal_add_test_state();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::trtcaffe::NetState >&
SolverParameter::test_state() const {
  // @@protoc_insertion_point(field_list:trtcaffe.SolverParameter.test_state)
  return test_state_;
}

// repeated int32 test_iter = 3;
inline int SolverParameter::_internal_test_iter_size() const {
  return test_iter_.size();
}
inline int SolverParameter::test_iter_size() const {
  return _internal_test_iter_size();
}
inline void SolverParameter::clear_test_iter() {
  test_iter_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SolverParameter::_internal_test_iter(int index) const {
  return test_iter_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SolverParameter::test_iter(int index) const {
  // @@protoc_insertion_point(field_get:trtcaffe.SolverParameter.test_iter)
  return _internal_test_iter(index);
}
inline void SolverParameter::set_test_iter(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  test_iter_.Set(index, value);
  // @@protoc_insertion_point(field_set:trtcaffe.SolverParameter.test_iter)
}
inline void SolverParameter::_internal_add_test_iter(::PROTOBUF_NAMESPACE_ID::int32 value) {
  test_iter_.Add(value);
}
inline void SolverParameter::add_test_iter(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_add_test_iter(value);
  // @@protoc_insertion_point(field_add:trtcaffe.SolverParameter.test_iter)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
SolverParameter::_internal_test_iter() const {
  return test_iter_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
SolverParameter::test_iter() const {
  // @@protoc_insertion_point(field_list:trtcaffe.SolverParameter.test_iter)
  return _internal_test_iter();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
SolverParameter::_internal_mutable_test_iter() {
  return &test_iter_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
SolverParameter::mutable_test_iter() {
  // @@protoc_insertion_point(field_mutable_list:trtcaffe.SolverParameter.test_iter)
  return _internal_mutable_test_iter();
}

// optional int32 test_interval = 4 [default = 0];
inline bool SolverParameter::_internal_has_test_interval() const {
  bool value = (_has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool SolverParameter::has_test_interval() const {
  return _internal_has_test_interval();
}
inline void SolverParameter::clear_test_interval() {
  test_interval_ = 0;
  _has_bits_[0] &= ~0x00000400u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SolverParameter::_internal_test_interval() const {
  return test_interval_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SolverParameter::test_interval() const {
  // @@protoc_insertion_point(field_get:trtcaffe.SolverParameter.test_interval)
  return _internal_test_interval();
}
inline void SolverParameter::_internal_set_test_interval(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000400u;
  test_interval_ = value;
}
inline void SolverParameter::set_test_interval(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_test_interval(value);
  // @@protoc_insertion_point(field_set:trtcaffe.SolverParameter.test_interval)
}

// optional bool test_compute_loss = 19 [default = false];
inline bool SolverParameter::_internal_has_test_compute_loss() const {
  bool value = (_has_bits_[0] & 0x00200000u) != 0;
  return value;
}
inline bool SolverParameter::has_test_compute_loss() const {
  return _internal_has_test_compute_loss();
}
inline void SolverParameter::clear_test_compute_loss() {
  test_compute_loss_ = false;
  _has_bits_[0] &= ~0x00200000u;
}
inline bool SolverParameter::_internal_test_compute_loss() const {
  return test_compute_loss_;
}
inline bool SolverParameter::test_compute_loss() const {
  // @@protoc_insertion_point(field_get:trtcaffe.SolverParameter.test_compute_loss)
  return _internal_test_compute_loss();
}
inline void SolverParameter::_internal_set_test_compute_loss(bool value) {
  _has_bits_[0] |= 0x00200000u;
  test_compute_loss_ = value;
}
inline void SolverParameter::set_test_compute_loss(bool value) {
  _internal_set_test_compute_loss(value);
  // @@protoc_insertion_point(field_set:trtcaffe.SolverParameter.test_compute_loss)
}

// optional bool test_initialization = 32 [default = false];
inline bool SolverParameter::_internal_has_test_initialization() const {
  bool value = (_has_bits_[0] & 0x00400000u) != 0;
  return value;
}
inline bool SolverParameter::has_test_initialization() const {
  return _internal_has_test_initialization();
}
inline void SolverParameter::clear_test_initialization() {
  test_initialization_ = false;
  _has_bits_[0] &= ~0x00400000u;
}
inline bool SolverParameter::_internal_test_initialization() const {
  return test_initialization_;
}
inline bool SolverParameter::test_initialization() const {
  // @@protoc_insertion_point(field_get:trtcaffe.SolverParameter.test_initialization)
  return _internal_test_initialization();
}
inline void SolverParameter::_internal_set_test_initialization(bool value) {
  _has_bits_[0] |= 0x00400000u;
  test_initialization_ = value;
}
inline void SolverParameter::set_test_initialization(bool value) {
  _internal_set_test_initialization(value);
  // @@protoc_insertion_point(field_set:trtcaffe.SolverParameter.test_initialization)
}

// optional int32 rampup_interval = 41 [default = 0];
inline bool SolverParameter::_internal_has_rampup_interval() const {
  bool value = (_has_bits_[0] & 0x10000000u) != 0;
  return value;
}
inline bool SolverParameter::has_rampup_interval() const {
  return _internal_has_rampup_interval();
}
inline void SolverParameter::clear_rampup_interval() {
  rampup_interval_ = 0;
  _has_bits_[0] &= ~0x10000000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SolverParameter::_internal_rampup_interval() const {
  return rampup_interval_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SolverParameter::rampup_interval() const {
  // @@protoc_insertion_point(field_get:trtcaffe.SolverParameter.rampup_interval)
  return _internal_rampup_interval();
}
inline void SolverParameter::_internal_set_rampup_interval(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x10000000u;
  rampup_interval_ = value;
}
inline void SolverParameter::set_rampup_interval(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_rampup_interval(value);
  // @@protoc_insertion_point(field_set:trtcaffe.SolverParameter.rampup_interval)
}

// optional float rampup_lr = 42 [default = 0];
inline bool SolverParameter::_internal_has_rampup_lr() const {
  bool value = (_has_bits_[0] & 0x20000000u) != 0;
  return value;
}
inline bool SolverParameter::has_rampup_lr() const {
  return _internal_has_rampup_lr();
}
inline void SolverParameter::clear_rampup_lr() {
  rampup_lr_ = 0;
  _has_bits_[0] &= ~0x20000000u;
}
inline float SolverParameter::_internal_rampup_lr() const {
  return rampup_lr_;
}
inline float SolverParameter::rampup_lr() const {
  // @@protoc_insertion_point(field_get:trtcaffe.SolverParameter.rampup_lr)
  return _internal_rampup_lr();
}
inline void SolverParameter::_internal_set_rampup_lr(float value) {
  _has_bits_[0] |= 0x20000000u;
  rampup_lr_ = value;
}
inline void SolverParameter::set_rampup_lr(float value) {
  _internal_set_rampup_lr(value);
  // @@protoc_insertion_point(field_set:trtcaffe.SolverParameter.rampup_lr)
}

// optional float min_lr = 43 [default = 0];
inline bool SolverParameter::_internal_has_min_lr() const {
  bool value = (_has_bits_[0] & 0x40000000u) != 0;
  return value;
}
inline bool SolverParameter::has_min_lr() const {
  return _internal_has_min_lr();
}
inline void SolverParameter::clear_min_lr() {
  min_lr_ = 0;
  _has_bits_[0] &= ~0x40000000u;
}
inline float SolverParameter::_internal_min_lr() const {
  return min_lr_;
}
inline float SolverParameter::min_lr() const {
  // @@protoc_insertion_point(field_get:trtcaffe.SolverParameter.min_lr)
  return _internal_min_lr();
}
inline void SolverParameter::_internal_set_min_lr(float value) {
  _has_bits_[0] |= 0x40000000u;
  min_lr_ = value;
}
inline void SolverParameter::set_min_lr(float value) {
  _internal_set_min_lr(value);
  // @@protoc_insertion_point(field_set:trtcaffe.SolverParameter.min_lr)
}

// optional float base_lr = 5;
inline bool SolverParameter::_internal_has_base_lr() const {
  bool value = (_has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool SolverParameter::has_base_lr() const {
  return _internal_has_base_lr();
}
inline void SolverParameter::clear_base_lr() {
  base_lr_ = 0;
  _has_bits_[0] &= ~0x00000800u;
}
inline float SolverParameter::_internal_base_lr() const {
  return base_lr_;
}
inline float SolverParameter::base_lr() const {
  // @@protoc_insertion_point(field_get:trtcaffe.SolverParameter.base_lr)
  return _internal_base_lr();
}
inline void SolverParameter::_internal_set_base_lr(float value) {
  _has_bits_[0] |= 0x00000800u;
  base_lr_ = value;
}
inline void SolverParameter::set_base_lr(float value) {
  _internal_set_base_lr(value);
  // @@protoc_insertion_point(field_set:trtcaffe.SolverParameter.base_lr)
}

// optional int32 display = 6;
inline bool SolverParameter::_internal_has_display() const {
  bool value = (_has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline bool SolverParameter::has_display() const {
  return _internal_has_display();
}
inline void SolverParameter::clear_display() {
  display_ = 0;
  _has_bits_[0] &= ~0x00001000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SolverParameter::_internal_display() const {
  return display_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SolverParameter::display() const {
  // @@protoc_insertion_point(field_get:trtcaffe.SolverParameter.display)
  return _internal_display();
}
inline void SolverParameter::_internal_set_display(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00001000u;
  display_ = value;
}
inline void SolverParameter::set_display(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_display(value);
  // @@protoc_insertion_point(field_set:trtcaffe.SolverParameter.display)
}

// optional int32 average_loss = 33 [default = 1];
inline bool SolverParameter::_internal_has_average_loss() const {
  bool value = (_has_bits_[1] & 0x00000010u) != 0;
  return value;
}
inline bool SolverParameter::has_average_loss() const {
  return _internal_has_average_loss();
}
inline void SolverParameter::clear_average_loss() {
  average_loss_ = 1;
  _has_bits_[1] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SolverParameter::_internal_average_loss() const {
  return average_loss_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SolverParameter::average_loss() const {
  // @@protoc_insertion_point(field_get:trtcaffe.SolverParameter.average_loss)
  return _internal_average_loss();
}
inline void SolverParameter::_internal_set_average_loss(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[1] |= 0x00000010u;
  average_loss_ = value;
}
inline void SolverParameter::set_average_loss(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_average_loss(value);
  // @@protoc_insertion_point(field_set:trtcaffe.SolverParameter.average_loss)
}

// optional int32 max_iter = 7;
inline bool SolverParameter::_internal_has_max_iter() const {
  bool value = (_has_bits_[0] & 0x00002000u) != 0;
  return value;
}
inline bool SolverParameter::has_max_iter() const {
  return _internal_has_max_iter();
}
inline void SolverParameter::clear_max_iter() {
  max_iter_ = 0;
  _has_bits_[0] &= ~0x00002000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SolverParameter::_internal_max_iter() const {
  return max_iter_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SolverParameter::max_iter() const {
  // @@protoc_insertion_point(field_get:trtcaffe.SolverParameter.max_iter)
  return _internal_max_iter();
}
inline void SolverParameter::_internal_set_max_iter(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00002000u;
  max_iter_ = value;
}
inline void SolverParameter::set_max_iter(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_max_iter(value);
  // @@protoc_insertion_point(field_set:trtcaffe.SolverParameter.max_iter)
}

// optional int32 iter_size = 36 [default = 1];
inline bool SolverParameter::_internal_has_iter_size() const {
  bool value = (_has_bits_[1] & 0x00000040u) != 0;
  return value;
}
inline bool SolverParameter::has_iter_size() const {
  return _internal_has_iter_size();
}
inline void SolverParameter::clear_iter_size() {
  iter_size_ = 1;
  _has_bits_[1] &= ~0x00000040u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SolverParameter::_internal_iter_size() const {
  return iter_size_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SolverParameter::iter_size() const {
  // @@protoc_insertion_point(field_get:trtcaffe.SolverParameter.iter_size)
  return _internal_iter_size();
}
inline void SolverParameter::_internal_set_iter_size(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[1] |= 0x00000040u;
  iter_size_ = value;
}
inline void SolverParameter::set_iter_size(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_iter_size(value);
  // @@protoc_insertion_point(field_set:trtcaffe.SolverParameter.iter_size)
}

// optional string lr_policy = 8;
inline bool SolverParameter::_internal_has_lr_policy() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool SolverParameter::has_lr_policy() const {
  return _internal_has_lr_policy();
}
inline void SolverParameter::clear_lr_policy() {
  lr_policy_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& SolverParameter::lr_policy() const {
  // @@protoc_insertion_point(field_get:trtcaffe.SolverParameter.lr_policy)
  return _internal_lr_policy();
}
inline void SolverParameter::set_lr_policy(const std::string& value) {
  _internal_set_lr_policy(value);
  // @@protoc_insertion_point(field_set:trtcaffe.SolverParameter.lr_policy)
}
inline std::string* SolverParameter::mutable_lr_policy() {
  // @@protoc_insertion_point(field_mutable:trtcaffe.SolverParameter.lr_policy)
  return _internal_mutable_lr_policy();
}
inline const std::string& SolverParameter::_internal_lr_policy() const {
  return lr_policy_.Get();
}
inline void SolverParameter::_internal_set_lr_policy(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  lr_policy_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void SolverParameter::set_lr_policy(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  lr_policy_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:trtcaffe.SolverParameter.lr_policy)
}
inline void SolverParameter::set_lr_policy(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  lr_policy_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:trtcaffe.SolverParameter.lr_policy)
}
inline void SolverParameter::set_lr_policy(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  lr_policy_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:trtcaffe.SolverParameter.lr_policy)
}
inline std::string* SolverParameter::_internal_mutable_lr_policy() {
  _has_bits_[0] |= 0x00000002u;
  return lr_policy_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* SolverParameter::release_lr_policy() {
  // @@protoc_insertion_point(field_release:trtcaffe.SolverParameter.lr_policy)
  if (!_internal_has_lr_policy()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return lr_policy_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SolverParameter::set_allocated_lr_policy(std::string* lr_policy) {
  if (lr_policy != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  lr_policy_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), lr_policy,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:trtcaffe.SolverParameter.lr_policy)
}
inline std::string* SolverParameter::unsafe_arena_release_lr_policy() {
  // @@protoc_insertion_point(field_unsafe_arena_release:trtcaffe.SolverParameter.lr_policy)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000002u;
  return lr_policy_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void SolverParameter::unsafe_arena_set_allocated_lr_policy(
    std::string* lr_policy) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (lr_policy != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  lr_policy_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      lr_policy, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:trtcaffe.SolverParameter.lr_policy)
}

// optional float gamma = 9;
inline bool SolverParameter::_internal_has_gamma() const {
  bool value = (_has_bits_[0] & 0x00004000u) != 0;
  return value;
}
inline bool SolverParameter::has_gamma() const {
  return _internal_has_gamma();
}
inline void SolverParameter::clear_gamma() {
  gamma_ = 0;
  _has_bits_[0] &= ~0x00004000u;
}
inline float SolverParameter::_internal_gamma() const {
  return gamma_;
}
inline float SolverParameter::gamma() const {
  // @@protoc_insertion_point(field_get:trtcaffe.SolverParameter.gamma)
  return _internal_gamma();
}
inline void SolverParameter::_internal_set_gamma(float value) {
  _has_bits_[0] |= 0x00004000u;
  gamma_ = value;
}
inline void SolverParameter::set_gamma(float value) {
  _internal_set_gamma(value);
  // @@protoc_insertion_point(field_set:trtcaffe.SolverParameter.gamma)
}

// optional float power = 10;
inline bool SolverParameter::_internal_has_power() const {
  bool value = (_has_bits_[0] & 0x00008000u) != 0;
  return value;
}
inline bool SolverParameter::has_power() const {
  return _internal_has_power();
}
inline void SolverParameter::clear_power() {
  power_ = 0;
  _has_bits_[0] &= ~0x00008000u;
}
inline float SolverParameter::_internal_power() const {
  return power_;
}
inline float SolverParameter::power() const {
  // @@protoc_insertion_point(field_get:trtcaffe.SolverParameter.power)
  return _internal_power();
}
inline void SolverParameter::_internal_set_power(float value) {
  _has_bits_[0] |= 0x00008000u;
  power_ = value;
}
inline void SolverParameter::set_power(float value) {
  _internal_set_power(value);
  // @@protoc_insertion_point(field_set:trtcaffe.SolverParameter.power)
}

// optional float momentum = 11;
inline bool SolverParameter::_internal_has_momentum() const {
  bool value = (_has_bits_[0] & 0x00010000u) != 0;
  return value;
}
inline bool SolverParameter::has_momentum() const {
  return _internal_has_momentum();
}
inline void SolverParameter::clear_momentum() {
  momentum_ = 0;
  _has_bits_[0] &= ~0x00010000u;
}
inline float SolverParameter::_internal_momentum() const {
  return momentum_;
}
inline float SolverParameter::momentum() const {
  // @@protoc_insertion_point(field_get:trtcaffe.SolverParameter.momentum)
  return _internal_momentum();
}
inline void SolverParameter::_internal_set_momentum(float value) {
  _has_bits_[0] |= 0x00010000u;
  momentum_ = value;
}
inline void SolverParameter::set_momentum(float value) {
  _internal_set_momentum(value);
  // @@protoc_insertion_point(field_set:trtcaffe.SolverParameter.momentum)
}

// optional string momentum_policy = 46 [default = "fixed"];
inline bool SolverParameter::_internal_has_momentum_policy() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool SolverParameter::has_momentum_policy() const {
  return _internal_has_momentum_policy();
}
inline void SolverParameter::clear_momentum_policy() {
  momentum_policy_.ClearToDefault(&::trtcaffe::SolverParameter::_i_give_permission_to_break_this_code_default_momentum_policy_.get(), GetArena());
  _has_bits_[0] &= ~0x00000040u;
}
inline const std::string& SolverParameter::momentum_policy() const {
  // @@protoc_insertion_point(field_get:trtcaffe.SolverParameter.momentum_policy)
  return _internal_momentum_policy();
}
inline void SolverParameter::set_momentum_policy(const std::string& value) {
  _internal_set_momentum_policy(value);
  // @@protoc_insertion_point(field_set:trtcaffe.SolverParameter.momentum_policy)
}
inline std::string* SolverParameter::mutable_momentum_policy() {
  // @@protoc_insertion_point(field_mutable:trtcaffe.SolverParameter.momentum_policy)
  return _internal_mutable_momentum_policy();
}
inline const std::string& SolverParameter::_internal_momentum_policy() const {
  return momentum_policy_.Get();
}
inline void SolverParameter::_internal_set_momentum_policy(const std::string& value) {
  _has_bits_[0] |= 0x00000040u;
  momentum_policy_.Set(&::trtcaffe::SolverParameter::_i_give_permission_to_break_this_code_default_momentum_policy_.get(), value, GetArena());
}
inline void SolverParameter::set_momentum_policy(std::string&& value) {
  _has_bits_[0] |= 0x00000040u;
  momentum_policy_.Set(
    &::trtcaffe::SolverParameter::_i_give_permission_to_break_this_code_default_momentum_policy_.get(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:trtcaffe.SolverParameter.momentum_policy)
}
inline void SolverParameter::set_momentum_policy(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000040u;
  momentum_policy_.Set(&::trtcaffe::SolverParameter::_i_give_permission_to_break_this_code_default_momentum_policy_.get(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:trtcaffe.SolverParameter.momentum_policy)
}
inline void SolverParameter::set_momentum_policy(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000040u;
  momentum_policy_.Set(&::trtcaffe::SolverParameter::_i_give_permission_to_break_this_code_default_momentum_policy_.get(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:trtcaffe.SolverParameter.momentum_policy)
}
inline std::string* SolverParameter::_internal_mutable_momentum_policy() {
  _has_bits_[0] |= 0x00000040u;
  return momentum_policy_.Mutable(&::trtcaffe::SolverParameter::_i_give_permission_to_break_this_code_default_momentum_policy_.get(), GetArena());
}
inline std::string* SolverParameter::release_momentum_policy() {
  // @@protoc_insertion_point(field_release:trtcaffe.SolverParameter.momentum_policy)
  if (!_internal_has_momentum_policy()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000040u;
  return momentum_policy_.ReleaseNonDefault(&::trtcaffe::SolverParameter::_i_give_permission_to_break_this_code_default_momentum_policy_.get(), GetArena());
}
inline void SolverParameter::set_allocated_momentum_policy(std::string* momentum_policy) {
  if (momentum_policy != nullptr) {
    _has_bits_[0] |= 0x00000040u;
  } else {
    _has_bits_[0] &= ~0x00000040u;
  }
  momentum_policy_.SetAllocated(&::trtcaffe::SolverParameter::_i_give_permission_to_break_this_code_default_momentum_policy_.get(), momentum_policy,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:trtcaffe.SolverParameter.momentum_policy)
}
inline std::string* SolverParameter::unsafe_arena_release_momentum_policy() {
  // @@protoc_insertion_point(field_unsafe_arena_release:trtcaffe.SolverParameter.momentum_policy)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000040u;
  return momentum_policy_.UnsafeArenaRelease(&::trtcaffe::SolverParameter::_i_give_permission_to_break_this_code_default_momentum_policy_.get(),
      GetArena());
}
inline void SolverParameter::unsafe_arena_set_allocated_momentum_policy(
    std::string* momentum_policy) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (momentum_policy != nullptr) {
    _has_bits_[0] |= 0x00000040u;
  } else {
    _has_bits_[0] &= ~0x00000040u;
  }
  momentum_policy_.UnsafeArenaSetAllocated(&::trtcaffe::SolverParameter::_i_give_permission_to_break_this_code_default_momentum_policy_.get(),
      momentum_policy, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:trtcaffe.SolverParameter.momentum_policy)
}

// optional float max_momentum = 47 [default = 0.99];
inline bool SolverParameter::_internal_has_max_momentum() const {
  bool value = (_has_bits_[1] & 0x00000800u) != 0;
  return value;
}
inline bool SolverParameter::has_max_momentum() const {
  return _internal_has_max_momentum();
}
inline void SolverParameter::clear_max_momentum() {
  max_momentum_ = 0.99f;
  _has_bits_[1] &= ~0x00000800u;
}
inline float SolverParameter::_internal_max_momentum() const {
  return max_momentum_;
}
inline float SolverParameter::max_momentum() const {
  // @@protoc_insertion_point(field_get:trtcaffe.SolverParameter.max_momentum)
  return _internal_max_momentum();
}
inline void SolverParameter::_internal_set_max_momentum(float value) {
  _has_bits_[1] |= 0x00000800u;
  max_momentum_ = value;
}
inline void SolverParameter::set_max_momentum(float value) {
  _internal_set_max_momentum(value);
  // @@protoc_insertion_point(field_set:trtcaffe.SolverParameter.max_momentum)
}

// optional float momentum_power = 48 [default = 1];
inline bool SolverParameter::_internal_has_momentum_power() const {
  bool value = (_has_bits_[1] & 0x00001000u) != 0;
  return value;
}
inline bool SolverParameter::has_momentum_power() const {
  return _internal_has_momentum_power();
}
inline void SolverParameter::clear_momentum_power() {
  momentum_power_ = 1;
  _has_bits_[1] &= ~0x00001000u;
}
inline float SolverParameter::_internal_momentum_power() const {
  return momentum_power_;
}
inline float SolverParameter::momentum_power() const {
  // @@protoc_insertion_point(field_get:trtcaffe.SolverParameter.momentum_power)
  return _internal_momentum_power();
}
inline void SolverParameter::_internal_set_momentum_power(float value) {
  _has_bits_[1] |= 0x00001000u;
  momentum_power_ = value;
}
inline void SolverParameter::set_momentum_power(float value) {
  _internal_set_momentum_power(value);
  // @@protoc_insertion_point(field_set:trtcaffe.SolverParameter.momentum_power)
}

// optional bool local_lr_auto = 49 [default = false];
inline bool SolverParameter::_internal_has_local_lr_auto() const {
  bool value = (_has_bits_[0] & 0x00800000u) != 0;
  return value;
}
inline bool SolverParameter::has_local_lr_auto() const {
  return _internal_has_local_lr_auto();
}
inline void SolverParameter::clear_local_lr_auto() {
  local_lr_auto_ = false;
  _has_bits_[0] &= ~0x00800000u;
}
inline bool SolverParameter::_internal_local_lr_auto() const {
  return local_lr_auto_;
}
inline bool SolverParameter::local_lr_auto() const {
  // @@protoc_insertion_point(field_get:trtcaffe.SolverParameter.local_lr_auto)
  return _internal_local_lr_auto();
}
inline void SolverParameter::_internal_set_local_lr_auto(bool value) {
  _has_bits_[0] |= 0x00800000u;
  local_lr_auto_ = value;
}
inline void SolverParameter::set_local_lr_auto(bool value) {
  _internal_set_local_lr_auto(value);
  // @@protoc_insertion_point(field_set:trtcaffe.SolverParameter.local_lr_auto)
}

// optional float local_gw_ratio = 50 [default = 0.001];
inline bool SolverParameter::_internal_has_local_gw_ratio() const {
  bool value = (_has_bits_[0] & 0x80000000u) != 0;
  return value;
}
inline bool SolverParameter::has_local_gw_ratio() const {
  return _internal_has_local_gw_ratio();
}
inline void SolverParameter::clear_local_gw_ratio() {
  local_gw_ratio_ = 0.001f;
  _has_bits_[0] &= ~0x80000000u;
}
inline float SolverParameter::_internal_local_gw_ratio() const {
  return local_gw_ratio_;
}
inline float SolverParameter::local_gw_ratio() const {
  // @@protoc_insertion_point(field_get:trtcaffe.SolverParameter.local_gw_ratio)
  return _internal_local_gw_ratio();
}
inline void SolverParameter::_internal_set_local_gw_ratio(float value) {
  _has_bits_[0] |= 0x80000000u;
  local_gw_ratio_ = value;
}
inline void SolverParameter::set_local_gw_ratio(float value) {
  _internal_set_local_gw_ratio(value);
  // @@protoc_insertion_point(field_set:trtcaffe.SolverParameter.local_gw_ratio)
}

// optional float weight_decay = 12;
inline bool SolverParameter::_internal_has_weight_decay() const {
  bool value = (_has_bits_[0] & 0x00020000u) != 0;
  return value;
}
inline bool SolverParameter::has_weight_decay() const {
  return _internal_has_weight_decay();
}
inline void SolverParameter::clear_weight_decay() {
  weight_decay_ = 0;
  _has_bits_[0] &= ~0x00020000u;
}
inline float SolverParameter::_internal_weight_decay() const {
  return weight_decay_;
}
inline float SolverParameter::weight_decay() const {
  // @@protoc_insertion_point(field_get:trtcaffe.SolverParameter.weight_decay)
  return _internal_weight_decay();
}
inline void SolverParameter::_internal_set_weight_decay(float value) {
  _has_bits_[0] |= 0x00020000u;
  weight_decay_ = value;
}
inline void SolverParameter::set_weight_decay(float value) {
  _internal_set_weight_decay(value);
  // @@protoc_insertion_point(field_set:trtcaffe.SolverParameter.weight_decay)
}

// optional string regularization_type = 29 [default = "L2"];
inline bool SolverParameter::_internal_has_regularization_type() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool SolverParameter::has_regularization_type() const {
  return _internal_has_regularization_type();
}
inline void SolverParameter::clear_regularization_type() {
  regularization_type_.ClearToDefault(&::trtcaffe::SolverParameter::_i_give_permission_to_break_this_code_default_regularization_type_.get(), GetArena());
  _has_bits_[0] &= ~0x00000010u;
}
inline const std::string& SolverParameter::regularization_type() const {
  // @@protoc_insertion_point(field_get:trtcaffe.SolverParameter.regularization_type)
  return _internal_regularization_type();
}
inline void SolverParameter::set_regularization_type(const std::string& value) {
  _internal_set_regularization_type(value);
  // @@protoc_insertion_point(field_set:trtcaffe.SolverParameter.regularization_type)
}
inline std::string* SolverParameter::mutable_regularization_type() {
  // @@protoc_insertion_point(field_mutable:trtcaffe.SolverParameter.regularization_type)
  return _internal_mutable_regularization_type();
}
inline const std::string& SolverParameter::_internal_regularization_type() const {
  return regularization_type_.Get();
}
inline void SolverParameter::_internal_set_regularization_type(const std::string& value) {
  _has_bits_[0] |= 0x00000010u;
  regularization_type_.Set(&::trtcaffe::SolverParameter::_i_give_permission_to_break_this_code_default_regularization_type_.get(), value, GetArena());
}
inline void SolverParameter::set_regularization_type(std::string&& value) {
  _has_bits_[0] |= 0x00000010u;
  regularization_type_.Set(
    &::trtcaffe::SolverParameter::_i_give_permission_to_break_this_code_default_regularization_type_.get(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:trtcaffe.SolverParameter.regularization_type)
}
inline void SolverParameter::set_regularization_type(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000010u;
  regularization_type_.Set(&::trtcaffe::SolverParameter::_i_give_permission_to_break_this_code_default_regularization_type_.get(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:trtcaffe.SolverParameter.regularization_type)
}
inline void SolverParameter::set_regularization_type(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000010u;
  regularization_type_.Set(&::trtcaffe::SolverParameter::_i_give_permission_to_break_this_code_default_regularization_type_.get(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:trtcaffe.SolverParameter.regularization_type)
}
inline std::string* SolverParameter::_internal_mutable_regularization_type() {
  _has_bits_[0] |= 0x00000010u;
  return regularization_type_.Mutable(&::trtcaffe::SolverParameter::_i_give_permission_to_break_this_code_default_regularization_type_.get(), GetArena());
}
inline std::string* SolverParameter::release_regularization_type() {
  // @@protoc_insertion_point(field_release:trtcaffe.SolverParameter.regularization_type)
  if (!_internal_has_regularization_type()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000010u;
  return regularization_type_.ReleaseNonDefault(&::trtcaffe::SolverParameter::_i_give_permission_to_break_this_code_default_regularization_type_.get(), GetArena());
}
inline void SolverParameter::set_allocated_regularization_type(std::string* regularization_type) {
  if (regularization_type != nullptr) {
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  regularization_type_.SetAllocated(&::trtcaffe::SolverParameter::_i_give_permission_to_break_this_code_default_regularization_type_.get(), regularization_type,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:trtcaffe.SolverParameter.regularization_type)
}
inline std::string* SolverParameter::unsafe_arena_release_regularization_type() {
  // @@protoc_insertion_point(field_unsafe_arena_release:trtcaffe.SolverParameter.regularization_type)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000010u;
  return regularization_type_.UnsafeArenaRelease(&::trtcaffe::SolverParameter::_i_give_permission_to_break_this_code_default_regularization_type_.get(),
      GetArena());
}
inline void SolverParameter::unsafe_arena_set_allocated_regularization_type(
    std::string* regularization_type) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (regularization_type != nullptr) {
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  regularization_type_.UnsafeArenaSetAllocated(&::trtcaffe::SolverParameter::_i_give_permission_to_break_this_code_default_regularization_type_.get(),
      regularization_type, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:trtcaffe.SolverParameter.regularization_type)
}

// optional int32 stepsize = 13;
inline bool SolverParameter::_internal_has_stepsize() const {
  bool value = (_has_bits_[0] & 0x00040000u) != 0;
  return value;
}
inline bool SolverParameter::has_stepsize() const {
  return _internal_has_stepsize();
}
inline void SolverParameter::clear_stepsize() {
  stepsize_ = 0;
  _has_bits_[0] &= ~0x00040000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SolverParameter::_internal_stepsize() const {
  return stepsize_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SolverParameter::stepsize() const {
  // @@protoc_insertion_point(field_get:trtcaffe.SolverParameter.stepsize)
  return _internal_stepsize();
}
inline void SolverParameter::_internal_set_stepsize(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00040000u;
  stepsize_ = value;
}
inline void SolverParameter::set_stepsize(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_stepsize(value);
  // @@protoc_insertion_point(field_set:trtcaffe.SolverParameter.stepsize)
}

// repeated int32 stepvalue = 34;
inline int SolverParameter::_internal_stepvalue_size() const {
  return stepvalue_.size();
}
inline int SolverParameter::stepvalue_size() const {
  return _internal_stepvalue_size();
}
inline void SolverParameter::clear_stepvalue() {
  stepvalue_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SolverParameter::_internal_stepvalue(int index) const {
  return stepvalue_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SolverParameter::stepvalue(int index) const {
  // @@protoc_insertion_point(field_get:trtcaffe.SolverParameter.stepvalue)
  return _internal_stepvalue(index);
}
inline void SolverParameter::set_stepvalue(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  stepvalue_.Set(index, value);
  // @@protoc_insertion_point(field_set:trtcaffe.SolverParameter.stepvalue)
}
inline void SolverParameter::_internal_add_stepvalue(::PROTOBUF_NAMESPACE_ID::int32 value) {
  stepvalue_.Add(value);
}
inline void SolverParameter::add_stepvalue(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_add_stepvalue(value);
  // @@protoc_insertion_point(field_add:trtcaffe.SolverParameter.stepvalue)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
SolverParameter::_internal_stepvalue() const {
  return stepvalue_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
SolverParameter::stepvalue() const {
  // @@protoc_insertion_point(field_list:trtcaffe.SolverParameter.stepvalue)
  return _internal_stepvalue();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
SolverParameter::_internal_mutable_stepvalue() {
  return &stepvalue_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
SolverParameter::mutable_stepvalue() {
  // @@protoc_insertion_point(field_mutable_list:trtcaffe.SolverParameter.stepvalue)
  return _internal_mutable_stepvalue();
}

// optional float clip_gradients = 35 [default = -1];
inline bool SolverParameter::_internal_has_clip_gradients() const {
  bool value = (_has_bits_[1] & 0x00000020u) != 0;
  return value;
}
inline bool SolverParameter::has_clip_gradients() const {
  return _internal_has_clip_gradients();
}
inline void SolverParameter::clear_clip_gradients() {
  clip_gradients_ = -1;
  _has_bits_[1] &= ~0x00000020u;
}
inline float SolverParameter::_internal_clip_gradients() const {
  return clip_gradients_;
}
inline float SolverParameter::clip_gradients() const {
  // @@protoc_insertion_point(field_get:trtcaffe.SolverParameter.clip_gradients)
  return _internal_clip_gradients();
}
inline void SolverParameter::_internal_set_clip_gradients(float value) {
  _has_bits_[1] |= 0x00000020u;
  clip_gradients_ = value;
}
inline void SolverParameter::set_clip_gradients(float value) {
  _internal_set_clip_gradients(value);
  // @@protoc_insertion_point(field_set:trtcaffe.SolverParameter.clip_gradients)
}

// optional int32 snapshot = 14 [default = 0];
inline bool SolverParameter::_internal_has_snapshot() const {
  bool value = (_has_bits_[0] & 0x00080000u) != 0;
  return value;
}
inline bool SolverParameter::has_snapshot() const {
  return _internal_has_snapshot();
}
inline void SolverParameter::clear_snapshot() {
  snapshot_ = 0;
  _has_bits_[0] &= ~0x00080000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SolverParameter::_internal_snapshot() const {
  return snapshot_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SolverParameter::snapshot() const {
  // @@protoc_insertion_point(field_get:trtcaffe.SolverParameter.snapshot)
  return _internal_snapshot();
}
inline void SolverParameter::_internal_set_snapshot(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00080000u;
  snapshot_ = value;
}
inline void SolverParameter::set_snapshot(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_snapshot(value);
  // @@protoc_insertion_point(field_set:trtcaffe.SolverParameter.snapshot)
}

// optional string snapshot_prefix = 15;
inline bool SolverParameter::_internal_has_snapshot_prefix() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool SolverParameter::has_snapshot_prefix() const {
  return _internal_has_snapshot_prefix();
}
inline void SolverParameter::clear_snapshot_prefix() {
  snapshot_prefix_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& SolverParameter::snapshot_prefix() const {
  // @@protoc_insertion_point(field_get:trtcaffe.SolverParameter.snapshot_prefix)
  return _internal_snapshot_prefix();
}
inline void SolverParameter::set_snapshot_prefix(const std::string& value) {
  _internal_set_snapshot_prefix(value);
  // @@protoc_insertion_point(field_set:trtcaffe.SolverParameter.snapshot_prefix)
}
inline std::string* SolverParameter::mutable_snapshot_prefix() {
  // @@protoc_insertion_point(field_mutable:trtcaffe.SolverParameter.snapshot_prefix)
  return _internal_mutable_snapshot_prefix();
}
inline const std::string& SolverParameter::_internal_snapshot_prefix() const {
  return snapshot_prefix_.Get();
}
inline void SolverParameter::_internal_set_snapshot_prefix(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  snapshot_prefix_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void SolverParameter::set_snapshot_prefix(std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  snapshot_prefix_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:trtcaffe.SolverParameter.snapshot_prefix)
}
inline void SolverParameter::set_snapshot_prefix(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  snapshot_prefix_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:trtcaffe.SolverParameter.snapshot_prefix)
}
inline void SolverParameter::set_snapshot_prefix(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000004u;
  snapshot_prefix_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:trtcaffe.SolverParameter.snapshot_prefix)
}
inline std::string* SolverParameter::_internal_mutable_snapshot_prefix() {
  _has_bits_[0] |= 0x00000004u;
  return snapshot_prefix_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* SolverParameter::release_snapshot_prefix() {
  // @@protoc_insertion_point(field_release:trtcaffe.SolverParameter.snapshot_prefix)
  if (!_internal_has_snapshot_prefix()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return snapshot_prefix_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SolverParameter::set_allocated_snapshot_prefix(std::string* snapshot_prefix) {
  if (snapshot_prefix != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  snapshot_prefix_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), snapshot_prefix,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:trtcaffe.SolverParameter.snapshot_prefix)
}
inline std::string* SolverParameter::unsafe_arena_release_snapshot_prefix() {
  // @@protoc_insertion_point(field_unsafe_arena_release:trtcaffe.SolverParameter.snapshot_prefix)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000004u;
  return snapshot_prefix_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void SolverParameter::unsafe_arena_set_allocated_snapshot_prefix(
    std::string* snapshot_prefix) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (snapshot_prefix != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  snapshot_prefix_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      snapshot_prefix, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:trtcaffe.SolverParameter.snapshot_prefix)
}

// optional bool snapshot_diff = 16 [default = false];
inline bool SolverParameter::_internal_has_snapshot_diff() const {
  bool value = (_has_bits_[0] & 0x01000000u) != 0;
  return value;
}
inline bool SolverParameter::has_snapshot_diff() const {
  return _internal_has_snapshot_diff();
}
inline void SolverParameter::clear_snapshot_diff() {
  snapshot_diff_ = false;
  _has_bits_[0] &= ~0x01000000u;
}
inline bool SolverParameter::_internal_snapshot_diff() const {
  return snapshot_diff_;
}
inline bool SolverParameter::snapshot_diff() const {
  // @@protoc_insertion_point(field_get:trtcaffe.SolverParameter.snapshot_diff)
  return _internal_snapshot_diff();
}
inline void SolverParameter::_internal_set_snapshot_diff(bool value) {
  _has_bits_[0] |= 0x01000000u;
  snapshot_diff_ = value;
}
inline void SolverParameter::set_snapshot_diff(bool value) {
  _internal_set_snapshot_diff(value);
  // @@protoc_insertion_point(field_set:trtcaffe.SolverParameter.snapshot_diff)
}

// optional .trtcaffe.SolverParameter.SnapshotFormat snapshot_format = 37 [default = BINARYPROTO];
inline bool SolverParameter::_internal_has_snapshot_format() const {
  bool value = (_has_bits_[1] & 0x00000080u) != 0;
  return value;
}
inline bool SolverParameter::has_snapshot_format() const {
  return _internal_has_snapshot_format();
}
inline void SolverParameter::clear_snapshot_format() {
  snapshot_format_ = 1;
  _has_bits_[1] &= ~0x00000080u;
}
inline ::trtcaffe::SolverParameter_SnapshotFormat SolverParameter::_internal_snapshot_format() const {
  return static_cast< ::trtcaffe::SolverParameter_SnapshotFormat >(snapshot_format_);
}
inline ::trtcaffe::SolverParameter_SnapshotFormat SolverParameter::snapshot_format() const {
  // @@protoc_insertion_point(field_get:trtcaffe.SolverParameter.snapshot_format)
  return _internal_snapshot_format();
}
inline void SolverParameter::_internal_set_snapshot_format(::trtcaffe::SolverParameter_SnapshotFormat value) {
  assert(::trtcaffe::SolverParameter_SnapshotFormat_IsValid(value));
  _has_bits_[1] |= 0x00000080u;
  snapshot_format_ = value;
}
inline void SolverParameter::set_snapshot_format(::trtcaffe::SolverParameter_SnapshotFormat value) {
  _internal_set_snapshot_format(value);
  // @@protoc_insertion_point(field_set:trtcaffe.SolverParameter.snapshot_format)
}

// optional .trtcaffe.SolverParameter.SolverMode solver_mode = 17 [default = GPU];
inline bool SolverParameter::_internal_has_solver_mode() const {
  bool value = (_has_bits_[1] & 0x00000002u) != 0;
  return value;
}
inline bool SolverParameter::has_solver_mode() const {
  return _internal_has_solver_mode();
}
inline void SolverParameter::clear_solver_mode() {
  solver_mode_ = 1;
  _has_bits_[1] &= ~0x00000002u;
}
inline ::trtcaffe::SolverParameter_SolverMode SolverParameter::_internal_solver_mode() const {
  return static_cast< ::trtcaffe::SolverParameter_SolverMode >(solver_mode_);
}
inline ::trtcaffe::SolverParameter_SolverMode SolverParameter::solver_mode() const {
  // @@protoc_insertion_point(field_get:trtcaffe.SolverParameter.solver_mode)
  return _internal_solver_mode();
}
inline void SolverParameter::_internal_set_solver_mode(::trtcaffe::SolverParameter_SolverMode value) {
  assert(::trtcaffe::SolverParameter_SolverMode_IsValid(value));
  _has_bits_[1] |= 0x00000002u;
  solver_mode_ = value;
}
inline void SolverParameter::set_solver_mode(::trtcaffe::SolverParameter_SolverMode value) {
  _internal_set_solver_mode(value);
  // @@protoc_insertion_point(field_set:trtcaffe.SolverParameter.solver_mode)
}

// optional int32 device_id = 18 [default = 0];
inline bool SolverParameter::_internal_has_device_id() const {
  bool value = (_has_bits_[0] & 0x00100000u) != 0;
  return value;
}
inline bool SolverParameter::has_device_id() const {
  return _internal_has_device_id();
}
inline void SolverParameter::clear_device_id() {
  device_id_ = 0;
  _has_bits_[0] &= ~0x00100000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SolverParameter::_internal_device_id() const {
  return device_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SolverParameter::device_id() const {
  // @@protoc_insertion_point(field_get:trtcaffe.SolverParameter.device_id)
  return _internal_device_id();
}
inline void SolverParameter::_internal_set_device_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00100000u;
  device_id_ = value;
}
inline void SolverParameter::set_device_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_device_id(value);
  // @@protoc_insertion_point(field_set:trtcaffe.SolverParameter.device_id)
}

// optional int64 random_seed = 20 [default = -1];
inline bool SolverParameter::_internal_has_random_seed() const {
  bool value = (_has_bits_[1] & 0x00000001u) != 0;
  return value;
}
inline bool SolverParameter::has_random_seed() const {
  return _internal_has_random_seed();
}
inline void SolverParameter::clear_random_seed() {
  random_seed_ = PROTOBUF_LONGLONG(-1);
  _has_bits_[1] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 SolverParameter::_internal_random_seed() const {
  return random_seed_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 SolverParameter::random_seed() const {
  // @@protoc_insertion_point(field_get:trtcaffe.SolverParameter.random_seed)
  return _internal_random_seed();
}
inline void SolverParameter::_internal_set_random_seed(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[1] |= 0x00000001u;
  random_seed_ = value;
}
inline void SolverParameter::set_random_seed(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_random_seed(value);
  // @@protoc_insertion_point(field_set:trtcaffe.SolverParameter.random_seed)
}

// optional string type = 40 [default = "SGD"];
inline bool SolverParameter::_internal_has_type() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool SolverParameter::has_type() const {
  return _internal_has_type();
}
inline void SolverParameter::clear_type() {
  type_.ClearToDefault(&::trtcaffe::SolverParameter::_i_give_permission_to_break_this_code_default_type_.get(), GetArena());
  _has_bits_[0] &= ~0x00000020u;
}
inline const std::string& SolverParameter::type() const {
  // @@protoc_insertion_point(field_get:trtcaffe.SolverParameter.type)
  return _internal_type();
}
inline void SolverParameter::set_type(const std::string& value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:trtcaffe.SolverParameter.type)
}
inline std::string* SolverParameter::mutable_type() {
  // @@protoc_insertion_point(field_mutable:trtcaffe.SolverParameter.type)
  return _internal_mutable_type();
}
inline const std::string& SolverParameter::_internal_type() const {
  return type_.Get();
}
inline void SolverParameter::_internal_set_type(const std::string& value) {
  _has_bits_[0] |= 0x00000020u;
  type_.Set(&::trtcaffe::SolverParameter::_i_give_permission_to_break_this_code_default_type_.get(), value, GetArena());
}
inline void SolverParameter::set_type(std::string&& value) {
  _has_bits_[0] |= 0x00000020u;
  type_.Set(
    &::trtcaffe::SolverParameter::_i_give_permission_to_break_this_code_default_type_.get(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:trtcaffe.SolverParameter.type)
}
inline void SolverParameter::set_type(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000020u;
  type_.Set(&::trtcaffe::SolverParameter::_i_give_permission_to_break_this_code_default_type_.get(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:trtcaffe.SolverParameter.type)
}
inline void SolverParameter::set_type(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000020u;
  type_.Set(&::trtcaffe::SolverParameter::_i_give_permission_to_break_this_code_default_type_.get(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:trtcaffe.SolverParameter.type)
}
inline std::string* SolverParameter::_internal_mutable_type() {
  _has_bits_[0] |= 0x00000020u;
  return type_.Mutable(&::trtcaffe::SolverParameter::_i_give_permission_to_break_this_code_default_type_.get(), GetArena());
}
inline std::string* SolverParameter::release_type() {
  // @@protoc_insertion_point(field_release:trtcaffe.SolverParameter.type)
  if (!_internal_has_type()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000020u;
  return type_.ReleaseNonDefault(&::trtcaffe::SolverParameter::_i_give_permission_to_break_this_code_default_type_.get(), GetArena());
}
inline void SolverParameter::set_allocated_type(std::string* type) {
  if (type != nullptr) {
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  type_.SetAllocated(&::trtcaffe::SolverParameter::_i_give_permission_to_break_this_code_default_type_.get(), type,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:trtcaffe.SolverParameter.type)
}
inline std::string* SolverParameter::unsafe_arena_release_type() {
  // @@protoc_insertion_point(field_unsafe_arena_release:trtcaffe.SolverParameter.type)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000020u;
  return type_.UnsafeArenaRelease(&::trtcaffe::SolverParameter::_i_give_permission_to_break_this_code_default_type_.get(),
      GetArena());
}
inline void SolverParameter::unsafe_arena_set_allocated_type(
    std::string* type) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (type != nullptr) {
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  type_.UnsafeArenaSetAllocated(&::trtcaffe::SolverParameter::_i_give_permission_to_break_this_code_default_type_.get(),
      type, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:trtcaffe.SolverParameter.type)
}

// optional float delta = 31 [default = 1e-08];
inline bool SolverParameter::_internal_has_delta() const {
  bool value = (_has_bits_[1] & 0x00000008u) != 0;
  return value;
}
inline bool SolverParameter::has_delta() const {
  return _internal_has_delta();
}
inline void SolverParameter::clear_delta() {
  delta_ = 1e-08f;
  _has_bits_[1] &= ~0x00000008u;
}
inline float SolverParameter::_internal_delta() const {
  return delta_;
}
inline float SolverParameter::delta() const {
  // @@protoc_insertion_point(field_get:trtcaffe.SolverParameter.delta)
  return _internal_delta();
}
inline void SolverParameter::_internal_set_delta(float value) {
  _has_bits_[1] |= 0x00000008u;
  delta_ = value;
}
inline void SolverParameter::set_delta(float value) {
  _internal_set_delta(value);
  // @@protoc_insertion_point(field_set:trtcaffe.SolverParameter.delta)
}

// optional float momentum2 = 39 [default = 0.999];
inline bool SolverParameter::_internal_has_momentum2() const {
  bool value = (_has_bits_[1] & 0x00000200u) != 0;
  return value;
}
inline bool SolverParameter::has_momentum2() const {
  return _internal_has_momentum2();
}
inline void SolverParameter::clear_momentum2() {
  momentum2_ = 0.999f;
  _has_bits_[1] &= ~0x00000200u;
}
inline float SolverParameter::_internal_momentum2() const {
  return momentum2_;
}
inline float SolverParameter::momentum2() const {
  // @@protoc_insertion_point(field_get:trtcaffe.SolverParameter.momentum2)
  return _internal_momentum2();
}
inline void SolverParameter::_internal_set_momentum2(float value) {
  _has_bits_[1] |= 0x00000200u;
  momentum2_ = value;
}
inline void SolverParameter::set_momentum2(float value) {
  _internal_set_momentum2(value);
  // @@protoc_insertion_point(field_set:trtcaffe.SolverParameter.momentum2)
}

// optional float rms_decay = 38 [default = 0.99];
inline bool SolverParameter::_internal_has_rms_decay() const {
  bool value = (_has_bits_[1] & 0x00000100u) != 0;
  return value;
}
inline bool SolverParameter::has_rms_decay() const {
  return _internal_has_rms_decay();
}
inline void SolverParameter::clear_rms_decay() {
  rms_decay_ = 0.99f;
  _has_bits_[1] &= ~0x00000100u;
}
inline float SolverParameter::_internal_rms_decay() const {
  return rms_decay_;
}
inline float SolverParameter::rms_decay() const {
  // @@protoc_insertion_point(field_get:trtcaffe.SolverParameter.rms_decay)
  return _internal_rms_decay();
}
inline void SolverParameter::_internal_set_rms_decay(float value) {
  _has_bits_[1] |= 0x00000100u;
  rms_decay_ = value;
}
inline void SolverParameter::set_rms_decay(float value) {
  _internal_set_rms_decay(value);
  // @@protoc_insertion_point(field_set:trtcaffe.SolverParameter.rms_decay)
}

// optional bool debug_info = 23 [default = false];
inline bool SolverParameter::_internal_has_debug_info() const {
  bool value = (_has_bits_[0] & 0x04000000u) != 0;
  return value;
}
inline bool SolverParameter::has_debug_info() const {
  return _internal_has_debug_info();
}
inline void SolverParameter::clear_debug_info() {
  debug_info_ = false;
  _has_bits_[0] &= ~0x04000000u;
}
inline bool SolverParameter::_internal_debug_info() const {
  return debug_info_;
}
inline bool SolverParameter::debug_info() const {
  // @@protoc_insertion_point(field_get:trtcaffe.SolverParameter.debug_info)
  return _internal_debug_info();
}
inline void SolverParameter::_internal_set_debug_info(bool value) {
  _has_bits_[0] |= 0x04000000u;
  debug_info_ = value;
}
inline void SolverParameter::set_debug_info(bool value) {
  _internal_set_debug_info(value);
  // @@protoc_insertion_point(field_set:trtcaffe.SolverParameter.debug_info)
}

// optional bool snapshot_after_train = 28 [default = true];
inline bool SolverParameter::_internal_has_snapshot_after_train() const {
  bool value = (_has_bits_[1] & 0x00000004u) != 0;
  return value;
}
inline bool SolverParameter::has_snapshot_after_train() const {
  return _internal_has_snapshot_after_train();
}
inline void SolverParameter::clear_snapshot_after_train() {
  snapshot_after_train_ = true;
  _has_bits_[1] &= ~0x00000004u;
}
inline bool SolverParameter::_internal_snapshot_after_train() const {
  return snapshot_after_train_;
}
inline bool SolverParameter::snapshot_after_train() const {
  // @@protoc_insertion_point(field_get:trtcaffe.SolverParameter.snapshot_after_train)
  return _internal_snapshot_after_train();
}
inline void SolverParameter::_internal_set_snapshot_after_train(bool value) {
  _has_bits_[1] |= 0x00000004u;
  snapshot_after_train_ = value;
}
inline void SolverParameter::set_snapshot_after_train(bool value) {
  _internal_set_snapshot_after_train(value);
  // @@protoc_insertion_point(field_set:trtcaffe.SolverParameter.snapshot_after_train)
}

// optional .trtcaffe.SolverParameter.SolverType solver_type = 30 [default = SGD];
inline bool SolverParameter::_internal_has_solver_type() const {
  bool value = (_has_bits_[0] & 0x02000000u) != 0;
  return value;
}
inline bool SolverParameter::has_solver_type() const {
  return _internal_has_solver_type();
}
inline void SolverParameter::clear_solver_type() {
  solver_type_ = 0;
  _has_bits_[0] &= ~0x02000000u;
}
inline ::trtcaffe::SolverParameter_SolverType SolverParameter::_internal_solver_type() const {
  return static_cast< ::trtcaffe::SolverParameter_SolverType >(solver_type_);
}
inline ::trtcaffe::SolverParameter_SolverType SolverParameter::solver_type() const {
  // @@protoc_insertion_point(field_get:trtcaffe.SolverParameter.solver_type)
  return _internal_solver_type();
}
inline void SolverParameter::_internal_set_solver_type(::trtcaffe::SolverParameter_SolverType value) {
  assert(::trtcaffe::SolverParameter_SolverType_IsValid(value));
  _has_bits_[0] |= 0x02000000u;
  solver_type_ = value;
}
inline void SolverParameter::set_solver_type(::trtcaffe::SolverParameter_SolverType value) {
  _internal_set_solver_type(value);
  // @@protoc_insertion_point(field_set:trtcaffe.SolverParameter.solver_type)
}

// optional .trtcaffe.Type solver_data_type = 44 [default = FLOAT];
inline bool SolverParameter::_internal_has_solver_data_type() const {
  bool value = (_has_bits_[1] & 0x00000400u) != 0;
  return value;
}
inline bool SolverParameter::has_solver_data_type() const {
  return _internal_has_solver_data_type();
}
inline void SolverParameter::clear_solver_data_type() {
  solver_data_type_ = 1;
  _has_bits_[1] &= ~0x00000400u;
}
inline ::trtcaffe::Type SolverParameter::_internal_solver_data_type() const {
  return static_cast< ::trtcaffe::Type >(solver_data_type_);
}
inline ::trtcaffe::Type SolverParameter::solver_data_type() const {
  // @@protoc_insertion_point(field_get:trtcaffe.SolverParameter.solver_data_type)
  return _internal_solver_data_type();
}
inline void SolverParameter::_internal_set_solver_data_type(::trtcaffe::Type value) {
  assert(::trtcaffe::Type_IsValid(value));
  _has_bits_[1] |= 0x00000400u;
  solver_data_type_ = value;
}
inline void SolverParameter::set_solver_data_type(::trtcaffe::Type value) {
  _internal_set_solver_data_type(value);
  // @@protoc_insertion_point(field_set:trtcaffe.SolverParameter.solver_data_type)
}

// optional bool store_blobs_in_old_format = 45 [default = false];
inline bool SolverParameter::_internal_has_store_blobs_in_old_format() const {
  bool value = (_has_bits_[0] & 0x08000000u) != 0;
  return value;
}
inline bool SolverParameter::has_store_blobs_in_old_format() const {
  return _internal_has_store_blobs_in_old_format();
}
inline void SolverParameter::clear_store_blobs_in_old_format() {
  store_blobs_in_old_format_ = false;
  _has_bits_[0] &= ~0x08000000u;
}
inline bool SolverParameter::_internal_store_blobs_in_old_format() const {
  return store_blobs_in_old_format_;
}
inline bool SolverParameter::store_blobs_in_old_format() const {
  // @@protoc_insertion_point(field_get:trtcaffe.SolverParameter.store_blobs_in_old_format)
  return _internal_store_blobs_in_old_format();
}
inline void SolverParameter::_internal_set_store_blobs_in_old_format(bool value) {
  _has_bits_[0] |= 0x08000000u;
  store_blobs_in_old_format_ = value;
}
inline void SolverParameter::set_store_blobs_in_old_format(bool value) {
  _internal_set_store_blobs_in_old_format(value);
  // @@protoc_insertion_point(field_set:trtcaffe.SolverParameter.store_blobs_in_old_format)
}

// -------------------------------------------------------------------

// SolverState

// optional int32 iter = 1;
inline bool SolverState::_internal_has_iter() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool SolverState::has_iter() const {
  return _internal_has_iter();
}
inline void SolverState::clear_iter() {
  iter_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SolverState::_internal_iter() const {
  return iter_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SolverState::iter() const {
  // @@protoc_insertion_point(field_get:trtcaffe.SolverState.iter)
  return _internal_iter();
}
inline void SolverState::_internal_set_iter(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  iter_ = value;
}
inline void SolverState::set_iter(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_iter(value);
  // @@protoc_insertion_point(field_set:trtcaffe.SolverState.iter)
}

// optional string learned_net = 2;
inline bool SolverState::_internal_has_learned_net() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool SolverState::has_learned_net() const {
  return _internal_has_learned_net();
}
inline void SolverState::clear_learned_net() {
  learned_net_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& SolverState::learned_net() const {
  // @@protoc_insertion_point(field_get:trtcaffe.SolverState.learned_net)
  return _internal_learned_net();
}
inline void SolverState::set_learned_net(const std::string& value) {
  _internal_set_learned_net(value);
  // @@protoc_insertion_point(field_set:trtcaffe.SolverState.learned_net)
}
inline std::string* SolverState::mutable_learned_net() {
  // @@protoc_insertion_point(field_mutable:trtcaffe.SolverState.learned_net)
  return _internal_mutable_learned_net();
}
inline const std::string& SolverState::_internal_learned_net() const {
  return learned_net_.Get();
}
inline void SolverState::_internal_set_learned_net(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  learned_net_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void SolverState::set_learned_net(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  learned_net_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:trtcaffe.SolverState.learned_net)
}
inline void SolverState::set_learned_net(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  learned_net_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:trtcaffe.SolverState.learned_net)
}
inline void SolverState::set_learned_net(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  learned_net_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:trtcaffe.SolverState.learned_net)
}
inline std::string* SolverState::_internal_mutable_learned_net() {
  _has_bits_[0] |= 0x00000001u;
  return learned_net_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* SolverState::release_learned_net() {
  // @@protoc_insertion_point(field_release:trtcaffe.SolverState.learned_net)
  if (!_internal_has_learned_net()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return learned_net_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SolverState::set_allocated_learned_net(std::string* learned_net) {
  if (learned_net != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  learned_net_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), learned_net,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:trtcaffe.SolverState.learned_net)
}
inline std::string* SolverState::unsafe_arena_release_learned_net() {
  // @@protoc_insertion_point(field_unsafe_arena_release:trtcaffe.SolverState.learned_net)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000001u;
  return learned_net_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void SolverState::unsafe_arena_set_allocated_learned_net(
    std::string* learned_net) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (learned_net != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  learned_net_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      learned_net, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:trtcaffe.SolverState.learned_net)
}

// repeated .trtcaffe.BlobProto history = 3;
inline int SolverState::_internal_history_size() const {
  return history_.size();
}
inline int SolverState::history_size() const {
  return _internal_history_size();
}
inline void SolverState::clear_history() {
  history_.Clear();
}
inline ::trtcaffe::BlobProto* SolverState::mutable_history(int index) {
  // @@protoc_insertion_point(field_mutable:trtcaffe.SolverState.history)
  return history_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::trtcaffe::BlobProto >*
SolverState::mutable_history() {
  // @@protoc_insertion_point(field_mutable_list:trtcaffe.SolverState.history)
  return &history_;
}
inline const ::trtcaffe::BlobProto& SolverState::_internal_history(int index) const {
  return history_.Get(index);
}
inline const ::trtcaffe::BlobProto& SolverState::history(int index) const {
  // @@protoc_insertion_point(field_get:trtcaffe.SolverState.history)
  return _internal_history(index);
}
inline ::trtcaffe::BlobProto* SolverState::_internal_add_history() {
  return history_.Add();
}
inline ::trtcaffe::BlobProto* SolverState::add_history() {
  // @@protoc_insertion_point(field_add:trtcaffe.SolverState.history)
  return _internal_add_history();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::trtcaffe::BlobProto >&
SolverState::history() const {
  // @@protoc_insertion_point(field_list:trtcaffe.SolverState.history)
  return history_;
}

// optional int32 current_step = 4 [default = 0];
inline bool SolverState::_internal_has_current_step() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool SolverState::has_current_step() const {
  return _internal_has_current_step();
}
inline void SolverState::clear_current_step() {
  current_step_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SolverState::_internal_current_step() const {
  return current_step_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SolverState::current_step() const {
  // @@protoc_insertion_point(field_get:trtcaffe.SolverState.current_step)
  return _internal_current_step();
}
inline void SolverState::_internal_set_current_step(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000004u;
  current_step_ = value;
}
inline void SolverState::set_current_step(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_current_step(value);
  // @@protoc_insertion_point(field_set:trtcaffe.SolverState.current_step)
}

// -------------------------------------------------------------------

// NetState

// optional .trtcaffe.Phase phase = 1 [default = TEST];
inline bool NetState::_internal_has_phase() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool NetState::has_phase() const {
  return _internal_has_phase();
}
inline void NetState::clear_phase() {
  phase_ = 1;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::trtcaffe::Phase NetState::_internal_phase() const {
  return static_cast< ::trtcaffe::Phase >(phase_);
}
inline ::trtcaffe::Phase NetState::phase() const {
  // @@protoc_insertion_point(field_get:trtcaffe.NetState.phase)
  return _internal_phase();
}
inline void NetState::_internal_set_phase(::trtcaffe::Phase value) {
  assert(::trtcaffe::Phase_IsValid(value));
  _has_bits_[0] |= 0x00000002u;
  phase_ = value;
}
inline void NetState::set_phase(::trtcaffe::Phase value) {
  _internal_set_phase(value);
  // @@protoc_insertion_point(field_set:trtcaffe.NetState.phase)
}

// optional int32 level = 2 [default = 0];
inline bool NetState::_internal_has_level() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool NetState::has_level() const {
  return _internal_has_level();
}
inline void NetState::clear_level() {
  level_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 NetState::_internal_level() const {
  return level_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 NetState::level() const {
  // @@protoc_insertion_point(field_get:trtcaffe.NetState.level)
  return _internal_level();
}
inline void NetState::_internal_set_level(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000001u;
  level_ = value;
}
inline void NetState::set_level(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_level(value);
  // @@protoc_insertion_point(field_set:trtcaffe.NetState.level)
}

// repeated string stage = 3;
inline int NetState::_internal_stage_size() const {
  return stage_.size();
}
inline int NetState::stage_size() const {
  return _internal_stage_size();
}
inline void NetState::clear_stage() {
  stage_.Clear();
}
inline std::string* NetState::add_stage() {
  // @@protoc_insertion_point(field_add_mutable:trtcaffe.NetState.stage)
  return _internal_add_stage();
}
inline const std::string& NetState::_internal_stage(int index) const {
  return stage_.Get(index);
}
inline const std::string& NetState::stage(int index) const {
  // @@protoc_insertion_point(field_get:trtcaffe.NetState.stage)
  return _internal_stage(index);
}
inline std::string* NetState::mutable_stage(int index) {
  // @@protoc_insertion_point(field_mutable:trtcaffe.NetState.stage)
  return stage_.Mutable(index);
}
inline void NetState::set_stage(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:trtcaffe.NetState.stage)
  stage_.Mutable(index)->assign(value);
}
inline void NetState::set_stage(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:trtcaffe.NetState.stage)
  stage_.Mutable(index)->assign(std::move(value));
}
inline void NetState::set_stage(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  stage_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:trtcaffe.NetState.stage)
}
inline void NetState::set_stage(int index, const char* value, size_t size) {
  stage_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:trtcaffe.NetState.stage)
}
inline std::string* NetState::_internal_add_stage() {
  return stage_.Add();
}
inline void NetState::add_stage(const std::string& value) {
  stage_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:trtcaffe.NetState.stage)
}
inline void NetState::add_stage(std::string&& value) {
  stage_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:trtcaffe.NetState.stage)
}
inline void NetState::add_stage(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  stage_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:trtcaffe.NetState.stage)
}
inline void NetState::add_stage(const char* value, size_t size) {
  stage_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:trtcaffe.NetState.stage)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
NetState::stage() const {
  // @@protoc_insertion_point(field_list:trtcaffe.NetState.stage)
  return stage_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
NetState::mutable_stage() {
  // @@protoc_insertion_point(field_mutable_list:trtcaffe.NetState.stage)
  return &stage_;
}

// -------------------------------------------------------------------

// NetStateRule

// optional .trtcaffe.Phase phase = 1;
inline bool NetStateRule::_internal_has_phase() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool NetStateRule::has_phase() const {
  return _internal_has_phase();
}
inline void NetStateRule::clear_phase() {
  phase_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::trtcaffe::Phase NetStateRule::_internal_phase() const {
  return static_cast< ::trtcaffe::Phase >(phase_);
}
inline ::trtcaffe::Phase NetStateRule::phase() const {
  // @@protoc_insertion_point(field_get:trtcaffe.NetStateRule.phase)
  return _internal_phase();
}
inline void NetStateRule::_internal_set_phase(::trtcaffe::Phase value) {
  assert(::trtcaffe::Phase_IsValid(value));
  _has_bits_[0] |= 0x00000001u;
  phase_ = value;
}
inline void NetStateRule::set_phase(::trtcaffe::Phase value) {
  _internal_set_phase(value);
  // @@protoc_insertion_point(field_set:trtcaffe.NetStateRule.phase)
}

// optional int32 min_level = 2;
inline bool NetStateRule::_internal_has_min_level() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool NetStateRule::has_min_level() const {
  return _internal_has_min_level();
}
inline void NetStateRule::clear_min_level() {
  min_level_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 NetStateRule::_internal_min_level() const {
  return min_level_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 NetStateRule::min_level() const {
  // @@protoc_insertion_point(field_get:trtcaffe.NetStateRule.min_level)
  return _internal_min_level();
}
inline void NetStateRule::_internal_set_min_level(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  min_level_ = value;
}
inline void NetStateRule::set_min_level(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_min_level(value);
  // @@protoc_insertion_point(field_set:trtcaffe.NetStateRule.min_level)
}

// optional int32 max_level = 3;
inline bool NetStateRule::_internal_has_max_level() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool NetStateRule::has_max_level() const {
  return _internal_has_max_level();
}
inline void NetStateRule::clear_max_level() {
  max_level_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 NetStateRule::_internal_max_level() const {
  return max_level_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 NetStateRule::max_level() const {
  // @@protoc_insertion_point(field_get:trtcaffe.NetStateRule.max_level)
  return _internal_max_level();
}
inline void NetStateRule::_internal_set_max_level(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000004u;
  max_level_ = value;
}
inline void NetStateRule::set_max_level(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_max_level(value);
  // @@protoc_insertion_point(field_set:trtcaffe.NetStateRule.max_level)
}

// repeated string stage = 4;
inline int NetStateRule::_internal_stage_size() const {
  return stage_.size();
}
inline int NetStateRule::stage_size() const {
  return _internal_stage_size();
}
inline void NetStateRule::clear_stage() {
  stage_.Clear();
}
inline std::string* NetStateRule::add_stage() {
  // @@protoc_insertion_point(field_add_mutable:trtcaffe.NetStateRule.stage)
  return _internal_add_stage();
}
inline const std::string& NetStateRule::_internal_stage(int index) const {
  return stage_.Get(index);
}
inline const std::string& NetStateRule::stage(int index) const {
  // @@protoc_insertion_point(field_get:trtcaffe.NetStateRule.stage)
  return _internal_stage(index);
}
inline std::string* NetStateRule::mutable_stage(int index) {
  // @@protoc_insertion_point(field_mutable:trtcaffe.NetStateRule.stage)
  return stage_.Mutable(index);
}
inline void NetStateRule::set_stage(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:trtcaffe.NetStateRule.stage)
  stage_.Mutable(index)->assign(value);
}
inline void NetStateRule::set_stage(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:trtcaffe.NetStateRule.stage)
  stage_.Mutable(index)->assign(std::move(value));
}
inline void NetStateRule::set_stage(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  stage_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:trtcaffe.NetStateRule.stage)
}
inline void NetStateRule::set_stage(int index, const char* value, size_t size) {
  stage_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:trtcaffe.NetStateRule.stage)
}
inline std::string* NetStateRule::_internal_add_stage() {
  return stage_.Add();
}
inline void NetStateRule::add_stage(const std::string& value) {
  stage_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:trtcaffe.NetStateRule.stage)
}
inline void NetStateRule::add_stage(std::string&& value) {
  stage_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:trtcaffe.NetStateRule.stage)
}
inline void NetStateRule::add_stage(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  stage_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:trtcaffe.NetStateRule.stage)
}
inline void NetStateRule::add_stage(const char* value, size_t size) {
  stage_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:trtcaffe.NetStateRule.stage)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
NetStateRule::stage() const {
  // @@protoc_insertion_point(field_list:trtcaffe.NetStateRule.stage)
  return stage_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
NetStateRule::mutable_stage() {
  // @@protoc_insertion_point(field_mutable_list:trtcaffe.NetStateRule.stage)
  return &stage_;
}

// repeated string not_stage = 5;
inline int NetStateRule::_internal_not_stage_size() const {
  return not_stage_.size();
}
inline int NetStateRule::not_stage_size() const {
  return _internal_not_stage_size();
}
inline void NetStateRule::clear_not_stage() {
  not_stage_.Clear();
}
inline std::string* NetStateRule::add_not_stage() {
  // @@protoc_insertion_point(field_add_mutable:trtcaffe.NetStateRule.not_stage)
  return _internal_add_not_stage();
}
inline const std::string& NetStateRule::_internal_not_stage(int index) const {
  return not_stage_.Get(index);
}
inline const std::string& NetStateRule::not_stage(int index) const {
  // @@protoc_insertion_point(field_get:trtcaffe.NetStateRule.not_stage)
  return _internal_not_stage(index);
}
inline std::string* NetStateRule::mutable_not_stage(int index) {
  // @@protoc_insertion_point(field_mutable:trtcaffe.NetStateRule.not_stage)
  return not_stage_.Mutable(index);
}
inline void NetStateRule::set_not_stage(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:trtcaffe.NetStateRule.not_stage)
  not_stage_.Mutable(index)->assign(value);
}
inline void NetStateRule::set_not_stage(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:trtcaffe.NetStateRule.not_stage)
  not_stage_.Mutable(index)->assign(std::move(value));
}
inline void NetStateRule::set_not_stage(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  not_stage_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:trtcaffe.NetStateRule.not_stage)
}
inline void NetStateRule::set_not_stage(int index, const char* value, size_t size) {
  not_stage_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:trtcaffe.NetStateRule.not_stage)
}
inline std::string* NetStateRule::_internal_add_not_stage() {
  return not_stage_.Add();
}
inline void NetStateRule::add_not_stage(const std::string& value) {
  not_stage_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:trtcaffe.NetStateRule.not_stage)
}
inline void NetStateRule::add_not_stage(std::string&& value) {
  not_stage_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:trtcaffe.NetStateRule.not_stage)
}
inline void NetStateRule::add_not_stage(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  not_stage_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:trtcaffe.NetStateRule.not_stage)
}
inline void NetStateRule::add_not_stage(const char* value, size_t size) {
  not_stage_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:trtcaffe.NetStateRule.not_stage)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
NetStateRule::not_stage() const {
  // @@protoc_insertion_point(field_list:trtcaffe.NetStateRule.not_stage)
  return not_stage_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
NetStateRule::mutable_not_stage() {
  // @@protoc_insertion_point(field_mutable_list:trtcaffe.NetStateRule.not_stage)
  return &not_stage_;
}

// -------------------------------------------------------------------

// ParamSpec

// optional string name = 1;
inline bool ParamSpec::_internal_has_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ParamSpec::has_name() const {
  return _internal_has_name();
}
inline void ParamSpec::clear_name() {
  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ParamSpec::name() const {
  // @@protoc_insertion_point(field_get:trtcaffe.ParamSpec.name)
  return _internal_name();
}
inline void ParamSpec::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:trtcaffe.ParamSpec.name)
}
inline std::string* ParamSpec::mutable_name() {
  // @@protoc_insertion_point(field_mutable:trtcaffe.ParamSpec.name)
  return _internal_mutable_name();
}
inline const std::string& ParamSpec::_internal_name() const {
  return name_.Get();
}
inline void ParamSpec::_internal_set_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ParamSpec::set_name(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:trtcaffe.ParamSpec.name)
}
inline void ParamSpec::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:trtcaffe.ParamSpec.name)
}
inline void ParamSpec::set_name(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:trtcaffe.ParamSpec.name)
}
inline std::string* ParamSpec::_internal_mutable_name() {
  _has_bits_[0] |= 0x00000001u;
  return name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ParamSpec::release_name() {
  // @@protoc_insertion_point(field_release:trtcaffe.ParamSpec.name)
  if (!_internal_has_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ParamSpec::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:trtcaffe.ParamSpec.name)
}
inline std::string* ParamSpec::unsafe_arena_release_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:trtcaffe.ParamSpec.name)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000001u;
  return name_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void ParamSpec::unsafe_arena_set_allocated_name(
    std::string* name) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  name_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      name, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:trtcaffe.ParamSpec.name)
}

// optional .trtcaffe.ParamSpec.DimCheckMode share_mode = 2;
inline bool ParamSpec::_internal_has_share_mode() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ParamSpec::has_share_mode() const {
  return _internal_has_share_mode();
}
inline void ParamSpec::clear_share_mode() {
  share_mode_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::trtcaffe::ParamSpec_DimCheckMode ParamSpec::_internal_share_mode() const {
  return static_cast< ::trtcaffe::ParamSpec_DimCheckMode >(share_mode_);
}
inline ::trtcaffe::ParamSpec_DimCheckMode ParamSpec::share_mode() const {
  // @@protoc_insertion_point(field_get:trtcaffe.ParamSpec.share_mode)
  return _internal_share_mode();
}
inline void ParamSpec::_internal_set_share_mode(::trtcaffe::ParamSpec_DimCheckMode value) {
  assert(::trtcaffe::ParamSpec_DimCheckMode_IsValid(value));
  _has_bits_[0] |= 0x00000002u;
  share_mode_ = value;
}
inline void ParamSpec::set_share_mode(::trtcaffe::ParamSpec_DimCheckMode value) {
  _internal_set_share_mode(value);
  // @@protoc_insertion_point(field_set:trtcaffe.ParamSpec.share_mode)
}

// optional float lr_mult = 3 [default = 1];
inline bool ParamSpec::_internal_has_lr_mult() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool ParamSpec::has_lr_mult() const {
  return _internal_has_lr_mult();
}
inline void ParamSpec::clear_lr_mult() {
  lr_mult_ = 1;
  _has_bits_[0] &= ~0x00000004u;
}
inline float ParamSpec::_internal_lr_mult() const {
  return lr_mult_;
}
inline float ParamSpec::lr_mult() const {
  // @@protoc_insertion_point(field_get:trtcaffe.ParamSpec.lr_mult)
  return _internal_lr_mult();
}
inline void ParamSpec::_internal_set_lr_mult(float value) {
  _has_bits_[0] |= 0x00000004u;
  lr_mult_ = value;
}
inline void ParamSpec::set_lr_mult(float value) {
  _internal_set_lr_mult(value);
  // @@protoc_insertion_point(field_set:trtcaffe.ParamSpec.lr_mult)
}

// optional float decay_mult = 4 [default = 1];
inline bool ParamSpec::_internal_has_decay_mult() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool ParamSpec::has_decay_mult() const {
  return _internal_has_decay_mult();
}
inline void ParamSpec::clear_decay_mult() {
  decay_mult_ = 1;
  _has_bits_[0] &= ~0x00000008u;
}
inline float ParamSpec::_internal_decay_mult() const {
  return decay_mult_;
}
inline float ParamSpec::decay_mult() const {
  // @@protoc_insertion_point(field_get:trtcaffe.ParamSpec.decay_mult)
  return _internal_decay_mult();
}
inline void ParamSpec::_internal_set_decay_mult(float value) {
  _has_bits_[0] |= 0x00000008u;
  decay_mult_ = value;
}
inline void ParamSpec::set_decay_mult(float value) {
  _internal_set_decay_mult(value);
  // @@protoc_insertion_point(field_set:trtcaffe.ParamSpec.decay_mult)
}

// -------------------------------------------------------------------

// LayerParameter

// optional string name = 1;
inline bool LayerParameter::_internal_has_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool LayerParameter::has_name() const {
  return _internal_has_name();
}
inline void LayerParameter::clear_name() {
  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& LayerParameter::name() const {
  // @@protoc_insertion_point(field_get:trtcaffe.LayerParameter.name)
  return _internal_name();
}
inline void LayerParameter::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:trtcaffe.LayerParameter.name)
}
inline std::string* LayerParameter::mutable_name() {
  // @@protoc_insertion_point(field_mutable:trtcaffe.LayerParameter.name)
  return _internal_mutable_name();
}
inline const std::string& LayerParameter::_internal_name() const {
  return name_.Get();
}
inline void LayerParameter::_internal_set_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void LayerParameter::set_name(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:trtcaffe.LayerParameter.name)
}
inline void LayerParameter::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:trtcaffe.LayerParameter.name)
}
inline void LayerParameter::set_name(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:trtcaffe.LayerParameter.name)
}
inline std::string* LayerParameter::_internal_mutable_name() {
  _has_bits_[0] |= 0x00000001u;
  return name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* LayerParameter::release_name() {
  // @@protoc_insertion_point(field_release:trtcaffe.LayerParameter.name)
  if (!_internal_has_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void LayerParameter::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:trtcaffe.LayerParameter.name)
}
inline std::string* LayerParameter::unsafe_arena_release_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:trtcaffe.LayerParameter.name)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000001u;
  return name_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void LayerParameter::unsafe_arena_set_allocated_name(
    std::string* name) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  name_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      name, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:trtcaffe.LayerParameter.name)
}

// optional string type = 2;
inline bool LayerParameter::_internal_has_type() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool LayerParameter::has_type() const {
  return _internal_has_type();
}
inline void LayerParameter::clear_type() {
  type_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& LayerParameter::type() const {
  // @@protoc_insertion_point(field_get:trtcaffe.LayerParameter.type)
  return _internal_type();
}
inline void LayerParameter::set_type(const std::string& value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:trtcaffe.LayerParameter.type)
}
inline std::string* LayerParameter::mutable_type() {
  // @@protoc_insertion_point(field_mutable:trtcaffe.LayerParameter.type)
  return _internal_mutable_type();
}
inline const std::string& LayerParameter::_internal_type() const {
  return type_.Get();
}
inline void LayerParameter::_internal_set_type(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void LayerParameter::set_type(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  type_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:trtcaffe.LayerParameter.type)
}
inline void LayerParameter::set_type(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:trtcaffe.LayerParameter.type)
}
inline void LayerParameter::set_type(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:trtcaffe.LayerParameter.type)
}
inline std::string* LayerParameter::_internal_mutable_type() {
  _has_bits_[0] |= 0x00000002u;
  return type_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* LayerParameter::release_type() {
  // @@protoc_insertion_point(field_release:trtcaffe.LayerParameter.type)
  if (!_internal_has_type()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return type_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void LayerParameter::set_allocated_type(std::string* type) {
  if (type != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  type_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), type,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:trtcaffe.LayerParameter.type)
}
inline std::string* LayerParameter::unsafe_arena_release_type() {
  // @@protoc_insertion_point(field_unsafe_arena_release:trtcaffe.LayerParameter.type)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000002u;
  return type_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void LayerParameter::unsafe_arena_set_allocated_type(
    std::string* type) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (type != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  type_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      type, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:trtcaffe.LayerParameter.type)
}

// repeated string bottom = 3;
inline int LayerParameter::_internal_bottom_size() const {
  return bottom_.size();
}
inline int LayerParameter::bottom_size() const {
  return _internal_bottom_size();
}
inline void LayerParameter::clear_bottom() {
  bottom_.Clear();
}
inline std::string* LayerParameter::add_bottom() {
  // @@protoc_insertion_point(field_add_mutable:trtcaffe.LayerParameter.bottom)
  return _internal_add_bottom();
}
inline const std::string& LayerParameter::_internal_bottom(int index) const {
  return bottom_.Get(index);
}
inline const std::string& LayerParameter::bottom(int index) const {
  // @@protoc_insertion_point(field_get:trtcaffe.LayerParameter.bottom)
  return _internal_bottom(index);
}
inline std::string* LayerParameter::mutable_bottom(int index) {
  // @@protoc_insertion_point(field_mutable:trtcaffe.LayerParameter.bottom)
  return bottom_.Mutable(index);
}
inline void LayerParameter::set_bottom(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:trtcaffe.LayerParameter.bottom)
  bottom_.Mutable(index)->assign(value);
}
inline void LayerParameter::set_bottom(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:trtcaffe.LayerParameter.bottom)
  bottom_.Mutable(index)->assign(std::move(value));
}
inline void LayerParameter::set_bottom(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  bottom_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:trtcaffe.LayerParameter.bottom)
}
inline void LayerParameter::set_bottom(int index, const char* value, size_t size) {
  bottom_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:trtcaffe.LayerParameter.bottom)
}
inline std::string* LayerParameter::_internal_add_bottom() {
  return bottom_.Add();
}
inline void LayerParameter::add_bottom(const std::string& value) {
  bottom_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:trtcaffe.LayerParameter.bottom)
}
inline void LayerParameter::add_bottom(std::string&& value) {
  bottom_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:trtcaffe.LayerParameter.bottom)
}
inline void LayerParameter::add_bottom(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  bottom_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:trtcaffe.LayerParameter.bottom)
}
inline void LayerParameter::add_bottom(const char* value, size_t size) {
  bottom_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:trtcaffe.LayerParameter.bottom)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
LayerParameter::bottom() const {
  // @@protoc_insertion_point(field_list:trtcaffe.LayerParameter.bottom)
  return bottom_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
LayerParameter::mutable_bottom() {
  // @@protoc_insertion_point(field_mutable_list:trtcaffe.LayerParameter.bottom)
  return &bottom_;
}

// repeated string top = 4;
inline int LayerParameter::_internal_top_size() const {
  return top_.size();
}
inline int LayerParameter::top_size() const {
  return _internal_top_size();
}
inline void LayerParameter::clear_top() {
  top_.Clear();
}
inline std::string* LayerParameter::add_top() {
  // @@protoc_insertion_point(field_add_mutable:trtcaffe.LayerParameter.top)
  return _internal_add_top();
}
inline const std::string& LayerParameter::_internal_top(int index) const {
  return top_.Get(index);
}
inline const std::string& LayerParameter::top(int index) const {
  // @@protoc_insertion_point(field_get:trtcaffe.LayerParameter.top)
  return _internal_top(index);
}
inline std::string* LayerParameter::mutable_top(int index) {
  // @@protoc_insertion_point(field_mutable:trtcaffe.LayerParameter.top)
  return top_.Mutable(index);
}
inline void LayerParameter::set_top(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:trtcaffe.LayerParameter.top)
  top_.Mutable(index)->assign(value);
}
inline void LayerParameter::set_top(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:trtcaffe.LayerParameter.top)
  top_.Mutable(index)->assign(std::move(value));
}
inline void LayerParameter::set_top(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  top_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:trtcaffe.LayerParameter.top)
}
inline void LayerParameter::set_top(int index, const char* value, size_t size) {
  top_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:trtcaffe.LayerParameter.top)
}
inline std::string* LayerParameter::_internal_add_top() {
  return top_.Add();
}
inline void LayerParameter::add_top(const std::string& value) {
  top_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:trtcaffe.LayerParameter.top)
}
inline void LayerParameter::add_top(std::string&& value) {
  top_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:trtcaffe.LayerParameter.top)
}
inline void LayerParameter::add_top(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  top_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:trtcaffe.LayerParameter.top)
}
inline void LayerParameter::add_top(const char* value, size_t size) {
  top_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:trtcaffe.LayerParameter.top)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
LayerParameter::top() const {
  // @@protoc_insertion_point(field_list:trtcaffe.LayerParameter.top)
  return top_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
LayerParameter::mutable_top() {
  // @@protoc_insertion_point(field_mutable_list:trtcaffe.LayerParameter.top)
  return &top_;
}

// optional .trtcaffe.Type forward_type = 145 [default = FLOAT];
inline bool LayerParameter::_internal_has_forward_type() const {
  bool value = (_has_bits_[1] & 0x02000000u) != 0;
  return value;
}
inline bool LayerParameter::has_forward_type() const {
  return _internal_has_forward_type();
}
inline void LayerParameter::clear_forward_type() {
  forward_type_ = 1;
  _has_bits_[1] &= ~0x02000000u;
}
inline ::trtcaffe::Type LayerParameter::_internal_forward_type() const {
  return static_cast< ::trtcaffe::Type >(forward_type_);
}
inline ::trtcaffe::Type LayerParameter::forward_type() const {
  // @@protoc_insertion_point(field_get:trtcaffe.LayerParameter.forward_type)
  return _internal_forward_type();
}
inline void LayerParameter::_internal_set_forward_type(::trtcaffe::Type value) {
  assert(::trtcaffe::Type_IsValid(value));
  _has_bits_[1] |= 0x02000000u;
  forward_type_ = value;
}
inline void LayerParameter::set_forward_type(::trtcaffe::Type value) {
  _internal_set_forward_type(value);
  // @@protoc_insertion_point(field_set:trtcaffe.LayerParameter.forward_type)
}

// optional .trtcaffe.Type backward_type = 146 [default = FLOAT];
inline bool LayerParameter::_internal_has_backward_type() const {
  bool value = (_has_bits_[1] & 0x04000000u) != 0;
  return value;
}
inline bool LayerParameter::has_backward_type() const {
  return _internal_has_backward_type();
}
inline void LayerParameter::clear_backward_type() {
  backward_type_ = 1;
  _has_bits_[1] &= ~0x04000000u;
}
inline ::trtcaffe::Type LayerParameter::_internal_backward_type() const {
  return static_cast< ::trtcaffe::Type >(backward_type_);
}
inline ::trtcaffe::Type LayerParameter::backward_type() const {
  // @@protoc_insertion_point(field_get:trtcaffe.LayerParameter.backward_type)
  return _internal_backward_type();
}
inline void LayerParameter::_internal_set_backward_type(::trtcaffe::Type value) {
  assert(::trtcaffe::Type_IsValid(value));
  _has_bits_[1] |= 0x04000000u;
  backward_type_ = value;
}
inline void LayerParameter::set_backward_type(::trtcaffe::Type value) {
  _internal_set_backward_type(value);
  // @@protoc_insertion_point(field_set:trtcaffe.LayerParameter.backward_type)
}

// optional .trtcaffe.Type forward_math = 147 [default = FLOAT];
inline bool LayerParameter::_internal_has_forward_math() const {
  bool value = (_has_bits_[1] & 0x08000000u) != 0;
  return value;
}
inline bool LayerParameter::has_forward_math() const {
  return _internal_has_forward_math();
}
inline void LayerParameter::clear_forward_math() {
  forward_math_ = 1;
  _has_bits_[1] &= ~0x08000000u;
}
inline ::trtcaffe::Type LayerParameter::_internal_forward_math() const {
  return static_cast< ::trtcaffe::Type >(forward_math_);
}
inline ::trtcaffe::Type LayerParameter::forward_math() const {
  // @@protoc_insertion_point(field_get:trtcaffe.LayerParameter.forward_math)
  return _internal_forward_math();
}
inline void LayerParameter::_internal_set_forward_math(::trtcaffe::Type value) {
  assert(::trtcaffe::Type_IsValid(value));
  _has_bits_[1] |= 0x08000000u;
  forward_math_ = value;
}
inline void LayerParameter::set_forward_math(::trtcaffe::Type value) {
  _internal_set_forward_math(value);
  // @@protoc_insertion_point(field_set:trtcaffe.LayerParameter.forward_math)
}

// optional .trtcaffe.Type backward_math = 148 [default = FLOAT];
inline bool LayerParameter::_internal_has_backward_math() const {
  bool value = (_has_bits_[1] & 0x10000000u) != 0;
  return value;
}
inline bool LayerParameter::has_backward_math() const {
  return _internal_has_backward_math();
}
inline void LayerParameter::clear_backward_math() {
  backward_math_ = 1;
  _has_bits_[1] &= ~0x10000000u;
}
inline ::trtcaffe::Type LayerParameter::_internal_backward_math() const {
  return static_cast< ::trtcaffe::Type >(backward_math_);
}
inline ::trtcaffe::Type LayerParameter::backward_math() const {
  // @@protoc_insertion_point(field_get:trtcaffe.LayerParameter.backward_math)
  return _internal_backward_math();
}
inline void LayerParameter::_internal_set_backward_math(::trtcaffe::Type value) {
  assert(::trtcaffe::Type_IsValid(value));
  _has_bits_[1] |= 0x10000000u;
  backward_math_ = value;
}
inline void LayerParameter::set_backward_math(::trtcaffe::Type value) {
  _internal_set_backward_math(value);
  // @@protoc_insertion_point(field_set:trtcaffe.LayerParameter.backward_math)
}

// optional bool debug = 149 [default = false];
inline bool LayerParameter::_internal_has_debug() const {
  bool value = (_has_bits_[1] & 0x00800000u) != 0;
  return value;
}
inline bool LayerParameter::has_debug() const {
  return _internal_has_debug();
}
inline void LayerParameter::clear_debug() {
  debug_ = false;
  _has_bits_[1] &= ~0x00800000u;
}
inline bool LayerParameter::_internal_debug() const {
  return debug_;
}
inline bool LayerParameter::debug() const {
  // @@protoc_insertion_point(field_get:trtcaffe.LayerParameter.debug)
  return _internal_debug();
}
inline void LayerParameter::_internal_set_debug(bool value) {
  _has_bits_[1] |= 0x00800000u;
  debug_ = value;
}
inline void LayerParameter::set_debug(bool value) {
  _internal_set_debug(value);
  // @@protoc_insertion_point(field_set:trtcaffe.LayerParameter.debug)
}

// optional int32 cudnn_math_override = 150 [default = -1];
inline bool LayerParameter::_internal_has_cudnn_math_override() const {
  bool value = (_has_bits_[1] & 0x01000000u) != 0;
  return value;
}
inline bool LayerParameter::has_cudnn_math_override() const {
  return _internal_has_cudnn_math_override();
}
inline void LayerParameter::clear_cudnn_math_override() {
  cudnn_math_override_ = -1;
  _has_bits_[1] &= ~0x01000000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 LayerParameter::_internal_cudnn_math_override() const {
  return cudnn_math_override_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 LayerParameter::cudnn_math_override() const {
  // @@protoc_insertion_point(field_get:trtcaffe.LayerParameter.cudnn_math_override)
  return _internal_cudnn_math_override();
}
inline void LayerParameter::_internal_set_cudnn_math_override(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[1] |= 0x01000000u;
  cudnn_math_override_ = value;
}
inline void LayerParameter::set_cudnn_math_override(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_cudnn_math_override(value);
  // @@protoc_insertion_point(field_set:trtcaffe.LayerParameter.cudnn_math_override)
}

// optional .trtcaffe.Phase phase = 10;
inline bool LayerParameter::_internal_has_phase() const {
  bool value = (_has_bits_[1] & 0x00400000u) != 0;
  return value;
}
inline bool LayerParameter::has_phase() const {
  return _internal_has_phase();
}
inline void LayerParameter::clear_phase() {
  phase_ = 0;
  _has_bits_[1] &= ~0x00400000u;
}
inline ::trtcaffe::Phase LayerParameter::_internal_phase() const {
  return static_cast< ::trtcaffe::Phase >(phase_);
}
inline ::trtcaffe::Phase LayerParameter::phase() const {
  // @@protoc_insertion_point(field_get:trtcaffe.LayerParameter.phase)
  return _internal_phase();
}
inline void LayerParameter::_internal_set_phase(::trtcaffe::Phase value) {
  assert(::trtcaffe::Phase_IsValid(value));
  _has_bits_[1] |= 0x00400000u;
  phase_ = value;
}
inline void LayerParameter::set_phase(::trtcaffe::Phase value) {
  _internal_set_phase(value);
  // @@protoc_insertion_point(field_set:trtcaffe.LayerParameter.phase)
}

// repeated float loss_weight = 5;
inline int LayerParameter::_internal_loss_weight_size() const {
  return loss_weight_.size();
}
inline int LayerParameter::loss_weight_size() const {
  return _internal_loss_weight_size();
}
inline void LayerParameter::clear_loss_weight() {
  loss_weight_.Clear();
}
inline float LayerParameter::_internal_loss_weight(int index) const {
  return loss_weight_.Get(index);
}
inline float LayerParameter::loss_weight(int index) const {
  // @@protoc_insertion_point(field_get:trtcaffe.LayerParameter.loss_weight)
  return _internal_loss_weight(index);
}
inline void LayerParameter::set_loss_weight(int index, float value) {
  loss_weight_.Set(index, value);
  // @@protoc_insertion_point(field_set:trtcaffe.LayerParameter.loss_weight)
}
inline void LayerParameter::_internal_add_loss_weight(float value) {
  loss_weight_.Add(value);
}
inline void LayerParameter::add_loss_weight(float value) {
  _internal_add_loss_weight(value);
  // @@protoc_insertion_point(field_add:trtcaffe.LayerParameter.loss_weight)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
LayerParameter::_internal_loss_weight() const {
  return loss_weight_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
LayerParameter::loss_weight() const {
  // @@protoc_insertion_point(field_list:trtcaffe.LayerParameter.loss_weight)
  return _internal_loss_weight();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
LayerParameter::_internal_mutable_loss_weight() {
  return &loss_weight_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
LayerParameter::mutable_loss_weight() {
  // @@protoc_insertion_point(field_mutable_list:trtcaffe.LayerParameter.loss_weight)
  return _internal_mutable_loss_weight();
}

// repeated .trtcaffe.ParamSpec param = 6;
inline int LayerParameter::_internal_param_size() const {
  return param_.size();
}
inline int LayerParameter::param_size() const {
  return _internal_param_size();
}
inline void LayerParameter::clear_param() {
  param_.Clear();
}
inline ::trtcaffe::ParamSpec* LayerParameter::mutable_param(int index) {
  // @@protoc_insertion_point(field_mutable:trtcaffe.LayerParameter.param)
  return param_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::trtcaffe::ParamSpec >*
LayerParameter::mutable_param() {
  // @@protoc_insertion_point(field_mutable_list:trtcaffe.LayerParameter.param)
  return &param_;
}
inline const ::trtcaffe::ParamSpec& LayerParameter::_internal_param(int index) const {
  return param_.Get(index);
}
inline const ::trtcaffe::ParamSpec& LayerParameter::param(int index) const {
  // @@protoc_insertion_point(field_get:trtcaffe.LayerParameter.param)
  return _internal_param(index);
}
inline ::trtcaffe::ParamSpec* LayerParameter::_internal_add_param() {
  return param_.Add();
}
inline ::trtcaffe::ParamSpec* LayerParameter::add_param() {
  // @@protoc_insertion_point(field_add:trtcaffe.LayerParameter.param)
  return _internal_add_param();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::trtcaffe::ParamSpec >&
LayerParameter::param() const {
  // @@protoc_insertion_point(field_list:trtcaffe.LayerParameter.param)
  return param_;
}

// repeated .trtcaffe.BlobProto blobs = 7;
inline int LayerParameter::_internal_blobs_size() const {
  return blobs_.size();
}
inline int LayerParameter::blobs_size() const {
  return _internal_blobs_size();
}
inline void LayerParameter::clear_blobs() {
  blobs_.Clear();
}
inline ::trtcaffe::BlobProto* LayerParameter::mutable_blobs(int index) {
  // @@protoc_insertion_point(field_mutable:trtcaffe.LayerParameter.blobs)
  return blobs_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::trtcaffe::BlobProto >*
LayerParameter::mutable_blobs() {
  // @@protoc_insertion_point(field_mutable_list:trtcaffe.LayerParameter.blobs)
  return &blobs_;
}
inline const ::trtcaffe::BlobProto& LayerParameter::_internal_blobs(int index) const {
  return blobs_.Get(index);
}
inline const ::trtcaffe::BlobProto& LayerParameter::blobs(int index) const {
  // @@protoc_insertion_point(field_get:trtcaffe.LayerParameter.blobs)
  return _internal_blobs(index);
}
inline ::trtcaffe::BlobProto* LayerParameter::_internal_add_blobs() {
  return blobs_.Add();
}
inline ::trtcaffe::BlobProto* LayerParameter::add_blobs() {
  // @@protoc_insertion_point(field_add:trtcaffe.LayerParameter.blobs)
  return _internal_add_blobs();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::trtcaffe::BlobProto >&
LayerParameter::blobs() const {
  // @@protoc_insertion_point(field_list:trtcaffe.LayerParameter.blobs)
  return blobs_;
}

// repeated bool propagate_down = 11;
inline int LayerParameter::_internal_propagate_down_size() const {
  return propagate_down_.size();
}
inline int LayerParameter::propagate_down_size() const {
  return _internal_propagate_down_size();
}
inline void LayerParameter::clear_propagate_down() {
  propagate_down_.Clear();
}
inline bool LayerParameter::_internal_propagate_down(int index) const {
  return propagate_down_.Get(index);
}
inline bool LayerParameter::propagate_down(int index) const {
  // @@protoc_insertion_point(field_get:trtcaffe.LayerParameter.propagate_down)
  return _internal_propagate_down(index);
}
inline void LayerParameter::set_propagate_down(int index, bool value) {
  propagate_down_.Set(index, value);
  // @@protoc_insertion_point(field_set:trtcaffe.LayerParameter.propagate_down)
}
inline void LayerParameter::_internal_add_propagate_down(bool value) {
  propagate_down_.Add(value);
}
inline void LayerParameter::add_propagate_down(bool value) {
  _internal_add_propagate_down(value);
  // @@protoc_insertion_point(field_add:trtcaffe.LayerParameter.propagate_down)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >&
LayerParameter::_internal_propagate_down() const {
  return propagate_down_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >&
LayerParameter::propagate_down() const {
  // @@protoc_insertion_point(field_list:trtcaffe.LayerParameter.propagate_down)
  return _internal_propagate_down();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >*
LayerParameter::_internal_mutable_propagate_down() {
  return &propagate_down_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >*
LayerParameter::mutable_propagate_down() {
  // @@protoc_insertion_point(field_mutable_list:trtcaffe.LayerParameter.propagate_down)
  return _internal_mutable_propagate_down();
}

// repeated .trtcaffe.NetStateRule include = 8;
inline int LayerParameter::_internal_include_size() const {
  return include_.size();
}
inline int LayerParameter::include_size() const {
  return _internal_include_size();
}
inline void LayerParameter::clear_include() {
  include_.Clear();
}
inline ::trtcaffe::NetStateRule* LayerParameter::mutable_include(int index) {
  // @@protoc_insertion_point(field_mutable:trtcaffe.LayerParameter.include)
  return include_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::trtcaffe::NetStateRule >*
LayerParameter::mutable_include() {
  // @@protoc_insertion_point(field_mutable_list:trtcaffe.LayerParameter.include)
  return &include_;
}
inline const ::trtcaffe::NetStateRule& LayerParameter::_internal_include(int index) const {
  return include_.Get(index);
}
inline const ::trtcaffe::NetStateRule& LayerParameter::include(int index) const {
  // @@protoc_insertion_point(field_get:trtcaffe.LayerParameter.include)
  return _internal_include(index);
}
inline ::trtcaffe::NetStateRule* LayerParameter::_internal_add_include() {
  return include_.Add();
}
inline ::trtcaffe::NetStateRule* LayerParameter::add_include() {
  // @@protoc_insertion_point(field_add:trtcaffe.LayerParameter.include)
  return _internal_add_include();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::trtcaffe::NetStateRule >&
LayerParameter::include() const {
  // @@protoc_insertion_point(field_list:trtcaffe.LayerParameter.include)
  return include_;
}

// repeated .trtcaffe.NetStateRule exclude = 9;
inline int LayerParameter::_internal_exclude_size() const {
  return exclude_.size();
}
inline int LayerParameter::exclude_size() const {
  return _internal_exclude_size();
}
inline void LayerParameter::clear_exclude() {
  exclude_.Clear();
}
inline ::trtcaffe::NetStateRule* LayerParameter::mutable_exclude(int index) {
  // @@protoc_insertion_point(field_mutable:trtcaffe.LayerParameter.exclude)
  return exclude_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::trtcaffe::NetStateRule >*
LayerParameter::mutable_exclude() {
  // @@protoc_insertion_point(field_mutable_list:trtcaffe.LayerParameter.exclude)
  return &exclude_;
}
inline const ::trtcaffe::NetStateRule& LayerParameter::_internal_exclude(int index) const {
  return exclude_.Get(index);
}
inline const ::trtcaffe::NetStateRule& LayerParameter::exclude(int index) const {
  // @@protoc_insertion_point(field_get:trtcaffe.LayerParameter.exclude)
  return _internal_exclude(index);
}
inline ::trtcaffe::NetStateRule* LayerParameter::_internal_add_exclude() {
  return exclude_.Add();
}
inline ::trtcaffe::NetStateRule* LayerParameter::add_exclude() {
  // @@protoc_insertion_point(field_add:trtcaffe.LayerParameter.exclude)
  return _internal_add_exclude();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::trtcaffe::NetStateRule >&
LayerParameter::exclude() const {
  // @@protoc_insertion_point(field_list:trtcaffe.LayerParameter.exclude)
  return exclude_;
}

// optional .trtcaffe.TransformationParameter transform_param = 100;
inline bool LayerParameter::_internal_has_transform_param() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || transform_param_ != nullptr);
  return value;
}
inline bool LayerParameter::has_transform_param() const {
  return _internal_has_transform_param();
}
inline void LayerParameter::clear_transform_param() {
  if (transform_param_ != nullptr) transform_param_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::trtcaffe::TransformationParameter& LayerParameter::_internal_transform_param() const {
  const ::trtcaffe::TransformationParameter* p = transform_param_;
  return p != nullptr ? *p : *reinterpret_cast<const ::trtcaffe::TransformationParameter*>(
      &::trtcaffe::_TransformationParameter_default_instance_);
}
inline const ::trtcaffe::TransformationParameter& LayerParameter::transform_param() const {
  // @@protoc_insertion_point(field_get:trtcaffe.LayerParameter.transform_param)
  return _internal_transform_param();
}
inline void LayerParameter::unsafe_arena_set_allocated_transform_param(
    ::trtcaffe::TransformationParameter* transform_param) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(transform_param_);
  }
  transform_param_ = transform_param;
  if (transform_param) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:trtcaffe.LayerParameter.transform_param)
}
inline ::trtcaffe::TransformationParameter* LayerParameter::release_transform_param() {
  auto temp = unsafe_arena_release_transform_param();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::trtcaffe::TransformationParameter* LayerParameter::unsafe_arena_release_transform_param() {
  // @@protoc_insertion_point(field_release:trtcaffe.LayerParameter.transform_param)
  _has_bits_[0] &= ~0x00000004u;
  ::trtcaffe::TransformationParameter* temp = transform_param_;
  transform_param_ = nullptr;
  return temp;
}
inline ::trtcaffe::TransformationParameter* LayerParameter::_internal_mutable_transform_param() {
  _has_bits_[0] |= 0x00000004u;
  if (transform_param_ == nullptr) {
    auto* p = CreateMaybeMessage<::trtcaffe::TransformationParameter>(GetArena());
    transform_param_ = p;
  }
  return transform_param_;
}
inline ::trtcaffe::TransformationParameter* LayerParameter::mutable_transform_param() {
  // @@protoc_insertion_point(field_mutable:trtcaffe.LayerParameter.transform_param)
  return _internal_mutable_transform_param();
}
inline void LayerParameter::set_allocated_transform_param(::trtcaffe::TransformationParameter* transform_param) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete transform_param_;
  }
  if (transform_param) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(transform_param);
    if (message_arena != submessage_arena) {
      transform_param = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, transform_param, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  transform_param_ = transform_param;
  // @@protoc_insertion_point(field_set_allocated:trtcaffe.LayerParameter.transform_param)
}

// optional .trtcaffe.LossParameter loss_param = 101;
inline bool LayerParameter::_internal_has_loss_param() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || loss_param_ != nullptr);
  return value;
}
inline bool LayerParameter::has_loss_param() const {
  return _internal_has_loss_param();
}
inline void LayerParameter::clear_loss_param() {
  if (loss_param_ != nullptr) loss_param_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
inline const ::trtcaffe::LossParameter& LayerParameter::_internal_loss_param() const {
  const ::trtcaffe::LossParameter* p = loss_param_;
  return p != nullptr ? *p : *reinterpret_cast<const ::trtcaffe::LossParameter*>(
      &::trtcaffe::_LossParameter_default_instance_);
}
inline const ::trtcaffe::LossParameter& LayerParameter::loss_param() const {
  // @@protoc_insertion_point(field_get:trtcaffe.LayerParameter.loss_param)
  return _internal_loss_param();
}
inline void LayerParameter::unsafe_arena_set_allocated_loss_param(
    ::trtcaffe::LossParameter* loss_param) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(loss_param_);
  }
  loss_param_ = loss_param;
  if (loss_param) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:trtcaffe.LayerParameter.loss_param)
}
inline ::trtcaffe::LossParameter* LayerParameter::release_loss_param() {
  auto temp = unsafe_arena_release_loss_param();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::trtcaffe::LossParameter* LayerParameter::unsafe_arena_release_loss_param() {
  // @@protoc_insertion_point(field_release:trtcaffe.LayerParameter.loss_param)
  _has_bits_[0] &= ~0x00000008u;
  ::trtcaffe::LossParameter* temp = loss_param_;
  loss_param_ = nullptr;
  return temp;
}
inline ::trtcaffe::LossParameter* LayerParameter::_internal_mutable_loss_param() {
  _has_bits_[0] |= 0x00000008u;
  if (loss_param_ == nullptr) {
    auto* p = CreateMaybeMessage<::trtcaffe::LossParameter>(GetArena());
    loss_param_ = p;
  }
  return loss_param_;
}
inline ::trtcaffe::LossParameter* LayerParameter::mutable_loss_param() {
  // @@protoc_insertion_point(field_mutable:trtcaffe.LayerParameter.loss_param)
  return _internal_mutable_loss_param();
}
inline void LayerParameter::set_allocated_loss_param(::trtcaffe::LossParameter* loss_param) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete loss_param_;
  }
  if (loss_param) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(loss_param);
    if (message_arena != submessage_arena) {
      loss_param = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, loss_param, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  loss_param_ = loss_param;
  // @@protoc_insertion_point(field_set_allocated:trtcaffe.LayerParameter.loss_param)
}

// optional .trtcaffe.AccuracyParameter accuracy_param = 102;
inline bool LayerParameter::_internal_has_accuracy_param() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  PROTOBUF_ASSUME(!value || accuracy_param_ != nullptr);
  return value;
}
inline bool LayerParameter::has_accuracy_param() const {
  return _internal_has_accuracy_param();
}
inline void LayerParameter::clear_accuracy_param() {
  if (accuracy_param_ != nullptr) accuracy_param_->Clear();
  _has_bits_[0] &= ~0x00000010u;
}
inline const ::trtcaffe::AccuracyParameter& LayerParameter::_internal_accuracy_param() const {
  const ::trtcaffe::AccuracyParameter* p = accuracy_param_;
  return p != nullptr ? *p : *reinterpret_cast<const ::trtcaffe::AccuracyParameter*>(
      &::trtcaffe::_AccuracyParameter_default_instance_);
}
inline const ::trtcaffe::AccuracyParameter& LayerParameter::accuracy_param() const {
  // @@protoc_insertion_point(field_get:trtcaffe.LayerParameter.accuracy_param)
  return _internal_accuracy_param();
}
inline void LayerParameter::unsafe_arena_set_allocated_accuracy_param(
    ::trtcaffe::AccuracyParameter* accuracy_param) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(accuracy_param_);
  }
  accuracy_param_ = accuracy_param;
  if (accuracy_param) {
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:trtcaffe.LayerParameter.accuracy_param)
}
inline ::trtcaffe::AccuracyParameter* LayerParameter::release_accuracy_param() {
  auto temp = unsafe_arena_release_accuracy_param();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::trtcaffe::AccuracyParameter* LayerParameter::unsafe_arena_release_accuracy_param() {
  // @@protoc_insertion_point(field_release:trtcaffe.LayerParameter.accuracy_param)
  _has_bits_[0] &= ~0x00000010u;
  ::trtcaffe::AccuracyParameter* temp = accuracy_param_;
  accuracy_param_ = nullptr;
  return temp;
}
inline ::trtcaffe::AccuracyParameter* LayerParameter::_internal_mutable_accuracy_param() {
  _has_bits_[0] |= 0x00000010u;
  if (accuracy_param_ == nullptr) {
    auto* p = CreateMaybeMessage<::trtcaffe::AccuracyParameter>(GetArena());
    accuracy_param_ = p;
  }
  return accuracy_param_;
}
inline ::trtcaffe::AccuracyParameter* LayerParameter::mutable_accuracy_param() {
  // @@protoc_insertion_point(field_mutable:trtcaffe.LayerParameter.accuracy_param)
  return _internal_mutable_accuracy_param();
}
inline void LayerParameter::set_allocated_accuracy_param(::trtcaffe::AccuracyParameter* accuracy_param) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete accuracy_param_;
  }
  if (accuracy_param) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(accuracy_param);
    if (message_arena != submessage_arena) {
      accuracy_param = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, accuracy_param, submessage_arena);
    }
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  accuracy_param_ = accuracy_param;
  // @@protoc_insertion_point(field_set_allocated:trtcaffe.LayerParameter.accuracy_param)
}

// optional .trtcaffe.ArgMaxParameter argmax_param = 103;
inline bool LayerParameter::_internal_has_argmax_param() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  PROTOBUF_ASSUME(!value || argmax_param_ != nullptr);
  return value;
}
inline bool LayerParameter::has_argmax_param() const {
  return _internal_has_argmax_param();
}
inline void LayerParameter::clear_argmax_param() {
  if (argmax_param_ != nullptr) argmax_param_->Clear();
  _has_bits_[0] &= ~0x00000020u;
}
inline const ::trtcaffe::ArgMaxParameter& LayerParameter::_internal_argmax_param() const {
  const ::trtcaffe::ArgMaxParameter* p = argmax_param_;
  return p != nullptr ? *p : *reinterpret_cast<const ::trtcaffe::ArgMaxParameter*>(
      &::trtcaffe::_ArgMaxParameter_default_instance_);
}
inline const ::trtcaffe::ArgMaxParameter& LayerParameter::argmax_param() const {
  // @@protoc_insertion_point(field_get:trtcaffe.LayerParameter.argmax_param)
  return _internal_argmax_param();
}
inline void LayerParameter::unsafe_arena_set_allocated_argmax_param(
    ::trtcaffe::ArgMaxParameter* argmax_param) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(argmax_param_);
  }
  argmax_param_ = argmax_param;
  if (argmax_param) {
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:trtcaffe.LayerParameter.argmax_param)
}
inline ::trtcaffe::ArgMaxParameter* LayerParameter::release_argmax_param() {
  auto temp = unsafe_arena_release_argmax_param();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::trtcaffe::ArgMaxParameter* LayerParameter::unsafe_arena_release_argmax_param() {
  // @@protoc_insertion_point(field_release:trtcaffe.LayerParameter.argmax_param)
  _has_bits_[0] &= ~0x00000020u;
  ::trtcaffe::ArgMaxParameter* temp = argmax_param_;
  argmax_param_ = nullptr;
  return temp;
}
inline ::trtcaffe::ArgMaxParameter* LayerParameter::_internal_mutable_argmax_param() {
  _has_bits_[0] |= 0x00000020u;
  if (argmax_param_ == nullptr) {
    auto* p = CreateMaybeMessage<::trtcaffe::ArgMaxParameter>(GetArena());
    argmax_param_ = p;
  }
  return argmax_param_;
}
inline ::trtcaffe::ArgMaxParameter* LayerParameter::mutable_argmax_param() {
  // @@protoc_insertion_point(field_mutable:trtcaffe.LayerParameter.argmax_param)
  return _internal_mutable_argmax_param();
}
inline void LayerParameter::set_allocated_argmax_param(::trtcaffe::ArgMaxParameter* argmax_param) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete argmax_param_;
  }
  if (argmax_param) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(argmax_param);
    if (message_arena != submessage_arena) {
      argmax_param = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, argmax_param, submessage_arena);
    }
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  argmax_param_ = argmax_param;
  // @@protoc_insertion_point(field_set_allocated:trtcaffe.LayerParameter.argmax_param)
}

// optional .trtcaffe.BatchNormParameter batch_norm_param = 139;
inline bool LayerParameter::_internal_has_batch_norm_param() const {
  bool value = (_has_bits_[1] & 0x00000200u) != 0;
  PROTOBUF_ASSUME(!value || batch_norm_param_ != nullptr);
  return value;
}
inline bool LayerParameter::has_batch_norm_param() const {
  return _internal_has_batch_norm_param();
}
inline void LayerParameter::clear_batch_norm_param() {
  if (batch_norm_param_ != nullptr) batch_norm_param_->Clear();
  _has_bits_[1] &= ~0x00000200u;
}
inline const ::trtcaffe::BatchNormParameter& LayerParameter::_internal_batch_norm_param() const {
  const ::trtcaffe::BatchNormParameter* p = batch_norm_param_;
  return p != nullptr ? *p : *reinterpret_cast<const ::trtcaffe::BatchNormParameter*>(
      &::trtcaffe::_BatchNormParameter_default_instance_);
}
inline const ::trtcaffe::BatchNormParameter& LayerParameter::batch_norm_param() const {
  // @@protoc_insertion_point(field_get:trtcaffe.LayerParameter.batch_norm_param)
  return _internal_batch_norm_param();
}
inline void LayerParameter::unsafe_arena_set_allocated_batch_norm_param(
    ::trtcaffe::BatchNormParameter* batch_norm_param) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(batch_norm_param_);
  }
  batch_norm_param_ = batch_norm_param;
  if (batch_norm_param) {
    _has_bits_[1] |= 0x00000200u;
  } else {
    _has_bits_[1] &= ~0x00000200u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:trtcaffe.LayerParameter.batch_norm_param)
}
inline ::trtcaffe::BatchNormParameter* LayerParameter::release_batch_norm_param() {
  auto temp = unsafe_arena_release_batch_norm_param();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::trtcaffe::BatchNormParameter* LayerParameter::unsafe_arena_release_batch_norm_param() {
  // @@protoc_insertion_point(field_release:trtcaffe.LayerParameter.batch_norm_param)
  _has_bits_[1] &= ~0x00000200u;
  ::trtcaffe::BatchNormParameter* temp = batch_norm_param_;
  batch_norm_param_ = nullptr;
  return temp;
}
inline ::trtcaffe::BatchNormParameter* LayerParameter::_internal_mutable_batch_norm_param() {
  _has_bits_[1] |= 0x00000200u;
  if (batch_norm_param_ == nullptr) {
    auto* p = CreateMaybeMessage<::trtcaffe::BatchNormParameter>(GetArena());
    batch_norm_param_ = p;
  }
  return batch_norm_param_;
}
inline ::trtcaffe::BatchNormParameter* LayerParameter::mutable_batch_norm_param() {
  // @@protoc_insertion_point(field_mutable:trtcaffe.LayerParameter.batch_norm_param)
  return _internal_mutable_batch_norm_param();
}
inline void LayerParameter::set_allocated_batch_norm_param(::trtcaffe::BatchNormParameter* batch_norm_param) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete batch_norm_param_;
  }
  if (batch_norm_param) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(batch_norm_param);
    if (message_arena != submessage_arena) {
      batch_norm_param = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, batch_norm_param, submessage_arena);
    }
    _has_bits_[1] |= 0x00000200u;
  } else {
    _has_bits_[1] &= ~0x00000200u;
  }
  batch_norm_param_ = batch_norm_param;
  // @@protoc_insertion_point(field_set_allocated:trtcaffe.LayerParameter.batch_norm_param)
}

// optional .trtcaffe.BiasParameter bias_param = 141;
inline bool LayerParameter::_internal_has_bias_param() const {
  bool value = (_has_bits_[1] & 0x00000800u) != 0;
  PROTOBUF_ASSUME(!value || bias_param_ != nullptr);
  return value;
}
inline bool LayerParameter::has_bias_param() const {
  return _internal_has_bias_param();
}
inline void LayerParameter::clear_bias_param() {
  if (bias_param_ != nullptr) bias_param_->Clear();
  _has_bits_[1] &= ~0x00000800u;
}
inline const ::trtcaffe::BiasParameter& LayerParameter::_internal_bias_param() const {
  const ::trtcaffe::BiasParameter* p = bias_param_;
  return p != nullptr ? *p : *reinterpret_cast<const ::trtcaffe::BiasParameter*>(
      &::trtcaffe::_BiasParameter_default_instance_);
}
inline const ::trtcaffe::BiasParameter& LayerParameter::bias_param() const {
  // @@protoc_insertion_point(field_get:trtcaffe.LayerParameter.bias_param)
  return _internal_bias_param();
}
inline void LayerParameter::unsafe_arena_set_allocated_bias_param(
    ::trtcaffe::BiasParameter* bias_param) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(bias_param_);
  }
  bias_param_ = bias_param;
  if (bias_param) {
    _has_bits_[1] |= 0x00000800u;
  } else {
    _has_bits_[1] &= ~0x00000800u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:trtcaffe.LayerParameter.bias_param)
}
inline ::trtcaffe::BiasParameter* LayerParameter::release_bias_param() {
  auto temp = unsafe_arena_release_bias_param();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::trtcaffe::BiasParameter* LayerParameter::unsafe_arena_release_bias_param() {
  // @@protoc_insertion_point(field_release:trtcaffe.LayerParameter.bias_param)
  _has_bits_[1] &= ~0x00000800u;
  ::trtcaffe::BiasParameter* temp = bias_param_;
  bias_param_ = nullptr;
  return temp;
}
inline ::trtcaffe::BiasParameter* LayerParameter::_internal_mutable_bias_param() {
  _has_bits_[1] |= 0x00000800u;
  if (bias_param_ == nullptr) {
    auto* p = CreateMaybeMessage<::trtcaffe::BiasParameter>(GetArena());
    bias_param_ = p;
  }
  return bias_param_;
}
inline ::trtcaffe::BiasParameter* LayerParameter::mutable_bias_param() {
  // @@protoc_insertion_point(field_mutable:trtcaffe.LayerParameter.bias_param)
  return _internal_mutable_bias_param();
}
inline void LayerParameter::set_allocated_bias_param(::trtcaffe::BiasParameter* bias_param) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete bias_param_;
  }
  if (bias_param) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(bias_param);
    if (message_arena != submessage_arena) {
      bias_param = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, bias_param, submessage_arena);
    }
    _has_bits_[1] |= 0x00000800u;
  } else {
    _has_bits_[1] &= ~0x00000800u;
  }
  bias_param_ = bias_param;
  // @@protoc_insertion_point(field_set_allocated:trtcaffe.LayerParameter.bias_param)
}

// optional .trtcaffe.ConcatParameter concat_param = 104;
inline bool LayerParameter::_internal_has_concat_param() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  PROTOBUF_ASSUME(!value || concat_param_ != nullptr);
  return value;
}
inline bool LayerParameter::has_concat_param() const {
  return _internal_has_concat_param();
}
inline void LayerParameter::clear_concat_param() {
  if (concat_param_ != nullptr) concat_param_->Clear();
  _has_bits_[0] &= ~0x00000040u;
}
inline const ::trtcaffe::ConcatParameter& LayerParameter::_internal_concat_param() const {
  const ::trtcaffe::ConcatParameter* p = concat_param_;
  return p != nullptr ? *p : *reinterpret_cast<const ::trtcaffe::ConcatParameter*>(
      &::trtcaffe::_ConcatParameter_default_instance_);
}
inline const ::trtcaffe::ConcatParameter& LayerParameter::concat_param() const {
  // @@protoc_insertion_point(field_get:trtcaffe.LayerParameter.concat_param)
  return _internal_concat_param();
}
inline void LayerParameter::unsafe_arena_set_allocated_concat_param(
    ::trtcaffe::ConcatParameter* concat_param) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(concat_param_);
  }
  concat_param_ = concat_param;
  if (concat_param) {
    _has_bits_[0] |= 0x00000040u;
  } else {
    _has_bits_[0] &= ~0x00000040u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:trtcaffe.LayerParameter.concat_param)
}
inline ::trtcaffe::ConcatParameter* LayerParameter::release_concat_param() {
  auto temp = unsafe_arena_release_concat_param();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::trtcaffe::ConcatParameter* LayerParameter::unsafe_arena_release_concat_param() {
  // @@protoc_insertion_point(field_release:trtcaffe.LayerParameter.concat_param)
  _has_bits_[0] &= ~0x00000040u;
  ::trtcaffe::ConcatParameter* temp = concat_param_;
  concat_param_ = nullptr;
  return temp;
}
inline ::trtcaffe::ConcatParameter* LayerParameter::_internal_mutable_concat_param() {
  _has_bits_[0] |= 0x00000040u;
  if (concat_param_ == nullptr) {
    auto* p = CreateMaybeMessage<::trtcaffe::ConcatParameter>(GetArena());
    concat_param_ = p;
  }
  return concat_param_;
}
inline ::trtcaffe::ConcatParameter* LayerParameter::mutable_concat_param() {
  // @@protoc_insertion_point(field_mutable:trtcaffe.LayerParameter.concat_param)
  return _internal_mutable_concat_param();
}
inline void LayerParameter::set_allocated_concat_param(::trtcaffe::ConcatParameter* concat_param) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete concat_param_;
  }
  if (concat_param) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(concat_param);
    if (message_arena != submessage_arena) {
      concat_param = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, concat_param, submessage_arena);
    }
    _has_bits_[0] |= 0x00000040u;
  } else {
    _has_bits_[0] &= ~0x00000040u;
  }
  concat_param_ = concat_param;
  // @@protoc_insertion_point(field_set_allocated:trtcaffe.LayerParameter.concat_param)
}

// optional .trtcaffe.ContrastiveLossParameter contrastive_loss_param = 105;
inline bool LayerParameter::_internal_has_contrastive_loss_param() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  PROTOBUF_ASSUME(!value || contrastive_loss_param_ != nullptr);
  return value;
}
inline bool LayerParameter::has_contrastive_loss_param() const {
  return _internal_has_contrastive_loss_param();
}
inline void LayerParameter::clear_contrastive_loss_param() {
  if (contrastive_loss_param_ != nullptr) contrastive_loss_param_->Clear();
  _has_bits_[0] &= ~0x00000080u;
}
inline const ::trtcaffe::ContrastiveLossParameter& LayerParameter::_internal_contrastive_loss_param() const {
  const ::trtcaffe::ContrastiveLossParameter* p = contrastive_loss_param_;
  return p != nullptr ? *p : *reinterpret_cast<const ::trtcaffe::ContrastiveLossParameter*>(
      &::trtcaffe::_ContrastiveLossParameter_default_instance_);
}
inline const ::trtcaffe::ContrastiveLossParameter& LayerParameter::contrastive_loss_param() const {
  // @@protoc_insertion_point(field_get:trtcaffe.LayerParameter.contrastive_loss_param)
  return _internal_contrastive_loss_param();
}
inline void LayerParameter::unsafe_arena_set_allocated_contrastive_loss_param(
    ::trtcaffe::ContrastiveLossParameter* contrastive_loss_param) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(contrastive_loss_param_);
  }
  contrastive_loss_param_ = contrastive_loss_param;
  if (contrastive_loss_param) {
    _has_bits_[0] |= 0x00000080u;
  } else {
    _has_bits_[0] &= ~0x00000080u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:trtcaffe.LayerParameter.contrastive_loss_param)
}
inline ::trtcaffe::ContrastiveLossParameter* LayerParameter::release_contrastive_loss_param() {
  auto temp = unsafe_arena_release_contrastive_loss_param();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::trtcaffe::ContrastiveLossParameter* LayerParameter::unsafe_arena_release_contrastive_loss_param() {
  // @@protoc_insertion_point(field_release:trtcaffe.LayerParameter.contrastive_loss_param)
  _has_bits_[0] &= ~0x00000080u;
  ::trtcaffe::ContrastiveLossParameter* temp = contrastive_loss_param_;
  contrastive_loss_param_ = nullptr;
  return temp;
}
inline ::trtcaffe::ContrastiveLossParameter* LayerParameter::_internal_mutable_contrastive_loss_param() {
  _has_bits_[0] |= 0x00000080u;
  if (contrastive_loss_param_ == nullptr) {
    auto* p = CreateMaybeMessage<::trtcaffe::ContrastiveLossParameter>(GetArena());
    contrastive_loss_param_ = p;
  }
  return contrastive_loss_param_;
}
inline ::trtcaffe::ContrastiveLossParameter* LayerParameter::mutable_contrastive_loss_param() {
  // @@protoc_insertion_point(field_mutable:trtcaffe.LayerParameter.contrastive_loss_param)
  return _internal_mutable_contrastive_loss_param();
}
inline void LayerParameter::set_allocated_contrastive_loss_param(::trtcaffe::ContrastiveLossParameter* contrastive_loss_param) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete contrastive_loss_param_;
  }
  if (contrastive_loss_param) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(contrastive_loss_param);
    if (message_arena != submessage_arena) {
      contrastive_loss_param = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, contrastive_loss_param, submessage_arena);
    }
    _has_bits_[0] |= 0x00000080u;
  } else {
    _has_bits_[0] &= ~0x00000080u;
  }
  contrastive_loss_param_ = contrastive_loss_param;
  // @@protoc_insertion_point(field_set_allocated:trtcaffe.LayerParameter.contrastive_loss_param)
}

// optional .trtcaffe.ConvolutionParameter convolution_param = 106;
inline bool LayerParameter::_internal_has_convolution_param() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  PROTOBUF_ASSUME(!value || convolution_param_ != nullptr);
  return value;
}
inline bool LayerParameter::has_convolution_param() const {
  return _internal_has_convolution_param();
}
inline void LayerParameter::clear_convolution_param() {
  if (convolution_param_ != nullptr) convolution_param_->Clear();
  _has_bits_[0] &= ~0x00000100u;
}
inline const ::trtcaffe::ConvolutionParameter& LayerParameter::_internal_convolution_param() const {
  const ::trtcaffe::ConvolutionParameter* p = convolution_param_;
  return p != nullptr ? *p : *reinterpret_cast<const ::trtcaffe::ConvolutionParameter*>(
      &::trtcaffe::_ConvolutionParameter_default_instance_);
}
inline const ::trtcaffe::ConvolutionParameter& LayerParameter::convolution_param() const {
  // @@protoc_insertion_point(field_get:trtcaffe.LayerParameter.convolution_param)
  return _internal_convolution_param();
}
inline void LayerParameter::unsafe_arena_set_allocated_convolution_param(
    ::trtcaffe::ConvolutionParameter* convolution_param) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(convolution_param_);
  }
  convolution_param_ = convolution_param;
  if (convolution_param) {
    _has_bits_[0] |= 0x00000100u;
  } else {
    _has_bits_[0] &= ~0x00000100u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:trtcaffe.LayerParameter.convolution_param)
}
inline ::trtcaffe::ConvolutionParameter* LayerParameter::release_convolution_param() {
  auto temp = unsafe_arena_release_convolution_param();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::trtcaffe::ConvolutionParameter* LayerParameter::unsafe_arena_release_convolution_param() {
  // @@protoc_insertion_point(field_release:trtcaffe.LayerParameter.convolution_param)
  _has_bits_[0] &= ~0x00000100u;
  ::trtcaffe::ConvolutionParameter* temp = convolution_param_;
  convolution_param_ = nullptr;
  return temp;
}
inline ::trtcaffe::ConvolutionParameter* LayerParameter::_internal_mutable_convolution_param() {
  _has_bits_[0] |= 0x00000100u;
  if (convolution_param_ == nullptr) {
    auto* p = CreateMaybeMessage<::trtcaffe::ConvolutionParameter>(GetArena());
    convolution_param_ = p;
  }
  return convolution_param_;
}
inline ::trtcaffe::ConvolutionParameter* LayerParameter::mutable_convolution_param() {
  // @@protoc_insertion_point(field_mutable:trtcaffe.LayerParameter.convolution_param)
  return _internal_mutable_convolution_param();
}
inline void LayerParameter::set_allocated_convolution_param(::trtcaffe::ConvolutionParameter* convolution_param) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete convolution_param_;
  }
  if (convolution_param) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(convolution_param);
    if (message_arena != submessage_arena) {
      convolution_param = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, convolution_param, submessage_arena);
    }
    _has_bits_[0] |= 0x00000100u;
  } else {
    _has_bits_[0] &= ~0x00000100u;
  }
  convolution_param_ = convolution_param;
  // @@protoc_insertion_point(field_set_allocated:trtcaffe.LayerParameter.convolution_param)
}

// optional .trtcaffe.CropParameter crop_param = 144;
inline bool LayerParameter::_internal_has_crop_param() const {
  bool value = (_has_bits_[1] & 0x00004000u) != 0;
  PROTOBUF_ASSUME(!value || crop_param_ != nullptr);
  return value;
}
inline bool LayerParameter::has_crop_param() const {
  return _internal_has_crop_param();
}
inline void LayerParameter::clear_crop_param() {
  if (crop_param_ != nullptr) crop_param_->Clear();
  _has_bits_[1] &= ~0x00004000u;
}
inline const ::trtcaffe::CropParameter& LayerParameter::_internal_crop_param() const {
  const ::trtcaffe::CropParameter* p = crop_param_;
  return p != nullptr ? *p : *reinterpret_cast<const ::trtcaffe::CropParameter*>(
      &::trtcaffe::_CropParameter_default_instance_);
}
inline const ::trtcaffe::CropParameter& LayerParameter::crop_param() const {
  // @@protoc_insertion_point(field_get:trtcaffe.LayerParameter.crop_param)
  return _internal_crop_param();
}
inline void LayerParameter::unsafe_arena_set_allocated_crop_param(
    ::trtcaffe::CropParameter* crop_param) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(crop_param_);
  }
  crop_param_ = crop_param;
  if (crop_param) {
    _has_bits_[1] |= 0x00004000u;
  } else {
    _has_bits_[1] &= ~0x00004000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:trtcaffe.LayerParameter.crop_param)
}
inline ::trtcaffe::CropParameter* LayerParameter::release_crop_param() {
  auto temp = unsafe_arena_release_crop_param();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::trtcaffe::CropParameter* LayerParameter::unsafe_arena_release_crop_param() {
  // @@protoc_insertion_point(field_release:trtcaffe.LayerParameter.crop_param)
  _has_bits_[1] &= ~0x00004000u;
  ::trtcaffe::CropParameter* temp = crop_param_;
  crop_param_ = nullptr;
  return temp;
}
inline ::trtcaffe::CropParameter* LayerParameter::_internal_mutable_crop_param() {
  _has_bits_[1] |= 0x00004000u;
  if (crop_param_ == nullptr) {
    auto* p = CreateMaybeMessage<::trtcaffe::CropParameter>(GetArena());
    crop_param_ = p;
  }
  return crop_param_;
}
inline ::trtcaffe::CropParameter* LayerParameter::mutable_crop_param() {
  // @@protoc_insertion_point(field_mutable:trtcaffe.LayerParameter.crop_param)
  return _internal_mutable_crop_param();
}
inline void LayerParameter::set_allocated_crop_param(::trtcaffe::CropParameter* crop_param) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete crop_param_;
  }
  if (crop_param) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(crop_param);
    if (message_arena != submessage_arena) {
      crop_param = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, crop_param, submessage_arena);
    }
    _has_bits_[1] |= 0x00004000u;
  } else {
    _has_bits_[1] &= ~0x00004000u;
  }
  crop_param_ = crop_param;
  // @@protoc_insertion_point(field_set_allocated:trtcaffe.LayerParameter.crop_param)
}

// optional .trtcaffe.DataParameter data_param = 107;
inline bool LayerParameter::_internal_has_data_param() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  PROTOBUF_ASSUME(!value || data_param_ != nullptr);
  return value;
}
inline bool LayerParameter::has_data_param() const {
  return _internal_has_data_param();
}
inline void LayerParameter::clear_data_param() {
  if (data_param_ != nullptr) data_param_->Clear();
  _has_bits_[0] &= ~0x00000200u;
}
inline const ::trtcaffe::DataParameter& LayerParameter::_internal_data_param() const {
  const ::trtcaffe::DataParameter* p = data_param_;
  return p != nullptr ? *p : *reinterpret_cast<const ::trtcaffe::DataParameter*>(
      &::trtcaffe::_DataParameter_default_instance_);
}
inline const ::trtcaffe::DataParameter& LayerParameter::data_param() const {
  // @@protoc_insertion_point(field_get:trtcaffe.LayerParameter.data_param)
  return _internal_data_param();
}
inline void LayerParameter::unsafe_arena_set_allocated_data_param(
    ::trtcaffe::DataParameter* data_param) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(data_param_);
  }
  data_param_ = data_param;
  if (data_param) {
    _has_bits_[0] |= 0x00000200u;
  } else {
    _has_bits_[0] &= ~0x00000200u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:trtcaffe.LayerParameter.data_param)
}
inline ::trtcaffe::DataParameter* LayerParameter::release_data_param() {
  auto temp = unsafe_arena_release_data_param();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::trtcaffe::DataParameter* LayerParameter::unsafe_arena_release_data_param() {
  // @@protoc_insertion_point(field_release:trtcaffe.LayerParameter.data_param)
  _has_bits_[0] &= ~0x00000200u;
  ::trtcaffe::DataParameter* temp = data_param_;
  data_param_ = nullptr;
  return temp;
}
inline ::trtcaffe::DataParameter* LayerParameter::_internal_mutable_data_param() {
  _has_bits_[0] |= 0x00000200u;
  if (data_param_ == nullptr) {
    auto* p = CreateMaybeMessage<::trtcaffe::DataParameter>(GetArena());
    data_param_ = p;
  }
  return data_param_;
}
inline ::trtcaffe::DataParameter* LayerParameter::mutable_data_param() {
  // @@protoc_insertion_point(field_mutable:trtcaffe.LayerParameter.data_param)
  return _internal_mutable_data_param();
}
inline void LayerParameter::set_allocated_data_param(::trtcaffe::DataParameter* data_param) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete data_param_;
  }
  if (data_param) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(data_param);
    if (message_arena != submessage_arena) {
      data_param = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, data_param, submessage_arena);
    }
    _has_bits_[0] |= 0x00000200u;
  } else {
    _has_bits_[0] &= ~0x00000200u;
  }
  data_param_ = data_param;
  // @@protoc_insertion_point(field_set_allocated:trtcaffe.LayerParameter.data_param)
}

// optional .trtcaffe.DropoutParameter dropout_param = 108;
inline bool LayerParameter::_internal_has_dropout_param() const {
  bool value = (_has_bits_[0] & 0x00000400u) != 0;
  PROTOBUF_ASSUME(!value || dropout_param_ != nullptr);
  return value;
}
inline bool LayerParameter::has_dropout_param() const {
  return _internal_has_dropout_param();
}
inline void LayerParameter::clear_dropout_param() {
  if (dropout_param_ != nullptr) dropout_param_->Clear();
  _has_bits_[0] &= ~0x00000400u;
}
inline const ::trtcaffe::DropoutParameter& LayerParameter::_internal_dropout_param() const {
  const ::trtcaffe::DropoutParameter* p = dropout_param_;
  return p != nullptr ? *p : *reinterpret_cast<const ::trtcaffe::DropoutParameter*>(
      &::trtcaffe::_DropoutParameter_default_instance_);
}
inline const ::trtcaffe::DropoutParameter& LayerParameter::dropout_param() const {
  // @@protoc_insertion_point(field_get:trtcaffe.LayerParameter.dropout_param)
  return _internal_dropout_param();
}
inline void LayerParameter::unsafe_arena_set_allocated_dropout_param(
    ::trtcaffe::DropoutParameter* dropout_param) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(dropout_param_);
  }
  dropout_param_ = dropout_param;
  if (dropout_param) {
    _has_bits_[0] |= 0x00000400u;
  } else {
    _has_bits_[0] &= ~0x00000400u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:trtcaffe.LayerParameter.dropout_param)
}
inline ::trtcaffe::DropoutParameter* LayerParameter::release_dropout_param() {
  auto temp = unsafe_arena_release_dropout_param();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::trtcaffe::DropoutParameter* LayerParameter::unsafe_arena_release_dropout_param() {
  // @@protoc_insertion_point(field_release:trtcaffe.LayerParameter.dropout_param)
  _has_bits_[0] &= ~0x00000400u;
  ::trtcaffe::DropoutParameter* temp = dropout_param_;
  dropout_param_ = nullptr;
  return temp;
}
inline ::trtcaffe::DropoutParameter* LayerParameter::_internal_mutable_dropout_param() {
  _has_bits_[0] |= 0x00000400u;
  if (dropout_param_ == nullptr) {
    auto* p = CreateMaybeMessage<::trtcaffe::DropoutParameter>(GetArena());
    dropout_param_ = p;
  }
  return dropout_param_;
}
inline ::trtcaffe::DropoutParameter* LayerParameter::mutable_dropout_param() {
  // @@protoc_insertion_point(field_mutable:trtcaffe.LayerParameter.dropout_param)
  return _internal_mutable_dropout_param();
}
inline void LayerParameter::set_allocated_dropout_param(::trtcaffe::DropoutParameter* dropout_param) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete dropout_param_;
  }
  if (dropout_param) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(dropout_param);
    if (message_arena != submessage_arena) {
      dropout_param = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, dropout_param, submessage_arena);
    }
    _has_bits_[0] |= 0x00000400u;
  } else {
    _has_bits_[0] &= ~0x00000400u;
  }
  dropout_param_ = dropout_param;
  // @@protoc_insertion_point(field_set_allocated:trtcaffe.LayerParameter.dropout_param)
}

// optional .trtcaffe.DummyDataParameter dummy_data_param = 109;
inline bool LayerParameter::_internal_has_dummy_data_param() const {
  bool value = (_has_bits_[0] & 0x00000800u) != 0;
  PROTOBUF_ASSUME(!value || dummy_data_param_ != nullptr);
  return value;
}
inline bool LayerParameter::has_dummy_data_param() const {
  return _internal_has_dummy_data_param();
}
inline void LayerParameter::clear_dummy_data_param() {
  if (dummy_data_param_ != nullptr) dummy_data_param_->Clear();
  _has_bits_[0] &= ~0x00000800u;
}
inline const ::trtcaffe::DummyDataParameter& LayerParameter::_internal_dummy_data_param() const {
  const ::trtcaffe::DummyDataParameter* p = dummy_data_param_;
  return p != nullptr ? *p : *reinterpret_cast<const ::trtcaffe::DummyDataParameter*>(
      &::trtcaffe::_DummyDataParameter_default_instance_);
}
inline const ::trtcaffe::DummyDataParameter& LayerParameter::dummy_data_param() const {
  // @@protoc_insertion_point(field_get:trtcaffe.LayerParameter.dummy_data_param)
  return _internal_dummy_data_param();
}
inline void LayerParameter::unsafe_arena_set_allocated_dummy_data_param(
    ::trtcaffe::DummyDataParameter* dummy_data_param) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(dummy_data_param_);
  }
  dummy_data_param_ = dummy_data_param;
  if (dummy_data_param) {
    _has_bits_[0] |= 0x00000800u;
  } else {
    _has_bits_[0] &= ~0x00000800u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:trtcaffe.LayerParameter.dummy_data_param)
}
inline ::trtcaffe::DummyDataParameter* LayerParameter::release_dummy_data_param() {
  auto temp = unsafe_arena_release_dummy_data_param();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::trtcaffe::DummyDataParameter* LayerParameter::unsafe_arena_release_dummy_data_param() {
  // @@protoc_insertion_point(field_release:trtcaffe.LayerParameter.dummy_data_param)
  _has_bits_[0] &= ~0x00000800u;
  ::trtcaffe::DummyDataParameter* temp = dummy_data_param_;
  dummy_data_param_ = nullptr;
  return temp;
}
inline ::trtcaffe::DummyDataParameter* LayerParameter::_internal_mutable_dummy_data_param() {
  _has_bits_[0] |= 0x00000800u;
  if (dummy_data_param_ == nullptr) {
    auto* p = CreateMaybeMessage<::trtcaffe::DummyDataParameter>(GetArena());
    dummy_data_param_ = p;
  }
  return dummy_data_param_;
}
inline ::trtcaffe::DummyDataParameter* LayerParameter::mutable_dummy_data_param() {
  // @@protoc_insertion_point(field_mutable:trtcaffe.LayerParameter.dummy_data_param)
  return _internal_mutable_dummy_data_param();
}
inline void LayerParameter::set_allocated_dummy_data_param(::trtcaffe::DummyDataParameter* dummy_data_param) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete dummy_data_param_;
  }
  if (dummy_data_param) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(dummy_data_param);
    if (message_arena != submessage_arena) {
      dummy_data_param = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, dummy_data_param, submessage_arena);
    }
    _has_bits_[0] |= 0x00000800u;
  } else {
    _has_bits_[0] &= ~0x00000800u;
  }
  dummy_data_param_ = dummy_data_param;
  // @@protoc_insertion_point(field_set_allocated:trtcaffe.LayerParameter.dummy_data_param)
}

// optional .trtcaffe.EltwiseParameter eltwise_param = 110;
inline bool LayerParameter::_internal_has_eltwise_param() const {
  bool value = (_has_bits_[0] & 0x00001000u) != 0;
  PROTOBUF_ASSUME(!value || eltwise_param_ != nullptr);
  return value;
}
inline bool LayerParameter::has_eltwise_param() const {
  return _internal_has_eltwise_param();
}
inline void LayerParameter::clear_eltwise_param() {
  if (eltwise_param_ != nullptr) eltwise_param_->Clear();
  _has_bits_[0] &= ~0x00001000u;
}
inline const ::trtcaffe::EltwiseParameter& LayerParameter::_internal_eltwise_param() const {
  const ::trtcaffe::EltwiseParameter* p = eltwise_param_;
  return p != nullptr ? *p : *reinterpret_cast<const ::trtcaffe::EltwiseParameter*>(
      &::trtcaffe::_EltwiseParameter_default_instance_);
}
inline const ::trtcaffe::EltwiseParameter& LayerParameter::eltwise_param() const {
  // @@protoc_insertion_point(field_get:trtcaffe.LayerParameter.eltwise_param)
  return _internal_eltwise_param();
}
inline void LayerParameter::unsafe_arena_set_allocated_eltwise_param(
    ::trtcaffe::EltwiseParameter* eltwise_param) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(eltwise_param_);
  }
  eltwise_param_ = eltwise_param;
  if (eltwise_param) {
    _has_bits_[0] |= 0x00001000u;
  } else {
    _has_bits_[0] &= ~0x00001000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:trtcaffe.LayerParameter.eltwise_param)
}
inline ::trtcaffe::EltwiseParameter* LayerParameter::release_eltwise_param() {
  auto temp = unsafe_arena_release_eltwise_param();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::trtcaffe::EltwiseParameter* LayerParameter::unsafe_arena_release_eltwise_param() {
  // @@protoc_insertion_point(field_release:trtcaffe.LayerParameter.eltwise_param)
  _has_bits_[0] &= ~0x00001000u;
  ::trtcaffe::EltwiseParameter* temp = eltwise_param_;
  eltwise_param_ = nullptr;
  return temp;
}
inline ::trtcaffe::EltwiseParameter* LayerParameter::_internal_mutable_eltwise_param() {
  _has_bits_[0] |= 0x00001000u;
  if (eltwise_param_ == nullptr) {
    auto* p = CreateMaybeMessage<::trtcaffe::EltwiseParameter>(GetArena());
    eltwise_param_ = p;
  }
  return eltwise_param_;
}
inline ::trtcaffe::EltwiseParameter* LayerParameter::mutable_eltwise_param() {
  // @@protoc_insertion_point(field_mutable:trtcaffe.LayerParameter.eltwise_param)
  return _internal_mutable_eltwise_param();
}
inline void LayerParameter::set_allocated_eltwise_param(::trtcaffe::EltwiseParameter* eltwise_param) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete eltwise_param_;
  }
  if (eltwise_param) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(eltwise_param);
    if (message_arena != submessage_arena) {
      eltwise_param = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, eltwise_param, submessage_arena);
    }
    _has_bits_[0] |= 0x00001000u;
  } else {
    _has_bits_[0] &= ~0x00001000u;
  }
  eltwise_param_ = eltwise_param;
  // @@protoc_insertion_point(field_set_allocated:trtcaffe.LayerParameter.eltwise_param)
}

// optional .trtcaffe.ELUParameter elu_param = 140;
inline bool LayerParameter::_internal_has_elu_param() const {
  bool value = (_has_bits_[1] & 0x00000400u) != 0;
  PROTOBUF_ASSUME(!value || elu_param_ != nullptr);
  return value;
}
inline bool LayerParameter::has_elu_param() const {
  return _internal_has_elu_param();
}
inline void LayerParameter::clear_elu_param() {
  if (elu_param_ != nullptr) elu_param_->Clear();
  _has_bits_[1] &= ~0x00000400u;
}
inline const ::trtcaffe::ELUParameter& LayerParameter::_internal_elu_param() const {
  const ::trtcaffe::ELUParameter* p = elu_param_;
  return p != nullptr ? *p : *reinterpret_cast<const ::trtcaffe::ELUParameter*>(
      &::trtcaffe::_ELUParameter_default_instance_);
}
inline const ::trtcaffe::ELUParameter& LayerParameter::elu_param() const {
  // @@protoc_insertion_point(field_get:trtcaffe.LayerParameter.elu_param)
  return _internal_elu_param();
}
inline void LayerParameter::unsafe_arena_set_allocated_elu_param(
    ::trtcaffe::ELUParameter* elu_param) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(elu_param_);
  }
  elu_param_ = elu_param;
  if (elu_param) {
    _has_bits_[1] |= 0x00000400u;
  } else {
    _has_bits_[1] &= ~0x00000400u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:trtcaffe.LayerParameter.elu_param)
}
inline ::trtcaffe::ELUParameter* LayerParameter::release_elu_param() {
  auto temp = unsafe_arena_release_elu_param();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::trtcaffe::ELUParameter* LayerParameter::unsafe_arena_release_elu_param() {
  // @@protoc_insertion_point(field_release:trtcaffe.LayerParameter.elu_param)
  _has_bits_[1] &= ~0x00000400u;
  ::trtcaffe::ELUParameter* temp = elu_param_;
  elu_param_ = nullptr;
  return temp;
}
inline ::trtcaffe::ELUParameter* LayerParameter::_internal_mutable_elu_param() {
  _has_bits_[1] |= 0x00000400u;
  if (elu_param_ == nullptr) {
    auto* p = CreateMaybeMessage<::trtcaffe::ELUParameter>(GetArena());
    elu_param_ = p;
  }
  return elu_param_;
}
inline ::trtcaffe::ELUParameter* LayerParameter::mutable_elu_param() {
  // @@protoc_insertion_point(field_mutable:trtcaffe.LayerParameter.elu_param)
  return _internal_mutable_elu_param();
}
inline void LayerParameter::set_allocated_elu_param(::trtcaffe::ELUParameter* elu_param) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete elu_param_;
  }
  if (elu_param) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(elu_param);
    if (message_arena != submessage_arena) {
      elu_param = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, elu_param, submessage_arena);
    }
    _has_bits_[1] |= 0x00000400u;
  } else {
    _has_bits_[1] &= ~0x00000400u;
  }
  elu_param_ = elu_param;
  // @@protoc_insertion_point(field_set_allocated:trtcaffe.LayerParameter.elu_param)
}

// optional .trtcaffe.EmbedParameter embed_param = 137;
inline bool LayerParameter::_internal_has_embed_param() const {
  bool value = (_has_bits_[1] & 0x00000080u) != 0;
  PROTOBUF_ASSUME(!value || embed_param_ != nullptr);
  return value;
}
inline bool LayerParameter::has_embed_param() const {
  return _internal_has_embed_param();
}
inline void LayerParameter::clear_embed_param() {
  if (embed_param_ != nullptr) embed_param_->Clear();
  _has_bits_[1] &= ~0x00000080u;
}
inline const ::trtcaffe::EmbedParameter& LayerParameter::_internal_embed_param() const {
  const ::trtcaffe::EmbedParameter* p = embed_param_;
  return p != nullptr ? *p : *reinterpret_cast<const ::trtcaffe::EmbedParameter*>(
      &::trtcaffe::_EmbedParameter_default_instance_);
}
inline const ::trtcaffe::EmbedParameter& LayerParameter::embed_param() const {
  // @@protoc_insertion_point(field_get:trtcaffe.LayerParameter.embed_param)
  return _internal_embed_param();
}
inline void LayerParameter::unsafe_arena_set_allocated_embed_param(
    ::trtcaffe::EmbedParameter* embed_param) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(embed_param_);
  }
  embed_param_ = embed_param;
  if (embed_param) {
    _has_bits_[1] |= 0x00000080u;
  } else {
    _has_bits_[1] &= ~0x00000080u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:trtcaffe.LayerParameter.embed_param)
}
inline ::trtcaffe::EmbedParameter* LayerParameter::release_embed_param() {
  auto temp = unsafe_arena_release_embed_param();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::trtcaffe::EmbedParameter* LayerParameter::unsafe_arena_release_embed_param() {
  // @@protoc_insertion_point(field_release:trtcaffe.LayerParameter.embed_param)
  _has_bits_[1] &= ~0x00000080u;
  ::trtcaffe::EmbedParameter* temp = embed_param_;
  embed_param_ = nullptr;
  return temp;
}
inline ::trtcaffe::EmbedParameter* LayerParameter::_internal_mutable_embed_param() {
  _has_bits_[1] |= 0x00000080u;
  if (embed_param_ == nullptr) {
    auto* p = CreateMaybeMessage<::trtcaffe::EmbedParameter>(GetArena());
    embed_param_ = p;
  }
  return embed_param_;
}
inline ::trtcaffe::EmbedParameter* LayerParameter::mutable_embed_param() {
  // @@protoc_insertion_point(field_mutable:trtcaffe.LayerParameter.embed_param)
  return _internal_mutable_embed_param();
}
inline void LayerParameter::set_allocated_embed_param(::trtcaffe::EmbedParameter* embed_param) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete embed_param_;
  }
  if (embed_param) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(embed_param);
    if (message_arena != submessage_arena) {
      embed_param = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, embed_param, submessage_arena);
    }
    _has_bits_[1] |= 0x00000080u;
  } else {
    _has_bits_[1] &= ~0x00000080u;
  }
  embed_param_ = embed_param;
  // @@protoc_insertion_point(field_set_allocated:trtcaffe.LayerParameter.embed_param)
}

// optional .trtcaffe.ExpParameter exp_param = 111;
inline bool LayerParameter::_internal_has_exp_param() const {
  bool value = (_has_bits_[0] & 0x00002000u) != 0;
  PROTOBUF_ASSUME(!value || exp_param_ != nullptr);
  return value;
}
inline bool LayerParameter::has_exp_param() const {
  return _internal_has_exp_param();
}
inline void LayerParameter::clear_exp_param() {
  if (exp_param_ != nullptr) exp_param_->Clear();
  _has_bits_[0] &= ~0x00002000u;
}
inline const ::trtcaffe::ExpParameter& LayerParameter::_internal_exp_param() const {
  const ::trtcaffe::ExpParameter* p = exp_param_;
  return p != nullptr ? *p : *reinterpret_cast<const ::trtcaffe::ExpParameter*>(
      &::trtcaffe::_ExpParameter_default_instance_);
}
inline const ::trtcaffe::ExpParameter& LayerParameter::exp_param() const {
  // @@protoc_insertion_point(field_get:trtcaffe.LayerParameter.exp_param)
  return _internal_exp_param();
}
inline void LayerParameter::unsafe_arena_set_allocated_exp_param(
    ::trtcaffe::ExpParameter* exp_param) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(exp_param_);
  }
  exp_param_ = exp_param;
  if (exp_param) {
    _has_bits_[0] |= 0x00002000u;
  } else {
    _has_bits_[0] &= ~0x00002000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:trtcaffe.LayerParameter.exp_param)
}
inline ::trtcaffe::ExpParameter* LayerParameter::release_exp_param() {
  auto temp = unsafe_arena_release_exp_param();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::trtcaffe::ExpParameter* LayerParameter::unsafe_arena_release_exp_param() {
  // @@protoc_insertion_point(field_release:trtcaffe.LayerParameter.exp_param)
  _has_bits_[0] &= ~0x00002000u;
  ::trtcaffe::ExpParameter* temp = exp_param_;
  exp_param_ = nullptr;
  return temp;
}
inline ::trtcaffe::ExpParameter* LayerParameter::_internal_mutable_exp_param() {
  _has_bits_[0] |= 0x00002000u;
  if (exp_param_ == nullptr) {
    auto* p = CreateMaybeMessage<::trtcaffe::ExpParameter>(GetArena());
    exp_param_ = p;
  }
  return exp_param_;
}
inline ::trtcaffe::ExpParameter* LayerParameter::mutable_exp_param() {
  // @@protoc_insertion_point(field_mutable:trtcaffe.LayerParameter.exp_param)
  return _internal_mutable_exp_param();
}
inline void LayerParameter::set_allocated_exp_param(::trtcaffe::ExpParameter* exp_param) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete exp_param_;
  }
  if (exp_param) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(exp_param);
    if (message_arena != submessage_arena) {
      exp_param = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, exp_param, submessage_arena);
    }
    _has_bits_[0] |= 0x00002000u;
  } else {
    _has_bits_[0] &= ~0x00002000u;
  }
  exp_param_ = exp_param;
  // @@protoc_insertion_point(field_set_allocated:trtcaffe.LayerParameter.exp_param)
}

// optional .trtcaffe.FlattenParameter flatten_param = 135;
inline bool LayerParameter::_internal_has_flatten_param() const {
  bool value = (_has_bits_[1] & 0x00000020u) != 0;
  PROTOBUF_ASSUME(!value || flatten_param_ != nullptr);
  return value;
}
inline bool LayerParameter::has_flatten_param() const {
  return _internal_has_flatten_param();
}
inline void LayerParameter::clear_flatten_param() {
  if (flatten_param_ != nullptr) flatten_param_->Clear();
  _has_bits_[1] &= ~0x00000020u;
}
inline const ::trtcaffe::FlattenParameter& LayerParameter::_internal_flatten_param() const {
  const ::trtcaffe::FlattenParameter* p = flatten_param_;
  return p != nullptr ? *p : *reinterpret_cast<const ::trtcaffe::FlattenParameter*>(
      &::trtcaffe::_FlattenParameter_default_instance_);
}
inline const ::trtcaffe::FlattenParameter& LayerParameter::flatten_param() const {
  // @@protoc_insertion_point(field_get:trtcaffe.LayerParameter.flatten_param)
  return _internal_flatten_param();
}
inline void LayerParameter::unsafe_arena_set_allocated_flatten_param(
    ::trtcaffe::FlattenParameter* flatten_param) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(flatten_param_);
  }
  flatten_param_ = flatten_param;
  if (flatten_param) {
    _has_bits_[1] |= 0x00000020u;
  } else {
    _has_bits_[1] &= ~0x00000020u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:trtcaffe.LayerParameter.flatten_param)
}
inline ::trtcaffe::FlattenParameter* LayerParameter::release_flatten_param() {
  auto temp = unsafe_arena_release_flatten_param();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::trtcaffe::FlattenParameter* LayerParameter::unsafe_arena_release_flatten_param() {
  // @@protoc_insertion_point(field_release:trtcaffe.LayerParameter.flatten_param)
  _has_bits_[1] &= ~0x00000020u;
  ::trtcaffe::FlattenParameter* temp = flatten_param_;
  flatten_param_ = nullptr;
  return temp;
}
inline ::trtcaffe::FlattenParameter* LayerParameter::_internal_mutable_flatten_param() {
  _has_bits_[1] |= 0x00000020u;
  if (flatten_param_ == nullptr) {
    auto* p = CreateMaybeMessage<::trtcaffe::FlattenParameter>(GetArena());
    flatten_param_ = p;
  }
  return flatten_param_;
}
inline ::trtcaffe::FlattenParameter* LayerParameter::mutable_flatten_param() {
  // @@protoc_insertion_point(field_mutable:trtcaffe.LayerParameter.flatten_param)
  return _internal_mutable_flatten_param();
}
inline void LayerParameter::set_allocated_flatten_param(::trtcaffe::FlattenParameter* flatten_param) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete flatten_param_;
  }
  if (flatten_param) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(flatten_param);
    if (message_arena != submessage_arena) {
      flatten_param = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, flatten_param, submessage_arena);
    }
    _has_bits_[1] |= 0x00000020u;
  } else {
    _has_bits_[1] &= ~0x00000020u;
  }
  flatten_param_ = flatten_param;
  // @@protoc_insertion_point(field_set_allocated:trtcaffe.LayerParameter.flatten_param)
}

// optional .trtcaffe.HDF5DataParameter hdf5_data_param = 112;
inline bool LayerParameter::_internal_has_hdf5_data_param() const {
  bool value = (_has_bits_[0] & 0x00004000u) != 0;
  PROTOBUF_ASSUME(!value || hdf5_data_param_ != nullptr);
  return value;
}
inline bool LayerParameter::has_hdf5_data_param() const {
  return _internal_has_hdf5_data_param();
}
inline void LayerParameter::clear_hdf5_data_param() {
  if (hdf5_data_param_ != nullptr) hdf5_data_param_->Clear();
  _has_bits_[0] &= ~0x00004000u;
}
inline const ::trtcaffe::HDF5DataParameter& LayerParameter::_internal_hdf5_data_param() const {
  const ::trtcaffe::HDF5DataParameter* p = hdf5_data_param_;
  return p != nullptr ? *p : *reinterpret_cast<const ::trtcaffe::HDF5DataParameter*>(
      &::trtcaffe::_HDF5DataParameter_default_instance_);
}
inline const ::trtcaffe::HDF5DataParameter& LayerParameter::hdf5_data_param() const {
  // @@protoc_insertion_point(field_get:trtcaffe.LayerParameter.hdf5_data_param)
  return _internal_hdf5_data_param();
}
inline void LayerParameter::unsafe_arena_set_allocated_hdf5_data_param(
    ::trtcaffe::HDF5DataParameter* hdf5_data_param) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(hdf5_data_param_);
  }
  hdf5_data_param_ = hdf5_data_param;
  if (hdf5_data_param) {
    _has_bits_[0] |= 0x00004000u;
  } else {
    _has_bits_[0] &= ~0x00004000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:trtcaffe.LayerParameter.hdf5_data_param)
}
inline ::trtcaffe::HDF5DataParameter* LayerParameter::release_hdf5_data_param() {
  auto temp = unsafe_arena_release_hdf5_data_param();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::trtcaffe::HDF5DataParameter* LayerParameter::unsafe_arena_release_hdf5_data_param() {
  // @@protoc_insertion_point(field_release:trtcaffe.LayerParameter.hdf5_data_param)
  _has_bits_[0] &= ~0x00004000u;
  ::trtcaffe::HDF5DataParameter* temp = hdf5_data_param_;
  hdf5_data_param_ = nullptr;
  return temp;
}
inline ::trtcaffe::HDF5DataParameter* LayerParameter::_internal_mutable_hdf5_data_param() {
  _has_bits_[0] |= 0x00004000u;
  if (hdf5_data_param_ == nullptr) {
    auto* p = CreateMaybeMessage<::trtcaffe::HDF5DataParameter>(GetArena());
    hdf5_data_param_ = p;
  }
  return hdf5_data_param_;
}
inline ::trtcaffe::HDF5DataParameter* LayerParameter::mutable_hdf5_data_param() {
  // @@protoc_insertion_point(field_mutable:trtcaffe.LayerParameter.hdf5_data_param)
  return _internal_mutable_hdf5_data_param();
}
inline void LayerParameter::set_allocated_hdf5_data_param(::trtcaffe::HDF5DataParameter* hdf5_data_param) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete hdf5_data_param_;
  }
  if (hdf5_data_param) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(hdf5_data_param);
    if (message_arena != submessage_arena) {
      hdf5_data_param = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, hdf5_data_param, submessage_arena);
    }
    _has_bits_[0] |= 0x00004000u;
  } else {
    _has_bits_[0] &= ~0x00004000u;
  }
  hdf5_data_param_ = hdf5_data_param;
  // @@protoc_insertion_point(field_set_allocated:trtcaffe.LayerParameter.hdf5_data_param)
}

// optional .trtcaffe.HDF5OutputParameter hdf5_output_param = 113;
inline bool LayerParameter::_internal_has_hdf5_output_param() const {
  bool value = (_has_bits_[0] & 0x00008000u) != 0;
  PROTOBUF_ASSUME(!value || hdf5_output_param_ != nullptr);
  return value;
}
inline bool LayerParameter::has_hdf5_output_param() const {
  return _internal_has_hdf5_output_param();
}
inline void LayerParameter::clear_hdf5_output_param() {
  if (hdf5_output_param_ != nullptr) hdf5_output_param_->Clear();
  _has_bits_[0] &= ~0x00008000u;
}
inline const ::trtcaffe::HDF5OutputParameter& LayerParameter::_internal_hdf5_output_param() const {
  const ::trtcaffe::HDF5OutputParameter* p = hdf5_output_param_;
  return p != nullptr ? *p : *reinterpret_cast<const ::trtcaffe::HDF5OutputParameter*>(
      &::trtcaffe::_HDF5OutputParameter_default_instance_);
}
inline const ::trtcaffe::HDF5OutputParameter& LayerParameter::hdf5_output_param() const {
  // @@protoc_insertion_point(field_get:trtcaffe.LayerParameter.hdf5_output_param)
  return _internal_hdf5_output_param();
}
inline void LayerParameter::unsafe_arena_set_allocated_hdf5_output_param(
    ::trtcaffe::HDF5OutputParameter* hdf5_output_param) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(hdf5_output_param_);
  }
  hdf5_output_param_ = hdf5_output_param;
  if (hdf5_output_param) {
    _has_bits_[0] |= 0x00008000u;
  } else {
    _has_bits_[0] &= ~0x00008000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:trtcaffe.LayerParameter.hdf5_output_param)
}
inline ::trtcaffe::HDF5OutputParameter* LayerParameter::release_hdf5_output_param() {
  auto temp = unsafe_arena_release_hdf5_output_param();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::trtcaffe::HDF5OutputParameter* LayerParameter::unsafe_arena_release_hdf5_output_param() {
  // @@protoc_insertion_point(field_release:trtcaffe.LayerParameter.hdf5_output_param)
  _has_bits_[0] &= ~0x00008000u;
  ::trtcaffe::HDF5OutputParameter* temp = hdf5_output_param_;
  hdf5_output_param_ = nullptr;
  return temp;
}
inline ::trtcaffe::HDF5OutputParameter* LayerParameter::_internal_mutable_hdf5_output_param() {
  _has_bits_[0] |= 0x00008000u;
  if (hdf5_output_param_ == nullptr) {
    auto* p = CreateMaybeMessage<::trtcaffe::HDF5OutputParameter>(GetArena());
    hdf5_output_param_ = p;
  }
  return hdf5_output_param_;
}
inline ::trtcaffe::HDF5OutputParameter* LayerParameter::mutable_hdf5_output_param() {
  // @@protoc_insertion_point(field_mutable:trtcaffe.LayerParameter.hdf5_output_param)
  return _internal_mutable_hdf5_output_param();
}
inline void LayerParameter::set_allocated_hdf5_output_param(::trtcaffe::HDF5OutputParameter* hdf5_output_param) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete hdf5_output_param_;
  }
  if (hdf5_output_param) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(hdf5_output_param);
    if (message_arena != submessage_arena) {
      hdf5_output_param = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, hdf5_output_param, submessage_arena);
    }
    _has_bits_[0] |= 0x00008000u;
  } else {
    _has_bits_[0] &= ~0x00008000u;
  }
  hdf5_output_param_ = hdf5_output_param;
  // @@protoc_insertion_point(field_set_allocated:trtcaffe.LayerParameter.hdf5_output_param)
}

// optional .trtcaffe.HingeLossParameter hinge_loss_param = 114;
inline bool LayerParameter::_internal_has_hinge_loss_param() const {
  bool value = (_has_bits_[0] & 0x00010000u) != 0;
  PROTOBUF_ASSUME(!value || hinge_loss_param_ != nullptr);
  return value;
}
inline bool LayerParameter::has_hinge_loss_param() const {
  return _internal_has_hinge_loss_param();
}
inline void LayerParameter::clear_hinge_loss_param() {
  if (hinge_loss_param_ != nullptr) hinge_loss_param_->Clear();
  _has_bits_[0] &= ~0x00010000u;
}
inline const ::trtcaffe::HingeLossParameter& LayerParameter::_internal_hinge_loss_param() const {
  const ::trtcaffe::HingeLossParameter* p = hinge_loss_param_;
  return p != nullptr ? *p : *reinterpret_cast<const ::trtcaffe::HingeLossParameter*>(
      &::trtcaffe::_HingeLossParameter_default_instance_);
}
inline const ::trtcaffe::HingeLossParameter& LayerParameter::hinge_loss_param() const {
  // @@protoc_insertion_point(field_get:trtcaffe.LayerParameter.hinge_loss_param)
  return _internal_hinge_loss_param();
}
inline void LayerParameter::unsafe_arena_set_allocated_hinge_loss_param(
    ::trtcaffe::HingeLossParameter* hinge_loss_param) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(hinge_loss_param_);
  }
  hinge_loss_param_ = hinge_loss_param;
  if (hinge_loss_param) {
    _has_bits_[0] |= 0x00010000u;
  } else {
    _has_bits_[0] &= ~0x00010000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:trtcaffe.LayerParameter.hinge_loss_param)
}
inline ::trtcaffe::HingeLossParameter* LayerParameter::release_hinge_loss_param() {
  auto temp = unsafe_arena_release_hinge_loss_param();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::trtcaffe::HingeLossParameter* LayerParameter::unsafe_arena_release_hinge_loss_param() {
  // @@protoc_insertion_point(field_release:trtcaffe.LayerParameter.hinge_loss_param)
  _has_bits_[0] &= ~0x00010000u;
  ::trtcaffe::HingeLossParameter* temp = hinge_loss_param_;
  hinge_loss_param_ = nullptr;
  return temp;
}
inline ::trtcaffe::HingeLossParameter* LayerParameter::_internal_mutable_hinge_loss_param() {
  _has_bits_[0] |= 0x00010000u;
  if (hinge_loss_param_ == nullptr) {
    auto* p = CreateMaybeMessage<::trtcaffe::HingeLossParameter>(GetArena());
    hinge_loss_param_ = p;
  }
  return hinge_loss_param_;
}
inline ::trtcaffe::HingeLossParameter* LayerParameter::mutable_hinge_loss_param() {
  // @@protoc_insertion_point(field_mutable:trtcaffe.LayerParameter.hinge_loss_param)
  return _internal_mutable_hinge_loss_param();
}
inline void LayerParameter::set_allocated_hinge_loss_param(::trtcaffe::HingeLossParameter* hinge_loss_param) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete hinge_loss_param_;
  }
  if (hinge_loss_param) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(hinge_loss_param);
    if (message_arena != submessage_arena) {
      hinge_loss_param = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, hinge_loss_param, submessage_arena);
    }
    _has_bits_[0] |= 0x00010000u;
  } else {
    _has_bits_[0] &= ~0x00010000u;
  }
  hinge_loss_param_ = hinge_loss_param;
  // @@protoc_insertion_point(field_set_allocated:trtcaffe.LayerParameter.hinge_loss_param)
}

// optional .trtcaffe.ImageDataParameter image_data_param = 115;
inline bool LayerParameter::_internal_has_image_data_param() const {
  bool value = (_has_bits_[0] & 0x00020000u) != 0;
  PROTOBUF_ASSUME(!value || image_data_param_ != nullptr);
  return value;
}
inline bool LayerParameter::has_image_data_param() const {
  return _internal_has_image_data_param();
}
inline void LayerParameter::clear_image_data_param() {
  if (image_data_param_ != nullptr) image_data_param_->Clear();
  _has_bits_[0] &= ~0x00020000u;
}
inline const ::trtcaffe::ImageDataParameter& LayerParameter::_internal_image_data_param() const {
  const ::trtcaffe::ImageDataParameter* p = image_data_param_;
  return p != nullptr ? *p : *reinterpret_cast<const ::trtcaffe::ImageDataParameter*>(
      &::trtcaffe::_ImageDataParameter_default_instance_);
}
inline const ::trtcaffe::ImageDataParameter& LayerParameter::image_data_param() const {
  // @@protoc_insertion_point(field_get:trtcaffe.LayerParameter.image_data_param)
  return _internal_image_data_param();
}
inline void LayerParameter::unsafe_arena_set_allocated_image_data_param(
    ::trtcaffe::ImageDataParameter* image_data_param) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(image_data_param_);
  }
  image_data_param_ = image_data_param;
  if (image_data_param) {
    _has_bits_[0] |= 0x00020000u;
  } else {
    _has_bits_[0] &= ~0x00020000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:trtcaffe.LayerParameter.image_data_param)
}
inline ::trtcaffe::ImageDataParameter* LayerParameter::release_image_data_param() {
  auto temp = unsafe_arena_release_image_data_param();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::trtcaffe::ImageDataParameter* LayerParameter::unsafe_arena_release_image_data_param() {
  // @@protoc_insertion_point(field_release:trtcaffe.LayerParameter.image_data_param)
  _has_bits_[0] &= ~0x00020000u;
  ::trtcaffe::ImageDataParameter* temp = image_data_param_;
  image_data_param_ = nullptr;
  return temp;
}
inline ::trtcaffe::ImageDataParameter* LayerParameter::_internal_mutable_image_data_param() {
  _has_bits_[0] |= 0x00020000u;
  if (image_data_param_ == nullptr) {
    auto* p = CreateMaybeMessage<::trtcaffe::ImageDataParameter>(GetArena());
    image_data_param_ = p;
  }
  return image_data_param_;
}
inline ::trtcaffe::ImageDataParameter* LayerParameter::mutable_image_data_param() {
  // @@protoc_insertion_point(field_mutable:trtcaffe.LayerParameter.image_data_param)
  return _internal_mutable_image_data_param();
}
inline void LayerParameter::set_allocated_image_data_param(::trtcaffe::ImageDataParameter* image_data_param) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete image_data_param_;
  }
  if (image_data_param) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(image_data_param);
    if (message_arena != submessage_arena) {
      image_data_param = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, image_data_param, submessage_arena);
    }
    _has_bits_[0] |= 0x00020000u;
  } else {
    _has_bits_[0] &= ~0x00020000u;
  }
  image_data_param_ = image_data_param;
  // @@protoc_insertion_point(field_set_allocated:trtcaffe.LayerParameter.image_data_param)
}

// optional .trtcaffe.InfogainLossParameter infogain_loss_param = 116;
inline bool LayerParameter::_internal_has_infogain_loss_param() const {
  bool value = (_has_bits_[0] & 0x00040000u) != 0;
  PROTOBUF_ASSUME(!value || infogain_loss_param_ != nullptr);
  return value;
}
inline bool LayerParameter::has_infogain_loss_param() const {
  return _internal_has_infogain_loss_param();
}
inline void LayerParameter::clear_infogain_loss_param() {
  if (infogain_loss_param_ != nullptr) infogain_loss_param_->Clear();
  _has_bits_[0] &= ~0x00040000u;
}
inline const ::trtcaffe::InfogainLossParameter& LayerParameter::_internal_infogain_loss_param() const {
  const ::trtcaffe::InfogainLossParameter* p = infogain_loss_param_;
  return p != nullptr ? *p : *reinterpret_cast<const ::trtcaffe::InfogainLossParameter*>(
      &::trtcaffe::_InfogainLossParameter_default_instance_);
}
inline const ::trtcaffe::InfogainLossParameter& LayerParameter::infogain_loss_param() const {
  // @@protoc_insertion_point(field_get:trtcaffe.LayerParameter.infogain_loss_param)
  return _internal_infogain_loss_param();
}
inline void LayerParameter::unsafe_arena_set_allocated_infogain_loss_param(
    ::trtcaffe::InfogainLossParameter* infogain_loss_param) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(infogain_loss_param_);
  }
  infogain_loss_param_ = infogain_loss_param;
  if (infogain_loss_param) {
    _has_bits_[0] |= 0x00040000u;
  } else {
    _has_bits_[0] &= ~0x00040000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:trtcaffe.LayerParameter.infogain_loss_param)
}
inline ::trtcaffe::InfogainLossParameter* LayerParameter::release_infogain_loss_param() {
  auto temp = unsafe_arena_release_infogain_loss_param();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::trtcaffe::InfogainLossParameter* LayerParameter::unsafe_arena_release_infogain_loss_param() {
  // @@protoc_insertion_point(field_release:trtcaffe.LayerParameter.infogain_loss_param)
  _has_bits_[0] &= ~0x00040000u;
  ::trtcaffe::InfogainLossParameter* temp = infogain_loss_param_;
  infogain_loss_param_ = nullptr;
  return temp;
}
inline ::trtcaffe::InfogainLossParameter* LayerParameter::_internal_mutable_infogain_loss_param() {
  _has_bits_[0] |= 0x00040000u;
  if (infogain_loss_param_ == nullptr) {
    auto* p = CreateMaybeMessage<::trtcaffe::InfogainLossParameter>(GetArena());
    infogain_loss_param_ = p;
  }
  return infogain_loss_param_;
}
inline ::trtcaffe::InfogainLossParameter* LayerParameter::mutable_infogain_loss_param() {
  // @@protoc_insertion_point(field_mutable:trtcaffe.LayerParameter.infogain_loss_param)
  return _internal_mutable_infogain_loss_param();
}
inline void LayerParameter::set_allocated_infogain_loss_param(::trtcaffe::InfogainLossParameter* infogain_loss_param) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete infogain_loss_param_;
  }
  if (infogain_loss_param) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(infogain_loss_param);
    if (message_arena != submessage_arena) {
      infogain_loss_param = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, infogain_loss_param, submessage_arena);
    }
    _has_bits_[0] |= 0x00040000u;
  } else {
    _has_bits_[0] &= ~0x00040000u;
  }
  infogain_loss_param_ = infogain_loss_param;
  // @@protoc_insertion_point(field_set_allocated:trtcaffe.LayerParameter.infogain_loss_param)
}

// optional .trtcaffe.InnerProductParameter inner_product_param = 117;
inline bool LayerParameter::_internal_has_inner_product_param() const {
  bool value = (_has_bits_[0] & 0x00080000u) != 0;
  PROTOBUF_ASSUME(!value || inner_product_param_ != nullptr);
  return value;
}
inline bool LayerParameter::has_inner_product_param() const {
  return _internal_has_inner_product_param();
}
inline void LayerParameter::clear_inner_product_param() {
  if (inner_product_param_ != nullptr) inner_product_param_->Clear();
  _has_bits_[0] &= ~0x00080000u;
}
inline const ::trtcaffe::InnerProductParameter& LayerParameter::_internal_inner_product_param() const {
  const ::trtcaffe::InnerProductParameter* p = inner_product_param_;
  return p != nullptr ? *p : *reinterpret_cast<const ::trtcaffe::InnerProductParameter*>(
      &::trtcaffe::_InnerProductParameter_default_instance_);
}
inline const ::trtcaffe::InnerProductParameter& LayerParameter::inner_product_param() const {
  // @@protoc_insertion_point(field_get:trtcaffe.LayerParameter.inner_product_param)
  return _internal_inner_product_param();
}
inline void LayerParameter::unsafe_arena_set_allocated_inner_product_param(
    ::trtcaffe::InnerProductParameter* inner_product_param) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(inner_product_param_);
  }
  inner_product_param_ = inner_product_param;
  if (inner_product_param) {
    _has_bits_[0] |= 0x00080000u;
  } else {
    _has_bits_[0] &= ~0x00080000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:trtcaffe.LayerParameter.inner_product_param)
}
inline ::trtcaffe::InnerProductParameter* LayerParameter::release_inner_product_param() {
  auto temp = unsafe_arena_release_inner_product_param();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::trtcaffe::InnerProductParameter* LayerParameter::unsafe_arena_release_inner_product_param() {
  // @@protoc_insertion_point(field_release:trtcaffe.LayerParameter.inner_product_param)
  _has_bits_[0] &= ~0x00080000u;
  ::trtcaffe::InnerProductParameter* temp = inner_product_param_;
  inner_product_param_ = nullptr;
  return temp;
}
inline ::trtcaffe::InnerProductParameter* LayerParameter::_internal_mutable_inner_product_param() {
  _has_bits_[0] |= 0x00080000u;
  if (inner_product_param_ == nullptr) {
    auto* p = CreateMaybeMessage<::trtcaffe::InnerProductParameter>(GetArena());
    inner_product_param_ = p;
  }
  return inner_product_param_;
}
inline ::trtcaffe::InnerProductParameter* LayerParameter::mutable_inner_product_param() {
  // @@protoc_insertion_point(field_mutable:trtcaffe.LayerParameter.inner_product_param)
  return _internal_mutable_inner_product_param();
}
inline void LayerParameter::set_allocated_inner_product_param(::trtcaffe::InnerProductParameter* inner_product_param) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete inner_product_param_;
  }
  if (inner_product_param) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(inner_product_param);
    if (message_arena != submessage_arena) {
      inner_product_param = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, inner_product_param, submessage_arena);
    }
    _has_bits_[0] |= 0x00080000u;
  } else {
    _has_bits_[0] &= ~0x00080000u;
  }
  inner_product_param_ = inner_product_param;
  // @@protoc_insertion_point(field_set_allocated:trtcaffe.LayerParameter.inner_product_param)
}

// optional .trtcaffe.InputParameter input_param = 143;
inline bool LayerParameter::_internal_has_input_param() const {
  bool value = (_has_bits_[1] & 0x00002000u) != 0;
  PROTOBUF_ASSUME(!value || input_param_ != nullptr);
  return value;
}
inline bool LayerParameter::has_input_param() const {
  return _internal_has_input_param();
}
inline void LayerParameter::clear_input_param() {
  if (input_param_ != nullptr) input_param_->Clear();
  _has_bits_[1] &= ~0x00002000u;
}
inline const ::trtcaffe::InputParameter& LayerParameter::_internal_input_param() const {
  const ::trtcaffe::InputParameter* p = input_param_;
  return p != nullptr ? *p : *reinterpret_cast<const ::trtcaffe::InputParameter*>(
      &::trtcaffe::_InputParameter_default_instance_);
}
inline const ::trtcaffe::InputParameter& LayerParameter::input_param() const {
  // @@protoc_insertion_point(field_get:trtcaffe.LayerParameter.input_param)
  return _internal_input_param();
}
inline void LayerParameter::unsafe_arena_set_allocated_input_param(
    ::trtcaffe::InputParameter* input_param) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(input_param_);
  }
  input_param_ = input_param;
  if (input_param) {
    _has_bits_[1] |= 0x00002000u;
  } else {
    _has_bits_[1] &= ~0x00002000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:trtcaffe.LayerParameter.input_param)
}
inline ::trtcaffe::InputParameter* LayerParameter::release_input_param() {
  auto temp = unsafe_arena_release_input_param();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::trtcaffe::InputParameter* LayerParameter::unsafe_arena_release_input_param() {
  // @@protoc_insertion_point(field_release:trtcaffe.LayerParameter.input_param)
  _has_bits_[1] &= ~0x00002000u;
  ::trtcaffe::InputParameter* temp = input_param_;
  input_param_ = nullptr;
  return temp;
}
inline ::trtcaffe::InputParameter* LayerParameter::_internal_mutable_input_param() {
  _has_bits_[1] |= 0x00002000u;
  if (input_param_ == nullptr) {
    auto* p = CreateMaybeMessage<::trtcaffe::InputParameter>(GetArena());
    input_param_ = p;
  }
  return input_param_;
}
inline ::trtcaffe::InputParameter* LayerParameter::mutable_input_param() {
  // @@protoc_insertion_point(field_mutable:trtcaffe.LayerParameter.input_param)
  return _internal_mutable_input_param();
}
inline void LayerParameter::set_allocated_input_param(::trtcaffe::InputParameter* input_param) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete input_param_;
  }
  if (input_param) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(input_param);
    if (message_arena != submessage_arena) {
      input_param = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, input_param, submessage_arena);
    }
    _has_bits_[1] |= 0x00002000u;
  } else {
    _has_bits_[1] &= ~0x00002000u;
  }
  input_param_ = input_param;
  // @@protoc_insertion_point(field_set_allocated:trtcaffe.LayerParameter.input_param)
}

// optional .trtcaffe.LogParameter log_param = 134;
inline bool LayerParameter::_internal_has_log_param() const {
  bool value = (_has_bits_[1] & 0x00000010u) != 0;
  PROTOBUF_ASSUME(!value || log_param_ != nullptr);
  return value;
}
inline bool LayerParameter::has_log_param() const {
  return _internal_has_log_param();
}
inline void LayerParameter::clear_log_param() {
  if (log_param_ != nullptr) log_param_->Clear();
  _has_bits_[1] &= ~0x00000010u;
}
inline const ::trtcaffe::LogParameter& LayerParameter::_internal_log_param() const {
  const ::trtcaffe::LogParameter* p = log_param_;
  return p != nullptr ? *p : *reinterpret_cast<const ::trtcaffe::LogParameter*>(
      &::trtcaffe::_LogParameter_default_instance_);
}
inline const ::trtcaffe::LogParameter& LayerParameter::log_param() const {
  // @@protoc_insertion_point(field_get:trtcaffe.LayerParameter.log_param)
  return _internal_log_param();
}
inline void LayerParameter::unsafe_arena_set_allocated_log_param(
    ::trtcaffe::LogParameter* log_param) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(log_param_);
  }
  log_param_ = log_param;
  if (log_param) {
    _has_bits_[1] |= 0x00000010u;
  } else {
    _has_bits_[1] &= ~0x00000010u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:trtcaffe.LayerParameter.log_param)
}
inline ::trtcaffe::LogParameter* LayerParameter::release_log_param() {
  auto temp = unsafe_arena_release_log_param();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::trtcaffe::LogParameter* LayerParameter::unsafe_arena_release_log_param() {
  // @@protoc_insertion_point(field_release:trtcaffe.LayerParameter.log_param)
  _has_bits_[1] &= ~0x00000010u;
  ::trtcaffe::LogParameter* temp = log_param_;
  log_param_ = nullptr;
  return temp;
}
inline ::trtcaffe::LogParameter* LayerParameter::_internal_mutable_log_param() {
  _has_bits_[1] |= 0x00000010u;
  if (log_param_ == nullptr) {
    auto* p = CreateMaybeMessage<::trtcaffe::LogParameter>(GetArena());
    log_param_ = p;
  }
  return log_param_;
}
inline ::trtcaffe::LogParameter* LayerParameter::mutable_log_param() {
  // @@protoc_insertion_point(field_mutable:trtcaffe.LayerParameter.log_param)
  return _internal_mutable_log_param();
}
inline void LayerParameter::set_allocated_log_param(::trtcaffe::LogParameter* log_param) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete log_param_;
  }
  if (log_param) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(log_param);
    if (message_arena != submessage_arena) {
      log_param = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, log_param, submessage_arena);
    }
    _has_bits_[1] |= 0x00000010u;
  } else {
    _has_bits_[1] &= ~0x00000010u;
  }
  log_param_ = log_param;
  // @@protoc_insertion_point(field_set_allocated:trtcaffe.LayerParameter.log_param)
}

// optional .trtcaffe.LRNParameter lrn_param = 118;
inline bool LayerParameter::_internal_has_lrn_param() const {
  bool value = (_has_bits_[0] & 0x00100000u) != 0;
  PROTOBUF_ASSUME(!value || lrn_param_ != nullptr);
  return value;
}
inline bool LayerParameter::has_lrn_param() const {
  return _internal_has_lrn_param();
}
inline void LayerParameter::clear_lrn_param() {
  if (lrn_param_ != nullptr) lrn_param_->Clear();
  _has_bits_[0] &= ~0x00100000u;
}
inline const ::trtcaffe::LRNParameter& LayerParameter::_internal_lrn_param() const {
  const ::trtcaffe::LRNParameter* p = lrn_param_;
  return p != nullptr ? *p : *reinterpret_cast<const ::trtcaffe::LRNParameter*>(
      &::trtcaffe::_LRNParameter_default_instance_);
}
inline const ::trtcaffe::LRNParameter& LayerParameter::lrn_param() const {
  // @@protoc_insertion_point(field_get:trtcaffe.LayerParameter.lrn_param)
  return _internal_lrn_param();
}
inline void LayerParameter::unsafe_arena_set_allocated_lrn_param(
    ::trtcaffe::LRNParameter* lrn_param) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(lrn_param_);
  }
  lrn_param_ = lrn_param;
  if (lrn_param) {
    _has_bits_[0] |= 0x00100000u;
  } else {
    _has_bits_[0] &= ~0x00100000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:trtcaffe.LayerParameter.lrn_param)
}
inline ::trtcaffe::LRNParameter* LayerParameter::release_lrn_param() {
  auto temp = unsafe_arena_release_lrn_param();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::trtcaffe::LRNParameter* LayerParameter::unsafe_arena_release_lrn_param() {
  // @@protoc_insertion_point(field_release:trtcaffe.LayerParameter.lrn_param)
  _has_bits_[0] &= ~0x00100000u;
  ::trtcaffe::LRNParameter* temp = lrn_param_;
  lrn_param_ = nullptr;
  return temp;
}
inline ::trtcaffe::LRNParameter* LayerParameter::_internal_mutable_lrn_param() {
  _has_bits_[0] |= 0x00100000u;
  if (lrn_param_ == nullptr) {
    auto* p = CreateMaybeMessage<::trtcaffe::LRNParameter>(GetArena());
    lrn_param_ = p;
  }
  return lrn_param_;
}
inline ::trtcaffe::LRNParameter* LayerParameter::mutable_lrn_param() {
  // @@protoc_insertion_point(field_mutable:trtcaffe.LayerParameter.lrn_param)
  return _internal_mutable_lrn_param();
}
inline void LayerParameter::set_allocated_lrn_param(::trtcaffe::LRNParameter* lrn_param) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete lrn_param_;
  }
  if (lrn_param) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(lrn_param);
    if (message_arena != submessage_arena) {
      lrn_param = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, lrn_param, submessage_arena);
    }
    _has_bits_[0] |= 0x00100000u;
  } else {
    _has_bits_[0] &= ~0x00100000u;
  }
  lrn_param_ = lrn_param;
  // @@protoc_insertion_point(field_set_allocated:trtcaffe.LayerParameter.lrn_param)
}

// optional .trtcaffe.MemoryDataParameter memory_data_param = 119;
inline bool LayerParameter::_internal_has_memory_data_param() const {
  bool value = (_has_bits_[0] & 0x00200000u) != 0;
  PROTOBUF_ASSUME(!value || memory_data_param_ != nullptr);
  return value;
}
inline bool LayerParameter::has_memory_data_param() const {
  return _internal_has_memory_data_param();
}
inline void LayerParameter::clear_memory_data_param() {
  if (memory_data_param_ != nullptr) memory_data_param_->Clear();
  _has_bits_[0] &= ~0x00200000u;
}
inline const ::trtcaffe::MemoryDataParameter& LayerParameter::_internal_memory_data_param() const {
  const ::trtcaffe::MemoryDataParameter* p = memory_data_param_;
  return p != nullptr ? *p : *reinterpret_cast<const ::trtcaffe::MemoryDataParameter*>(
      &::trtcaffe::_MemoryDataParameter_default_instance_);
}
inline const ::trtcaffe::MemoryDataParameter& LayerParameter::memory_data_param() const {
  // @@protoc_insertion_point(field_get:trtcaffe.LayerParameter.memory_data_param)
  return _internal_memory_data_param();
}
inline void LayerParameter::unsafe_arena_set_allocated_memory_data_param(
    ::trtcaffe::MemoryDataParameter* memory_data_param) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(memory_data_param_);
  }
  memory_data_param_ = memory_data_param;
  if (memory_data_param) {
    _has_bits_[0] |= 0x00200000u;
  } else {
    _has_bits_[0] &= ~0x00200000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:trtcaffe.LayerParameter.memory_data_param)
}
inline ::trtcaffe::MemoryDataParameter* LayerParameter::release_memory_data_param() {
  auto temp = unsafe_arena_release_memory_data_param();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::trtcaffe::MemoryDataParameter* LayerParameter::unsafe_arena_release_memory_data_param() {
  // @@protoc_insertion_point(field_release:trtcaffe.LayerParameter.memory_data_param)
  _has_bits_[0] &= ~0x00200000u;
  ::trtcaffe::MemoryDataParameter* temp = memory_data_param_;
  memory_data_param_ = nullptr;
  return temp;
}
inline ::trtcaffe::MemoryDataParameter* LayerParameter::_internal_mutable_memory_data_param() {
  _has_bits_[0] |= 0x00200000u;
  if (memory_data_param_ == nullptr) {
    auto* p = CreateMaybeMessage<::trtcaffe::MemoryDataParameter>(GetArena());
    memory_data_param_ = p;
  }
  return memory_data_param_;
}
inline ::trtcaffe::MemoryDataParameter* LayerParameter::mutable_memory_data_param() {
  // @@protoc_insertion_point(field_mutable:trtcaffe.LayerParameter.memory_data_param)
  return _internal_mutable_memory_data_param();
}
inline void LayerParameter::set_allocated_memory_data_param(::trtcaffe::MemoryDataParameter* memory_data_param) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete memory_data_param_;
  }
  if (memory_data_param) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(memory_data_param);
    if (message_arena != submessage_arena) {
      memory_data_param = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, memory_data_param, submessage_arena);
    }
    _has_bits_[0] |= 0x00200000u;
  } else {
    _has_bits_[0] &= ~0x00200000u;
  }
  memory_data_param_ = memory_data_param;
  // @@protoc_insertion_point(field_set_allocated:trtcaffe.LayerParameter.memory_data_param)
}

// optional .trtcaffe.MVNParameter mvn_param = 120;
inline bool LayerParameter::_internal_has_mvn_param() const {
  bool value = (_has_bits_[0] & 0x00400000u) != 0;
  PROTOBUF_ASSUME(!value || mvn_param_ != nullptr);
  return value;
}
inline bool LayerParameter::has_mvn_param() const {
  return _internal_has_mvn_param();
}
inline void LayerParameter::clear_mvn_param() {
  if (mvn_param_ != nullptr) mvn_param_->Clear();
  _has_bits_[0] &= ~0x00400000u;
}
inline const ::trtcaffe::MVNParameter& LayerParameter::_internal_mvn_param() const {
  const ::trtcaffe::MVNParameter* p = mvn_param_;
  return p != nullptr ? *p : *reinterpret_cast<const ::trtcaffe::MVNParameter*>(
      &::trtcaffe::_MVNParameter_default_instance_);
}
inline const ::trtcaffe::MVNParameter& LayerParameter::mvn_param() const {
  // @@protoc_insertion_point(field_get:trtcaffe.LayerParameter.mvn_param)
  return _internal_mvn_param();
}
inline void LayerParameter::unsafe_arena_set_allocated_mvn_param(
    ::trtcaffe::MVNParameter* mvn_param) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(mvn_param_);
  }
  mvn_param_ = mvn_param;
  if (mvn_param) {
    _has_bits_[0] |= 0x00400000u;
  } else {
    _has_bits_[0] &= ~0x00400000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:trtcaffe.LayerParameter.mvn_param)
}
inline ::trtcaffe::MVNParameter* LayerParameter::release_mvn_param() {
  auto temp = unsafe_arena_release_mvn_param();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::trtcaffe::MVNParameter* LayerParameter::unsafe_arena_release_mvn_param() {
  // @@protoc_insertion_point(field_release:trtcaffe.LayerParameter.mvn_param)
  _has_bits_[0] &= ~0x00400000u;
  ::trtcaffe::MVNParameter* temp = mvn_param_;
  mvn_param_ = nullptr;
  return temp;
}
inline ::trtcaffe::MVNParameter* LayerParameter::_internal_mutable_mvn_param() {
  _has_bits_[0] |= 0x00400000u;
  if (mvn_param_ == nullptr) {
    auto* p = CreateMaybeMessage<::trtcaffe::MVNParameter>(GetArena());
    mvn_param_ = p;
  }
  return mvn_param_;
}
inline ::trtcaffe::MVNParameter* LayerParameter::mutable_mvn_param() {
  // @@protoc_insertion_point(field_mutable:trtcaffe.LayerParameter.mvn_param)
  return _internal_mutable_mvn_param();
}
inline void LayerParameter::set_allocated_mvn_param(::trtcaffe::MVNParameter* mvn_param) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete mvn_param_;
  }
  if (mvn_param) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(mvn_param);
    if (message_arena != submessage_arena) {
      mvn_param = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, mvn_param, submessage_arena);
    }
    _has_bits_[0] |= 0x00400000u;
  } else {
    _has_bits_[0] &= ~0x00400000u;
  }
  mvn_param_ = mvn_param;
  // @@protoc_insertion_point(field_set_allocated:trtcaffe.LayerParameter.mvn_param)
}

// optional .trtcaffe.PoolingParameter pooling_param = 121;
inline bool LayerParameter::_internal_has_pooling_param() const {
  bool value = (_has_bits_[0] & 0x00800000u) != 0;
  PROTOBUF_ASSUME(!value || pooling_param_ != nullptr);
  return value;
}
inline bool LayerParameter::has_pooling_param() const {
  return _internal_has_pooling_param();
}
inline void LayerParameter::clear_pooling_param() {
  if (pooling_param_ != nullptr) pooling_param_->Clear();
  _has_bits_[0] &= ~0x00800000u;
}
inline const ::trtcaffe::PoolingParameter& LayerParameter::_internal_pooling_param() const {
  const ::trtcaffe::PoolingParameter* p = pooling_param_;
  return p != nullptr ? *p : *reinterpret_cast<const ::trtcaffe::PoolingParameter*>(
      &::trtcaffe::_PoolingParameter_default_instance_);
}
inline const ::trtcaffe::PoolingParameter& LayerParameter::pooling_param() const {
  // @@protoc_insertion_point(field_get:trtcaffe.LayerParameter.pooling_param)
  return _internal_pooling_param();
}
inline void LayerParameter::unsafe_arena_set_allocated_pooling_param(
    ::trtcaffe::PoolingParameter* pooling_param) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(pooling_param_);
  }
  pooling_param_ = pooling_param;
  if (pooling_param) {
    _has_bits_[0] |= 0x00800000u;
  } else {
    _has_bits_[0] &= ~0x00800000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:trtcaffe.LayerParameter.pooling_param)
}
inline ::trtcaffe::PoolingParameter* LayerParameter::release_pooling_param() {
  auto temp = unsafe_arena_release_pooling_param();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::trtcaffe::PoolingParameter* LayerParameter::unsafe_arena_release_pooling_param() {
  // @@protoc_insertion_point(field_release:trtcaffe.LayerParameter.pooling_param)
  _has_bits_[0] &= ~0x00800000u;
  ::trtcaffe::PoolingParameter* temp = pooling_param_;
  pooling_param_ = nullptr;
  return temp;
}
inline ::trtcaffe::PoolingParameter* LayerParameter::_internal_mutable_pooling_param() {
  _has_bits_[0] |= 0x00800000u;
  if (pooling_param_ == nullptr) {
    auto* p = CreateMaybeMessage<::trtcaffe::PoolingParameter>(GetArena());
    pooling_param_ = p;
  }
  return pooling_param_;
}
inline ::trtcaffe::PoolingParameter* LayerParameter::mutable_pooling_param() {
  // @@protoc_insertion_point(field_mutable:trtcaffe.LayerParameter.pooling_param)
  return _internal_mutable_pooling_param();
}
inline void LayerParameter::set_allocated_pooling_param(::trtcaffe::PoolingParameter* pooling_param) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete pooling_param_;
  }
  if (pooling_param) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(pooling_param);
    if (message_arena != submessage_arena) {
      pooling_param = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pooling_param, submessage_arena);
    }
    _has_bits_[0] |= 0x00800000u;
  } else {
    _has_bits_[0] &= ~0x00800000u;
  }
  pooling_param_ = pooling_param;
  // @@protoc_insertion_point(field_set_allocated:trtcaffe.LayerParameter.pooling_param)
}

// optional .trtcaffe.PowerParameter power_param = 122;
inline bool LayerParameter::_internal_has_power_param() const {
  bool value = (_has_bits_[0] & 0x01000000u) != 0;
  PROTOBUF_ASSUME(!value || power_param_ != nullptr);
  return value;
}
inline bool LayerParameter::has_power_param() const {
  return _internal_has_power_param();
}
inline void LayerParameter::clear_power_param() {
  if (power_param_ != nullptr) power_param_->Clear();
  _has_bits_[0] &= ~0x01000000u;
}
inline const ::trtcaffe::PowerParameter& LayerParameter::_internal_power_param() const {
  const ::trtcaffe::PowerParameter* p = power_param_;
  return p != nullptr ? *p : *reinterpret_cast<const ::trtcaffe::PowerParameter*>(
      &::trtcaffe::_PowerParameter_default_instance_);
}
inline const ::trtcaffe::PowerParameter& LayerParameter::power_param() const {
  // @@protoc_insertion_point(field_get:trtcaffe.LayerParameter.power_param)
  return _internal_power_param();
}
inline void LayerParameter::unsafe_arena_set_allocated_power_param(
    ::trtcaffe::PowerParameter* power_param) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(power_param_);
  }
  power_param_ = power_param;
  if (power_param) {
    _has_bits_[0] |= 0x01000000u;
  } else {
    _has_bits_[0] &= ~0x01000000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:trtcaffe.LayerParameter.power_param)
}
inline ::trtcaffe::PowerParameter* LayerParameter::release_power_param() {
  auto temp = unsafe_arena_release_power_param();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::trtcaffe::PowerParameter* LayerParameter::unsafe_arena_release_power_param() {
  // @@protoc_insertion_point(field_release:trtcaffe.LayerParameter.power_param)
  _has_bits_[0] &= ~0x01000000u;
  ::trtcaffe::PowerParameter* temp = power_param_;
  power_param_ = nullptr;
  return temp;
}
inline ::trtcaffe::PowerParameter* LayerParameter::_internal_mutable_power_param() {
  _has_bits_[0] |= 0x01000000u;
  if (power_param_ == nullptr) {
    auto* p = CreateMaybeMessage<::trtcaffe::PowerParameter>(GetArena());
    power_param_ = p;
  }
  return power_param_;
}
inline ::trtcaffe::PowerParameter* LayerParameter::mutable_power_param() {
  // @@protoc_insertion_point(field_mutable:trtcaffe.LayerParameter.power_param)
  return _internal_mutable_power_param();
}
inline void LayerParameter::set_allocated_power_param(::trtcaffe::PowerParameter* power_param) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete power_param_;
  }
  if (power_param) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(power_param);
    if (message_arena != submessage_arena) {
      power_param = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, power_param, submessage_arena);
    }
    _has_bits_[0] |= 0x01000000u;
  } else {
    _has_bits_[0] &= ~0x01000000u;
  }
  power_param_ = power_param;
  // @@protoc_insertion_point(field_set_allocated:trtcaffe.LayerParameter.power_param)
}

// optional .trtcaffe.PReLUParameter prelu_param = 131;
inline bool LayerParameter::_internal_has_prelu_param() const {
  bool value = (_has_bits_[1] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || prelu_param_ != nullptr);
  return value;
}
inline bool LayerParameter::has_prelu_param() const {
  return _internal_has_prelu_param();
}
inline void LayerParameter::clear_prelu_param() {
  if (prelu_param_ != nullptr) prelu_param_->Clear();
  _has_bits_[1] &= ~0x00000002u;
}
inline const ::trtcaffe::PReLUParameter& LayerParameter::_internal_prelu_param() const {
  const ::trtcaffe::PReLUParameter* p = prelu_param_;
  return p != nullptr ? *p : *reinterpret_cast<const ::trtcaffe::PReLUParameter*>(
      &::trtcaffe::_PReLUParameter_default_instance_);
}
inline const ::trtcaffe::PReLUParameter& LayerParameter::prelu_param() const {
  // @@protoc_insertion_point(field_get:trtcaffe.LayerParameter.prelu_param)
  return _internal_prelu_param();
}
inline void LayerParameter::unsafe_arena_set_allocated_prelu_param(
    ::trtcaffe::PReLUParameter* prelu_param) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(prelu_param_);
  }
  prelu_param_ = prelu_param;
  if (prelu_param) {
    _has_bits_[1] |= 0x00000002u;
  } else {
    _has_bits_[1] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:trtcaffe.LayerParameter.prelu_param)
}
inline ::trtcaffe::PReLUParameter* LayerParameter::release_prelu_param() {
  auto temp = unsafe_arena_release_prelu_param();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::trtcaffe::PReLUParameter* LayerParameter::unsafe_arena_release_prelu_param() {
  // @@protoc_insertion_point(field_release:trtcaffe.LayerParameter.prelu_param)
  _has_bits_[1] &= ~0x00000002u;
  ::trtcaffe::PReLUParameter* temp = prelu_param_;
  prelu_param_ = nullptr;
  return temp;
}
inline ::trtcaffe::PReLUParameter* LayerParameter::_internal_mutable_prelu_param() {
  _has_bits_[1] |= 0x00000002u;
  if (prelu_param_ == nullptr) {
    auto* p = CreateMaybeMessage<::trtcaffe::PReLUParameter>(GetArena());
    prelu_param_ = p;
  }
  return prelu_param_;
}
inline ::trtcaffe::PReLUParameter* LayerParameter::mutable_prelu_param() {
  // @@protoc_insertion_point(field_mutable:trtcaffe.LayerParameter.prelu_param)
  return _internal_mutable_prelu_param();
}
inline void LayerParameter::set_allocated_prelu_param(::trtcaffe::PReLUParameter* prelu_param) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete prelu_param_;
  }
  if (prelu_param) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(prelu_param);
    if (message_arena != submessage_arena) {
      prelu_param = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, prelu_param, submessage_arena);
    }
    _has_bits_[1] |= 0x00000002u;
  } else {
    _has_bits_[1] &= ~0x00000002u;
  }
  prelu_param_ = prelu_param;
  // @@protoc_insertion_point(field_set_allocated:trtcaffe.LayerParameter.prelu_param)
}

// optional .trtcaffe.PythonParameter python_param = 130;
inline bool LayerParameter::_internal_has_python_param() const {
  bool value = (_has_bits_[1] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || python_param_ != nullptr);
  return value;
}
inline bool LayerParameter::has_python_param() const {
  return _internal_has_python_param();
}
inline void LayerParameter::clear_python_param() {
  if (python_param_ != nullptr) python_param_->Clear();
  _has_bits_[1] &= ~0x00000001u;
}
inline const ::trtcaffe::PythonParameter& LayerParameter::_internal_python_param() const {
  const ::trtcaffe::PythonParameter* p = python_param_;
  return p != nullptr ? *p : *reinterpret_cast<const ::trtcaffe::PythonParameter*>(
      &::trtcaffe::_PythonParameter_default_instance_);
}
inline const ::trtcaffe::PythonParameter& LayerParameter::python_param() const {
  // @@protoc_insertion_point(field_get:trtcaffe.LayerParameter.python_param)
  return _internal_python_param();
}
inline void LayerParameter::unsafe_arena_set_allocated_python_param(
    ::trtcaffe::PythonParameter* python_param) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(python_param_);
  }
  python_param_ = python_param;
  if (python_param) {
    _has_bits_[1] |= 0x00000001u;
  } else {
    _has_bits_[1] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:trtcaffe.LayerParameter.python_param)
}
inline ::trtcaffe::PythonParameter* LayerParameter::release_python_param() {
  auto temp = unsafe_arena_release_python_param();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::trtcaffe::PythonParameter* LayerParameter::unsafe_arena_release_python_param() {
  // @@protoc_insertion_point(field_release:trtcaffe.LayerParameter.python_param)
  _has_bits_[1] &= ~0x00000001u;
  ::trtcaffe::PythonParameter* temp = python_param_;
  python_param_ = nullptr;
  return temp;
}
inline ::trtcaffe::PythonParameter* LayerParameter::_internal_mutable_python_param() {
  _has_bits_[1] |= 0x00000001u;
  if (python_param_ == nullptr) {
    auto* p = CreateMaybeMessage<::trtcaffe::PythonParameter>(GetArena());
    python_param_ = p;
  }
  return python_param_;
}
inline ::trtcaffe::PythonParameter* LayerParameter::mutable_python_param() {
  // @@protoc_insertion_point(field_mutable:trtcaffe.LayerParameter.python_param)
  return _internal_mutable_python_param();
}
inline void LayerParameter::set_allocated_python_param(::trtcaffe::PythonParameter* python_param) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete python_param_;
  }
  if (python_param) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(python_param);
    if (message_arena != submessage_arena) {
      python_param = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, python_param, submessage_arena);
    }
    _has_bits_[1] |= 0x00000001u;
  } else {
    _has_bits_[1] &= ~0x00000001u;
  }
  python_param_ = python_param;
  // @@protoc_insertion_point(field_set_allocated:trtcaffe.LayerParameter.python_param)
}

// optional .trtcaffe.ReductionParameter reduction_param = 136;
inline bool LayerParameter::_internal_has_reduction_param() const {
  bool value = (_has_bits_[1] & 0x00000040u) != 0;
  PROTOBUF_ASSUME(!value || reduction_param_ != nullptr);
  return value;
}
inline bool LayerParameter::has_reduction_param() const {
  return _internal_has_reduction_param();
}
inline void LayerParameter::clear_reduction_param() {
  if (reduction_param_ != nullptr) reduction_param_->Clear();
  _has_bits_[1] &= ~0x00000040u;
}
inline const ::trtcaffe::ReductionParameter& LayerParameter::_internal_reduction_param() const {
  const ::trtcaffe::ReductionParameter* p = reduction_param_;
  return p != nullptr ? *p : *reinterpret_cast<const ::trtcaffe::ReductionParameter*>(
      &::trtcaffe::_ReductionParameter_default_instance_);
}
inline const ::trtcaffe::ReductionParameter& LayerParameter::reduction_param() const {
  // @@protoc_insertion_point(field_get:trtcaffe.LayerParameter.reduction_param)
  return _internal_reduction_param();
}
inline void LayerParameter::unsafe_arena_set_allocated_reduction_param(
    ::trtcaffe::ReductionParameter* reduction_param) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(reduction_param_);
  }
  reduction_param_ = reduction_param;
  if (reduction_param) {
    _has_bits_[1] |= 0x00000040u;
  } else {
    _has_bits_[1] &= ~0x00000040u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:trtcaffe.LayerParameter.reduction_param)
}
inline ::trtcaffe::ReductionParameter* LayerParameter::release_reduction_param() {
  auto temp = unsafe_arena_release_reduction_param();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::trtcaffe::ReductionParameter* LayerParameter::unsafe_arena_release_reduction_param() {
  // @@protoc_insertion_point(field_release:trtcaffe.LayerParameter.reduction_param)
  _has_bits_[1] &= ~0x00000040u;
  ::trtcaffe::ReductionParameter* temp = reduction_param_;
  reduction_param_ = nullptr;
  return temp;
}
inline ::trtcaffe::ReductionParameter* LayerParameter::_internal_mutable_reduction_param() {
  _has_bits_[1] |= 0x00000040u;
  if (reduction_param_ == nullptr) {
    auto* p = CreateMaybeMessage<::trtcaffe::ReductionParameter>(GetArena());
    reduction_param_ = p;
  }
  return reduction_param_;
}
inline ::trtcaffe::ReductionParameter* LayerParameter::mutable_reduction_param() {
  // @@protoc_insertion_point(field_mutable:trtcaffe.LayerParameter.reduction_param)
  return _internal_mutable_reduction_param();
}
inline void LayerParameter::set_allocated_reduction_param(::trtcaffe::ReductionParameter* reduction_param) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reduction_param_;
  }
  if (reduction_param) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(reduction_param);
    if (message_arena != submessage_arena) {
      reduction_param = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, reduction_param, submessage_arena);
    }
    _has_bits_[1] |= 0x00000040u;
  } else {
    _has_bits_[1] &= ~0x00000040u;
  }
  reduction_param_ = reduction_param;
  // @@protoc_insertion_point(field_set_allocated:trtcaffe.LayerParameter.reduction_param)
}

// optional .trtcaffe.ReLUParameter relu_param = 123;
inline bool LayerParameter::_internal_has_relu_param() const {
  bool value = (_has_bits_[0] & 0x02000000u) != 0;
  PROTOBUF_ASSUME(!value || relu_param_ != nullptr);
  return value;
}
inline bool LayerParameter::has_relu_param() const {
  return _internal_has_relu_param();
}
inline void LayerParameter::clear_relu_param() {
  if (relu_param_ != nullptr) relu_param_->Clear();
  _has_bits_[0] &= ~0x02000000u;
}
inline const ::trtcaffe::ReLUParameter& LayerParameter::_internal_relu_param() const {
  const ::trtcaffe::ReLUParameter* p = relu_param_;
  return p != nullptr ? *p : *reinterpret_cast<const ::trtcaffe::ReLUParameter*>(
      &::trtcaffe::_ReLUParameter_default_instance_);
}
inline const ::trtcaffe::ReLUParameter& LayerParameter::relu_param() const {
  // @@protoc_insertion_point(field_get:trtcaffe.LayerParameter.relu_param)
  return _internal_relu_param();
}
inline void LayerParameter::unsafe_arena_set_allocated_relu_param(
    ::trtcaffe::ReLUParameter* relu_param) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(relu_param_);
  }
  relu_param_ = relu_param;
  if (relu_param) {
    _has_bits_[0] |= 0x02000000u;
  } else {
    _has_bits_[0] &= ~0x02000000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:trtcaffe.LayerParameter.relu_param)
}
inline ::trtcaffe::ReLUParameter* LayerParameter::release_relu_param() {
  auto temp = unsafe_arena_release_relu_param();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::trtcaffe::ReLUParameter* LayerParameter::unsafe_arena_release_relu_param() {
  // @@protoc_insertion_point(field_release:trtcaffe.LayerParameter.relu_param)
  _has_bits_[0] &= ~0x02000000u;
  ::trtcaffe::ReLUParameter* temp = relu_param_;
  relu_param_ = nullptr;
  return temp;
}
inline ::trtcaffe::ReLUParameter* LayerParameter::_internal_mutable_relu_param() {
  _has_bits_[0] |= 0x02000000u;
  if (relu_param_ == nullptr) {
    auto* p = CreateMaybeMessage<::trtcaffe::ReLUParameter>(GetArena());
    relu_param_ = p;
  }
  return relu_param_;
}
inline ::trtcaffe::ReLUParameter* LayerParameter::mutable_relu_param() {
  // @@protoc_insertion_point(field_mutable:trtcaffe.LayerParameter.relu_param)
  return _internal_mutable_relu_param();
}
inline void LayerParameter::set_allocated_relu_param(::trtcaffe::ReLUParameter* relu_param) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete relu_param_;
  }
  if (relu_param) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(relu_param);
    if (message_arena != submessage_arena) {
      relu_param = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, relu_param, submessage_arena);
    }
    _has_bits_[0] |= 0x02000000u;
  } else {
    _has_bits_[0] &= ~0x02000000u;
  }
  relu_param_ = relu_param;
  // @@protoc_insertion_point(field_set_allocated:trtcaffe.LayerParameter.relu_param)
}

// optional .trtcaffe.ReshapeParameter reshape_param = 133;
inline bool LayerParameter::_internal_has_reshape_param() const {
  bool value = (_has_bits_[1] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || reshape_param_ != nullptr);
  return value;
}
inline bool LayerParameter::has_reshape_param() const {
  return _internal_has_reshape_param();
}
inline void LayerParameter::clear_reshape_param() {
  if (reshape_param_ != nullptr) reshape_param_->Clear();
  _has_bits_[1] &= ~0x00000008u;
}
inline const ::trtcaffe::ReshapeParameter& LayerParameter::_internal_reshape_param() const {
  const ::trtcaffe::ReshapeParameter* p = reshape_param_;
  return p != nullptr ? *p : *reinterpret_cast<const ::trtcaffe::ReshapeParameter*>(
      &::trtcaffe::_ReshapeParameter_default_instance_);
}
inline const ::trtcaffe::ReshapeParameter& LayerParameter::reshape_param() const {
  // @@protoc_insertion_point(field_get:trtcaffe.LayerParameter.reshape_param)
  return _internal_reshape_param();
}
inline void LayerParameter::unsafe_arena_set_allocated_reshape_param(
    ::trtcaffe::ReshapeParameter* reshape_param) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(reshape_param_);
  }
  reshape_param_ = reshape_param;
  if (reshape_param) {
    _has_bits_[1] |= 0x00000008u;
  } else {
    _has_bits_[1] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:trtcaffe.LayerParameter.reshape_param)
}
inline ::trtcaffe::ReshapeParameter* LayerParameter::release_reshape_param() {
  auto temp = unsafe_arena_release_reshape_param();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::trtcaffe::ReshapeParameter* LayerParameter::unsafe_arena_release_reshape_param() {
  // @@protoc_insertion_point(field_release:trtcaffe.LayerParameter.reshape_param)
  _has_bits_[1] &= ~0x00000008u;
  ::trtcaffe::ReshapeParameter* temp = reshape_param_;
  reshape_param_ = nullptr;
  return temp;
}
inline ::trtcaffe::ReshapeParameter* LayerParameter::_internal_mutable_reshape_param() {
  _has_bits_[1] |= 0x00000008u;
  if (reshape_param_ == nullptr) {
    auto* p = CreateMaybeMessage<::trtcaffe::ReshapeParameter>(GetArena());
    reshape_param_ = p;
  }
  return reshape_param_;
}
inline ::trtcaffe::ReshapeParameter* LayerParameter::mutable_reshape_param() {
  // @@protoc_insertion_point(field_mutable:trtcaffe.LayerParameter.reshape_param)
  return _internal_mutable_reshape_param();
}
inline void LayerParameter::set_allocated_reshape_param(::trtcaffe::ReshapeParameter* reshape_param) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reshape_param_;
  }
  if (reshape_param) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(reshape_param);
    if (message_arena != submessage_arena) {
      reshape_param = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, reshape_param, submessage_arena);
    }
    _has_bits_[1] |= 0x00000008u;
  } else {
    _has_bits_[1] &= ~0x00000008u;
  }
  reshape_param_ = reshape_param;
  // @@protoc_insertion_point(field_set_allocated:trtcaffe.LayerParameter.reshape_param)
}

// optional .trtcaffe.ScaleParameter scale_param = 142;
inline bool LayerParameter::_internal_has_scale_param() const {
  bool value = (_has_bits_[1] & 0x00001000u) != 0;
  PROTOBUF_ASSUME(!value || scale_param_ != nullptr);
  return value;
}
inline bool LayerParameter::has_scale_param() const {
  return _internal_has_scale_param();
}
inline void LayerParameter::clear_scale_param() {
  if (scale_param_ != nullptr) scale_param_->Clear();
  _has_bits_[1] &= ~0x00001000u;
}
inline const ::trtcaffe::ScaleParameter& LayerParameter::_internal_scale_param() const {
  const ::trtcaffe::ScaleParameter* p = scale_param_;
  return p != nullptr ? *p : *reinterpret_cast<const ::trtcaffe::ScaleParameter*>(
      &::trtcaffe::_ScaleParameter_default_instance_);
}
inline const ::trtcaffe::ScaleParameter& LayerParameter::scale_param() const {
  // @@protoc_insertion_point(field_get:trtcaffe.LayerParameter.scale_param)
  return _internal_scale_param();
}
inline void LayerParameter::unsafe_arena_set_allocated_scale_param(
    ::trtcaffe::ScaleParameter* scale_param) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(scale_param_);
  }
  scale_param_ = scale_param;
  if (scale_param) {
    _has_bits_[1] |= 0x00001000u;
  } else {
    _has_bits_[1] &= ~0x00001000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:trtcaffe.LayerParameter.scale_param)
}
inline ::trtcaffe::ScaleParameter* LayerParameter::release_scale_param() {
  auto temp = unsafe_arena_release_scale_param();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::trtcaffe::ScaleParameter* LayerParameter::unsafe_arena_release_scale_param() {
  // @@protoc_insertion_point(field_release:trtcaffe.LayerParameter.scale_param)
  _has_bits_[1] &= ~0x00001000u;
  ::trtcaffe::ScaleParameter* temp = scale_param_;
  scale_param_ = nullptr;
  return temp;
}
inline ::trtcaffe::ScaleParameter* LayerParameter::_internal_mutable_scale_param() {
  _has_bits_[1] |= 0x00001000u;
  if (scale_param_ == nullptr) {
    auto* p = CreateMaybeMessage<::trtcaffe::ScaleParameter>(GetArena());
    scale_param_ = p;
  }
  return scale_param_;
}
inline ::trtcaffe::ScaleParameter* LayerParameter::mutable_scale_param() {
  // @@protoc_insertion_point(field_mutable:trtcaffe.LayerParameter.scale_param)
  return _internal_mutable_scale_param();
}
inline void LayerParameter::set_allocated_scale_param(::trtcaffe::ScaleParameter* scale_param) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete scale_param_;
  }
  if (scale_param) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(scale_param);
    if (message_arena != submessage_arena) {
      scale_param = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, scale_param, submessage_arena);
    }
    _has_bits_[1] |= 0x00001000u;
  } else {
    _has_bits_[1] &= ~0x00001000u;
  }
  scale_param_ = scale_param;
  // @@protoc_insertion_point(field_set_allocated:trtcaffe.LayerParameter.scale_param)
}

// optional .trtcaffe.SigmoidParameter sigmoid_param = 124;
inline bool LayerParameter::_internal_has_sigmoid_param() const {
  bool value = (_has_bits_[0] & 0x04000000u) != 0;
  PROTOBUF_ASSUME(!value || sigmoid_param_ != nullptr);
  return value;
}
inline bool LayerParameter::has_sigmoid_param() const {
  return _internal_has_sigmoid_param();
}
inline void LayerParameter::clear_sigmoid_param() {
  if (sigmoid_param_ != nullptr) sigmoid_param_->Clear();
  _has_bits_[0] &= ~0x04000000u;
}
inline const ::trtcaffe::SigmoidParameter& LayerParameter::_internal_sigmoid_param() const {
  const ::trtcaffe::SigmoidParameter* p = sigmoid_param_;
  return p != nullptr ? *p : *reinterpret_cast<const ::trtcaffe::SigmoidParameter*>(
      &::trtcaffe::_SigmoidParameter_default_instance_);
}
inline const ::trtcaffe::SigmoidParameter& LayerParameter::sigmoid_param() const {
  // @@protoc_insertion_point(field_get:trtcaffe.LayerParameter.sigmoid_param)
  return _internal_sigmoid_param();
}
inline void LayerParameter::unsafe_arena_set_allocated_sigmoid_param(
    ::trtcaffe::SigmoidParameter* sigmoid_param) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(sigmoid_param_);
  }
  sigmoid_param_ = sigmoid_param;
  if (sigmoid_param) {
    _has_bits_[0] |= 0x04000000u;
  } else {
    _has_bits_[0] &= ~0x04000000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:trtcaffe.LayerParameter.sigmoid_param)
}
inline ::trtcaffe::SigmoidParameter* LayerParameter::release_sigmoid_param() {
  auto temp = unsafe_arena_release_sigmoid_param();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::trtcaffe::SigmoidParameter* LayerParameter::unsafe_arena_release_sigmoid_param() {
  // @@protoc_insertion_point(field_release:trtcaffe.LayerParameter.sigmoid_param)
  _has_bits_[0] &= ~0x04000000u;
  ::trtcaffe::SigmoidParameter* temp = sigmoid_param_;
  sigmoid_param_ = nullptr;
  return temp;
}
inline ::trtcaffe::SigmoidParameter* LayerParameter::_internal_mutable_sigmoid_param() {
  _has_bits_[0] |= 0x04000000u;
  if (sigmoid_param_ == nullptr) {
    auto* p = CreateMaybeMessage<::trtcaffe::SigmoidParameter>(GetArena());
    sigmoid_param_ = p;
  }
  return sigmoid_param_;
}
inline ::trtcaffe::SigmoidParameter* LayerParameter::mutable_sigmoid_param() {
  // @@protoc_insertion_point(field_mutable:trtcaffe.LayerParameter.sigmoid_param)
  return _internal_mutable_sigmoid_param();
}
inline void LayerParameter::set_allocated_sigmoid_param(::trtcaffe::SigmoidParameter* sigmoid_param) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete sigmoid_param_;
  }
  if (sigmoid_param) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(sigmoid_param);
    if (message_arena != submessage_arena) {
      sigmoid_param = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, sigmoid_param, submessage_arena);
    }
    _has_bits_[0] |= 0x04000000u;
  } else {
    _has_bits_[0] &= ~0x04000000u;
  }
  sigmoid_param_ = sigmoid_param;
  // @@protoc_insertion_point(field_set_allocated:trtcaffe.LayerParameter.sigmoid_param)
}

// optional .trtcaffe.SoftmaxParameter softmax_param = 125;
inline bool LayerParameter::_internal_has_softmax_param() const {
  bool value = (_has_bits_[0] & 0x08000000u) != 0;
  PROTOBUF_ASSUME(!value || softmax_param_ != nullptr);
  return value;
}
inline bool LayerParameter::has_softmax_param() const {
  return _internal_has_softmax_param();
}
inline void LayerParameter::clear_softmax_param() {
  if (softmax_param_ != nullptr) softmax_param_->Clear();
  _has_bits_[0] &= ~0x08000000u;
}
inline const ::trtcaffe::SoftmaxParameter& LayerParameter::_internal_softmax_param() const {
  const ::trtcaffe::SoftmaxParameter* p = softmax_param_;
  return p != nullptr ? *p : *reinterpret_cast<const ::trtcaffe::SoftmaxParameter*>(
      &::trtcaffe::_SoftmaxParameter_default_instance_);
}
inline const ::trtcaffe::SoftmaxParameter& LayerParameter::softmax_param() const {
  // @@protoc_insertion_point(field_get:trtcaffe.LayerParameter.softmax_param)
  return _internal_softmax_param();
}
inline void LayerParameter::unsafe_arena_set_allocated_softmax_param(
    ::trtcaffe::SoftmaxParameter* softmax_param) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(softmax_param_);
  }
  softmax_param_ = softmax_param;
  if (softmax_param) {
    _has_bits_[0] |= 0x08000000u;
  } else {
    _has_bits_[0] &= ~0x08000000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:trtcaffe.LayerParameter.softmax_param)
}
inline ::trtcaffe::SoftmaxParameter* LayerParameter::release_softmax_param() {
  auto temp = unsafe_arena_release_softmax_param();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::trtcaffe::SoftmaxParameter* LayerParameter::unsafe_arena_release_softmax_param() {
  // @@protoc_insertion_point(field_release:trtcaffe.LayerParameter.softmax_param)
  _has_bits_[0] &= ~0x08000000u;
  ::trtcaffe::SoftmaxParameter* temp = softmax_param_;
  softmax_param_ = nullptr;
  return temp;
}
inline ::trtcaffe::SoftmaxParameter* LayerParameter::_internal_mutable_softmax_param() {
  _has_bits_[0] |= 0x08000000u;
  if (softmax_param_ == nullptr) {
    auto* p = CreateMaybeMessage<::trtcaffe::SoftmaxParameter>(GetArena());
    softmax_param_ = p;
  }
  return softmax_param_;
}
inline ::trtcaffe::SoftmaxParameter* LayerParameter::mutable_softmax_param() {
  // @@protoc_insertion_point(field_mutable:trtcaffe.LayerParameter.softmax_param)
  return _internal_mutable_softmax_param();
}
inline void LayerParameter::set_allocated_softmax_param(::trtcaffe::SoftmaxParameter* softmax_param) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete softmax_param_;
  }
  if (softmax_param) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(softmax_param);
    if (message_arena != submessage_arena) {
      softmax_param = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, softmax_param, submessage_arena);
    }
    _has_bits_[0] |= 0x08000000u;
  } else {
    _has_bits_[0] &= ~0x08000000u;
  }
  softmax_param_ = softmax_param;
  // @@protoc_insertion_point(field_set_allocated:trtcaffe.LayerParameter.softmax_param)
}

// optional .trtcaffe.SPPParameter spp_param = 132;
inline bool LayerParameter::_internal_has_spp_param() const {
  bool value = (_has_bits_[1] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || spp_param_ != nullptr);
  return value;
}
inline bool LayerParameter::has_spp_param() const {
  return _internal_has_spp_param();
}
inline void LayerParameter::clear_spp_param() {
  if (spp_param_ != nullptr) spp_param_->Clear();
  _has_bits_[1] &= ~0x00000004u;
}
inline const ::trtcaffe::SPPParameter& LayerParameter::_internal_spp_param() const {
  const ::trtcaffe::SPPParameter* p = spp_param_;
  return p != nullptr ? *p : *reinterpret_cast<const ::trtcaffe::SPPParameter*>(
      &::trtcaffe::_SPPParameter_default_instance_);
}
inline const ::trtcaffe::SPPParameter& LayerParameter::spp_param() const {
  // @@protoc_insertion_point(field_get:trtcaffe.LayerParameter.spp_param)
  return _internal_spp_param();
}
inline void LayerParameter::unsafe_arena_set_allocated_spp_param(
    ::trtcaffe::SPPParameter* spp_param) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(spp_param_);
  }
  spp_param_ = spp_param;
  if (spp_param) {
    _has_bits_[1] |= 0x00000004u;
  } else {
    _has_bits_[1] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:trtcaffe.LayerParameter.spp_param)
}
inline ::trtcaffe::SPPParameter* LayerParameter::release_spp_param() {
  auto temp = unsafe_arena_release_spp_param();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::trtcaffe::SPPParameter* LayerParameter::unsafe_arena_release_spp_param() {
  // @@protoc_insertion_point(field_release:trtcaffe.LayerParameter.spp_param)
  _has_bits_[1] &= ~0x00000004u;
  ::trtcaffe::SPPParameter* temp = spp_param_;
  spp_param_ = nullptr;
  return temp;
}
inline ::trtcaffe::SPPParameter* LayerParameter::_internal_mutable_spp_param() {
  _has_bits_[1] |= 0x00000004u;
  if (spp_param_ == nullptr) {
    auto* p = CreateMaybeMessage<::trtcaffe::SPPParameter>(GetArena());
    spp_param_ = p;
  }
  return spp_param_;
}
inline ::trtcaffe::SPPParameter* LayerParameter::mutable_spp_param() {
  // @@protoc_insertion_point(field_mutable:trtcaffe.LayerParameter.spp_param)
  return _internal_mutable_spp_param();
}
inline void LayerParameter::set_allocated_spp_param(::trtcaffe::SPPParameter* spp_param) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete spp_param_;
  }
  if (spp_param) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(spp_param);
    if (message_arena != submessage_arena) {
      spp_param = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, spp_param, submessage_arena);
    }
    _has_bits_[1] |= 0x00000004u;
  } else {
    _has_bits_[1] &= ~0x00000004u;
  }
  spp_param_ = spp_param;
  // @@protoc_insertion_point(field_set_allocated:trtcaffe.LayerParameter.spp_param)
}

// optional .trtcaffe.SliceParameter slice_param = 126;
inline bool LayerParameter::_internal_has_slice_param() const {
  bool value = (_has_bits_[0] & 0x10000000u) != 0;
  PROTOBUF_ASSUME(!value || slice_param_ != nullptr);
  return value;
}
inline bool LayerParameter::has_slice_param() const {
  return _internal_has_slice_param();
}
inline void LayerParameter::clear_slice_param() {
  if (slice_param_ != nullptr) slice_param_->Clear();
  _has_bits_[0] &= ~0x10000000u;
}
inline const ::trtcaffe::SliceParameter& LayerParameter::_internal_slice_param() const {
  const ::trtcaffe::SliceParameter* p = slice_param_;
  return p != nullptr ? *p : *reinterpret_cast<const ::trtcaffe::SliceParameter*>(
      &::trtcaffe::_SliceParameter_default_instance_);
}
inline const ::trtcaffe::SliceParameter& LayerParameter::slice_param() const {
  // @@protoc_insertion_point(field_get:trtcaffe.LayerParameter.slice_param)
  return _internal_slice_param();
}
inline void LayerParameter::unsafe_arena_set_allocated_slice_param(
    ::trtcaffe::SliceParameter* slice_param) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(slice_param_);
  }
  slice_param_ = slice_param;
  if (slice_param) {
    _has_bits_[0] |= 0x10000000u;
  } else {
    _has_bits_[0] &= ~0x10000000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:trtcaffe.LayerParameter.slice_param)
}
inline ::trtcaffe::SliceParameter* LayerParameter::release_slice_param() {
  auto temp = unsafe_arena_release_slice_param();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::trtcaffe::SliceParameter* LayerParameter::unsafe_arena_release_slice_param() {
  // @@protoc_insertion_point(field_release:trtcaffe.LayerParameter.slice_param)
  _has_bits_[0] &= ~0x10000000u;
  ::trtcaffe::SliceParameter* temp = slice_param_;
  slice_param_ = nullptr;
  return temp;
}
inline ::trtcaffe::SliceParameter* LayerParameter::_internal_mutable_slice_param() {
  _has_bits_[0] |= 0x10000000u;
  if (slice_param_ == nullptr) {
    auto* p = CreateMaybeMessage<::trtcaffe::SliceParameter>(GetArena());
    slice_param_ = p;
  }
  return slice_param_;
}
inline ::trtcaffe::SliceParameter* LayerParameter::mutable_slice_param() {
  // @@protoc_insertion_point(field_mutable:trtcaffe.LayerParameter.slice_param)
  return _internal_mutable_slice_param();
}
inline void LayerParameter::set_allocated_slice_param(::trtcaffe::SliceParameter* slice_param) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete slice_param_;
  }
  if (slice_param) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(slice_param);
    if (message_arena != submessage_arena) {
      slice_param = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, slice_param, submessage_arena);
    }
    _has_bits_[0] |= 0x10000000u;
  } else {
    _has_bits_[0] &= ~0x10000000u;
  }
  slice_param_ = slice_param;
  // @@protoc_insertion_point(field_set_allocated:trtcaffe.LayerParameter.slice_param)
}

// optional .trtcaffe.TanHParameter tanh_param = 127;
inline bool LayerParameter::_internal_has_tanh_param() const {
  bool value = (_has_bits_[0] & 0x20000000u) != 0;
  PROTOBUF_ASSUME(!value || tanh_param_ != nullptr);
  return value;
}
inline bool LayerParameter::has_tanh_param() const {
  return _internal_has_tanh_param();
}
inline void LayerParameter::clear_tanh_param() {
  if (tanh_param_ != nullptr) tanh_param_->Clear();
  _has_bits_[0] &= ~0x20000000u;
}
inline const ::trtcaffe::TanHParameter& LayerParameter::_internal_tanh_param() const {
  const ::trtcaffe::TanHParameter* p = tanh_param_;
  return p != nullptr ? *p : *reinterpret_cast<const ::trtcaffe::TanHParameter*>(
      &::trtcaffe::_TanHParameter_default_instance_);
}
inline const ::trtcaffe::TanHParameter& LayerParameter::tanh_param() const {
  // @@protoc_insertion_point(field_get:trtcaffe.LayerParameter.tanh_param)
  return _internal_tanh_param();
}
inline void LayerParameter::unsafe_arena_set_allocated_tanh_param(
    ::trtcaffe::TanHParameter* tanh_param) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tanh_param_);
  }
  tanh_param_ = tanh_param;
  if (tanh_param) {
    _has_bits_[0] |= 0x20000000u;
  } else {
    _has_bits_[0] &= ~0x20000000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:trtcaffe.LayerParameter.tanh_param)
}
inline ::trtcaffe::TanHParameter* LayerParameter::release_tanh_param() {
  auto temp = unsafe_arena_release_tanh_param();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::trtcaffe::TanHParameter* LayerParameter::unsafe_arena_release_tanh_param() {
  // @@protoc_insertion_point(field_release:trtcaffe.LayerParameter.tanh_param)
  _has_bits_[0] &= ~0x20000000u;
  ::trtcaffe::TanHParameter* temp = tanh_param_;
  tanh_param_ = nullptr;
  return temp;
}
inline ::trtcaffe::TanHParameter* LayerParameter::_internal_mutable_tanh_param() {
  _has_bits_[0] |= 0x20000000u;
  if (tanh_param_ == nullptr) {
    auto* p = CreateMaybeMessage<::trtcaffe::TanHParameter>(GetArena());
    tanh_param_ = p;
  }
  return tanh_param_;
}
inline ::trtcaffe::TanHParameter* LayerParameter::mutable_tanh_param() {
  // @@protoc_insertion_point(field_mutable:trtcaffe.LayerParameter.tanh_param)
  return _internal_mutable_tanh_param();
}
inline void LayerParameter::set_allocated_tanh_param(::trtcaffe::TanHParameter* tanh_param) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete tanh_param_;
  }
  if (tanh_param) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(tanh_param);
    if (message_arena != submessage_arena) {
      tanh_param = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tanh_param, submessage_arena);
    }
    _has_bits_[0] |= 0x20000000u;
  } else {
    _has_bits_[0] &= ~0x20000000u;
  }
  tanh_param_ = tanh_param;
  // @@protoc_insertion_point(field_set_allocated:trtcaffe.LayerParameter.tanh_param)
}

// optional .trtcaffe.ThresholdParameter threshold_param = 128;
inline bool LayerParameter::_internal_has_threshold_param() const {
  bool value = (_has_bits_[0] & 0x40000000u) != 0;
  PROTOBUF_ASSUME(!value || threshold_param_ != nullptr);
  return value;
}
inline bool LayerParameter::has_threshold_param() const {
  return _internal_has_threshold_param();
}
inline void LayerParameter::clear_threshold_param() {
  if (threshold_param_ != nullptr) threshold_param_->Clear();
  _has_bits_[0] &= ~0x40000000u;
}
inline const ::trtcaffe::ThresholdParameter& LayerParameter::_internal_threshold_param() const {
  const ::trtcaffe::ThresholdParameter* p = threshold_param_;
  return p != nullptr ? *p : *reinterpret_cast<const ::trtcaffe::ThresholdParameter*>(
      &::trtcaffe::_ThresholdParameter_default_instance_);
}
inline const ::trtcaffe::ThresholdParameter& LayerParameter::threshold_param() const {
  // @@protoc_insertion_point(field_get:trtcaffe.LayerParameter.threshold_param)
  return _internal_threshold_param();
}
inline void LayerParameter::unsafe_arena_set_allocated_threshold_param(
    ::trtcaffe::ThresholdParameter* threshold_param) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(threshold_param_);
  }
  threshold_param_ = threshold_param;
  if (threshold_param) {
    _has_bits_[0] |= 0x40000000u;
  } else {
    _has_bits_[0] &= ~0x40000000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:trtcaffe.LayerParameter.threshold_param)
}
inline ::trtcaffe::ThresholdParameter* LayerParameter::release_threshold_param() {
  auto temp = unsafe_arena_release_threshold_param();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::trtcaffe::ThresholdParameter* LayerParameter::unsafe_arena_release_threshold_param() {
  // @@protoc_insertion_point(field_release:trtcaffe.LayerParameter.threshold_param)
  _has_bits_[0] &= ~0x40000000u;
  ::trtcaffe::ThresholdParameter* temp = threshold_param_;
  threshold_param_ = nullptr;
  return temp;
}
inline ::trtcaffe::ThresholdParameter* LayerParameter::_internal_mutable_threshold_param() {
  _has_bits_[0] |= 0x40000000u;
  if (threshold_param_ == nullptr) {
    auto* p = CreateMaybeMessage<::trtcaffe::ThresholdParameter>(GetArena());
    threshold_param_ = p;
  }
  return threshold_param_;
}
inline ::trtcaffe::ThresholdParameter* LayerParameter::mutable_threshold_param() {
  // @@protoc_insertion_point(field_mutable:trtcaffe.LayerParameter.threshold_param)
  return _internal_mutable_threshold_param();
}
inline void LayerParameter::set_allocated_threshold_param(::trtcaffe::ThresholdParameter* threshold_param) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete threshold_param_;
  }
  if (threshold_param) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(threshold_param);
    if (message_arena != submessage_arena) {
      threshold_param = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, threshold_param, submessage_arena);
    }
    _has_bits_[0] |= 0x40000000u;
  } else {
    _has_bits_[0] &= ~0x40000000u;
  }
  threshold_param_ = threshold_param;
  // @@protoc_insertion_point(field_set_allocated:trtcaffe.LayerParameter.threshold_param)
}

// optional .trtcaffe.TileParameter tile_param = 138;
inline bool LayerParameter::_internal_has_tile_param() const {
  bool value = (_has_bits_[1] & 0x00000100u) != 0;
  PROTOBUF_ASSUME(!value || tile_param_ != nullptr);
  return value;
}
inline bool LayerParameter::has_tile_param() const {
  return _internal_has_tile_param();
}
inline void LayerParameter::clear_tile_param() {
  if (tile_param_ != nullptr) tile_param_->Clear();
  _has_bits_[1] &= ~0x00000100u;
}
inline const ::trtcaffe::TileParameter& LayerParameter::_internal_tile_param() const {
  const ::trtcaffe::TileParameter* p = tile_param_;
  return p != nullptr ? *p : *reinterpret_cast<const ::trtcaffe::TileParameter*>(
      &::trtcaffe::_TileParameter_default_instance_);
}
inline const ::trtcaffe::TileParameter& LayerParameter::tile_param() const {
  // @@protoc_insertion_point(field_get:trtcaffe.LayerParameter.tile_param)
  return _internal_tile_param();
}
inline void LayerParameter::unsafe_arena_set_allocated_tile_param(
    ::trtcaffe::TileParameter* tile_param) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tile_param_);
  }
  tile_param_ = tile_param;
  if (tile_param) {
    _has_bits_[1] |= 0x00000100u;
  } else {
    _has_bits_[1] &= ~0x00000100u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:trtcaffe.LayerParameter.tile_param)
}
inline ::trtcaffe::TileParameter* LayerParameter::release_tile_param() {
  auto temp = unsafe_arena_release_tile_param();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::trtcaffe::TileParameter* LayerParameter::unsafe_arena_release_tile_param() {
  // @@protoc_insertion_point(field_release:trtcaffe.LayerParameter.tile_param)
  _has_bits_[1] &= ~0x00000100u;
  ::trtcaffe::TileParameter* temp = tile_param_;
  tile_param_ = nullptr;
  return temp;
}
inline ::trtcaffe::TileParameter* LayerParameter::_internal_mutable_tile_param() {
  _has_bits_[1] |= 0x00000100u;
  if (tile_param_ == nullptr) {
    auto* p = CreateMaybeMessage<::trtcaffe::TileParameter>(GetArena());
    tile_param_ = p;
  }
  return tile_param_;
}
inline ::trtcaffe::TileParameter* LayerParameter::mutable_tile_param() {
  // @@protoc_insertion_point(field_mutable:trtcaffe.LayerParameter.tile_param)
  return _internal_mutable_tile_param();
}
inline void LayerParameter::set_allocated_tile_param(::trtcaffe::TileParameter* tile_param) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete tile_param_;
  }
  if (tile_param) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(tile_param);
    if (message_arena != submessage_arena) {
      tile_param = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tile_param, submessage_arena);
    }
    _has_bits_[1] |= 0x00000100u;
  } else {
    _has_bits_[1] &= ~0x00000100u;
  }
  tile_param_ = tile_param;
  // @@protoc_insertion_point(field_set_allocated:trtcaffe.LayerParameter.tile_param)
}

// optional .trtcaffe.WindowDataParameter window_data_param = 129;
inline bool LayerParameter::_internal_has_window_data_param() const {
  bool value = (_has_bits_[0] & 0x80000000u) != 0;
  PROTOBUF_ASSUME(!value || window_data_param_ != nullptr);
  return value;
}
inline bool LayerParameter::has_window_data_param() const {
  return _internal_has_window_data_param();
}
inline void LayerParameter::clear_window_data_param() {
  if (window_data_param_ != nullptr) window_data_param_->Clear();
  _has_bits_[0] &= ~0x80000000u;
}
inline const ::trtcaffe::WindowDataParameter& LayerParameter::_internal_window_data_param() const {
  const ::trtcaffe::WindowDataParameter* p = window_data_param_;
  return p != nullptr ? *p : *reinterpret_cast<const ::trtcaffe::WindowDataParameter*>(
      &::trtcaffe::_WindowDataParameter_default_instance_);
}
inline const ::trtcaffe::WindowDataParameter& LayerParameter::window_data_param() const {
  // @@protoc_insertion_point(field_get:trtcaffe.LayerParameter.window_data_param)
  return _internal_window_data_param();
}
inline void LayerParameter::unsafe_arena_set_allocated_window_data_param(
    ::trtcaffe::WindowDataParameter* window_data_param) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(window_data_param_);
  }
  window_data_param_ = window_data_param;
  if (window_data_param) {
    _has_bits_[0] |= 0x80000000u;
  } else {
    _has_bits_[0] &= ~0x80000000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:trtcaffe.LayerParameter.window_data_param)
}
inline ::trtcaffe::WindowDataParameter* LayerParameter::release_window_data_param() {
  auto temp = unsafe_arena_release_window_data_param();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::trtcaffe::WindowDataParameter* LayerParameter::unsafe_arena_release_window_data_param() {
  // @@protoc_insertion_point(field_release:trtcaffe.LayerParameter.window_data_param)
  _has_bits_[0] &= ~0x80000000u;
  ::trtcaffe::WindowDataParameter* temp = window_data_param_;
  window_data_param_ = nullptr;
  return temp;
}
inline ::trtcaffe::WindowDataParameter* LayerParameter::_internal_mutable_window_data_param() {
  _has_bits_[0] |= 0x80000000u;
  if (window_data_param_ == nullptr) {
    auto* p = CreateMaybeMessage<::trtcaffe::WindowDataParameter>(GetArena());
    window_data_param_ = p;
  }
  return window_data_param_;
}
inline ::trtcaffe::WindowDataParameter* LayerParameter::mutable_window_data_param() {
  // @@protoc_insertion_point(field_mutable:trtcaffe.LayerParameter.window_data_param)
  return _internal_mutable_window_data_param();
}
inline void LayerParameter::set_allocated_window_data_param(::trtcaffe::WindowDataParameter* window_data_param) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete window_data_param_;
  }
  if (window_data_param) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(window_data_param);
    if (message_arena != submessage_arena) {
      window_data_param = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, window_data_param, submessage_arena);
    }
    _has_bits_[0] |= 0x80000000u;
  } else {
    _has_bits_[0] &= ~0x80000000u;
  }
  window_data_param_ = window_data_param;
  // @@protoc_insertion_point(field_set_allocated:trtcaffe.LayerParameter.window_data_param)
}

// optional .trtcaffe.PermuteParameter permute_param = 8781;
inline bool LayerParameter::_internal_has_permute_param() const {
  bool value = (_has_bits_[1] & 0x00008000u) != 0;
  PROTOBUF_ASSUME(!value || permute_param_ != nullptr);
  return value;
}
inline bool LayerParameter::has_permute_param() const {
  return _internal_has_permute_param();
}
inline void LayerParameter::clear_permute_param() {
  if (permute_param_ != nullptr) permute_param_->Clear();
  _has_bits_[1] &= ~0x00008000u;
}
inline const ::trtcaffe::PermuteParameter& LayerParameter::_internal_permute_param() const {
  const ::trtcaffe::PermuteParameter* p = permute_param_;
  return p != nullptr ? *p : *reinterpret_cast<const ::trtcaffe::PermuteParameter*>(
      &::trtcaffe::_PermuteParameter_default_instance_);
}
inline const ::trtcaffe::PermuteParameter& LayerParameter::permute_param() const {
  // @@protoc_insertion_point(field_get:trtcaffe.LayerParameter.permute_param)
  return _internal_permute_param();
}
inline void LayerParameter::unsafe_arena_set_allocated_permute_param(
    ::trtcaffe::PermuteParameter* permute_param) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(permute_param_);
  }
  permute_param_ = permute_param;
  if (permute_param) {
    _has_bits_[1] |= 0x00008000u;
  } else {
    _has_bits_[1] &= ~0x00008000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:trtcaffe.LayerParameter.permute_param)
}
inline ::trtcaffe::PermuteParameter* LayerParameter::release_permute_param() {
  auto temp = unsafe_arena_release_permute_param();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::trtcaffe::PermuteParameter* LayerParameter::unsafe_arena_release_permute_param() {
  // @@protoc_insertion_point(field_release:trtcaffe.LayerParameter.permute_param)
  _has_bits_[1] &= ~0x00008000u;
  ::trtcaffe::PermuteParameter* temp = permute_param_;
  permute_param_ = nullptr;
  return temp;
}
inline ::trtcaffe::PermuteParameter* LayerParameter::_internal_mutable_permute_param() {
  _has_bits_[1] |= 0x00008000u;
  if (permute_param_ == nullptr) {
    auto* p = CreateMaybeMessage<::trtcaffe::PermuteParameter>(GetArena());
    permute_param_ = p;
  }
  return permute_param_;
}
inline ::trtcaffe::PermuteParameter* LayerParameter::mutable_permute_param() {
  // @@protoc_insertion_point(field_mutable:trtcaffe.LayerParameter.permute_param)
  return _internal_mutable_permute_param();
}
inline void LayerParameter::set_allocated_permute_param(::trtcaffe::PermuteParameter* permute_param) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete permute_param_;
  }
  if (permute_param) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(permute_param);
    if (message_arena != submessage_arena) {
      permute_param = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, permute_param, submessage_arena);
    }
    _has_bits_[1] |= 0x00008000u;
  } else {
    _has_bits_[1] &= ~0x00008000u;
  }
  permute_param_ = permute_param;
  // @@protoc_insertion_point(field_set_allocated:trtcaffe.LayerParameter.permute_param)
}

// optional .trtcaffe.DetectionOutputParameter detection_output_param = 8782;
inline bool LayerParameter::_internal_has_detection_output_param() const {
  bool value = (_has_bits_[1] & 0x00010000u) != 0;
  PROTOBUF_ASSUME(!value || detection_output_param_ != nullptr);
  return value;
}
inline bool LayerParameter::has_detection_output_param() const {
  return _internal_has_detection_output_param();
}
inline void LayerParameter::clear_detection_output_param() {
  if (detection_output_param_ != nullptr) detection_output_param_->Clear();
  _has_bits_[1] &= ~0x00010000u;
}
inline const ::trtcaffe::DetectionOutputParameter& LayerParameter::_internal_detection_output_param() const {
  const ::trtcaffe::DetectionOutputParameter* p = detection_output_param_;
  return p != nullptr ? *p : *reinterpret_cast<const ::trtcaffe::DetectionOutputParameter*>(
      &::trtcaffe::_DetectionOutputParameter_default_instance_);
}
inline const ::trtcaffe::DetectionOutputParameter& LayerParameter::detection_output_param() const {
  // @@protoc_insertion_point(field_get:trtcaffe.LayerParameter.detection_output_param)
  return _internal_detection_output_param();
}
inline void LayerParameter::unsafe_arena_set_allocated_detection_output_param(
    ::trtcaffe::DetectionOutputParameter* detection_output_param) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(detection_output_param_);
  }
  detection_output_param_ = detection_output_param;
  if (detection_output_param) {
    _has_bits_[1] |= 0x00010000u;
  } else {
    _has_bits_[1] &= ~0x00010000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:trtcaffe.LayerParameter.detection_output_param)
}
inline ::trtcaffe::DetectionOutputParameter* LayerParameter::release_detection_output_param() {
  auto temp = unsafe_arena_release_detection_output_param();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::trtcaffe::DetectionOutputParameter* LayerParameter::unsafe_arena_release_detection_output_param() {
  // @@protoc_insertion_point(field_release:trtcaffe.LayerParameter.detection_output_param)
  _has_bits_[1] &= ~0x00010000u;
  ::trtcaffe::DetectionOutputParameter* temp = detection_output_param_;
  detection_output_param_ = nullptr;
  return temp;
}
inline ::trtcaffe::DetectionOutputParameter* LayerParameter::_internal_mutable_detection_output_param() {
  _has_bits_[1] |= 0x00010000u;
  if (detection_output_param_ == nullptr) {
    auto* p = CreateMaybeMessage<::trtcaffe::DetectionOutputParameter>(GetArena());
    detection_output_param_ = p;
  }
  return detection_output_param_;
}
inline ::trtcaffe::DetectionOutputParameter* LayerParameter::mutable_detection_output_param() {
  // @@protoc_insertion_point(field_mutable:trtcaffe.LayerParameter.detection_output_param)
  return _internal_mutable_detection_output_param();
}
inline void LayerParameter::set_allocated_detection_output_param(::trtcaffe::DetectionOutputParameter* detection_output_param) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete detection_output_param_;
  }
  if (detection_output_param) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(detection_output_param);
    if (message_arena != submessage_arena) {
      detection_output_param = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, detection_output_param, submessage_arena);
    }
    _has_bits_[1] |= 0x00010000u;
  } else {
    _has_bits_[1] &= ~0x00010000u;
  }
  detection_output_param_ = detection_output_param;
  // @@protoc_insertion_point(field_set_allocated:trtcaffe.LayerParameter.detection_output_param)
}

// optional .trtcaffe.NormalizeParameter norm_param = 8783;
inline bool LayerParameter::_internal_has_norm_param() const {
  bool value = (_has_bits_[1] & 0x00020000u) != 0;
  PROTOBUF_ASSUME(!value || norm_param_ != nullptr);
  return value;
}
inline bool LayerParameter::has_norm_param() const {
  return _internal_has_norm_param();
}
inline void LayerParameter::clear_norm_param() {
  if (norm_param_ != nullptr) norm_param_->Clear();
  _has_bits_[1] &= ~0x00020000u;
}
inline const ::trtcaffe::NormalizeParameter& LayerParameter::_internal_norm_param() const {
  const ::trtcaffe::NormalizeParameter* p = norm_param_;
  return p != nullptr ? *p : *reinterpret_cast<const ::trtcaffe::NormalizeParameter*>(
      &::trtcaffe::_NormalizeParameter_default_instance_);
}
inline const ::trtcaffe::NormalizeParameter& LayerParameter::norm_param() const {
  // @@protoc_insertion_point(field_get:trtcaffe.LayerParameter.norm_param)
  return _internal_norm_param();
}
inline void LayerParameter::unsafe_arena_set_allocated_norm_param(
    ::trtcaffe::NormalizeParameter* norm_param) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(norm_param_);
  }
  norm_param_ = norm_param;
  if (norm_param) {
    _has_bits_[1] |= 0x00020000u;
  } else {
    _has_bits_[1] &= ~0x00020000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:trtcaffe.LayerParameter.norm_param)
}
inline ::trtcaffe::NormalizeParameter* LayerParameter::release_norm_param() {
  auto temp = unsafe_arena_release_norm_param();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::trtcaffe::NormalizeParameter* LayerParameter::unsafe_arena_release_norm_param() {
  // @@protoc_insertion_point(field_release:trtcaffe.LayerParameter.norm_param)
  _has_bits_[1] &= ~0x00020000u;
  ::trtcaffe::NormalizeParameter* temp = norm_param_;
  norm_param_ = nullptr;
  return temp;
}
inline ::trtcaffe::NormalizeParameter* LayerParameter::_internal_mutable_norm_param() {
  _has_bits_[1] |= 0x00020000u;
  if (norm_param_ == nullptr) {
    auto* p = CreateMaybeMessage<::trtcaffe::NormalizeParameter>(GetArena());
    norm_param_ = p;
  }
  return norm_param_;
}
inline ::trtcaffe::NormalizeParameter* LayerParameter::mutable_norm_param() {
  // @@protoc_insertion_point(field_mutable:trtcaffe.LayerParameter.norm_param)
  return _internal_mutable_norm_param();
}
inline void LayerParameter::set_allocated_norm_param(::trtcaffe::NormalizeParameter* norm_param) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete norm_param_;
  }
  if (norm_param) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(norm_param);
    if (message_arena != submessage_arena) {
      norm_param = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, norm_param, submessage_arena);
    }
    _has_bits_[1] |= 0x00020000u;
  } else {
    _has_bits_[1] &= ~0x00020000u;
  }
  norm_param_ = norm_param;
  // @@protoc_insertion_point(field_set_allocated:trtcaffe.LayerParameter.norm_param)
}

// optional .trtcaffe.PriorBoxParameter prior_box_param = 8784;
inline bool LayerParameter::_internal_has_prior_box_param() const {
  bool value = (_has_bits_[1] & 0x00040000u) != 0;
  PROTOBUF_ASSUME(!value || prior_box_param_ != nullptr);
  return value;
}
inline bool LayerParameter::has_prior_box_param() const {
  return _internal_has_prior_box_param();
}
inline void LayerParameter::clear_prior_box_param() {
  if (prior_box_param_ != nullptr) prior_box_param_->Clear();
  _has_bits_[1] &= ~0x00040000u;
}
inline const ::trtcaffe::PriorBoxParameter& LayerParameter::_internal_prior_box_param() const {
  const ::trtcaffe::PriorBoxParameter* p = prior_box_param_;
  return p != nullptr ? *p : *reinterpret_cast<const ::trtcaffe::PriorBoxParameter*>(
      &::trtcaffe::_PriorBoxParameter_default_instance_);
}
inline const ::trtcaffe::PriorBoxParameter& LayerParameter::prior_box_param() const {
  // @@protoc_insertion_point(field_get:trtcaffe.LayerParameter.prior_box_param)
  return _internal_prior_box_param();
}
inline void LayerParameter::unsafe_arena_set_allocated_prior_box_param(
    ::trtcaffe::PriorBoxParameter* prior_box_param) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(prior_box_param_);
  }
  prior_box_param_ = prior_box_param;
  if (prior_box_param) {
    _has_bits_[1] |= 0x00040000u;
  } else {
    _has_bits_[1] &= ~0x00040000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:trtcaffe.LayerParameter.prior_box_param)
}
inline ::trtcaffe::PriorBoxParameter* LayerParameter::release_prior_box_param() {
  auto temp = unsafe_arena_release_prior_box_param();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::trtcaffe::PriorBoxParameter* LayerParameter::unsafe_arena_release_prior_box_param() {
  // @@protoc_insertion_point(field_release:trtcaffe.LayerParameter.prior_box_param)
  _has_bits_[1] &= ~0x00040000u;
  ::trtcaffe::PriorBoxParameter* temp = prior_box_param_;
  prior_box_param_ = nullptr;
  return temp;
}
inline ::trtcaffe::PriorBoxParameter* LayerParameter::_internal_mutable_prior_box_param() {
  _has_bits_[1] |= 0x00040000u;
  if (prior_box_param_ == nullptr) {
    auto* p = CreateMaybeMessage<::trtcaffe::PriorBoxParameter>(GetArena());
    prior_box_param_ = p;
  }
  return prior_box_param_;
}
inline ::trtcaffe::PriorBoxParameter* LayerParameter::mutable_prior_box_param() {
  // @@protoc_insertion_point(field_mutable:trtcaffe.LayerParameter.prior_box_param)
  return _internal_mutable_prior_box_param();
}
inline void LayerParameter::set_allocated_prior_box_param(::trtcaffe::PriorBoxParameter* prior_box_param) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete prior_box_param_;
  }
  if (prior_box_param) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(prior_box_param);
    if (message_arena != submessage_arena) {
      prior_box_param = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, prior_box_param, submessage_arena);
    }
    _has_bits_[1] |= 0x00040000u;
  } else {
    _has_bits_[1] &= ~0x00040000u;
  }
  prior_box_param_ = prior_box_param;
  // @@protoc_insertion_point(field_set_allocated:trtcaffe.LayerParameter.prior_box_param)
}

// optional .trtcaffe.ROIPoolingParameter roi_pooling_param = 8785;
inline bool LayerParameter::_internal_has_roi_pooling_param() const {
  bool value = (_has_bits_[1] & 0x00080000u) != 0;
  PROTOBUF_ASSUME(!value || roi_pooling_param_ != nullptr);
  return value;
}
inline bool LayerParameter::has_roi_pooling_param() const {
  return _internal_has_roi_pooling_param();
}
inline void LayerParameter::clear_roi_pooling_param() {
  if (roi_pooling_param_ != nullptr) roi_pooling_param_->Clear();
  _has_bits_[1] &= ~0x00080000u;
}
inline const ::trtcaffe::ROIPoolingParameter& LayerParameter::_internal_roi_pooling_param() const {
  const ::trtcaffe::ROIPoolingParameter* p = roi_pooling_param_;
  return p != nullptr ? *p : *reinterpret_cast<const ::trtcaffe::ROIPoolingParameter*>(
      &::trtcaffe::_ROIPoolingParameter_default_instance_);
}
inline const ::trtcaffe::ROIPoolingParameter& LayerParameter::roi_pooling_param() const {
  // @@protoc_insertion_point(field_get:trtcaffe.LayerParameter.roi_pooling_param)
  return _internal_roi_pooling_param();
}
inline void LayerParameter::unsafe_arena_set_allocated_roi_pooling_param(
    ::trtcaffe::ROIPoolingParameter* roi_pooling_param) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(roi_pooling_param_);
  }
  roi_pooling_param_ = roi_pooling_param;
  if (roi_pooling_param) {
    _has_bits_[1] |= 0x00080000u;
  } else {
    _has_bits_[1] &= ~0x00080000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:trtcaffe.LayerParameter.roi_pooling_param)
}
inline ::trtcaffe::ROIPoolingParameter* LayerParameter::release_roi_pooling_param() {
  auto temp = unsafe_arena_release_roi_pooling_param();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::trtcaffe::ROIPoolingParameter* LayerParameter::unsafe_arena_release_roi_pooling_param() {
  // @@protoc_insertion_point(field_release:trtcaffe.LayerParameter.roi_pooling_param)
  _has_bits_[1] &= ~0x00080000u;
  ::trtcaffe::ROIPoolingParameter* temp = roi_pooling_param_;
  roi_pooling_param_ = nullptr;
  return temp;
}
inline ::trtcaffe::ROIPoolingParameter* LayerParameter::_internal_mutable_roi_pooling_param() {
  _has_bits_[1] |= 0x00080000u;
  if (roi_pooling_param_ == nullptr) {
    auto* p = CreateMaybeMessage<::trtcaffe::ROIPoolingParameter>(GetArena());
    roi_pooling_param_ = p;
  }
  return roi_pooling_param_;
}
inline ::trtcaffe::ROIPoolingParameter* LayerParameter::mutable_roi_pooling_param() {
  // @@protoc_insertion_point(field_mutable:trtcaffe.LayerParameter.roi_pooling_param)
  return _internal_mutable_roi_pooling_param();
}
inline void LayerParameter::set_allocated_roi_pooling_param(::trtcaffe::ROIPoolingParameter* roi_pooling_param) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete roi_pooling_param_;
  }
  if (roi_pooling_param) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(roi_pooling_param);
    if (message_arena != submessage_arena) {
      roi_pooling_param = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, roi_pooling_param, submessage_arena);
    }
    _has_bits_[1] |= 0x00080000u;
  } else {
    _has_bits_[1] &= ~0x00080000u;
  }
  roi_pooling_param_ = roi_pooling_param;
  // @@protoc_insertion_point(field_set_allocated:trtcaffe.LayerParameter.roi_pooling_param)
}

// optional .trtcaffe.RegionProposalParameter region_proposal_param = 8786;
inline bool LayerParameter::_internal_has_region_proposal_param() const {
  bool value = (_has_bits_[1] & 0x00100000u) != 0;
  PROTOBUF_ASSUME(!value || region_proposal_param_ != nullptr);
  return value;
}
inline bool LayerParameter::has_region_proposal_param() const {
  return _internal_has_region_proposal_param();
}
inline void LayerParameter::clear_region_proposal_param() {
  if (region_proposal_param_ != nullptr) region_proposal_param_->Clear();
  _has_bits_[1] &= ~0x00100000u;
}
inline const ::trtcaffe::RegionProposalParameter& LayerParameter::_internal_region_proposal_param() const {
  const ::trtcaffe::RegionProposalParameter* p = region_proposal_param_;
  return p != nullptr ? *p : *reinterpret_cast<const ::trtcaffe::RegionProposalParameter*>(
      &::trtcaffe::_RegionProposalParameter_default_instance_);
}
inline const ::trtcaffe::RegionProposalParameter& LayerParameter::region_proposal_param() const {
  // @@protoc_insertion_point(field_get:trtcaffe.LayerParameter.region_proposal_param)
  return _internal_region_proposal_param();
}
inline void LayerParameter::unsafe_arena_set_allocated_region_proposal_param(
    ::trtcaffe::RegionProposalParameter* region_proposal_param) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(region_proposal_param_);
  }
  region_proposal_param_ = region_proposal_param;
  if (region_proposal_param) {
    _has_bits_[1] |= 0x00100000u;
  } else {
    _has_bits_[1] &= ~0x00100000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:trtcaffe.LayerParameter.region_proposal_param)
}
inline ::trtcaffe::RegionProposalParameter* LayerParameter::release_region_proposal_param() {
  auto temp = unsafe_arena_release_region_proposal_param();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::trtcaffe::RegionProposalParameter* LayerParameter::unsafe_arena_release_region_proposal_param() {
  // @@protoc_insertion_point(field_release:trtcaffe.LayerParameter.region_proposal_param)
  _has_bits_[1] &= ~0x00100000u;
  ::trtcaffe::RegionProposalParameter* temp = region_proposal_param_;
  region_proposal_param_ = nullptr;
  return temp;
}
inline ::trtcaffe::RegionProposalParameter* LayerParameter::_internal_mutable_region_proposal_param() {
  _has_bits_[1] |= 0x00100000u;
  if (region_proposal_param_ == nullptr) {
    auto* p = CreateMaybeMessage<::trtcaffe::RegionProposalParameter>(GetArena());
    region_proposal_param_ = p;
  }
  return region_proposal_param_;
}
inline ::trtcaffe::RegionProposalParameter* LayerParameter::mutable_region_proposal_param() {
  // @@protoc_insertion_point(field_mutable:trtcaffe.LayerParameter.region_proposal_param)
  return _internal_mutable_region_proposal_param();
}
inline void LayerParameter::set_allocated_region_proposal_param(::trtcaffe::RegionProposalParameter* region_proposal_param) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete region_proposal_param_;
  }
  if (region_proposal_param) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(region_proposal_param);
    if (message_arena != submessage_arena) {
      region_proposal_param = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, region_proposal_param, submessage_arena);
    }
    _has_bits_[1] |= 0x00100000u;
  } else {
    _has_bits_[1] &= ~0x00100000u;
  }
  region_proposal_param_ = region_proposal_param;
  // @@protoc_insertion_point(field_set_allocated:trtcaffe.LayerParameter.region_proposal_param)
}

// optional .trtcaffe.ClipParameter clip_param = 8787;
inline bool LayerParameter::_internal_has_clip_param() const {
  bool value = (_has_bits_[1] & 0x00200000u) != 0;
  PROTOBUF_ASSUME(!value || clip_param_ != nullptr);
  return value;
}
inline bool LayerParameter::has_clip_param() const {
  return _internal_has_clip_param();
}
inline void LayerParameter::clear_clip_param() {
  if (clip_param_ != nullptr) clip_param_->Clear();
  _has_bits_[1] &= ~0x00200000u;
}
inline const ::trtcaffe::ClipParameter& LayerParameter::_internal_clip_param() const {
  const ::trtcaffe::ClipParameter* p = clip_param_;
  return p != nullptr ? *p : *reinterpret_cast<const ::trtcaffe::ClipParameter*>(
      &::trtcaffe::_ClipParameter_default_instance_);
}
inline const ::trtcaffe::ClipParameter& LayerParameter::clip_param() const {
  // @@protoc_insertion_point(field_get:trtcaffe.LayerParameter.clip_param)
  return _internal_clip_param();
}
inline void LayerParameter::unsafe_arena_set_allocated_clip_param(
    ::trtcaffe::ClipParameter* clip_param) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(clip_param_);
  }
  clip_param_ = clip_param;
  if (clip_param) {
    _has_bits_[1] |= 0x00200000u;
  } else {
    _has_bits_[1] &= ~0x00200000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:trtcaffe.LayerParameter.clip_param)
}
inline ::trtcaffe::ClipParameter* LayerParameter::release_clip_param() {
  auto temp = unsafe_arena_release_clip_param();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::trtcaffe::ClipParameter* LayerParameter::unsafe_arena_release_clip_param() {
  // @@protoc_insertion_point(field_release:trtcaffe.LayerParameter.clip_param)
  _has_bits_[1] &= ~0x00200000u;
  ::trtcaffe::ClipParameter* temp = clip_param_;
  clip_param_ = nullptr;
  return temp;
}
inline ::trtcaffe::ClipParameter* LayerParameter::_internal_mutable_clip_param() {
  _has_bits_[1] |= 0x00200000u;
  if (clip_param_ == nullptr) {
    auto* p = CreateMaybeMessage<::trtcaffe::ClipParameter>(GetArena());
    clip_param_ = p;
  }
  return clip_param_;
}
inline ::trtcaffe::ClipParameter* LayerParameter::mutable_clip_param() {
  // @@protoc_insertion_point(field_mutable:trtcaffe.LayerParameter.clip_param)
  return _internal_mutable_clip_param();
}
inline void LayerParameter::set_allocated_clip_param(::trtcaffe::ClipParameter* clip_param) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete clip_param_;
  }
  if (clip_param) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(clip_param);
    if (message_arena != submessage_arena) {
      clip_param = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, clip_param, submessage_arena);
    }
    _has_bits_[1] |= 0x00200000u;
  } else {
    _has_bits_[1] &= ~0x00200000u;
  }
  clip_param_ = clip_param;
  // @@protoc_insertion_point(field_set_allocated:trtcaffe.LayerParameter.clip_param)
}

// -------------------------------------------------------------------

// TransformationParameter

// optional uint32 img_rand_resize_lower = 10 [default = 0];
inline bool TransformationParameter::_internal_has_img_rand_resize_lower() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool TransformationParameter::has_img_rand_resize_lower() const {
  return _internal_has_img_rand_resize_lower();
}
inline void TransformationParameter::clear_img_rand_resize_lower() {
  img_rand_resize_lower_ = 0u;
  _has_bits_[0] &= ~0x00000080u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TransformationParameter::_internal_img_rand_resize_lower() const {
  return img_rand_resize_lower_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TransformationParameter::img_rand_resize_lower() const {
  // @@protoc_insertion_point(field_get:trtcaffe.TransformationParameter.img_rand_resize_lower)
  return _internal_img_rand_resize_lower();
}
inline void TransformationParameter::_internal_set_img_rand_resize_lower(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000080u;
  img_rand_resize_lower_ = value;
}
inline void TransformationParameter::set_img_rand_resize_lower(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_img_rand_resize_lower(value);
  // @@protoc_insertion_point(field_set:trtcaffe.TransformationParameter.img_rand_resize_lower)
}

// optional uint32 img_rand_resize_upper = 11 [default = 0];
inline bool TransformationParameter::_internal_has_img_rand_resize_upper() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool TransformationParameter::has_img_rand_resize_upper() const {
  return _internal_has_img_rand_resize_upper();
}
inline void TransformationParameter::clear_img_rand_resize_upper() {
  img_rand_resize_upper_ = 0u;
  _has_bits_[0] &= ~0x00000100u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TransformationParameter::_internal_img_rand_resize_upper() const {
  return img_rand_resize_upper_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TransformationParameter::img_rand_resize_upper() const {
  // @@protoc_insertion_point(field_get:trtcaffe.TransformationParameter.img_rand_resize_upper)
  return _internal_img_rand_resize_upper();
}
inline void TransformationParameter::_internal_set_img_rand_resize_upper(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000100u;
  img_rand_resize_upper_ = value;
}
inline void TransformationParameter::set_img_rand_resize_upper(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_img_rand_resize_upper(value);
  // @@protoc_insertion_point(field_set:trtcaffe.TransformationParameter.img_rand_resize_upper)
}

// optional float rand_resize_ratio_lower = 12 [default = 0];
inline bool TransformationParameter::_internal_has_rand_resize_ratio_lower() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool TransformationParameter::has_rand_resize_ratio_lower() const {
  return _internal_has_rand_resize_ratio_lower();
}
inline void TransformationParameter::clear_rand_resize_ratio_lower() {
  rand_resize_ratio_lower_ = 0;
  _has_bits_[0] &= ~0x00000200u;
}
inline float TransformationParameter::_internal_rand_resize_ratio_lower() const {
  return rand_resize_ratio_lower_;
}
inline float TransformationParameter::rand_resize_ratio_lower() const {
  // @@protoc_insertion_point(field_get:trtcaffe.TransformationParameter.rand_resize_ratio_lower)
  return _internal_rand_resize_ratio_lower();
}
inline void TransformationParameter::_internal_set_rand_resize_ratio_lower(float value) {
  _has_bits_[0] |= 0x00000200u;
  rand_resize_ratio_lower_ = value;
}
inline void TransformationParameter::set_rand_resize_ratio_lower(float value) {
  _internal_set_rand_resize_ratio_lower(value);
  // @@protoc_insertion_point(field_set:trtcaffe.TransformationParameter.rand_resize_ratio_lower)
}

// optional float rand_resize_ratio_upper = 13 [default = 0];
inline bool TransformationParameter::_internal_has_rand_resize_ratio_upper() const {
  bool value = (_has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool TransformationParameter::has_rand_resize_ratio_upper() const {
  return _internal_has_rand_resize_ratio_upper();
}
inline void TransformationParameter::clear_rand_resize_ratio_upper() {
  rand_resize_ratio_upper_ = 0;
  _has_bits_[0] &= ~0x00000400u;
}
inline float TransformationParameter::_internal_rand_resize_ratio_upper() const {
  return rand_resize_ratio_upper_;
}
inline float TransformationParameter::rand_resize_ratio_upper() const {
  // @@protoc_insertion_point(field_get:trtcaffe.TransformationParameter.rand_resize_ratio_upper)
  return _internal_rand_resize_ratio_upper();
}
inline void TransformationParameter::_internal_set_rand_resize_ratio_upper(float value) {
  _has_bits_[0] |= 0x00000400u;
  rand_resize_ratio_upper_ = value;
}
inline void TransformationParameter::set_rand_resize_ratio_upper(float value) {
  _internal_set_rand_resize_ratio_upper(value);
  // @@protoc_insertion_point(field_set:trtcaffe.TransformationParameter.rand_resize_ratio_upper)
}

// optional float vertical_stretch_lower = 14 [default = 1];
inline bool TransformationParameter::_internal_has_vertical_stretch_lower() const {
  bool value = (_has_bits_[0] & 0x00002000u) != 0;
  return value;
}
inline bool TransformationParameter::has_vertical_stretch_lower() const {
  return _internal_has_vertical_stretch_lower();
}
inline void TransformationParameter::clear_vertical_stretch_lower() {
  vertical_stretch_lower_ = 1;
  _has_bits_[0] &= ~0x00002000u;
}
inline float TransformationParameter::_internal_vertical_stretch_lower() const {
  return vertical_stretch_lower_;
}
inline float TransformationParameter::vertical_stretch_lower() const {
  // @@protoc_insertion_point(field_get:trtcaffe.TransformationParameter.vertical_stretch_lower)
  return _internal_vertical_stretch_lower();
}
inline void TransformationParameter::_internal_set_vertical_stretch_lower(float value) {
  _has_bits_[0] |= 0x00002000u;
  vertical_stretch_lower_ = value;
}
inline void TransformationParameter::set_vertical_stretch_lower(float value) {
  _internal_set_vertical_stretch_lower(value);
  // @@protoc_insertion_point(field_set:trtcaffe.TransformationParameter.vertical_stretch_lower)
}

// optional float vertical_stretch_upper = 15 [default = 1];
inline bool TransformationParameter::_internal_has_vertical_stretch_upper() const {
  bool value = (_has_bits_[0] & 0x00008000u) != 0;
  return value;
}
inline bool TransformationParameter::has_vertical_stretch_upper() const {
  return _internal_has_vertical_stretch_upper();
}
inline void TransformationParameter::clear_vertical_stretch_upper() {
  vertical_stretch_upper_ = 1;
  _has_bits_[0] &= ~0x00008000u;
}
inline float TransformationParameter::_internal_vertical_stretch_upper() const {
  return vertical_stretch_upper_;
}
inline float TransformationParameter::vertical_stretch_upper() const {
  // @@protoc_insertion_point(field_get:trtcaffe.TransformationParameter.vertical_stretch_upper)
  return _internal_vertical_stretch_upper();
}
inline void TransformationParameter::_internal_set_vertical_stretch_upper(float value) {
  _has_bits_[0] |= 0x00008000u;
  vertical_stretch_upper_ = value;
}
inline void TransformationParameter::set_vertical_stretch_upper(float value) {
  _internal_set_vertical_stretch_upper(value);
  // @@protoc_insertion_point(field_set:trtcaffe.TransformationParameter.vertical_stretch_upper)
}

// optional float horizontal_stretch_lower = 16 [default = 1];
inline bool TransformationParameter::_internal_has_horizontal_stretch_lower() const {
  bool value = (_has_bits_[0] & 0x00010000u) != 0;
  return value;
}
inline bool TransformationParameter::has_horizontal_stretch_lower() const {
  return _internal_has_horizontal_stretch_lower();
}
inline void TransformationParameter::clear_horizontal_stretch_lower() {
  horizontal_stretch_lower_ = 1;
  _has_bits_[0] &= ~0x00010000u;
}
inline float TransformationParameter::_internal_horizontal_stretch_lower() const {
  return horizontal_stretch_lower_;
}
inline float TransformationParameter::horizontal_stretch_lower() const {
  // @@protoc_insertion_point(field_get:trtcaffe.TransformationParameter.horizontal_stretch_lower)
  return _internal_horizontal_stretch_lower();
}
inline void TransformationParameter::_internal_set_horizontal_stretch_lower(float value) {
  _has_bits_[0] |= 0x00010000u;
  horizontal_stretch_lower_ = value;
}
inline void TransformationParameter::set_horizontal_stretch_lower(float value) {
  _internal_set_horizontal_stretch_lower(value);
  // @@protoc_insertion_point(field_set:trtcaffe.TransformationParameter.horizontal_stretch_lower)
}

// optional float horizontal_stretch_upper = 17 [default = 1];
inline bool TransformationParameter::_internal_has_horizontal_stretch_upper() const {
  bool value = (_has_bits_[0] & 0x00020000u) != 0;
  return value;
}
inline bool TransformationParameter::has_horizontal_stretch_upper() const {
  return _internal_has_horizontal_stretch_upper();
}
inline void TransformationParameter::clear_horizontal_stretch_upper() {
  horizontal_stretch_upper_ = 1;
  _has_bits_[0] &= ~0x00020000u;
}
inline float TransformationParameter::_internal_horizontal_stretch_upper() const {
  return horizontal_stretch_upper_;
}
inline float TransformationParameter::horizontal_stretch_upper() const {
  // @@protoc_insertion_point(field_get:trtcaffe.TransformationParameter.horizontal_stretch_upper)
  return _internal_horizontal_stretch_upper();
}
inline void TransformationParameter::_internal_set_horizontal_stretch_upper(float value) {
  _has_bits_[0] |= 0x00020000u;
  horizontal_stretch_upper_ = value;
}
inline void TransformationParameter::set_horizontal_stretch_upper(float value) {
  _internal_set_horizontal_stretch_upper(value);
  // @@protoc_insertion_point(field_set:trtcaffe.TransformationParameter.horizontal_stretch_upper)
}

// optional .trtcaffe.TransformationParameter.InterpolationAlgo interpolation_algo_down = 18 [default = INTER_NEAREST];
inline bool TransformationParameter::_internal_has_interpolation_algo_down() const {
  bool value = (_has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool TransformationParameter::has_interpolation_algo_down() const {
  return _internal_has_interpolation_algo_down();
}
inline void TransformationParameter::clear_interpolation_algo_down() {
  interpolation_algo_down_ = 0;
  _has_bits_[0] &= ~0x00000800u;
}
inline ::trtcaffe::TransformationParameter_InterpolationAlgo TransformationParameter::_internal_interpolation_algo_down() const {
  return static_cast< ::trtcaffe::TransformationParameter_InterpolationAlgo >(interpolation_algo_down_);
}
inline ::trtcaffe::TransformationParameter_InterpolationAlgo TransformationParameter::interpolation_algo_down() const {
  // @@protoc_insertion_point(field_get:trtcaffe.TransformationParameter.interpolation_algo_down)
  return _internal_interpolation_algo_down();
}
inline void TransformationParameter::_internal_set_interpolation_algo_down(::trtcaffe::TransformationParameter_InterpolationAlgo value) {
  assert(::trtcaffe::TransformationParameter_InterpolationAlgo_IsValid(value));
  _has_bits_[0] |= 0x00000800u;
  interpolation_algo_down_ = value;
}
inline void TransformationParameter::set_interpolation_algo_down(::trtcaffe::TransformationParameter_InterpolationAlgo value) {
  _internal_set_interpolation_algo_down(value);
  // @@protoc_insertion_point(field_set:trtcaffe.TransformationParameter.interpolation_algo_down)
}

// optional .trtcaffe.TransformationParameter.InterpolationAlgo interpolation_algo_up = 19 [default = INTER_CUBIC];
inline bool TransformationParameter::_internal_has_interpolation_algo_up() const {
  bool value = (_has_bits_[0] & 0x00040000u) != 0;
  return value;
}
inline bool TransformationParameter::has_interpolation_algo_up() const {
  return _internal_has_interpolation_algo_up();
}
inline void TransformationParameter::clear_interpolation_algo_up() {
  interpolation_algo_up_ = 2;
  _has_bits_[0] &= ~0x00040000u;
}
inline ::trtcaffe::TransformationParameter_InterpolationAlgo TransformationParameter::_internal_interpolation_algo_up() const {
  return static_cast< ::trtcaffe::TransformationParameter_InterpolationAlgo >(interpolation_algo_up_);
}
inline ::trtcaffe::TransformationParameter_InterpolationAlgo TransformationParameter::interpolation_algo_up() const {
  // @@protoc_insertion_point(field_get:trtcaffe.TransformationParameter.interpolation_algo_up)
  return _internal_interpolation_algo_up();
}
inline void TransformationParameter::_internal_set_interpolation_algo_up(::trtcaffe::TransformationParameter_InterpolationAlgo value) {
  assert(::trtcaffe::TransformationParameter_InterpolationAlgo_IsValid(value));
  _has_bits_[0] |= 0x00040000u;
  interpolation_algo_up_ = value;
}
inline void TransformationParameter::set_interpolation_algo_up(::trtcaffe::TransformationParameter_InterpolationAlgo value) {
  _internal_set_interpolation_algo_up(value);
  // @@protoc_insertion_point(field_set:trtcaffe.TransformationParameter.interpolation_algo_up)
}

// optional bool allow_upscale = 20 [default = false];
inline bool TransformationParameter::_internal_has_allow_upscale() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool TransformationParameter::has_allow_upscale() const {
  return _internal_has_allow_upscale();
}
inline void TransformationParameter::clear_allow_upscale() {
  allow_upscale_ = false;
  _has_bits_[0] &= ~0x00000008u;
}
inline bool TransformationParameter::_internal_allow_upscale() const {
  return allow_upscale_;
}
inline bool TransformationParameter::allow_upscale() const {
  // @@protoc_insertion_point(field_get:trtcaffe.TransformationParameter.allow_upscale)
  return _internal_allow_upscale();
}
inline void TransformationParameter::_internal_set_allow_upscale(bool value) {
  _has_bits_[0] |= 0x00000008u;
  allow_upscale_ = value;
}
inline void TransformationParameter::set_allow_upscale(bool value) {
  _internal_set_allow_upscale(value);
  // @@protoc_insertion_point(field_set:trtcaffe.TransformationParameter.allow_upscale)
}

// optional float scale = 1 [default = 1];
inline bool TransformationParameter::_internal_has_scale() const {
  bool value = (_has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline bool TransformationParameter::has_scale() const {
  return _internal_has_scale();
}
inline void TransformationParameter::clear_scale() {
  scale_ = 1;
  _has_bits_[0] &= ~0x00001000u;
}
inline float TransformationParameter::_internal_scale() const {
  return scale_;
}
inline float TransformationParameter::scale() const {
  // @@protoc_insertion_point(field_get:trtcaffe.TransformationParameter.scale)
  return _internal_scale();
}
inline void TransformationParameter::_internal_set_scale(float value) {
  _has_bits_[0] |= 0x00001000u;
  scale_ = value;
}
inline void TransformationParameter::set_scale(float value) {
  _internal_set_scale(value);
  // @@protoc_insertion_point(field_set:trtcaffe.TransformationParameter.scale)
}

// optional bool mirror = 2 [default = false];
inline bool TransformationParameter::_internal_has_mirror() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool TransformationParameter::has_mirror() const {
  return _internal_has_mirror();
}
inline void TransformationParameter::clear_mirror() {
  mirror_ = false;
  _has_bits_[0] &= ~0x00000010u;
}
inline bool TransformationParameter::_internal_mirror() const {
  return mirror_;
}
inline bool TransformationParameter::mirror() const {
  // @@protoc_insertion_point(field_get:trtcaffe.TransformationParameter.mirror)
  return _internal_mirror();
}
inline void TransformationParameter::_internal_set_mirror(bool value) {
  _has_bits_[0] |= 0x00000010u;
  mirror_ = value;
}
inline void TransformationParameter::set_mirror(bool value) {
  _internal_set_mirror(value);
  // @@protoc_insertion_point(field_set:trtcaffe.TransformationParameter.mirror)
}

// optional uint32 crop_size = 3 [default = 0];
inline bool TransformationParameter::_internal_has_crop_size() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool TransformationParameter::has_crop_size() const {
  return _internal_has_crop_size();
}
inline void TransformationParameter::clear_crop_size() {
  crop_size_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TransformationParameter::_internal_crop_size() const {
  return crop_size_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TransformationParameter::crop_size() const {
  // @@protoc_insertion_point(field_get:trtcaffe.TransformationParameter.crop_size)
  return _internal_crop_size();
}
inline void TransformationParameter::_internal_set_crop_size(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  crop_size_ = value;
}
inline void TransformationParameter::set_crop_size(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_crop_size(value);
  // @@protoc_insertion_point(field_set:trtcaffe.TransformationParameter.crop_size)
}

// optional string mean_file = 4;
inline bool TransformationParameter::_internal_has_mean_file() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool TransformationParameter::has_mean_file() const {
  return _internal_has_mean_file();
}
inline void TransformationParameter::clear_mean_file() {
  mean_file_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& TransformationParameter::mean_file() const {
  // @@protoc_insertion_point(field_get:trtcaffe.TransformationParameter.mean_file)
  return _internal_mean_file();
}
inline void TransformationParameter::set_mean_file(const std::string& value) {
  _internal_set_mean_file(value);
  // @@protoc_insertion_point(field_set:trtcaffe.TransformationParameter.mean_file)
}
inline std::string* TransformationParameter::mutable_mean_file() {
  // @@protoc_insertion_point(field_mutable:trtcaffe.TransformationParameter.mean_file)
  return _internal_mutable_mean_file();
}
inline const std::string& TransformationParameter::_internal_mean_file() const {
  return mean_file_.Get();
}
inline void TransformationParameter::_internal_set_mean_file(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  mean_file_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void TransformationParameter::set_mean_file(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  mean_file_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:trtcaffe.TransformationParameter.mean_file)
}
inline void TransformationParameter::set_mean_file(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  mean_file_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:trtcaffe.TransformationParameter.mean_file)
}
inline void TransformationParameter::set_mean_file(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  mean_file_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:trtcaffe.TransformationParameter.mean_file)
}
inline std::string* TransformationParameter::_internal_mutable_mean_file() {
  _has_bits_[0] |= 0x00000001u;
  return mean_file_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* TransformationParameter::release_mean_file() {
  // @@protoc_insertion_point(field_release:trtcaffe.TransformationParameter.mean_file)
  if (!_internal_has_mean_file()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return mean_file_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void TransformationParameter::set_allocated_mean_file(std::string* mean_file) {
  if (mean_file != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  mean_file_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), mean_file,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:trtcaffe.TransformationParameter.mean_file)
}
inline std::string* TransformationParameter::unsafe_arena_release_mean_file() {
  // @@protoc_insertion_point(field_unsafe_arena_release:trtcaffe.TransformationParameter.mean_file)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000001u;
  return mean_file_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void TransformationParameter::unsafe_arena_set_allocated_mean_file(
    std::string* mean_file) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (mean_file != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  mean_file_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      mean_file, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:trtcaffe.TransformationParameter.mean_file)
}

// repeated float mean_value = 5;
inline int TransformationParameter::_internal_mean_value_size() const {
  return mean_value_.size();
}
inline int TransformationParameter::mean_value_size() const {
  return _internal_mean_value_size();
}
inline void TransformationParameter::clear_mean_value() {
  mean_value_.Clear();
}
inline float TransformationParameter::_internal_mean_value(int index) const {
  return mean_value_.Get(index);
}
inline float TransformationParameter::mean_value(int index) const {
  // @@protoc_insertion_point(field_get:trtcaffe.TransformationParameter.mean_value)
  return _internal_mean_value(index);
}
inline void TransformationParameter::set_mean_value(int index, float value) {
  mean_value_.Set(index, value);
  // @@protoc_insertion_point(field_set:trtcaffe.TransformationParameter.mean_value)
}
inline void TransformationParameter::_internal_add_mean_value(float value) {
  mean_value_.Add(value);
}
inline void TransformationParameter::add_mean_value(float value) {
  _internal_add_mean_value(value);
  // @@protoc_insertion_point(field_add:trtcaffe.TransformationParameter.mean_value)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
TransformationParameter::_internal_mean_value() const {
  return mean_value_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
TransformationParameter::mean_value() const {
  // @@protoc_insertion_point(field_list:trtcaffe.TransformationParameter.mean_value)
  return _internal_mean_value();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
TransformationParameter::_internal_mutable_mean_value() {
  return &mean_value_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
TransformationParameter::mutable_mean_value() {
  // @@protoc_insertion_point(field_mutable_list:trtcaffe.TransformationParameter.mean_value)
  return _internal_mutable_mean_value();
}

// optional bool force_color = 6 [default = false];
inline bool TransformationParameter::_internal_has_force_color() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool TransformationParameter::has_force_color() const {
  return _internal_has_force_color();
}
inline void TransformationParameter::clear_force_color() {
  force_color_ = false;
  _has_bits_[0] &= ~0x00000020u;
}
inline bool TransformationParameter::_internal_force_color() const {
  return force_color_;
}
inline bool TransformationParameter::force_color() const {
  // @@protoc_insertion_point(field_get:trtcaffe.TransformationParameter.force_color)
  return _internal_force_color();
}
inline void TransformationParameter::_internal_set_force_color(bool value) {
  _has_bits_[0] |= 0x00000020u;
  force_color_ = value;
}
inline void TransformationParameter::set_force_color(bool value) {
  _internal_set_force_color(value);
  // @@protoc_insertion_point(field_set:trtcaffe.TransformationParameter.force_color)
}

// optional bool force_gray = 7 [default = false];
inline bool TransformationParameter::_internal_has_force_gray() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool TransformationParameter::has_force_gray() const {
  return _internal_has_force_gray();
}
inline void TransformationParameter::clear_force_gray() {
  force_gray_ = false;
  _has_bits_[0] &= ~0x00000040u;
}
inline bool TransformationParameter::_internal_force_gray() const {
  return force_gray_;
}
inline bool TransformationParameter::force_gray() const {
  // @@protoc_insertion_point(field_get:trtcaffe.TransformationParameter.force_gray)
  return _internal_force_gray();
}
inline void TransformationParameter::_internal_set_force_gray(bool value) {
  _has_bits_[0] |= 0x00000040u;
  force_gray_ = value;
}
inline void TransformationParameter::set_force_gray(bool value) {
  _internal_set_force_gray(value);
  // @@protoc_insertion_point(field_set:trtcaffe.TransformationParameter.force_gray)
}

// optional bool use_gpu_transform = 8 [default = false];
inline bool TransformationParameter::_internal_has_use_gpu_transform() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool TransformationParameter::has_use_gpu_transform() const {
  return _internal_has_use_gpu_transform();
}
inline void TransformationParameter::clear_use_gpu_transform() {
  use_gpu_transform_ = false;
  _has_bits_[0] &= ~0x00000004u;
}
inline bool TransformationParameter::_internal_use_gpu_transform() const {
  return use_gpu_transform_;
}
inline bool TransformationParameter::use_gpu_transform() const {
  // @@protoc_insertion_point(field_get:trtcaffe.TransformationParameter.use_gpu_transform)
  return _internal_use_gpu_transform();
}
inline void TransformationParameter::_internal_set_use_gpu_transform(bool value) {
  _has_bits_[0] |= 0x00000004u;
  use_gpu_transform_ = value;
}
inline void TransformationParameter::set_use_gpu_transform(bool value) {
  _internal_set_use_gpu_transform(value);
  // @@protoc_insertion_point(field_set:trtcaffe.TransformationParameter.use_gpu_transform)
}

// optional int64 random_seed = 9 [default = -1];
inline bool TransformationParameter::_internal_has_random_seed() const {
  bool value = (_has_bits_[0] & 0x00004000u) != 0;
  return value;
}
inline bool TransformationParameter::has_random_seed() const {
  return _internal_has_random_seed();
}
inline void TransformationParameter::clear_random_seed() {
  random_seed_ = PROTOBUF_LONGLONG(-1);
  _has_bits_[0] &= ~0x00004000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 TransformationParameter::_internal_random_seed() const {
  return random_seed_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 TransformationParameter::random_seed() const {
  // @@protoc_insertion_point(field_get:trtcaffe.TransformationParameter.random_seed)
  return _internal_random_seed();
}
inline void TransformationParameter::_internal_set_random_seed(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00004000u;
  random_seed_ = value;
}
inline void TransformationParameter::set_random_seed(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_random_seed(value);
  // @@protoc_insertion_point(field_set:trtcaffe.TransformationParameter.random_seed)
}

// -------------------------------------------------------------------

// LossParameter

// optional int32 ignore_label = 1;
inline bool LossParameter::_internal_has_ignore_label() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool LossParameter::has_ignore_label() const {
  return _internal_has_ignore_label();
}
inline void LossParameter::clear_ignore_label() {
  ignore_label_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 LossParameter::_internal_ignore_label() const {
  return ignore_label_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 LossParameter::ignore_label() const {
  // @@protoc_insertion_point(field_get:trtcaffe.LossParameter.ignore_label)
  return _internal_ignore_label();
}
inline void LossParameter::_internal_set_ignore_label(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000001u;
  ignore_label_ = value;
}
inline void LossParameter::set_ignore_label(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_ignore_label(value);
  // @@protoc_insertion_point(field_set:trtcaffe.LossParameter.ignore_label)
}

// optional .trtcaffe.LossParameter.NormalizationMode normalization = 3 [default = VALID];
inline bool LossParameter::_internal_has_normalization() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool LossParameter::has_normalization() const {
  return _internal_has_normalization();
}
inline void LossParameter::clear_normalization() {
  normalization_ = 1;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::trtcaffe::LossParameter_NormalizationMode LossParameter::_internal_normalization() const {
  return static_cast< ::trtcaffe::LossParameter_NormalizationMode >(normalization_);
}
inline ::trtcaffe::LossParameter_NormalizationMode LossParameter::normalization() const {
  // @@protoc_insertion_point(field_get:trtcaffe.LossParameter.normalization)
  return _internal_normalization();
}
inline void LossParameter::_internal_set_normalization(::trtcaffe::LossParameter_NormalizationMode value) {
  assert(::trtcaffe::LossParameter_NormalizationMode_IsValid(value));
  _has_bits_[0] |= 0x00000004u;
  normalization_ = value;
}
inline void LossParameter::set_normalization(::trtcaffe::LossParameter_NormalizationMode value) {
  _internal_set_normalization(value);
  // @@protoc_insertion_point(field_set:trtcaffe.LossParameter.normalization)
}

// optional bool normalize = 2;
inline bool LossParameter::_internal_has_normalize() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool LossParameter::has_normalize() const {
  return _internal_has_normalize();
}
inline void LossParameter::clear_normalize() {
  normalize_ = false;
  _has_bits_[0] &= ~0x00000002u;
}
inline bool LossParameter::_internal_normalize() const {
  return normalize_;
}
inline bool LossParameter::normalize() const {
  // @@protoc_insertion_point(field_get:trtcaffe.LossParameter.normalize)
  return _internal_normalize();
}
inline void LossParameter::_internal_set_normalize(bool value) {
  _has_bits_[0] |= 0x00000002u;
  normalize_ = value;
}
inline void LossParameter::set_normalize(bool value) {
  _internal_set_normalize(value);
  // @@protoc_insertion_point(field_set:trtcaffe.LossParameter.normalize)
}

// -------------------------------------------------------------------

// AccuracyParameter

// optional uint32 top_k = 1 [default = 1];
inline bool AccuracyParameter::_internal_has_top_k() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool AccuracyParameter::has_top_k() const {
  return _internal_has_top_k();
}
inline void AccuracyParameter::clear_top_k() {
  top_k_ = 1u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 AccuracyParameter::_internal_top_k() const {
  return top_k_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 AccuracyParameter::top_k() const {
  // @@protoc_insertion_point(field_get:trtcaffe.AccuracyParameter.top_k)
  return _internal_top_k();
}
inline void AccuracyParameter::_internal_set_top_k(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  top_k_ = value;
}
inline void AccuracyParameter::set_top_k(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_top_k(value);
  // @@protoc_insertion_point(field_set:trtcaffe.AccuracyParameter.top_k)
}

// optional int32 axis = 2 [default = 1];
inline bool AccuracyParameter::_internal_has_axis() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool AccuracyParameter::has_axis() const {
  return _internal_has_axis();
}
inline void AccuracyParameter::clear_axis() {
  axis_ = 1;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AccuracyParameter::_internal_axis() const {
  return axis_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AccuracyParameter::axis() const {
  // @@protoc_insertion_point(field_get:trtcaffe.AccuracyParameter.axis)
  return _internal_axis();
}
inline void AccuracyParameter::_internal_set_axis(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000004u;
  axis_ = value;
}
inline void AccuracyParameter::set_axis(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_axis(value);
  // @@protoc_insertion_point(field_set:trtcaffe.AccuracyParameter.axis)
}

// optional int32 ignore_label = 3;
inline bool AccuracyParameter::_internal_has_ignore_label() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool AccuracyParameter::has_ignore_label() const {
  return _internal_has_ignore_label();
}
inline void AccuracyParameter::clear_ignore_label() {
  ignore_label_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AccuracyParameter::_internal_ignore_label() const {
  return ignore_label_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AccuracyParameter::ignore_label() const {
  // @@protoc_insertion_point(field_get:trtcaffe.AccuracyParameter.ignore_label)
  return _internal_ignore_label();
}
inline void AccuracyParameter::_internal_set_ignore_label(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000001u;
  ignore_label_ = value;
}
inline void AccuracyParameter::set_ignore_label(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_ignore_label(value);
  // @@protoc_insertion_point(field_set:trtcaffe.AccuracyParameter.ignore_label)
}

// -------------------------------------------------------------------

// ArgMaxParameter

// optional bool out_max_val = 1 [default = false];
inline bool ArgMaxParameter::_internal_has_out_max_val() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ArgMaxParameter::has_out_max_val() const {
  return _internal_has_out_max_val();
}
inline void ArgMaxParameter::clear_out_max_val() {
  out_max_val_ = false;
  _has_bits_[0] &= ~0x00000001u;
}
inline bool ArgMaxParameter::_internal_out_max_val() const {
  return out_max_val_;
}
inline bool ArgMaxParameter::out_max_val() const {
  // @@protoc_insertion_point(field_get:trtcaffe.ArgMaxParameter.out_max_val)
  return _internal_out_max_val();
}
inline void ArgMaxParameter::_internal_set_out_max_val(bool value) {
  _has_bits_[0] |= 0x00000001u;
  out_max_val_ = value;
}
inline void ArgMaxParameter::set_out_max_val(bool value) {
  _internal_set_out_max_val(value);
  // @@protoc_insertion_point(field_set:trtcaffe.ArgMaxParameter.out_max_val)
}

// optional uint32 top_k = 2 [default = 1];
inline bool ArgMaxParameter::_internal_has_top_k() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool ArgMaxParameter::has_top_k() const {
  return _internal_has_top_k();
}
inline void ArgMaxParameter::clear_top_k() {
  top_k_ = 1u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ArgMaxParameter::_internal_top_k() const {
  return top_k_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ArgMaxParameter::top_k() const {
  // @@protoc_insertion_point(field_get:trtcaffe.ArgMaxParameter.top_k)
  return _internal_top_k();
}
inline void ArgMaxParameter::_internal_set_top_k(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  top_k_ = value;
}
inline void ArgMaxParameter::set_top_k(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_top_k(value);
  // @@protoc_insertion_point(field_set:trtcaffe.ArgMaxParameter.top_k)
}

// optional int32 axis = 3;
inline bool ArgMaxParameter::_internal_has_axis() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ArgMaxParameter::has_axis() const {
  return _internal_has_axis();
}
inline void ArgMaxParameter::clear_axis() {
  axis_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ArgMaxParameter::_internal_axis() const {
  return axis_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ArgMaxParameter::axis() const {
  // @@protoc_insertion_point(field_get:trtcaffe.ArgMaxParameter.axis)
  return _internal_axis();
}
inline void ArgMaxParameter::_internal_set_axis(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  axis_ = value;
}
inline void ArgMaxParameter::set_axis(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_axis(value);
  // @@protoc_insertion_point(field_set:trtcaffe.ArgMaxParameter.axis)
}

// -------------------------------------------------------------------

// ClipParameter

// required float min = 1;
inline bool ClipParameter::_internal_has_min() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ClipParameter::has_min() const {
  return _internal_has_min();
}
inline void ClipParameter::clear_min() {
  min_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline float ClipParameter::_internal_min() const {
  return min_;
}
inline float ClipParameter::min() const {
  // @@protoc_insertion_point(field_get:trtcaffe.ClipParameter.min)
  return _internal_min();
}
inline void ClipParameter::_internal_set_min(float value) {
  _has_bits_[0] |= 0x00000001u;
  min_ = value;
}
inline void ClipParameter::set_min(float value) {
  _internal_set_min(value);
  // @@protoc_insertion_point(field_set:trtcaffe.ClipParameter.min)
}

// required float max = 2;
inline bool ClipParameter::_internal_has_max() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ClipParameter::has_max() const {
  return _internal_has_max();
}
inline void ClipParameter::clear_max() {
  max_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline float ClipParameter::_internal_max() const {
  return max_;
}
inline float ClipParameter::max() const {
  // @@protoc_insertion_point(field_get:trtcaffe.ClipParameter.max)
  return _internal_max();
}
inline void ClipParameter::_internal_set_max(float value) {
  _has_bits_[0] |= 0x00000002u;
  max_ = value;
}
inline void ClipParameter::set_max(float value) {
  _internal_set_max(value);
  // @@protoc_insertion_point(field_set:trtcaffe.ClipParameter.max)
}

// -------------------------------------------------------------------

// ConcatParameter

// optional int32 axis = 2 [default = 1];
inline bool ConcatParameter::_internal_has_axis() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ConcatParameter::has_axis() const {
  return _internal_has_axis();
}
inline void ConcatParameter::clear_axis() {
  axis_ = 1;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ConcatParameter::_internal_axis() const {
  return axis_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ConcatParameter::axis() const {
  // @@protoc_insertion_point(field_get:trtcaffe.ConcatParameter.axis)
  return _internal_axis();
}
inline void ConcatParameter::_internal_set_axis(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  axis_ = value;
}
inline void ConcatParameter::set_axis(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_axis(value);
  // @@protoc_insertion_point(field_set:trtcaffe.ConcatParameter.axis)
}

// optional uint32 concat_dim = 1 [default = 1];
inline bool ConcatParameter::_internal_has_concat_dim() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ConcatParameter::has_concat_dim() const {
  return _internal_has_concat_dim();
}
inline void ConcatParameter::clear_concat_dim() {
  concat_dim_ = 1u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ConcatParameter::_internal_concat_dim() const {
  return concat_dim_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ConcatParameter::concat_dim() const {
  // @@protoc_insertion_point(field_get:trtcaffe.ConcatParameter.concat_dim)
  return _internal_concat_dim();
}
inline void ConcatParameter::_internal_set_concat_dim(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  concat_dim_ = value;
}
inline void ConcatParameter::set_concat_dim(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_concat_dim(value);
  // @@protoc_insertion_point(field_set:trtcaffe.ConcatParameter.concat_dim)
}

// -------------------------------------------------------------------

// BatchNormParameter

// optional bool use_global_stats = 1 [default = false];
inline bool BatchNormParameter::_internal_has_use_global_stats() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool BatchNormParameter::has_use_global_stats() const {
  return _internal_has_use_global_stats();
}
inline void BatchNormParameter::clear_use_global_stats() {
  use_global_stats_ = false;
  _has_bits_[0] &= ~0x00000004u;
}
inline bool BatchNormParameter::_internal_use_global_stats() const {
  return use_global_stats_;
}
inline bool BatchNormParameter::use_global_stats() const {
  // @@protoc_insertion_point(field_get:trtcaffe.BatchNormParameter.use_global_stats)
  return _internal_use_global_stats();
}
inline void BatchNormParameter::_internal_set_use_global_stats(bool value) {
  _has_bits_[0] |= 0x00000004u;
  use_global_stats_ = value;
}
inline void BatchNormParameter::set_use_global_stats(bool value) {
  _internal_set_use_global_stats(value);
  // @@protoc_insertion_point(field_set:trtcaffe.BatchNormParameter.use_global_stats)
}

// optional float moving_average_fraction = 2 [default = 0.999];
inline bool BatchNormParameter::_internal_has_moving_average_fraction() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool BatchNormParameter::has_moving_average_fraction() const {
  return _internal_has_moving_average_fraction();
}
inline void BatchNormParameter::clear_moving_average_fraction() {
  moving_average_fraction_ = 0.999f;
  _has_bits_[0] &= ~0x00000020u;
}
inline float BatchNormParameter::_internal_moving_average_fraction() const {
  return moving_average_fraction_;
}
inline float BatchNormParameter::moving_average_fraction() const {
  // @@protoc_insertion_point(field_get:trtcaffe.BatchNormParameter.moving_average_fraction)
  return _internal_moving_average_fraction();
}
inline void BatchNormParameter::_internal_set_moving_average_fraction(float value) {
  _has_bits_[0] |= 0x00000020u;
  moving_average_fraction_ = value;
}
inline void BatchNormParameter::set_moving_average_fraction(float value) {
  _internal_set_moving_average_fraction(value);
  // @@protoc_insertion_point(field_set:trtcaffe.BatchNormParameter.moving_average_fraction)
}

// optional float eps = 3 [default = 1e-05];
inline bool BatchNormParameter::_internal_has_eps() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool BatchNormParameter::has_eps() const {
  return _internal_has_eps();
}
inline void BatchNormParameter::clear_eps() {
  eps_ = 1e-05f;
  _has_bits_[0] &= ~0x00000040u;
}
inline float BatchNormParameter::_internal_eps() const {
  return eps_;
}
inline float BatchNormParameter::eps() const {
  // @@protoc_insertion_point(field_get:trtcaffe.BatchNormParameter.eps)
  return _internal_eps();
}
inline void BatchNormParameter::_internal_set_eps(float value) {
  _has_bits_[0] |= 0x00000040u;
  eps_ = value;
}
inline void BatchNormParameter::set_eps(float value) {
  _internal_set_eps(value);
  // @@protoc_insertion_point(field_set:trtcaffe.BatchNormParameter.eps)
}

// optional .trtcaffe.FillerParameter scale_filler = 5;
inline bool BatchNormParameter::_internal_has_scale_filler() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || scale_filler_ != nullptr);
  return value;
}
inline bool BatchNormParameter::has_scale_filler() const {
  return _internal_has_scale_filler();
}
inline void BatchNormParameter::clear_scale_filler() {
  if (scale_filler_ != nullptr) scale_filler_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::trtcaffe::FillerParameter& BatchNormParameter::_internal_scale_filler() const {
  const ::trtcaffe::FillerParameter* p = scale_filler_;
  return p != nullptr ? *p : *reinterpret_cast<const ::trtcaffe::FillerParameter*>(
      &::trtcaffe::_FillerParameter_default_instance_);
}
inline const ::trtcaffe::FillerParameter& BatchNormParameter::scale_filler() const {
  // @@protoc_insertion_point(field_get:trtcaffe.BatchNormParameter.scale_filler)
  return _internal_scale_filler();
}
inline void BatchNormParameter::unsafe_arena_set_allocated_scale_filler(
    ::trtcaffe::FillerParameter* scale_filler) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(scale_filler_);
  }
  scale_filler_ = scale_filler;
  if (scale_filler) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:trtcaffe.BatchNormParameter.scale_filler)
}
inline ::trtcaffe::FillerParameter* BatchNormParameter::release_scale_filler() {
  auto temp = unsafe_arena_release_scale_filler();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::trtcaffe::FillerParameter* BatchNormParameter::unsafe_arena_release_scale_filler() {
  // @@protoc_insertion_point(field_release:trtcaffe.BatchNormParameter.scale_filler)
  _has_bits_[0] &= ~0x00000001u;
  ::trtcaffe::FillerParameter* temp = scale_filler_;
  scale_filler_ = nullptr;
  return temp;
}
inline ::trtcaffe::FillerParameter* BatchNormParameter::_internal_mutable_scale_filler() {
  _has_bits_[0] |= 0x00000001u;
  if (scale_filler_ == nullptr) {
    auto* p = CreateMaybeMessage<::trtcaffe::FillerParameter>(GetArena());
    scale_filler_ = p;
  }
  return scale_filler_;
}
inline ::trtcaffe::FillerParameter* BatchNormParameter::mutable_scale_filler() {
  // @@protoc_insertion_point(field_mutable:trtcaffe.BatchNormParameter.scale_filler)
  return _internal_mutable_scale_filler();
}
inline void BatchNormParameter::set_allocated_scale_filler(::trtcaffe::FillerParameter* scale_filler) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete scale_filler_;
  }
  if (scale_filler) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(scale_filler);
    if (message_arena != submessage_arena) {
      scale_filler = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, scale_filler, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  scale_filler_ = scale_filler;
  // @@protoc_insertion_point(field_set_allocated:trtcaffe.BatchNormParameter.scale_filler)
}

// optional .trtcaffe.FillerParameter bias_filler = 6;
inline bool BatchNormParameter::_internal_has_bias_filler() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || bias_filler_ != nullptr);
  return value;
}
inline bool BatchNormParameter::has_bias_filler() const {
  return _internal_has_bias_filler();
}
inline void BatchNormParameter::clear_bias_filler() {
  if (bias_filler_ != nullptr) bias_filler_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::trtcaffe::FillerParameter& BatchNormParameter::_internal_bias_filler() const {
  const ::trtcaffe::FillerParameter* p = bias_filler_;
  return p != nullptr ? *p : *reinterpret_cast<const ::trtcaffe::FillerParameter*>(
      &::trtcaffe::_FillerParameter_default_instance_);
}
inline const ::trtcaffe::FillerParameter& BatchNormParameter::bias_filler() const {
  // @@protoc_insertion_point(field_get:trtcaffe.BatchNormParameter.bias_filler)
  return _internal_bias_filler();
}
inline void BatchNormParameter::unsafe_arena_set_allocated_bias_filler(
    ::trtcaffe::FillerParameter* bias_filler) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(bias_filler_);
  }
  bias_filler_ = bias_filler;
  if (bias_filler) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:trtcaffe.BatchNormParameter.bias_filler)
}
inline ::trtcaffe::FillerParameter* BatchNormParameter::release_bias_filler() {
  auto temp = unsafe_arena_release_bias_filler();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::trtcaffe::FillerParameter* BatchNormParameter::unsafe_arena_release_bias_filler() {
  // @@protoc_insertion_point(field_release:trtcaffe.BatchNormParameter.bias_filler)
  _has_bits_[0] &= ~0x00000002u;
  ::trtcaffe::FillerParameter* temp = bias_filler_;
  bias_filler_ = nullptr;
  return temp;
}
inline ::trtcaffe::FillerParameter* BatchNormParameter::_internal_mutable_bias_filler() {
  _has_bits_[0] |= 0x00000002u;
  if (bias_filler_ == nullptr) {
    auto* p = CreateMaybeMessage<::trtcaffe::FillerParameter>(GetArena());
    bias_filler_ = p;
  }
  return bias_filler_;
}
inline ::trtcaffe::FillerParameter* BatchNormParameter::mutable_bias_filler() {
  // @@protoc_insertion_point(field_mutable:trtcaffe.BatchNormParameter.bias_filler)
  return _internal_mutable_bias_filler();
}
inline void BatchNormParameter::set_allocated_bias_filler(::trtcaffe::FillerParameter* bias_filler) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete bias_filler_;
  }
  if (bias_filler) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(bias_filler);
    if (message_arena != submessage_arena) {
      bias_filler = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, bias_filler, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  bias_filler_ = bias_filler;
  // @@protoc_insertion_point(field_set_allocated:trtcaffe.BatchNormParameter.bias_filler)
}

// optional bool scale_bias = 7 [default = false];
inline bool BatchNormParameter::_internal_has_scale_bias() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool BatchNormParameter::has_scale_bias() const {
  return _internal_has_scale_bias();
}
inline void BatchNormParameter::clear_scale_bias() {
  scale_bias_ = false;
  _has_bits_[0] &= ~0x00000008u;
}
inline bool BatchNormParameter::_internal_scale_bias() const {
  return scale_bias_;
}
inline bool BatchNormParameter::scale_bias() const {
  // @@protoc_insertion_point(field_get:trtcaffe.BatchNormParameter.scale_bias)
  return _internal_scale_bias();
}
inline void BatchNormParameter::_internal_set_scale_bias(bool value) {
  _has_bits_[0] |= 0x00000008u;
  scale_bias_ = value;
}
inline void BatchNormParameter::set_scale_bias(bool value) {
  _internal_set_scale_bias(value);
  // @@protoc_insertion_point(field_set:trtcaffe.BatchNormParameter.scale_bias)
}

// optional .trtcaffe.BatchNormParameter.Engine engine = 15 [default = DEFAULT];
inline bool BatchNormParameter::_internal_has_engine() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool BatchNormParameter::has_engine() const {
  return _internal_has_engine();
}
inline void BatchNormParameter::clear_engine() {
  engine_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::trtcaffe::BatchNormParameter_Engine BatchNormParameter::_internal_engine() const {
  return static_cast< ::trtcaffe::BatchNormParameter_Engine >(engine_);
}
inline ::trtcaffe::BatchNormParameter_Engine BatchNormParameter::engine() const {
  // @@protoc_insertion_point(field_get:trtcaffe.BatchNormParameter.engine)
  return _internal_engine();
}
inline void BatchNormParameter::_internal_set_engine(::trtcaffe::BatchNormParameter_Engine value) {
  assert(::trtcaffe::BatchNormParameter_Engine_IsValid(value));
  _has_bits_[0] |= 0x00000010u;
  engine_ = value;
}
inline void BatchNormParameter::set_engine(::trtcaffe::BatchNormParameter_Engine value) {
  _internal_set_engine(value);
  // @@protoc_insertion_point(field_set:trtcaffe.BatchNormParameter.engine)
}

// -------------------------------------------------------------------

// BiasParameter

// optional int32 axis = 1 [default = 1];
inline bool BiasParameter::_internal_has_axis() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool BiasParameter::has_axis() const {
  return _internal_has_axis();
}
inline void BiasParameter::clear_axis() {
  axis_ = 1;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BiasParameter::_internal_axis() const {
  return axis_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BiasParameter::axis() const {
  // @@protoc_insertion_point(field_get:trtcaffe.BiasParameter.axis)
  return _internal_axis();
}
inline void BiasParameter::_internal_set_axis(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  axis_ = value;
}
inline void BiasParameter::set_axis(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_axis(value);
  // @@protoc_insertion_point(field_set:trtcaffe.BiasParameter.axis)
}

// optional int32 num_axes = 2 [default = 1];
inline bool BiasParameter::_internal_has_num_axes() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool BiasParameter::has_num_axes() const {
  return _internal_has_num_axes();
}
inline void BiasParameter::clear_num_axes() {
  num_axes_ = 1;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BiasParameter::_internal_num_axes() const {
  return num_axes_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BiasParameter::num_axes() const {
  // @@protoc_insertion_point(field_get:trtcaffe.BiasParameter.num_axes)
  return _internal_num_axes();
}
inline void BiasParameter::_internal_set_num_axes(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000004u;
  num_axes_ = value;
}
inline void BiasParameter::set_num_axes(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_num_axes(value);
  // @@protoc_insertion_point(field_set:trtcaffe.BiasParameter.num_axes)
}

// optional .trtcaffe.FillerParameter filler = 3;
inline bool BiasParameter::_internal_has_filler() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || filler_ != nullptr);
  return value;
}
inline bool BiasParameter::has_filler() const {
  return _internal_has_filler();
}
inline void BiasParameter::clear_filler() {
  if (filler_ != nullptr) filler_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::trtcaffe::FillerParameter& BiasParameter::_internal_filler() const {
  const ::trtcaffe::FillerParameter* p = filler_;
  return p != nullptr ? *p : *reinterpret_cast<const ::trtcaffe::FillerParameter*>(
      &::trtcaffe::_FillerParameter_default_instance_);
}
inline const ::trtcaffe::FillerParameter& BiasParameter::filler() const {
  // @@protoc_insertion_point(field_get:trtcaffe.BiasParameter.filler)
  return _internal_filler();
}
inline void BiasParameter::unsafe_arena_set_allocated_filler(
    ::trtcaffe::FillerParameter* filler) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(filler_);
  }
  filler_ = filler;
  if (filler) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:trtcaffe.BiasParameter.filler)
}
inline ::trtcaffe::FillerParameter* BiasParameter::release_filler() {
  auto temp = unsafe_arena_release_filler();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::trtcaffe::FillerParameter* BiasParameter::unsafe_arena_release_filler() {
  // @@protoc_insertion_point(field_release:trtcaffe.BiasParameter.filler)
  _has_bits_[0] &= ~0x00000001u;
  ::trtcaffe::FillerParameter* temp = filler_;
  filler_ = nullptr;
  return temp;
}
inline ::trtcaffe::FillerParameter* BiasParameter::_internal_mutable_filler() {
  _has_bits_[0] |= 0x00000001u;
  if (filler_ == nullptr) {
    auto* p = CreateMaybeMessage<::trtcaffe::FillerParameter>(GetArena());
    filler_ = p;
  }
  return filler_;
}
inline ::trtcaffe::FillerParameter* BiasParameter::mutable_filler() {
  // @@protoc_insertion_point(field_mutable:trtcaffe.BiasParameter.filler)
  return _internal_mutable_filler();
}
inline void BiasParameter::set_allocated_filler(::trtcaffe::FillerParameter* filler) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete filler_;
  }
  if (filler) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(filler);
    if (message_arena != submessage_arena) {
      filler = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, filler, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  filler_ = filler;
  // @@protoc_insertion_point(field_set_allocated:trtcaffe.BiasParameter.filler)
}

// -------------------------------------------------------------------

// ContrastiveLossParameter

// optional float margin = 1 [default = 1];
inline bool ContrastiveLossParameter::_internal_has_margin() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ContrastiveLossParameter::has_margin() const {
  return _internal_has_margin();
}
inline void ContrastiveLossParameter::clear_margin() {
  margin_ = 1;
  _has_bits_[0] &= ~0x00000002u;
}
inline float ContrastiveLossParameter::_internal_margin() const {
  return margin_;
}
inline float ContrastiveLossParameter::margin() const {
  // @@protoc_insertion_point(field_get:trtcaffe.ContrastiveLossParameter.margin)
  return _internal_margin();
}
inline void ContrastiveLossParameter::_internal_set_margin(float value) {
  _has_bits_[0] |= 0x00000002u;
  margin_ = value;
}
inline void ContrastiveLossParameter::set_margin(float value) {
  _internal_set_margin(value);
  // @@protoc_insertion_point(field_set:trtcaffe.ContrastiveLossParameter.margin)
}

// optional bool legacy_version = 2 [default = false];
inline bool ContrastiveLossParameter::_internal_has_legacy_version() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ContrastiveLossParameter::has_legacy_version() const {
  return _internal_has_legacy_version();
}
inline void ContrastiveLossParameter::clear_legacy_version() {
  legacy_version_ = false;
  _has_bits_[0] &= ~0x00000001u;
}
inline bool ContrastiveLossParameter::_internal_legacy_version() const {
  return legacy_version_;
}
inline bool ContrastiveLossParameter::legacy_version() const {
  // @@protoc_insertion_point(field_get:trtcaffe.ContrastiveLossParameter.legacy_version)
  return _internal_legacy_version();
}
inline void ContrastiveLossParameter::_internal_set_legacy_version(bool value) {
  _has_bits_[0] |= 0x00000001u;
  legacy_version_ = value;
}
inline void ContrastiveLossParameter::set_legacy_version(bool value) {
  _internal_set_legacy_version(value);
  // @@protoc_insertion_point(field_set:trtcaffe.ContrastiveLossParameter.legacy_version)
}

// -------------------------------------------------------------------

// ConvolutionParameter

// optional uint32 num_output = 1;
inline bool ConvolutionParameter::_internal_has_num_output() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool ConvolutionParameter::has_num_output() const {
  return _internal_has_num_output();
}
inline void ConvolutionParameter::clear_num_output() {
  num_output_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ConvolutionParameter::_internal_num_output() const {
  return num_output_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ConvolutionParameter::num_output() const {
  // @@protoc_insertion_point(field_get:trtcaffe.ConvolutionParameter.num_output)
  return _internal_num_output();
}
inline void ConvolutionParameter::_internal_set_num_output(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000008u;
  num_output_ = value;
}
inline void ConvolutionParameter::set_num_output(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_num_output(value);
  // @@protoc_insertion_point(field_set:trtcaffe.ConvolutionParameter.num_output)
}

// optional bool bias_term = 2 [default = true];
inline bool ConvolutionParameter::_internal_has_bias_term() const {
  bool value = (_has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline bool ConvolutionParameter::has_bias_term() const {
  return _internal_has_bias_term();
}
inline void ConvolutionParameter::clear_bias_term() {
  bias_term_ = true;
  _has_bits_[0] &= ~0x00001000u;
}
inline bool ConvolutionParameter::_internal_bias_term() const {
  return bias_term_;
}
inline bool ConvolutionParameter::bias_term() const {
  // @@protoc_insertion_point(field_get:trtcaffe.ConvolutionParameter.bias_term)
  return _internal_bias_term();
}
inline void ConvolutionParameter::_internal_set_bias_term(bool value) {
  _has_bits_[0] |= 0x00001000u;
  bias_term_ = value;
}
inline void ConvolutionParameter::set_bias_term(bool value) {
  _internal_set_bias_term(value);
  // @@protoc_insertion_point(field_set:trtcaffe.ConvolutionParameter.bias_term)
}

// repeated uint32 pad = 3;
inline int ConvolutionParameter::_internal_pad_size() const {
  return pad_.size();
}
inline int ConvolutionParameter::pad_size() const {
  return _internal_pad_size();
}
inline void ConvolutionParameter::clear_pad() {
  pad_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ConvolutionParameter::_internal_pad(int index) const {
  return pad_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ConvolutionParameter::pad(int index) const {
  // @@protoc_insertion_point(field_get:trtcaffe.ConvolutionParameter.pad)
  return _internal_pad(index);
}
inline void ConvolutionParameter::set_pad(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  pad_.Set(index, value);
  // @@protoc_insertion_point(field_set:trtcaffe.ConvolutionParameter.pad)
}
inline void ConvolutionParameter::_internal_add_pad(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  pad_.Add(value);
}
inline void ConvolutionParameter::add_pad(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_add_pad(value);
  // @@protoc_insertion_point(field_add:trtcaffe.ConvolutionParameter.pad)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
ConvolutionParameter::_internal_pad() const {
  return pad_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
ConvolutionParameter::pad() const {
  // @@protoc_insertion_point(field_list:trtcaffe.ConvolutionParameter.pad)
  return _internal_pad();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
ConvolutionParameter::_internal_mutable_pad() {
  return &pad_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
ConvolutionParameter::mutable_pad() {
  // @@protoc_insertion_point(field_mutable_list:trtcaffe.ConvolutionParameter.pad)
  return _internal_mutable_pad();
}

// repeated uint32 kernel_size = 4;
inline int ConvolutionParameter::_internal_kernel_size_size() const {
  return kernel_size_.size();
}
inline int ConvolutionParameter::kernel_size_size() const {
  return _internal_kernel_size_size();
}
inline void ConvolutionParameter::clear_kernel_size() {
  kernel_size_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ConvolutionParameter::_internal_kernel_size(int index) const {
  return kernel_size_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ConvolutionParameter::kernel_size(int index) const {
  // @@protoc_insertion_point(field_get:trtcaffe.ConvolutionParameter.kernel_size)
  return _internal_kernel_size(index);
}
inline void ConvolutionParameter::set_kernel_size(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  kernel_size_.Set(index, value);
  // @@protoc_insertion_point(field_set:trtcaffe.ConvolutionParameter.kernel_size)
}
inline void ConvolutionParameter::_internal_add_kernel_size(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  kernel_size_.Add(value);
}
inline void ConvolutionParameter::add_kernel_size(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_add_kernel_size(value);
  // @@protoc_insertion_point(field_add:trtcaffe.ConvolutionParameter.kernel_size)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
ConvolutionParameter::_internal_kernel_size() const {
  return kernel_size_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
ConvolutionParameter::kernel_size() const {
  // @@protoc_insertion_point(field_list:trtcaffe.ConvolutionParameter.kernel_size)
  return _internal_kernel_size();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
ConvolutionParameter::_internal_mutable_kernel_size() {
  return &kernel_size_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
ConvolutionParameter::mutable_kernel_size() {
  // @@protoc_insertion_point(field_mutable_list:trtcaffe.ConvolutionParameter.kernel_size)
  return _internal_mutable_kernel_size();
}

// repeated uint32 stride = 6;
inline int ConvolutionParameter::_internal_stride_size() const {
  return stride_.size();
}
inline int ConvolutionParameter::stride_size() const {
  return _internal_stride_size();
}
inline void ConvolutionParameter::clear_stride() {
  stride_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ConvolutionParameter::_internal_stride(int index) const {
  return stride_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ConvolutionParameter::stride(int index) const {
  // @@protoc_insertion_point(field_get:trtcaffe.ConvolutionParameter.stride)
  return _internal_stride(index);
}
inline void ConvolutionParameter::set_stride(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  stride_.Set(index, value);
  // @@protoc_insertion_point(field_set:trtcaffe.ConvolutionParameter.stride)
}
inline void ConvolutionParameter::_internal_add_stride(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  stride_.Add(value);
}
inline void ConvolutionParameter::add_stride(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_add_stride(value);
  // @@protoc_insertion_point(field_add:trtcaffe.ConvolutionParameter.stride)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
ConvolutionParameter::_internal_stride() const {
  return stride_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
ConvolutionParameter::stride() const {
  // @@protoc_insertion_point(field_list:trtcaffe.ConvolutionParameter.stride)
  return _internal_stride();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
ConvolutionParameter::_internal_mutable_stride() {
  return &stride_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
ConvolutionParameter::mutable_stride() {
  // @@protoc_insertion_point(field_mutable_list:trtcaffe.ConvolutionParameter.stride)
  return _internal_mutable_stride();
}

// repeated uint32 dilation = 18;
inline int ConvolutionParameter::_internal_dilation_size() const {
  return dilation_.size();
}
inline int ConvolutionParameter::dilation_size() const {
  return _internal_dilation_size();
}
inline void ConvolutionParameter::clear_dilation() {
  dilation_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ConvolutionParameter::_internal_dilation(int index) const {
  return dilation_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ConvolutionParameter::dilation(int index) const {
  // @@protoc_insertion_point(field_get:trtcaffe.ConvolutionParameter.dilation)
  return _internal_dilation(index);
}
inline void ConvolutionParameter::set_dilation(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  dilation_.Set(index, value);
  // @@protoc_insertion_point(field_set:trtcaffe.ConvolutionParameter.dilation)
}
inline void ConvolutionParameter::_internal_add_dilation(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  dilation_.Add(value);
}
inline void ConvolutionParameter::add_dilation(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_add_dilation(value);
  // @@protoc_insertion_point(field_add:trtcaffe.ConvolutionParameter.dilation)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
ConvolutionParameter::_internal_dilation() const {
  return dilation_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
ConvolutionParameter::dilation() const {
  // @@protoc_insertion_point(field_list:trtcaffe.ConvolutionParameter.dilation)
  return _internal_dilation();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
ConvolutionParameter::_internal_mutable_dilation() {
  return &dilation_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
ConvolutionParameter::mutable_dilation() {
  // @@protoc_insertion_point(field_mutable_list:trtcaffe.ConvolutionParameter.dilation)
  return _internal_mutable_dilation();
}

// optional uint32 pad_h = 9 [default = 0];
inline bool ConvolutionParameter::_internal_has_pad_h() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool ConvolutionParameter::has_pad_h() const {
  return _internal_has_pad_h();
}
inline void ConvolutionParameter::clear_pad_h() {
  pad_h_ = 0u;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ConvolutionParameter::_internal_pad_h() const {
  return pad_h_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ConvolutionParameter::pad_h() const {
  // @@protoc_insertion_point(field_get:trtcaffe.ConvolutionParameter.pad_h)
  return _internal_pad_h();
}
inline void ConvolutionParameter::_internal_set_pad_h(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000010u;
  pad_h_ = value;
}
inline void ConvolutionParameter::set_pad_h(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_pad_h(value);
  // @@protoc_insertion_point(field_set:trtcaffe.ConvolutionParameter.pad_h)
}

// optional uint32 pad_w = 10 [default = 0];
inline bool ConvolutionParameter::_internal_has_pad_w() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool ConvolutionParameter::has_pad_w() const {
  return _internal_has_pad_w();
}
inline void ConvolutionParameter::clear_pad_w() {
  pad_w_ = 0u;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ConvolutionParameter::_internal_pad_w() const {
  return pad_w_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ConvolutionParameter::pad_w() const {
  // @@protoc_insertion_point(field_get:trtcaffe.ConvolutionParameter.pad_w)
  return _internal_pad_w();
}
inline void ConvolutionParameter::_internal_set_pad_w(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000020u;
  pad_w_ = value;
}
inline void ConvolutionParameter::set_pad_w(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_pad_w(value);
  // @@protoc_insertion_point(field_set:trtcaffe.ConvolutionParameter.pad_w)
}

// optional uint32 kernel_h = 11;
inline bool ConvolutionParameter::_internal_has_kernel_h() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool ConvolutionParameter::has_kernel_h() const {
  return _internal_has_kernel_h();
}
inline void ConvolutionParameter::clear_kernel_h() {
  kernel_h_ = 0u;
  _has_bits_[0] &= ~0x00000040u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ConvolutionParameter::_internal_kernel_h() const {
  return kernel_h_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ConvolutionParameter::kernel_h() const {
  // @@protoc_insertion_point(field_get:trtcaffe.ConvolutionParameter.kernel_h)
  return _internal_kernel_h();
}
inline void ConvolutionParameter::_internal_set_kernel_h(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000040u;
  kernel_h_ = value;
}
inline void ConvolutionParameter::set_kernel_h(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_kernel_h(value);
  // @@protoc_insertion_point(field_set:trtcaffe.ConvolutionParameter.kernel_h)
}

// optional uint32 kernel_w = 12;
inline bool ConvolutionParameter::_internal_has_kernel_w() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool ConvolutionParameter::has_kernel_w() const {
  return _internal_has_kernel_w();
}
inline void ConvolutionParameter::clear_kernel_w() {
  kernel_w_ = 0u;
  _has_bits_[0] &= ~0x00000080u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ConvolutionParameter::_internal_kernel_w() const {
  return kernel_w_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ConvolutionParameter::kernel_w() const {
  // @@protoc_insertion_point(field_get:trtcaffe.ConvolutionParameter.kernel_w)
  return _internal_kernel_w();
}
inline void ConvolutionParameter::_internal_set_kernel_w(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000080u;
  kernel_w_ = value;
}
inline void ConvolutionParameter::set_kernel_w(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_kernel_w(value);
  // @@protoc_insertion_point(field_set:trtcaffe.ConvolutionParameter.kernel_w)
}

// optional uint32 stride_h = 13;
inline bool ConvolutionParameter::_internal_has_stride_h() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool ConvolutionParameter::has_stride_h() const {
  return _internal_has_stride_h();
}
inline void ConvolutionParameter::clear_stride_h() {
  stride_h_ = 0u;
  _has_bits_[0] &= ~0x00000100u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ConvolutionParameter::_internal_stride_h() const {
  return stride_h_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ConvolutionParameter::stride_h() const {
  // @@protoc_insertion_point(field_get:trtcaffe.ConvolutionParameter.stride_h)
  return _internal_stride_h();
}
inline void ConvolutionParameter::_internal_set_stride_h(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000100u;
  stride_h_ = value;
}
inline void ConvolutionParameter::set_stride_h(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_stride_h(value);
  // @@protoc_insertion_point(field_set:trtcaffe.ConvolutionParameter.stride_h)
}

// optional uint32 stride_w = 14;
inline bool ConvolutionParameter::_internal_has_stride_w() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool ConvolutionParameter::has_stride_w() const {
  return _internal_has_stride_w();
}
inline void ConvolutionParameter::clear_stride_w() {
  stride_w_ = 0u;
  _has_bits_[0] &= ~0x00000200u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ConvolutionParameter::_internal_stride_w() const {
  return stride_w_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ConvolutionParameter::stride_w() const {
  // @@protoc_insertion_point(field_get:trtcaffe.ConvolutionParameter.stride_w)
  return _internal_stride_w();
}
inline void ConvolutionParameter::_internal_set_stride_w(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000200u;
  stride_w_ = value;
}
inline void ConvolutionParameter::set_stride_w(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_stride_w(value);
  // @@protoc_insertion_point(field_set:trtcaffe.ConvolutionParameter.stride_w)
}

// optional uint32 group = 5 [default = 1];
inline bool ConvolutionParameter::_internal_has_group() const {
  bool value = (_has_bits_[0] & 0x00002000u) != 0;
  return value;
}
inline bool ConvolutionParameter::has_group() const {
  return _internal_has_group();
}
inline void ConvolutionParameter::clear_group() {
  group_ = 1u;
  _has_bits_[0] &= ~0x00002000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ConvolutionParameter::_internal_group() const {
  return group_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ConvolutionParameter::group() const {
  // @@protoc_insertion_point(field_get:trtcaffe.ConvolutionParameter.group)
  return _internal_group();
}
inline void ConvolutionParameter::_internal_set_group(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00002000u;
  group_ = value;
}
inline void ConvolutionParameter::set_group(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_group(value);
  // @@protoc_insertion_point(field_set:trtcaffe.ConvolutionParameter.group)
}

// optional .trtcaffe.FillerParameter weight_filler = 7;
inline bool ConvolutionParameter::_internal_has_weight_filler() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || weight_filler_ != nullptr);
  return value;
}
inline bool ConvolutionParameter::has_weight_filler() const {
  return _internal_has_weight_filler();
}
inline void ConvolutionParameter::clear_weight_filler() {
  if (weight_filler_ != nullptr) weight_filler_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::trtcaffe::FillerParameter& ConvolutionParameter::_internal_weight_filler() const {
  const ::trtcaffe::FillerParameter* p = weight_filler_;
  return p != nullptr ? *p : *reinterpret_cast<const ::trtcaffe::FillerParameter*>(
      &::trtcaffe::_FillerParameter_default_instance_);
}
inline const ::trtcaffe::FillerParameter& ConvolutionParameter::weight_filler() const {
  // @@protoc_insertion_point(field_get:trtcaffe.ConvolutionParameter.weight_filler)
  return _internal_weight_filler();
}
inline void ConvolutionParameter::unsafe_arena_set_allocated_weight_filler(
    ::trtcaffe::FillerParameter* weight_filler) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(weight_filler_);
  }
  weight_filler_ = weight_filler;
  if (weight_filler) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:trtcaffe.ConvolutionParameter.weight_filler)
}
inline ::trtcaffe::FillerParameter* ConvolutionParameter::release_weight_filler() {
  auto temp = unsafe_arena_release_weight_filler();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::trtcaffe::FillerParameter* ConvolutionParameter::unsafe_arena_release_weight_filler() {
  // @@protoc_insertion_point(field_release:trtcaffe.ConvolutionParameter.weight_filler)
  _has_bits_[0] &= ~0x00000002u;
  ::trtcaffe::FillerParameter* temp = weight_filler_;
  weight_filler_ = nullptr;
  return temp;
}
inline ::trtcaffe::FillerParameter* ConvolutionParameter::_internal_mutable_weight_filler() {
  _has_bits_[0] |= 0x00000002u;
  if (weight_filler_ == nullptr) {
    auto* p = CreateMaybeMessage<::trtcaffe::FillerParameter>(GetArena());
    weight_filler_ = p;
  }
  return weight_filler_;
}
inline ::trtcaffe::FillerParameter* ConvolutionParameter::mutable_weight_filler() {
  // @@protoc_insertion_point(field_mutable:trtcaffe.ConvolutionParameter.weight_filler)
  return _internal_mutable_weight_filler();
}
inline void ConvolutionParameter::set_allocated_weight_filler(::trtcaffe::FillerParameter* weight_filler) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete weight_filler_;
  }
  if (weight_filler) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(weight_filler);
    if (message_arena != submessage_arena) {
      weight_filler = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, weight_filler, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  weight_filler_ = weight_filler;
  // @@protoc_insertion_point(field_set_allocated:trtcaffe.ConvolutionParameter.weight_filler)
}

// optional .trtcaffe.FillerParameter bias_filler = 8;
inline bool ConvolutionParameter::_internal_has_bias_filler() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || bias_filler_ != nullptr);
  return value;
}
inline bool ConvolutionParameter::has_bias_filler() const {
  return _internal_has_bias_filler();
}
inline void ConvolutionParameter::clear_bias_filler() {
  if (bias_filler_ != nullptr) bias_filler_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::trtcaffe::FillerParameter& ConvolutionParameter::_internal_bias_filler() const {
  const ::trtcaffe::FillerParameter* p = bias_filler_;
  return p != nullptr ? *p : *reinterpret_cast<const ::trtcaffe::FillerParameter*>(
      &::trtcaffe::_FillerParameter_default_instance_);
}
inline const ::trtcaffe::FillerParameter& ConvolutionParameter::bias_filler() const {
  // @@protoc_insertion_point(field_get:trtcaffe.ConvolutionParameter.bias_filler)
  return _internal_bias_filler();
}
inline void ConvolutionParameter::unsafe_arena_set_allocated_bias_filler(
    ::trtcaffe::FillerParameter* bias_filler) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(bias_filler_);
  }
  bias_filler_ = bias_filler;
  if (bias_filler) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:trtcaffe.ConvolutionParameter.bias_filler)
}
inline ::trtcaffe::FillerParameter* ConvolutionParameter::release_bias_filler() {
  auto temp = unsafe_arena_release_bias_filler();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::trtcaffe::FillerParameter* ConvolutionParameter::unsafe_arena_release_bias_filler() {
  // @@protoc_insertion_point(field_release:trtcaffe.ConvolutionParameter.bias_filler)
  _has_bits_[0] &= ~0x00000004u;
  ::trtcaffe::FillerParameter* temp = bias_filler_;
  bias_filler_ = nullptr;
  return temp;
}
inline ::trtcaffe::FillerParameter* ConvolutionParameter::_internal_mutable_bias_filler() {
  _has_bits_[0] |= 0x00000004u;
  if (bias_filler_ == nullptr) {
    auto* p = CreateMaybeMessage<::trtcaffe::FillerParameter>(GetArena());
    bias_filler_ = p;
  }
  return bias_filler_;
}
inline ::trtcaffe::FillerParameter* ConvolutionParameter::mutable_bias_filler() {
  // @@protoc_insertion_point(field_mutable:trtcaffe.ConvolutionParameter.bias_filler)
  return _internal_mutable_bias_filler();
}
inline void ConvolutionParameter::set_allocated_bias_filler(::trtcaffe::FillerParameter* bias_filler) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete bias_filler_;
  }
  if (bias_filler) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(bias_filler);
    if (message_arena != submessage_arena) {
      bias_filler = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, bias_filler, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  bias_filler_ = bias_filler;
  // @@protoc_insertion_point(field_set_allocated:trtcaffe.ConvolutionParameter.bias_filler)
}

// optional .trtcaffe.ConvolutionParameter.Engine engine = 15 [default = DEFAULT];
inline bool ConvolutionParameter::_internal_has_engine() const {
  bool value = (_has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool ConvolutionParameter::has_engine() const {
  return _internal_has_engine();
}
inline void ConvolutionParameter::clear_engine() {
  engine_ = 0;
  _has_bits_[0] &= ~0x00000400u;
}
inline ::trtcaffe::ConvolutionParameter_Engine ConvolutionParameter::_internal_engine() const {
  return static_cast< ::trtcaffe::ConvolutionParameter_Engine >(engine_);
}
inline ::trtcaffe::ConvolutionParameter_Engine ConvolutionParameter::engine() const {
  // @@protoc_insertion_point(field_get:trtcaffe.ConvolutionParameter.engine)
  return _internal_engine();
}
inline void ConvolutionParameter::_internal_set_engine(::trtcaffe::ConvolutionParameter_Engine value) {
  assert(::trtcaffe::ConvolutionParameter_Engine_IsValid(value));
  _has_bits_[0] |= 0x00000400u;
  engine_ = value;
}
inline void ConvolutionParameter::set_engine(::trtcaffe::ConvolutionParameter_Engine value) {
  _internal_set_engine(value);
  // @@protoc_insertion_point(field_set:trtcaffe.ConvolutionParameter.engine)
}

// optional int32 axis = 16 [default = 1];
inline bool ConvolutionParameter::_internal_has_axis() const {
  bool value = (_has_bits_[0] & 0x00004000u) != 0;
  return value;
}
inline bool ConvolutionParameter::has_axis() const {
  return _internal_has_axis();
}
inline void ConvolutionParameter::clear_axis() {
  axis_ = 1;
  _has_bits_[0] &= ~0x00004000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ConvolutionParameter::_internal_axis() const {
  return axis_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ConvolutionParameter::axis() const {
  // @@protoc_insertion_point(field_get:trtcaffe.ConvolutionParameter.axis)
  return _internal_axis();
}
inline void ConvolutionParameter::_internal_set_axis(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00004000u;
  axis_ = value;
}
inline void ConvolutionParameter::set_axis(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_axis(value);
  // @@protoc_insertion_point(field_set:trtcaffe.ConvolutionParameter.axis)
}

// optional bool force_nd_im2col = 17 [default = false];
inline bool ConvolutionParameter::_internal_has_force_nd_im2col() const {
  bool value = (_has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool ConvolutionParameter::has_force_nd_im2col() const {
  return _internal_has_force_nd_im2col();
}
inline void ConvolutionParameter::clear_force_nd_im2col() {
  force_nd_im2col_ = false;
  _has_bits_[0] &= ~0x00000800u;
}
inline bool ConvolutionParameter::_internal_force_nd_im2col() const {
  return force_nd_im2col_;
}
inline bool ConvolutionParameter::force_nd_im2col() const {
  // @@protoc_insertion_point(field_get:trtcaffe.ConvolutionParameter.force_nd_im2col)
  return _internal_force_nd_im2col();
}
inline void ConvolutionParameter::_internal_set_force_nd_im2col(bool value) {
  _has_bits_[0] |= 0x00000800u;
  force_nd_im2col_ = value;
}
inline void ConvolutionParameter::set_force_nd_im2col(bool value) {
  _internal_set_force_nd_im2col(value);
  // @@protoc_insertion_point(field_set:trtcaffe.ConvolutionParameter.force_nd_im2col)
}

// optional .trtcaffe.ConvolutionParameter.CuDNNConvolutionAlgorithmSeeker cudnn_convolution_algo_seeker = 19 [default = FINDEX];
inline bool ConvolutionParameter::_internal_has_cudnn_convolution_algo_seeker() const {
  bool value = (_has_bits_[0] & 0x00008000u) != 0;
  return value;
}
inline bool ConvolutionParameter::has_cudnn_convolution_algo_seeker() const {
  return _internal_has_cudnn_convolution_algo_seeker();
}
inline void ConvolutionParameter::clear_cudnn_convolution_algo_seeker() {
  cudnn_convolution_algo_seeker_ = 1;
  _has_bits_[0] &= ~0x00008000u;
}
inline ::trtcaffe::ConvolutionParameter_CuDNNConvolutionAlgorithmSeeker ConvolutionParameter::_internal_cudnn_convolution_algo_seeker() const {
  return static_cast< ::trtcaffe::ConvolutionParameter_CuDNNConvolutionAlgorithmSeeker >(cudnn_convolution_algo_seeker_);
}
inline ::trtcaffe::ConvolutionParameter_CuDNNConvolutionAlgorithmSeeker ConvolutionParameter::cudnn_convolution_algo_seeker() const {
  // @@protoc_insertion_point(field_get:trtcaffe.ConvolutionParameter.cudnn_convolution_algo_seeker)
  return _internal_cudnn_convolution_algo_seeker();
}
inline void ConvolutionParameter::_internal_set_cudnn_convolution_algo_seeker(::trtcaffe::ConvolutionParameter_CuDNNConvolutionAlgorithmSeeker value) {
  assert(::trtcaffe::ConvolutionParameter_CuDNNConvolutionAlgorithmSeeker_IsValid(value));
  _has_bits_[0] |= 0x00008000u;
  cudnn_convolution_algo_seeker_ = value;
}
inline void ConvolutionParameter::set_cudnn_convolution_algo_seeker(::trtcaffe::ConvolutionParameter_CuDNNConvolutionAlgorithmSeeker value) {
  _internal_set_cudnn_convolution_algo_seeker(value);
  // @@protoc_insertion_point(field_set:trtcaffe.ConvolutionParameter.cudnn_convolution_algo_seeker)
}

// optional string conv_algos_override = 20 [default = "-1,-1,-1"];
inline bool ConvolutionParameter::_internal_has_conv_algos_override() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ConvolutionParameter::has_conv_algos_override() const {
  return _internal_has_conv_algos_override();
}
inline void ConvolutionParameter::clear_conv_algos_override() {
  conv_algos_override_.ClearToDefault(&::trtcaffe::ConvolutionParameter::_i_give_permission_to_break_this_code_default_conv_algos_override_.get(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ConvolutionParameter::conv_algos_override() const {
  // @@protoc_insertion_point(field_get:trtcaffe.ConvolutionParameter.conv_algos_override)
  return _internal_conv_algos_override();
}
inline void ConvolutionParameter::set_conv_algos_override(const std::string& value) {
  _internal_set_conv_algos_override(value);
  // @@protoc_insertion_point(field_set:trtcaffe.ConvolutionParameter.conv_algos_override)
}
inline std::string* ConvolutionParameter::mutable_conv_algos_override() {
  // @@protoc_insertion_point(field_mutable:trtcaffe.ConvolutionParameter.conv_algos_override)
  return _internal_mutable_conv_algos_override();
}
inline const std::string& ConvolutionParameter::_internal_conv_algos_override() const {
  return conv_algos_override_.Get();
}
inline void ConvolutionParameter::_internal_set_conv_algos_override(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  conv_algos_override_.Set(&::trtcaffe::ConvolutionParameter::_i_give_permission_to_break_this_code_default_conv_algos_override_.get(), value, GetArena());
}
inline void ConvolutionParameter::set_conv_algos_override(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  conv_algos_override_.Set(
    &::trtcaffe::ConvolutionParameter::_i_give_permission_to_break_this_code_default_conv_algos_override_.get(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:trtcaffe.ConvolutionParameter.conv_algos_override)
}
inline void ConvolutionParameter::set_conv_algos_override(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  conv_algos_override_.Set(&::trtcaffe::ConvolutionParameter::_i_give_permission_to_break_this_code_default_conv_algos_override_.get(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:trtcaffe.ConvolutionParameter.conv_algos_override)
}
inline void ConvolutionParameter::set_conv_algos_override(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  conv_algos_override_.Set(&::trtcaffe::ConvolutionParameter::_i_give_permission_to_break_this_code_default_conv_algos_override_.get(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:trtcaffe.ConvolutionParameter.conv_algos_override)
}
inline std::string* ConvolutionParameter::_internal_mutable_conv_algos_override() {
  _has_bits_[0] |= 0x00000001u;
  return conv_algos_override_.Mutable(&::trtcaffe::ConvolutionParameter::_i_give_permission_to_break_this_code_default_conv_algos_override_.get(), GetArena());
}
inline std::string* ConvolutionParameter::release_conv_algos_override() {
  // @@protoc_insertion_point(field_release:trtcaffe.ConvolutionParameter.conv_algos_override)
  if (!_internal_has_conv_algos_override()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return conv_algos_override_.ReleaseNonDefault(&::trtcaffe::ConvolutionParameter::_i_give_permission_to_break_this_code_default_conv_algos_override_.get(), GetArena());
}
inline void ConvolutionParameter::set_allocated_conv_algos_override(std::string* conv_algos_override) {
  if (conv_algos_override != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  conv_algos_override_.SetAllocated(&::trtcaffe::ConvolutionParameter::_i_give_permission_to_break_this_code_default_conv_algos_override_.get(), conv_algos_override,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:trtcaffe.ConvolutionParameter.conv_algos_override)
}
inline std::string* ConvolutionParameter::unsafe_arena_release_conv_algos_override() {
  // @@protoc_insertion_point(field_unsafe_arena_release:trtcaffe.ConvolutionParameter.conv_algos_override)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000001u;
  return conv_algos_override_.UnsafeArenaRelease(&::trtcaffe::ConvolutionParameter::_i_give_permission_to_break_this_code_default_conv_algos_override_.get(),
      GetArena());
}
inline void ConvolutionParameter::unsafe_arena_set_allocated_conv_algos_override(
    std::string* conv_algos_override) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (conv_algos_override != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  conv_algos_override_.UnsafeArenaSetAllocated(&::trtcaffe::ConvolutionParameter::_i_give_permission_to_break_this_code_default_conv_algos_override_.get(),
      conv_algos_override, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:trtcaffe.ConvolutionParameter.conv_algos_override)
}

// -------------------------------------------------------------------

// CropParameter

// optional int32 axis = 1 [default = 2];
inline bool CropParameter::_internal_has_axis() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CropParameter::has_axis() const {
  return _internal_has_axis();
}
inline void CropParameter::clear_axis() {
  axis_ = 2;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CropParameter::_internal_axis() const {
  return axis_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CropParameter::axis() const {
  // @@protoc_insertion_point(field_get:trtcaffe.CropParameter.axis)
  return _internal_axis();
}
inline void CropParameter::_internal_set_axis(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000001u;
  axis_ = value;
}
inline void CropParameter::set_axis(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_axis(value);
  // @@protoc_insertion_point(field_set:trtcaffe.CropParameter.axis)
}

// repeated uint32 offset = 2;
inline int CropParameter::_internal_offset_size() const {
  return offset_.size();
}
inline int CropParameter::offset_size() const {
  return _internal_offset_size();
}
inline void CropParameter::clear_offset() {
  offset_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CropParameter::_internal_offset(int index) const {
  return offset_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CropParameter::offset(int index) const {
  // @@protoc_insertion_point(field_get:trtcaffe.CropParameter.offset)
  return _internal_offset(index);
}
inline void CropParameter::set_offset(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  offset_.Set(index, value);
  // @@protoc_insertion_point(field_set:trtcaffe.CropParameter.offset)
}
inline void CropParameter::_internal_add_offset(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  offset_.Add(value);
}
inline void CropParameter::add_offset(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_add_offset(value);
  // @@protoc_insertion_point(field_add:trtcaffe.CropParameter.offset)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
CropParameter::_internal_offset() const {
  return offset_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
CropParameter::offset() const {
  // @@protoc_insertion_point(field_list:trtcaffe.CropParameter.offset)
  return _internal_offset();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
CropParameter::_internal_mutable_offset() {
  return &offset_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
CropParameter::mutable_offset() {
  // @@protoc_insertion_point(field_mutable_list:trtcaffe.CropParameter.offset)
  return _internal_mutable_offset();
}

// -------------------------------------------------------------------

// DataParameter

// optional string source = 1;
inline bool DataParameter::_internal_has_source() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool DataParameter::has_source() const {
  return _internal_has_source();
}
inline void DataParameter::clear_source() {
  source_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& DataParameter::source() const {
  // @@protoc_insertion_point(field_get:trtcaffe.DataParameter.source)
  return _internal_source();
}
inline void DataParameter::set_source(const std::string& value) {
  _internal_set_source(value);
  // @@protoc_insertion_point(field_set:trtcaffe.DataParameter.source)
}
inline std::string* DataParameter::mutable_source() {
  // @@protoc_insertion_point(field_mutable:trtcaffe.DataParameter.source)
  return _internal_mutable_source();
}
inline const std::string& DataParameter::_internal_source() const {
  return source_.Get();
}
inline void DataParameter::_internal_set_source(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  source_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void DataParameter::set_source(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  source_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:trtcaffe.DataParameter.source)
}
inline void DataParameter::set_source(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  source_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:trtcaffe.DataParameter.source)
}
inline void DataParameter::set_source(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  source_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:trtcaffe.DataParameter.source)
}
inline std::string* DataParameter::_internal_mutable_source() {
  _has_bits_[0] |= 0x00000001u;
  return source_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* DataParameter::release_source() {
  // @@protoc_insertion_point(field_release:trtcaffe.DataParameter.source)
  if (!_internal_has_source()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return source_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void DataParameter::set_allocated_source(std::string* source) {
  if (source != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  source_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), source,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:trtcaffe.DataParameter.source)
}
inline std::string* DataParameter::unsafe_arena_release_source() {
  // @@protoc_insertion_point(field_unsafe_arena_release:trtcaffe.DataParameter.source)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000001u;
  return source_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void DataParameter::unsafe_arena_set_allocated_source(
    std::string* source) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (source != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  source_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      source, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:trtcaffe.DataParameter.source)
}

// optional uint32 batch_size = 4;
inline bool DataParameter::_internal_has_batch_size() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool DataParameter::has_batch_size() const {
  return _internal_has_batch_size();
}
inline void DataParameter::clear_batch_size() {
  batch_size_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 DataParameter::_internal_batch_size() const {
  return batch_size_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 DataParameter::batch_size() const {
  // @@protoc_insertion_point(field_get:trtcaffe.DataParameter.batch_size)
  return _internal_batch_size();
}
inline void DataParameter::_internal_set_batch_size(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  batch_size_ = value;
}
inline void DataParameter::set_batch_size(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_batch_size(value);
  // @@protoc_insertion_point(field_set:trtcaffe.DataParameter.batch_size)
}

// optional uint32 rand_skip = 7 [default = 0];
inline bool DataParameter::_internal_has_rand_skip() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool DataParameter::has_rand_skip() const {
  return _internal_has_rand_skip();
}
inline void DataParameter::clear_rand_skip() {
  rand_skip_ = 0u;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 DataParameter::_internal_rand_skip() const {
  return rand_skip_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 DataParameter::rand_skip() const {
  // @@protoc_insertion_point(field_get:trtcaffe.DataParameter.rand_skip)
  return _internal_rand_skip();
}
inline void DataParameter::_internal_set_rand_skip(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000010u;
  rand_skip_ = value;
}
inline void DataParameter::set_rand_skip(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_rand_skip(value);
  // @@protoc_insertion_point(field_set:trtcaffe.DataParameter.rand_skip)
}

// optional .trtcaffe.DataParameter.DB backend = 8 [default = LEVELDB];
inline bool DataParameter::_internal_has_backend() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool DataParameter::has_backend() const {
  return _internal_has_backend();
}
inline void DataParameter::clear_backend() {
  backend_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::trtcaffe::DataParameter_DB DataParameter::_internal_backend() const {
  return static_cast< ::trtcaffe::DataParameter_DB >(backend_);
}
inline ::trtcaffe::DataParameter_DB DataParameter::backend() const {
  // @@protoc_insertion_point(field_get:trtcaffe.DataParameter.backend)
  return _internal_backend();
}
inline void DataParameter::_internal_set_backend(::trtcaffe::DataParameter_DB value) {
  assert(::trtcaffe::DataParameter_DB_IsValid(value));
  _has_bits_[0] |= 0x00000020u;
  backend_ = value;
}
inline void DataParameter::set_backend(::trtcaffe::DataParameter_DB value) {
  _internal_set_backend(value);
  // @@protoc_insertion_point(field_set:trtcaffe.DataParameter.backend)
}

// optional float scale = 2 [default = 1];
inline bool DataParameter::_internal_has_scale() const {
  bool value = (_has_bits_[0] & 0x00002000u) != 0;
  return value;
}
inline bool DataParameter::has_scale() const {
  return _internal_has_scale();
}
inline void DataParameter::clear_scale() {
  scale_ = 1;
  _has_bits_[0] &= ~0x00002000u;
}
inline float DataParameter::_internal_scale() const {
  return scale_;
}
inline float DataParameter::scale() const {
  // @@protoc_insertion_point(field_get:trtcaffe.DataParameter.scale)
  return _internal_scale();
}
inline void DataParameter::_internal_set_scale(float value) {
  _has_bits_[0] |= 0x00002000u;
  scale_ = value;
}
inline void DataParameter::set_scale(float value) {
  _internal_set_scale(value);
  // @@protoc_insertion_point(field_set:trtcaffe.DataParameter.scale)
}

// optional string mean_file = 3;
inline bool DataParameter::_internal_has_mean_file() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool DataParameter::has_mean_file() const {
  return _internal_has_mean_file();
}
inline void DataParameter::clear_mean_file() {
  mean_file_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& DataParameter::mean_file() const {
  // @@protoc_insertion_point(field_get:trtcaffe.DataParameter.mean_file)
  return _internal_mean_file();
}
inline void DataParameter::set_mean_file(const std::string& value) {
  _internal_set_mean_file(value);
  // @@protoc_insertion_point(field_set:trtcaffe.DataParameter.mean_file)
}
inline std::string* DataParameter::mutable_mean_file() {
  // @@protoc_insertion_point(field_mutable:trtcaffe.DataParameter.mean_file)
  return _internal_mutable_mean_file();
}
inline const std::string& DataParameter::_internal_mean_file() const {
  return mean_file_.Get();
}
inline void DataParameter::_internal_set_mean_file(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  mean_file_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void DataParameter::set_mean_file(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  mean_file_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:trtcaffe.DataParameter.mean_file)
}
inline void DataParameter::set_mean_file(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  mean_file_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:trtcaffe.DataParameter.mean_file)
}
inline void DataParameter::set_mean_file(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  mean_file_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:trtcaffe.DataParameter.mean_file)
}
inline std::string* DataParameter::_internal_mutable_mean_file() {
  _has_bits_[0] |= 0x00000002u;
  return mean_file_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* DataParameter::release_mean_file() {
  // @@protoc_insertion_point(field_release:trtcaffe.DataParameter.mean_file)
  if (!_internal_has_mean_file()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return mean_file_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void DataParameter::set_allocated_mean_file(std::string* mean_file) {
  if (mean_file != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  mean_file_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), mean_file,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:trtcaffe.DataParameter.mean_file)
}
inline std::string* DataParameter::unsafe_arena_release_mean_file() {
  // @@protoc_insertion_point(field_unsafe_arena_release:trtcaffe.DataParameter.mean_file)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000002u;
  return mean_file_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void DataParameter::unsafe_arena_set_allocated_mean_file(
    std::string* mean_file) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (mean_file != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  mean_file_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      mean_file, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:trtcaffe.DataParameter.mean_file)
}

// optional uint32 crop_size = 5 [default = 0];
inline bool DataParameter::_internal_has_crop_size() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool DataParameter::has_crop_size() const {
  return _internal_has_crop_size();
}
inline void DataParameter::clear_crop_size() {
  crop_size_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 DataParameter::_internal_crop_size() const {
  return crop_size_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 DataParameter::crop_size() const {
  // @@protoc_insertion_point(field_get:trtcaffe.DataParameter.crop_size)
  return _internal_crop_size();
}
inline void DataParameter::_internal_set_crop_size(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000008u;
  crop_size_ = value;
}
inline void DataParameter::set_crop_size(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_crop_size(value);
  // @@protoc_insertion_point(field_set:trtcaffe.DataParameter.crop_size)
}

// optional bool mirror = 6 [default = false];
inline bool DataParameter::_internal_has_mirror() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool DataParameter::has_mirror() const {
  return _internal_has_mirror();
}
inline void DataParameter::clear_mirror() {
  mirror_ = false;
  _has_bits_[0] &= ~0x00000080u;
}
inline bool DataParameter::_internal_mirror() const {
  return mirror_;
}
inline bool DataParameter::mirror() const {
  // @@protoc_insertion_point(field_get:trtcaffe.DataParameter.mirror)
  return _internal_mirror();
}
inline void DataParameter::_internal_set_mirror(bool value) {
  _has_bits_[0] |= 0x00000080u;
  mirror_ = value;
}
inline void DataParameter::set_mirror(bool value) {
  _internal_set_mirror(value);
  // @@protoc_insertion_point(field_set:trtcaffe.DataParameter.mirror)
}

// optional bool force_encoded_color = 9 [default = false];
inline bool DataParameter::_internal_has_force_encoded_color() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool DataParameter::has_force_encoded_color() const {
  return _internal_has_force_encoded_color();
}
inline void DataParameter::clear_force_encoded_color() {
  force_encoded_color_ = false;
  _has_bits_[0] &= ~0x00000100u;
}
inline bool DataParameter::_internal_force_encoded_color() const {
  return force_encoded_color_;
}
inline bool DataParameter::force_encoded_color() const {
  // @@protoc_insertion_point(field_get:trtcaffe.DataParameter.force_encoded_color)
  return _internal_force_encoded_color();
}
inline void DataParameter::_internal_set_force_encoded_color(bool value) {
  _has_bits_[0] |= 0x00000100u;
  force_encoded_color_ = value;
}
inline void DataParameter::set_force_encoded_color(bool value) {
  _internal_set_force_encoded_color(value);
  // @@protoc_insertion_point(field_set:trtcaffe.DataParameter.force_encoded_color)
}

// optional uint32 prefetch = 10 [default = 0];
inline bool DataParameter::_internal_has_prefetch() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool DataParameter::has_prefetch() const {
  return _internal_has_prefetch();
}
inline void DataParameter::clear_prefetch() {
  prefetch_ = 0u;
  _has_bits_[0] &= ~0x00000040u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 DataParameter::_internal_prefetch() const {
  return prefetch_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 DataParameter::prefetch() const {
  // @@protoc_insertion_point(field_get:trtcaffe.DataParameter.prefetch)
  return _internal_prefetch();
}
inline void DataParameter::_internal_set_prefetch(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000040u;
  prefetch_ = value;
}
inline void DataParameter::set_prefetch(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_prefetch(value);
  // @@protoc_insertion_point(field_set:trtcaffe.DataParameter.prefetch)
}

// optional uint32 threads = 11 [default = 0];
inline bool DataParameter::_internal_has_threads() const {
  bool value = (_has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool DataParameter::has_threads() const {
  return _internal_has_threads();
}
inline void DataParameter::clear_threads() {
  threads_ = 0u;
  _has_bits_[0] &= ~0x00000800u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 DataParameter::_internal_threads() const {
  return threads_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 DataParameter::threads() const {
  // @@protoc_insertion_point(field_get:trtcaffe.DataParameter.threads)
  return _internal_threads();
}
inline void DataParameter::_internal_set_threads(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000800u;
  threads_ = value;
}
inline void DataParameter::set_threads(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_threads(value);
  // @@protoc_insertion_point(field_set:trtcaffe.DataParameter.threads)
}

// optional uint32 parser_threads = 12 [default = 0];
inline bool DataParameter::_internal_has_parser_threads() const {
  bool value = (_has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline bool DataParameter::has_parser_threads() const {
  return _internal_has_parser_threads();
}
inline void DataParameter::clear_parser_threads() {
  parser_threads_ = 0u;
  _has_bits_[0] &= ~0x00001000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 DataParameter::_internal_parser_threads() const {
  return parser_threads_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 DataParameter::parser_threads() const {
  // @@protoc_insertion_point(field_get:trtcaffe.DataParameter.parser_threads)
  return _internal_parser_threads();
}
inline void DataParameter::_internal_set_parser_threads(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00001000u;
  parser_threads_ = value;
}
inline void DataParameter::set_parser_threads(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_parser_threads(value);
  // @@protoc_insertion_point(field_set:trtcaffe.DataParameter.parser_threads)
}

// optional bool cache = 13 [default = false];
inline bool DataParameter::_internal_has_cache() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool DataParameter::has_cache() const {
  return _internal_has_cache();
}
inline void DataParameter::clear_cache() {
  cache_ = false;
  _has_bits_[0] &= ~0x00000200u;
}
inline bool DataParameter::_internal_cache() const {
  return cache_;
}
inline bool DataParameter::cache() const {
  // @@protoc_insertion_point(field_get:trtcaffe.DataParameter.cache)
  return _internal_cache();
}
inline void DataParameter::_internal_set_cache(bool value) {
  _has_bits_[0] |= 0x00000200u;
  cache_ = value;
}
inline void DataParameter::set_cache(bool value) {
  _internal_set_cache(value);
  // @@protoc_insertion_point(field_set:trtcaffe.DataParameter.cache)
}

// optional bool shuffle = 14 [default = false];
inline bool DataParameter::_internal_has_shuffle() const {
  bool value = (_has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool DataParameter::has_shuffle() const {
  return _internal_has_shuffle();
}
inline void DataParameter::clear_shuffle() {
  shuffle_ = false;
  _has_bits_[0] &= ~0x00000400u;
}
inline bool DataParameter::_internal_shuffle() const {
  return shuffle_;
}
inline bool DataParameter::shuffle() const {
  // @@protoc_insertion_point(field_get:trtcaffe.DataParameter.shuffle)
  return _internal_shuffle();
}
inline void DataParameter::_internal_set_shuffle(bool value) {
  _has_bits_[0] |= 0x00000400u;
  shuffle_ = value;
}
inline void DataParameter::set_shuffle(bool value) {
  _internal_set_shuffle(value);
  // @@protoc_insertion_point(field_set:trtcaffe.DataParameter.shuffle)
}

// -------------------------------------------------------------------

// ResizeParameter

// optional float prob = 1 [default = 1];
inline bool ResizeParameter::_internal_has_prob() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool ResizeParameter::has_prob() const {
  return _internal_has_prob();
}
inline void ResizeParameter::clear_prob() {
  prob_ = 1;
  _has_bits_[0] &= ~0x00000020u;
}
inline float ResizeParameter::_internal_prob() const {
  return prob_;
}
inline float ResizeParameter::prob() const {
  // @@protoc_insertion_point(field_get:trtcaffe.ResizeParameter.prob)
  return _internal_prob();
}
inline void ResizeParameter::_internal_set_prob(float value) {
  _has_bits_[0] |= 0x00000020u;
  prob_ = value;
}
inline void ResizeParameter::set_prob(float value) {
  _internal_set_prob(value);
  // @@protoc_insertion_point(field_set:trtcaffe.ResizeParameter.prob)
}

// optional .trtcaffe.ResizeParameter.Resize_mode resize_mode = 2 [default = WARP];
inline bool ResizeParameter::_internal_has_resize_mode() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool ResizeParameter::has_resize_mode() const {
  return _internal_has_resize_mode();
}
inline void ResizeParameter::clear_resize_mode() {
  resize_mode_ = 1;
  _has_bits_[0] &= ~0x00000040u;
}
inline ::trtcaffe::ResizeParameter_Resize_mode ResizeParameter::_internal_resize_mode() const {
  return static_cast< ::trtcaffe::ResizeParameter_Resize_mode >(resize_mode_);
}
inline ::trtcaffe::ResizeParameter_Resize_mode ResizeParameter::resize_mode() const {
  // @@protoc_insertion_point(field_get:trtcaffe.ResizeParameter.resize_mode)
  return _internal_resize_mode();
}
inline void ResizeParameter::_internal_set_resize_mode(::trtcaffe::ResizeParameter_Resize_mode value) {
  assert(::trtcaffe::ResizeParameter_Resize_mode_IsValid(value));
  _has_bits_[0] |= 0x00000040u;
  resize_mode_ = value;
}
inline void ResizeParameter::set_resize_mode(::trtcaffe::ResizeParameter_Resize_mode value) {
  _internal_set_resize_mode(value);
  // @@protoc_insertion_point(field_set:trtcaffe.ResizeParameter.resize_mode)
}

// optional uint32 height = 3 [default = 0];
inline bool ResizeParameter::_internal_has_height() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ResizeParameter::has_height() const {
  return _internal_has_height();
}
inline void ResizeParameter::clear_height() {
  height_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ResizeParameter::_internal_height() const {
  return height_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ResizeParameter::height() const {
  // @@protoc_insertion_point(field_get:trtcaffe.ResizeParameter.height)
  return _internal_height();
}
inline void ResizeParameter::_internal_set_height(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  height_ = value;
}
inline void ResizeParameter::set_height(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_height(value);
  // @@protoc_insertion_point(field_set:trtcaffe.ResizeParameter.height)
}

// optional uint32 width = 4 [default = 0];
inline bool ResizeParameter::_internal_has_width() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ResizeParameter::has_width() const {
  return _internal_has_width();
}
inline void ResizeParameter::clear_width() {
  width_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ResizeParameter::_internal_width() const {
  return width_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ResizeParameter::width() const {
  // @@protoc_insertion_point(field_get:trtcaffe.ResizeParameter.width)
  return _internal_width();
}
inline void ResizeParameter::_internal_set_width(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  width_ = value;
}
inline void ResizeParameter::set_width(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_width(value);
  // @@protoc_insertion_point(field_set:trtcaffe.ResizeParameter.width)
}

// optional uint32 height_scale = 8 [default = 0];
inline bool ResizeParameter::_internal_has_height_scale() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool ResizeParameter::has_height_scale() const {
  return _internal_has_height_scale();
}
inline void ResizeParameter::clear_height_scale() {
  height_scale_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ResizeParameter::_internal_height_scale() const {
  return height_scale_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ResizeParameter::height_scale() const {
  // @@protoc_insertion_point(field_get:trtcaffe.ResizeParameter.height_scale)
  return _internal_height_scale();
}
inline void ResizeParameter::_internal_set_height_scale(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  height_scale_ = value;
}
inline void ResizeParameter::set_height_scale(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_height_scale(value);
  // @@protoc_insertion_point(field_set:trtcaffe.ResizeParameter.height_scale)
}

// optional uint32 width_scale = 9 [default = 0];
inline bool ResizeParameter::_internal_has_width_scale() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool ResizeParameter::has_width_scale() const {
  return _internal_has_width_scale();
}
inline void ResizeParameter::clear_width_scale() {
  width_scale_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ResizeParameter::_internal_width_scale() const {
  return width_scale_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ResizeParameter::width_scale() const {
  // @@protoc_insertion_point(field_get:trtcaffe.ResizeParameter.width_scale)
  return _internal_width_scale();
}
inline void ResizeParameter::_internal_set_width_scale(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000008u;
  width_scale_ = value;
}
inline void ResizeParameter::set_width_scale(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_width_scale(value);
  // @@protoc_insertion_point(field_set:trtcaffe.ResizeParameter.width_scale)
}

// optional .trtcaffe.ResizeParameter.Pad_mode pad_mode = 5 [default = CONSTANT];
inline bool ResizeParameter::_internal_has_pad_mode() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool ResizeParameter::has_pad_mode() const {
  return _internal_has_pad_mode();
}
inline void ResizeParameter::clear_pad_mode() {
  pad_mode_ = 1;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::trtcaffe::ResizeParameter_Pad_mode ResizeParameter::_internal_pad_mode() const {
  return static_cast< ::trtcaffe::ResizeParameter_Pad_mode >(pad_mode_);
}
inline ::trtcaffe::ResizeParameter_Pad_mode ResizeParameter::pad_mode() const {
  // @@protoc_insertion_point(field_get:trtcaffe.ResizeParameter.pad_mode)
  return _internal_pad_mode();
}
inline void ResizeParameter::_internal_set_pad_mode(::trtcaffe::ResizeParameter_Pad_mode value) {
  assert(::trtcaffe::ResizeParameter_Pad_mode_IsValid(value));
  _has_bits_[0] |= 0x00000010u;
  pad_mode_ = value;
}
inline void ResizeParameter::set_pad_mode(::trtcaffe::ResizeParameter_Pad_mode value) {
  _internal_set_pad_mode(value);
  // @@protoc_insertion_point(field_set:trtcaffe.ResizeParameter.pad_mode)
}

// repeated float pad_value = 6;
inline int ResizeParameter::_internal_pad_value_size() const {
  return pad_value_.size();
}
inline int ResizeParameter::pad_value_size() const {
  return _internal_pad_value_size();
}
inline void ResizeParameter::clear_pad_value() {
  pad_value_.Clear();
}
inline float ResizeParameter::_internal_pad_value(int index) const {
  return pad_value_.Get(index);
}
inline float ResizeParameter::pad_value(int index) const {
  // @@protoc_insertion_point(field_get:trtcaffe.ResizeParameter.pad_value)
  return _internal_pad_value(index);
}
inline void ResizeParameter::set_pad_value(int index, float value) {
  pad_value_.Set(index, value);
  // @@protoc_insertion_point(field_set:trtcaffe.ResizeParameter.pad_value)
}
inline void ResizeParameter::_internal_add_pad_value(float value) {
  pad_value_.Add(value);
}
inline void ResizeParameter::add_pad_value(float value) {
  _internal_add_pad_value(value);
  // @@protoc_insertion_point(field_add:trtcaffe.ResizeParameter.pad_value)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
ResizeParameter::_internal_pad_value() const {
  return pad_value_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
ResizeParameter::pad_value() const {
  // @@protoc_insertion_point(field_list:trtcaffe.ResizeParameter.pad_value)
  return _internal_pad_value();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
ResizeParameter::_internal_mutable_pad_value() {
  return &pad_value_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
ResizeParameter::mutable_pad_value() {
  // @@protoc_insertion_point(field_mutable_list:trtcaffe.ResizeParameter.pad_value)
  return _internal_mutable_pad_value();
}

// repeated .trtcaffe.ResizeParameter.Interp_mode interp_mode = 7;
inline int ResizeParameter::_internal_interp_mode_size() const {
  return interp_mode_.size();
}
inline int ResizeParameter::interp_mode_size() const {
  return _internal_interp_mode_size();
}
inline void ResizeParameter::clear_interp_mode() {
  interp_mode_.Clear();
}
inline ::trtcaffe::ResizeParameter_Interp_mode ResizeParameter::_internal_interp_mode(int index) const {
  return static_cast< ::trtcaffe::ResizeParameter_Interp_mode >(interp_mode_.Get(index));
}
inline ::trtcaffe::ResizeParameter_Interp_mode ResizeParameter::interp_mode(int index) const {
  // @@protoc_insertion_point(field_get:trtcaffe.ResizeParameter.interp_mode)
  return _internal_interp_mode(index);
}
inline void ResizeParameter::set_interp_mode(int index, ::trtcaffe::ResizeParameter_Interp_mode value) {
  assert(::trtcaffe::ResizeParameter_Interp_mode_IsValid(value));
  interp_mode_.Set(index, value);
  // @@protoc_insertion_point(field_set:trtcaffe.ResizeParameter.interp_mode)
}
inline void ResizeParameter::_internal_add_interp_mode(::trtcaffe::ResizeParameter_Interp_mode value) {
  assert(::trtcaffe::ResizeParameter_Interp_mode_IsValid(value));
  interp_mode_.Add(value);
}
inline void ResizeParameter::add_interp_mode(::trtcaffe::ResizeParameter_Interp_mode value) {
  // @@protoc_insertion_point(field_add:trtcaffe.ResizeParameter.interp_mode)
  _internal_add_interp_mode(value);
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>&
ResizeParameter::interp_mode() const {
  // @@protoc_insertion_point(field_list:trtcaffe.ResizeParameter.interp_mode)
  return interp_mode_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
ResizeParameter::_internal_mutable_interp_mode() {
  return &interp_mode_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
ResizeParameter::mutable_interp_mode() {
  // @@protoc_insertion_point(field_mutable_list:trtcaffe.ResizeParameter.interp_mode)
  return _internal_mutable_interp_mode();
}

// -------------------------------------------------------------------

// NonMaximumSuppressionParameter

// optional float nms_threshold = 1 [default = 0.3];
inline bool NonMaximumSuppressionParameter::_internal_has_nms_threshold() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool NonMaximumSuppressionParameter::has_nms_threshold() const {
  return _internal_has_nms_threshold();
}
inline void NonMaximumSuppressionParameter::clear_nms_threshold() {
  nms_threshold_ = 0.3f;
  _has_bits_[0] &= ~0x00000002u;
}
inline float NonMaximumSuppressionParameter::_internal_nms_threshold() const {
  return nms_threshold_;
}
inline float NonMaximumSuppressionParameter::nms_threshold() const {
  // @@protoc_insertion_point(field_get:trtcaffe.NonMaximumSuppressionParameter.nms_threshold)
  return _internal_nms_threshold();
}
inline void NonMaximumSuppressionParameter::_internal_set_nms_threshold(float value) {
  _has_bits_[0] |= 0x00000002u;
  nms_threshold_ = value;
}
inline void NonMaximumSuppressionParameter::set_nms_threshold(float value) {
  _internal_set_nms_threshold(value);
  // @@protoc_insertion_point(field_set:trtcaffe.NonMaximumSuppressionParameter.nms_threshold)
}

// optional int32 top_k = 2;
inline bool NonMaximumSuppressionParameter::_internal_has_top_k() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool NonMaximumSuppressionParameter::has_top_k() const {
  return _internal_has_top_k();
}
inline void NonMaximumSuppressionParameter::clear_top_k() {
  top_k_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 NonMaximumSuppressionParameter::_internal_top_k() const {
  return top_k_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 NonMaximumSuppressionParameter::top_k() const {
  // @@protoc_insertion_point(field_get:trtcaffe.NonMaximumSuppressionParameter.top_k)
  return _internal_top_k();
}
inline void NonMaximumSuppressionParameter::_internal_set_top_k(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000001u;
  top_k_ = value;
}
inline void NonMaximumSuppressionParameter::set_top_k(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_top_k(value);
  // @@protoc_insertion_point(field_set:trtcaffe.NonMaximumSuppressionParameter.top_k)
}

// optional float eta = 3 [default = 1];
inline bool NonMaximumSuppressionParameter::_internal_has_eta() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool NonMaximumSuppressionParameter::has_eta() const {
  return _internal_has_eta();
}
inline void NonMaximumSuppressionParameter::clear_eta() {
  eta_ = 1;
  _has_bits_[0] &= ~0x00000004u;
}
inline float NonMaximumSuppressionParameter::_internal_eta() const {
  return eta_;
}
inline float NonMaximumSuppressionParameter::eta() const {
  // @@protoc_insertion_point(field_get:trtcaffe.NonMaximumSuppressionParameter.eta)
  return _internal_eta();
}
inline void NonMaximumSuppressionParameter::_internal_set_eta(float value) {
  _has_bits_[0] |= 0x00000004u;
  eta_ = value;
}
inline void NonMaximumSuppressionParameter::set_eta(float value) {
  _internal_set_eta(value);
  // @@protoc_insertion_point(field_set:trtcaffe.NonMaximumSuppressionParameter.eta)
}

// -------------------------------------------------------------------

// SaveOutputParameter

// optional string output_directory = 1;
inline bool SaveOutputParameter::_internal_has_output_directory() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool SaveOutputParameter::has_output_directory() const {
  return _internal_has_output_directory();
}
inline void SaveOutputParameter::clear_output_directory() {
  output_directory_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& SaveOutputParameter::output_directory() const {
  // @@protoc_insertion_point(field_get:trtcaffe.SaveOutputParameter.output_directory)
  return _internal_output_directory();
}
inline void SaveOutputParameter::set_output_directory(const std::string& value) {
  _internal_set_output_directory(value);
  // @@protoc_insertion_point(field_set:trtcaffe.SaveOutputParameter.output_directory)
}
inline std::string* SaveOutputParameter::mutable_output_directory() {
  // @@protoc_insertion_point(field_mutable:trtcaffe.SaveOutputParameter.output_directory)
  return _internal_mutable_output_directory();
}
inline const std::string& SaveOutputParameter::_internal_output_directory() const {
  return output_directory_.Get();
}
inline void SaveOutputParameter::_internal_set_output_directory(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  output_directory_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void SaveOutputParameter::set_output_directory(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  output_directory_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:trtcaffe.SaveOutputParameter.output_directory)
}
inline void SaveOutputParameter::set_output_directory(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  output_directory_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:trtcaffe.SaveOutputParameter.output_directory)
}
inline void SaveOutputParameter::set_output_directory(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  output_directory_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:trtcaffe.SaveOutputParameter.output_directory)
}
inline std::string* SaveOutputParameter::_internal_mutable_output_directory() {
  _has_bits_[0] |= 0x00000001u;
  return output_directory_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* SaveOutputParameter::release_output_directory() {
  // @@protoc_insertion_point(field_release:trtcaffe.SaveOutputParameter.output_directory)
  if (!_internal_has_output_directory()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return output_directory_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SaveOutputParameter::set_allocated_output_directory(std::string* output_directory) {
  if (output_directory != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  output_directory_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), output_directory,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:trtcaffe.SaveOutputParameter.output_directory)
}
inline std::string* SaveOutputParameter::unsafe_arena_release_output_directory() {
  // @@protoc_insertion_point(field_unsafe_arena_release:trtcaffe.SaveOutputParameter.output_directory)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000001u;
  return output_directory_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void SaveOutputParameter::unsafe_arena_set_allocated_output_directory(
    std::string* output_directory) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (output_directory != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  output_directory_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      output_directory, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:trtcaffe.SaveOutputParameter.output_directory)
}

// optional string output_name_prefix = 2;
inline bool SaveOutputParameter::_internal_has_output_name_prefix() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool SaveOutputParameter::has_output_name_prefix() const {
  return _internal_has_output_name_prefix();
}
inline void SaveOutputParameter::clear_output_name_prefix() {
  output_name_prefix_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& SaveOutputParameter::output_name_prefix() const {
  // @@protoc_insertion_point(field_get:trtcaffe.SaveOutputParameter.output_name_prefix)
  return _internal_output_name_prefix();
}
inline void SaveOutputParameter::set_output_name_prefix(const std::string& value) {
  _internal_set_output_name_prefix(value);
  // @@protoc_insertion_point(field_set:trtcaffe.SaveOutputParameter.output_name_prefix)
}
inline std::string* SaveOutputParameter::mutable_output_name_prefix() {
  // @@protoc_insertion_point(field_mutable:trtcaffe.SaveOutputParameter.output_name_prefix)
  return _internal_mutable_output_name_prefix();
}
inline const std::string& SaveOutputParameter::_internal_output_name_prefix() const {
  return output_name_prefix_.Get();
}
inline void SaveOutputParameter::_internal_set_output_name_prefix(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  output_name_prefix_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void SaveOutputParameter::set_output_name_prefix(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  output_name_prefix_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:trtcaffe.SaveOutputParameter.output_name_prefix)
}
inline void SaveOutputParameter::set_output_name_prefix(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  output_name_prefix_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:trtcaffe.SaveOutputParameter.output_name_prefix)
}
inline void SaveOutputParameter::set_output_name_prefix(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  output_name_prefix_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:trtcaffe.SaveOutputParameter.output_name_prefix)
}
inline std::string* SaveOutputParameter::_internal_mutable_output_name_prefix() {
  _has_bits_[0] |= 0x00000002u;
  return output_name_prefix_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* SaveOutputParameter::release_output_name_prefix() {
  // @@protoc_insertion_point(field_release:trtcaffe.SaveOutputParameter.output_name_prefix)
  if (!_internal_has_output_name_prefix()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return output_name_prefix_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SaveOutputParameter::set_allocated_output_name_prefix(std::string* output_name_prefix) {
  if (output_name_prefix != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  output_name_prefix_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), output_name_prefix,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:trtcaffe.SaveOutputParameter.output_name_prefix)
}
inline std::string* SaveOutputParameter::unsafe_arena_release_output_name_prefix() {
  // @@protoc_insertion_point(field_unsafe_arena_release:trtcaffe.SaveOutputParameter.output_name_prefix)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000002u;
  return output_name_prefix_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void SaveOutputParameter::unsafe_arena_set_allocated_output_name_prefix(
    std::string* output_name_prefix) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (output_name_prefix != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  output_name_prefix_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      output_name_prefix, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:trtcaffe.SaveOutputParameter.output_name_prefix)
}

// optional string output_format = 3;
inline bool SaveOutputParameter::_internal_has_output_format() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool SaveOutputParameter::has_output_format() const {
  return _internal_has_output_format();
}
inline void SaveOutputParameter::clear_output_format() {
  output_format_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& SaveOutputParameter::output_format() const {
  // @@protoc_insertion_point(field_get:trtcaffe.SaveOutputParameter.output_format)
  return _internal_output_format();
}
inline void SaveOutputParameter::set_output_format(const std::string& value) {
  _internal_set_output_format(value);
  // @@protoc_insertion_point(field_set:trtcaffe.SaveOutputParameter.output_format)
}
inline std::string* SaveOutputParameter::mutable_output_format() {
  // @@protoc_insertion_point(field_mutable:trtcaffe.SaveOutputParameter.output_format)
  return _internal_mutable_output_format();
}
inline const std::string& SaveOutputParameter::_internal_output_format() const {
  return output_format_.Get();
}
inline void SaveOutputParameter::_internal_set_output_format(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  output_format_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void SaveOutputParameter::set_output_format(std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  output_format_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:trtcaffe.SaveOutputParameter.output_format)
}
inline void SaveOutputParameter::set_output_format(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  output_format_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:trtcaffe.SaveOutputParameter.output_format)
}
inline void SaveOutputParameter::set_output_format(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000004u;
  output_format_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:trtcaffe.SaveOutputParameter.output_format)
}
inline std::string* SaveOutputParameter::_internal_mutable_output_format() {
  _has_bits_[0] |= 0x00000004u;
  return output_format_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* SaveOutputParameter::release_output_format() {
  // @@protoc_insertion_point(field_release:trtcaffe.SaveOutputParameter.output_format)
  if (!_internal_has_output_format()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return output_format_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SaveOutputParameter::set_allocated_output_format(std::string* output_format) {
  if (output_format != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  output_format_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), output_format,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:trtcaffe.SaveOutputParameter.output_format)
}
inline std::string* SaveOutputParameter::unsafe_arena_release_output_format() {
  // @@protoc_insertion_point(field_unsafe_arena_release:trtcaffe.SaveOutputParameter.output_format)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000004u;
  return output_format_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void SaveOutputParameter::unsafe_arena_set_allocated_output_format(
    std::string* output_format) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (output_format != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  output_format_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      output_format, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:trtcaffe.SaveOutputParameter.output_format)
}

// optional string label_map_file = 4;
inline bool SaveOutputParameter::_internal_has_label_map_file() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool SaveOutputParameter::has_label_map_file() const {
  return _internal_has_label_map_file();
}
inline void SaveOutputParameter::clear_label_map_file() {
  label_map_file_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000008u;
}
inline const std::string& SaveOutputParameter::label_map_file() const {
  // @@protoc_insertion_point(field_get:trtcaffe.SaveOutputParameter.label_map_file)
  return _internal_label_map_file();
}
inline void SaveOutputParameter::set_label_map_file(const std::string& value) {
  _internal_set_label_map_file(value);
  // @@protoc_insertion_point(field_set:trtcaffe.SaveOutputParameter.label_map_file)
}
inline std::string* SaveOutputParameter::mutable_label_map_file() {
  // @@protoc_insertion_point(field_mutable:trtcaffe.SaveOutputParameter.label_map_file)
  return _internal_mutable_label_map_file();
}
inline const std::string& SaveOutputParameter::_internal_label_map_file() const {
  return label_map_file_.Get();
}
inline void SaveOutputParameter::_internal_set_label_map_file(const std::string& value) {
  _has_bits_[0] |= 0x00000008u;
  label_map_file_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void SaveOutputParameter::set_label_map_file(std::string&& value) {
  _has_bits_[0] |= 0x00000008u;
  label_map_file_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:trtcaffe.SaveOutputParameter.label_map_file)
}
inline void SaveOutputParameter::set_label_map_file(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000008u;
  label_map_file_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:trtcaffe.SaveOutputParameter.label_map_file)
}
inline void SaveOutputParameter::set_label_map_file(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000008u;
  label_map_file_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:trtcaffe.SaveOutputParameter.label_map_file)
}
inline std::string* SaveOutputParameter::_internal_mutable_label_map_file() {
  _has_bits_[0] |= 0x00000008u;
  return label_map_file_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* SaveOutputParameter::release_label_map_file() {
  // @@protoc_insertion_point(field_release:trtcaffe.SaveOutputParameter.label_map_file)
  if (!_internal_has_label_map_file()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000008u;
  return label_map_file_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SaveOutputParameter::set_allocated_label_map_file(std::string* label_map_file) {
  if (label_map_file != nullptr) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  label_map_file_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), label_map_file,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:trtcaffe.SaveOutputParameter.label_map_file)
}
inline std::string* SaveOutputParameter::unsafe_arena_release_label_map_file() {
  // @@protoc_insertion_point(field_unsafe_arena_release:trtcaffe.SaveOutputParameter.label_map_file)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000008u;
  return label_map_file_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void SaveOutputParameter::unsafe_arena_set_allocated_label_map_file(
    std::string* label_map_file) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (label_map_file != nullptr) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  label_map_file_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      label_map_file, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:trtcaffe.SaveOutputParameter.label_map_file)
}

// optional string name_size_file = 5;
inline bool SaveOutputParameter::_internal_has_name_size_file() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool SaveOutputParameter::has_name_size_file() const {
  return _internal_has_name_size_file();
}
inline void SaveOutputParameter::clear_name_size_file() {
  name_size_file_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000010u;
}
inline const std::string& SaveOutputParameter::name_size_file() const {
  // @@protoc_insertion_point(field_get:trtcaffe.SaveOutputParameter.name_size_file)
  return _internal_name_size_file();
}
inline void SaveOutputParameter::set_name_size_file(const std::string& value) {
  _internal_set_name_size_file(value);
  // @@protoc_insertion_point(field_set:trtcaffe.SaveOutputParameter.name_size_file)
}
inline std::string* SaveOutputParameter::mutable_name_size_file() {
  // @@protoc_insertion_point(field_mutable:trtcaffe.SaveOutputParameter.name_size_file)
  return _internal_mutable_name_size_file();
}
inline const std::string& SaveOutputParameter::_internal_name_size_file() const {
  return name_size_file_.Get();
}
inline void SaveOutputParameter::_internal_set_name_size_file(const std::string& value) {
  _has_bits_[0] |= 0x00000010u;
  name_size_file_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void SaveOutputParameter::set_name_size_file(std::string&& value) {
  _has_bits_[0] |= 0x00000010u;
  name_size_file_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:trtcaffe.SaveOutputParameter.name_size_file)
}
inline void SaveOutputParameter::set_name_size_file(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000010u;
  name_size_file_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:trtcaffe.SaveOutputParameter.name_size_file)
}
inline void SaveOutputParameter::set_name_size_file(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000010u;
  name_size_file_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:trtcaffe.SaveOutputParameter.name_size_file)
}
inline std::string* SaveOutputParameter::_internal_mutable_name_size_file() {
  _has_bits_[0] |= 0x00000010u;
  return name_size_file_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* SaveOutputParameter::release_name_size_file() {
  // @@protoc_insertion_point(field_release:trtcaffe.SaveOutputParameter.name_size_file)
  if (!_internal_has_name_size_file()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000010u;
  return name_size_file_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SaveOutputParameter::set_allocated_name_size_file(std::string* name_size_file) {
  if (name_size_file != nullptr) {
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  name_size_file_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name_size_file,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:trtcaffe.SaveOutputParameter.name_size_file)
}
inline std::string* SaveOutputParameter::unsafe_arena_release_name_size_file() {
  // @@protoc_insertion_point(field_unsafe_arena_release:trtcaffe.SaveOutputParameter.name_size_file)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000010u;
  return name_size_file_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void SaveOutputParameter::unsafe_arena_set_allocated_name_size_file(
    std::string* name_size_file) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (name_size_file != nullptr) {
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  name_size_file_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      name_size_file, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:trtcaffe.SaveOutputParameter.name_size_file)
}

// optional uint32 num_test_image = 6;
inline bool SaveOutputParameter::_internal_has_num_test_image() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool SaveOutputParameter::has_num_test_image() const {
  return _internal_has_num_test_image();
}
inline void SaveOutputParameter::clear_num_test_image() {
  num_test_image_ = 0u;
  _has_bits_[0] &= ~0x00000040u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SaveOutputParameter::_internal_num_test_image() const {
  return num_test_image_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SaveOutputParameter::num_test_image() const {
  // @@protoc_insertion_point(field_get:trtcaffe.SaveOutputParameter.num_test_image)
  return _internal_num_test_image();
}
inline void SaveOutputParameter::_internal_set_num_test_image(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000040u;
  num_test_image_ = value;
}
inline void SaveOutputParameter::set_num_test_image(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_num_test_image(value);
  // @@protoc_insertion_point(field_set:trtcaffe.SaveOutputParameter.num_test_image)
}

// optional .trtcaffe.ResizeParameter resize_param = 7;
inline bool SaveOutputParameter::_internal_has_resize_param() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  PROTOBUF_ASSUME(!value || resize_param_ != nullptr);
  return value;
}
inline bool SaveOutputParameter::has_resize_param() const {
  return _internal_has_resize_param();
}
inline void SaveOutputParameter::clear_resize_param() {
  if (resize_param_ != nullptr) resize_param_->Clear();
  _has_bits_[0] &= ~0x00000020u;
}
inline const ::trtcaffe::ResizeParameter& SaveOutputParameter::_internal_resize_param() const {
  const ::trtcaffe::ResizeParameter* p = resize_param_;
  return p != nullptr ? *p : *reinterpret_cast<const ::trtcaffe::ResizeParameter*>(
      &::trtcaffe::_ResizeParameter_default_instance_);
}
inline const ::trtcaffe::ResizeParameter& SaveOutputParameter::resize_param() const {
  // @@protoc_insertion_point(field_get:trtcaffe.SaveOutputParameter.resize_param)
  return _internal_resize_param();
}
inline void SaveOutputParameter::unsafe_arena_set_allocated_resize_param(
    ::trtcaffe::ResizeParameter* resize_param) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(resize_param_);
  }
  resize_param_ = resize_param;
  if (resize_param) {
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:trtcaffe.SaveOutputParameter.resize_param)
}
inline ::trtcaffe::ResizeParameter* SaveOutputParameter::release_resize_param() {
  auto temp = unsafe_arena_release_resize_param();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::trtcaffe::ResizeParameter* SaveOutputParameter::unsafe_arena_release_resize_param() {
  // @@protoc_insertion_point(field_release:trtcaffe.SaveOutputParameter.resize_param)
  _has_bits_[0] &= ~0x00000020u;
  ::trtcaffe::ResizeParameter* temp = resize_param_;
  resize_param_ = nullptr;
  return temp;
}
inline ::trtcaffe::ResizeParameter* SaveOutputParameter::_internal_mutable_resize_param() {
  _has_bits_[0] |= 0x00000020u;
  if (resize_param_ == nullptr) {
    auto* p = CreateMaybeMessage<::trtcaffe::ResizeParameter>(GetArena());
    resize_param_ = p;
  }
  return resize_param_;
}
inline ::trtcaffe::ResizeParameter* SaveOutputParameter::mutable_resize_param() {
  // @@protoc_insertion_point(field_mutable:trtcaffe.SaveOutputParameter.resize_param)
  return _internal_mutable_resize_param();
}
inline void SaveOutputParameter::set_allocated_resize_param(::trtcaffe::ResizeParameter* resize_param) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete resize_param_;
  }
  if (resize_param) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(resize_param);
    if (message_arena != submessage_arena) {
      resize_param = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, resize_param, submessage_arena);
    }
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  resize_param_ = resize_param;
  // @@protoc_insertion_point(field_set_allocated:trtcaffe.SaveOutputParameter.resize_param)
}

// -------------------------------------------------------------------

// DetectionOutputParameter

// optional uint32 num_classes = 1;
inline bool DetectionOutputParameter::_internal_has_num_classes() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool DetectionOutputParameter::has_num_classes() const {
  return _internal_has_num_classes();
}
inline void DetectionOutputParameter::clear_num_classes() {
  num_classes_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 DetectionOutputParameter::_internal_num_classes() const {
  return num_classes_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 DetectionOutputParameter::num_classes() const {
  // @@protoc_insertion_point(field_get:trtcaffe.DetectionOutputParameter.num_classes)
  return _internal_num_classes();
}
inline void DetectionOutputParameter::_internal_set_num_classes(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000008u;
  num_classes_ = value;
}
inline void DetectionOutputParameter::set_num_classes(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_num_classes(value);
  // @@protoc_insertion_point(field_set:trtcaffe.DetectionOutputParameter.num_classes)
}

// optional bool share_location = 2 [default = true];
inline bool DetectionOutputParameter::_internal_has_share_location() const {
  bool value = (_has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool DetectionOutputParameter::has_share_location() const {
  return _internal_has_share_location();
}
inline void DetectionOutputParameter::clear_share_location() {
  share_location_ = true;
  _has_bits_[0] &= ~0x00000400u;
}
inline bool DetectionOutputParameter::_internal_share_location() const {
  return share_location_;
}
inline bool DetectionOutputParameter::share_location() const {
  // @@protoc_insertion_point(field_get:trtcaffe.DetectionOutputParameter.share_location)
  return _internal_share_location();
}
inline void DetectionOutputParameter::_internal_set_share_location(bool value) {
  _has_bits_[0] |= 0x00000400u;
  share_location_ = value;
}
inline void DetectionOutputParameter::set_share_location(bool value) {
  _internal_set_share_location(value);
  // @@protoc_insertion_point(field_set:trtcaffe.DetectionOutputParameter.share_location)
}

// optional int32 background_label_id = 3 [default = 0];
inline bool DetectionOutputParameter::_internal_has_background_label_id() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool DetectionOutputParameter::has_background_label_id() const {
  return _internal_has_background_label_id();
}
inline void DetectionOutputParameter::clear_background_label_id() {
  background_label_id_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DetectionOutputParameter::_internal_background_label_id() const {
  return background_label_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DetectionOutputParameter::background_label_id() const {
  // @@protoc_insertion_point(field_get:trtcaffe.DetectionOutputParameter.background_label_id)
  return _internal_background_label_id();
}
inline void DetectionOutputParameter::_internal_set_background_label_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000010u;
  background_label_id_ = value;
}
inline void DetectionOutputParameter::set_background_label_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_background_label_id(value);
  // @@protoc_insertion_point(field_set:trtcaffe.DetectionOutputParameter.background_label_id)
}

// optional .trtcaffe.NonMaximumSuppressionParameter nms_param = 4;
inline bool DetectionOutputParameter::_internal_has_nms_param() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || nms_param_ != nullptr);
  return value;
}
inline bool DetectionOutputParameter::has_nms_param() const {
  return _internal_has_nms_param();
}
inline void DetectionOutputParameter::clear_nms_param() {
  if (nms_param_ != nullptr) nms_param_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::trtcaffe::NonMaximumSuppressionParameter& DetectionOutputParameter::_internal_nms_param() const {
  const ::trtcaffe::NonMaximumSuppressionParameter* p = nms_param_;
  return p != nullptr ? *p : *reinterpret_cast<const ::trtcaffe::NonMaximumSuppressionParameter*>(
      &::trtcaffe::_NonMaximumSuppressionParameter_default_instance_);
}
inline const ::trtcaffe::NonMaximumSuppressionParameter& DetectionOutputParameter::nms_param() const {
  // @@protoc_insertion_point(field_get:trtcaffe.DetectionOutputParameter.nms_param)
  return _internal_nms_param();
}
inline void DetectionOutputParameter::unsafe_arena_set_allocated_nms_param(
    ::trtcaffe::NonMaximumSuppressionParameter* nms_param) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(nms_param_);
  }
  nms_param_ = nms_param;
  if (nms_param) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:trtcaffe.DetectionOutputParameter.nms_param)
}
inline ::trtcaffe::NonMaximumSuppressionParameter* DetectionOutputParameter::release_nms_param() {
  auto temp = unsafe_arena_release_nms_param();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::trtcaffe::NonMaximumSuppressionParameter* DetectionOutputParameter::unsafe_arena_release_nms_param() {
  // @@protoc_insertion_point(field_release:trtcaffe.DetectionOutputParameter.nms_param)
  _has_bits_[0] &= ~0x00000002u;
  ::trtcaffe::NonMaximumSuppressionParameter* temp = nms_param_;
  nms_param_ = nullptr;
  return temp;
}
inline ::trtcaffe::NonMaximumSuppressionParameter* DetectionOutputParameter::_internal_mutable_nms_param() {
  _has_bits_[0] |= 0x00000002u;
  if (nms_param_ == nullptr) {
    auto* p = CreateMaybeMessage<::trtcaffe::NonMaximumSuppressionParameter>(GetArena());
    nms_param_ = p;
  }
  return nms_param_;
}
inline ::trtcaffe::NonMaximumSuppressionParameter* DetectionOutputParameter::mutable_nms_param() {
  // @@protoc_insertion_point(field_mutable:trtcaffe.DetectionOutputParameter.nms_param)
  return _internal_mutable_nms_param();
}
inline void DetectionOutputParameter::set_allocated_nms_param(::trtcaffe::NonMaximumSuppressionParameter* nms_param) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete nms_param_;
  }
  if (nms_param) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(nms_param);
    if (message_arena != submessage_arena) {
      nms_param = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, nms_param, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  nms_param_ = nms_param;
  // @@protoc_insertion_point(field_set_allocated:trtcaffe.DetectionOutputParameter.nms_param)
}

// optional .trtcaffe.SaveOutputParameter save_output_param = 5;
inline bool DetectionOutputParameter::_internal_has_save_output_param() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || save_output_param_ != nullptr);
  return value;
}
inline bool DetectionOutputParameter::has_save_output_param() const {
  return _internal_has_save_output_param();
}
inline void DetectionOutputParameter::clear_save_output_param() {
  if (save_output_param_ != nullptr) save_output_param_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::trtcaffe::SaveOutputParameter& DetectionOutputParameter::_internal_save_output_param() const {
  const ::trtcaffe::SaveOutputParameter* p = save_output_param_;
  return p != nullptr ? *p : *reinterpret_cast<const ::trtcaffe::SaveOutputParameter*>(
      &::trtcaffe::_SaveOutputParameter_default_instance_);
}
inline const ::trtcaffe::SaveOutputParameter& DetectionOutputParameter::save_output_param() const {
  // @@protoc_insertion_point(field_get:trtcaffe.DetectionOutputParameter.save_output_param)
  return _internal_save_output_param();
}
inline void DetectionOutputParameter::unsafe_arena_set_allocated_save_output_param(
    ::trtcaffe::SaveOutputParameter* save_output_param) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(save_output_param_);
  }
  save_output_param_ = save_output_param;
  if (save_output_param) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:trtcaffe.DetectionOutputParameter.save_output_param)
}
inline ::trtcaffe::SaveOutputParameter* DetectionOutputParameter::release_save_output_param() {
  auto temp = unsafe_arena_release_save_output_param();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::trtcaffe::SaveOutputParameter* DetectionOutputParameter::unsafe_arena_release_save_output_param() {
  // @@protoc_insertion_point(field_release:trtcaffe.DetectionOutputParameter.save_output_param)
  _has_bits_[0] &= ~0x00000004u;
  ::trtcaffe::SaveOutputParameter* temp = save_output_param_;
  save_output_param_ = nullptr;
  return temp;
}
inline ::trtcaffe::SaveOutputParameter* DetectionOutputParameter::_internal_mutable_save_output_param() {
  _has_bits_[0] |= 0x00000004u;
  if (save_output_param_ == nullptr) {
    auto* p = CreateMaybeMessage<::trtcaffe::SaveOutputParameter>(GetArena());
    save_output_param_ = p;
  }
  return save_output_param_;
}
inline ::trtcaffe::SaveOutputParameter* DetectionOutputParameter::mutable_save_output_param() {
  // @@protoc_insertion_point(field_mutable:trtcaffe.DetectionOutputParameter.save_output_param)
  return _internal_mutable_save_output_param();
}
inline void DetectionOutputParameter::set_allocated_save_output_param(::trtcaffe::SaveOutputParameter* save_output_param) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete save_output_param_;
  }
  if (save_output_param) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(save_output_param);
    if (message_arena != submessage_arena) {
      save_output_param = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, save_output_param, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  save_output_param_ = save_output_param;
  // @@protoc_insertion_point(field_set_allocated:trtcaffe.DetectionOutputParameter.save_output_param)
}

// optional .trtcaffe.PriorBoxParameter.CodeType code_type = 6 [default = CORNER];
inline bool DetectionOutputParameter::_internal_has_code_type() const {
  bool value = (_has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool DetectionOutputParameter::has_code_type() const {
  return _internal_has_code_type();
}
inline void DetectionOutputParameter::clear_code_type() {
  code_type_ = 1;
  _has_bits_[0] &= ~0x00000800u;
}
inline ::trtcaffe::PriorBoxParameter_CodeType DetectionOutputParameter::_internal_code_type() const {
  return static_cast< ::trtcaffe::PriorBoxParameter_CodeType >(code_type_);
}
inline ::trtcaffe::PriorBoxParameter_CodeType DetectionOutputParameter::code_type() const {
  // @@protoc_insertion_point(field_get:trtcaffe.DetectionOutputParameter.code_type)
  return _internal_code_type();
}
inline void DetectionOutputParameter::_internal_set_code_type(::trtcaffe::PriorBoxParameter_CodeType value) {
  assert(::trtcaffe::PriorBoxParameter_CodeType_IsValid(value));
  _has_bits_[0] |= 0x00000800u;
  code_type_ = value;
}
inline void DetectionOutputParameter::set_code_type(::trtcaffe::PriorBoxParameter_CodeType value) {
  _internal_set_code_type(value);
  // @@protoc_insertion_point(field_set:trtcaffe.DetectionOutputParameter.code_type)
}

// optional bool variance_encoded_in_target = 8 [default = false];
inline bool DetectionOutputParameter::_internal_has_variance_encoded_in_target() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool DetectionOutputParameter::has_variance_encoded_in_target() const {
  return _internal_has_variance_encoded_in_target();
}
inline void DetectionOutputParameter::clear_variance_encoded_in_target() {
  variance_encoded_in_target_ = false;
  _has_bits_[0] &= ~0x00000040u;
}
inline bool DetectionOutputParameter::_internal_variance_encoded_in_target() const {
  return variance_encoded_in_target_;
}
inline bool DetectionOutputParameter::variance_encoded_in_target() const {
  // @@protoc_insertion_point(field_get:trtcaffe.DetectionOutputParameter.variance_encoded_in_target)
  return _internal_variance_encoded_in_target();
}
inline void DetectionOutputParameter::_internal_set_variance_encoded_in_target(bool value) {
  _has_bits_[0] |= 0x00000040u;
  variance_encoded_in_target_ = value;
}
inline void DetectionOutputParameter::set_variance_encoded_in_target(bool value) {
  _internal_set_variance_encoded_in_target(value);
  // @@protoc_insertion_point(field_set:trtcaffe.DetectionOutputParameter.variance_encoded_in_target)
}

// optional int32 keep_top_k = 7 [default = -1];
inline bool DetectionOutputParameter::_internal_has_keep_top_k() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool DetectionOutputParameter::has_keep_top_k() const {
  return _internal_has_keep_top_k();
}
inline void DetectionOutputParameter::clear_keep_top_k() {
  keep_top_k_ = -1;
  _has_bits_[0] &= ~0x00000200u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DetectionOutputParameter::_internal_keep_top_k() const {
  return keep_top_k_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DetectionOutputParameter::keep_top_k() const {
  // @@protoc_insertion_point(field_get:trtcaffe.DetectionOutputParameter.keep_top_k)
  return _internal_keep_top_k();
}
inline void DetectionOutputParameter::_internal_set_keep_top_k(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000200u;
  keep_top_k_ = value;
}
inline void DetectionOutputParameter::set_keep_top_k(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_keep_top_k(value);
  // @@protoc_insertion_point(field_set:trtcaffe.DetectionOutputParameter.keep_top_k)
}

// optional float confidence_threshold = 9;
inline bool DetectionOutputParameter::_internal_has_confidence_threshold() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool DetectionOutputParameter::has_confidence_threshold() const {
  return _internal_has_confidence_threshold();
}
inline void DetectionOutputParameter::clear_confidence_threshold() {
  confidence_threshold_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline float DetectionOutputParameter::_internal_confidence_threshold() const {
  return confidence_threshold_;
}
inline float DetectionOutputParameter::confidence_threshold() const {
  // @@protoc_insertion_point(field_get:trtcaffe.DetectionOutputParameter.confidence_threshold)
  return _internal_confidence_threshold();
}
inline void DetectionOutputParameter::_internal_set_confidence_threshold(float value) {
  _has_bits_[0] |= 0x00000020u;
  confidence_threshold_ = value;
}
inline void DetectionOutputParameter::set_confidence_threshold(float value) {
  _internal_set_confidence_threshold(value);
  // @@protoc_insertion_point(field_set:trtcaffe.DetectionOutputParameter.confidence_threshold)
}

// optional bool visualize = 10 [default = false];
inline bool DetectionOutputParameter::_internal_has_visualize() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool DetectionOutputParameter::has_visualize() const {
  return _internal_has_visualize();
}
inline void DetectionOutputParameter::clear_visualize() {
  visualize_ = false;
  _has_bits_[0] &= ~0x00000080u;
}
inline bool DetectionOutputParameter::_internal_visualize() const {
  return visualize_;
}
inline bool DetectionOutputParameter::visualize() const {
  // @@protoc_insertion_point(field_get:trtcaffe.DetectionOutputParameter.visualize)
  return _internal_visualize();
}
inline void DetectionOutputParameter::_internal_set_visualize(bool value) {
  _has_bits_[0] |= 0x00000080u;
  visualize_ = value;
}
inline void DetectionOutputParameter::set_visualize(bool value) {
  _internal_set_visualize(value);
  // @@protoc_insertion_point(field_set:trtcaffe.DetectionOutputParameter.visualize)
}

// optional float visualize_threshold = 11;
inline bool DetectionOutputParameter::_internal_has_visualize_threshold() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool DetectionOutputParameter::has_visualize_threshold() const {
  return _internal_has_visualize_threshold();
}
inline void DetectionOutputParameter::clear_visualize_threshold() {
  visualize_threshold_ = 0;
  _has_bits_[0] &= ~0x00000100u;
}
inline float DetectionOutputParameter::_internal_visualize_threshold() const {
  return visualize_threshold_;
}
inline float DetectionOutputParameter::visualize_threshold() const {
  // @@protoc_insertion_point(field_get:trtcaffe.DetectionOutputParameter.visualize_threshold)
  return _internal_visualize_threshold();
}
inline void DetectionOutputParameter::_internal_set_visualize_threshold(float value) {
  _has_bits_[0] |= 0x00000100u;
  visualize_threshold_ = value;
}
inline void DetectionOutputParameter::set_visualize_threshold(float value) {
  _internal_set_visualize_threshold(value);
  // @@protoc_insertion_point(field_set:trtcaffe.DetectionOutputParameter.visualize_threshold)
}

// optional string save_file = 12;
inline bool DetectionOutputParameter::_internal_has_save_file() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool DetectionOutputParameter::has_save_file() const {
  return _internal_has_save_file();
}
inline void DetectionOutputParameter::clear_save_file() {
  save_file_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& DetectionOutputParameter::save_file() const {
  // @@protoc_insertion_point(field_get:trtcaffe.DetectionOutputParameter.save_file)
  return _internal_save_file();
}
inline void DetectionOutputParameter::set_save_file(const std::string& value) {
  _internal_set_save_file(value);
  // @@protoc_insertion_point(field_set:trtcaffe.DetectionOutputParameter.save_file)
}
inline std::string* DetectionOutputParameter::mutable_save_file() {
  // @@protoc_insertion_point(field_mutable:trtcaffe.DetectionOutputParameter.save_file)
  return _internal_mutable_save_file();
}
inline const std::string& DetectionOutputParameter::_internal_save_file() const {
  return save_file_.Get();
}
inline void DetectionOutputParameter::_internal_set_save_file(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  save_file_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void DetectionOutputParameter::set_save_file(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  save_file_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:trtcaffe.DetectionOutputParameter.save_file)
}
inline void DetectionOutputParameter::set_save_file(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  save_file_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:trtcaffe.DetectionOutputParameter.save_file)
}
inline void DetectionOutputParameter::set_save_file(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  save_file_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:trtcaffe.DetectionOutputParameter.save_file)
}
inline std::string* DetectionOutputParameter::_internal_mutable_save_file() {
  _has_bits_[0] |= 0x00000001u;
  return save_file_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* DetectionOutputParameter::release_save_file() {
  // @@protoc_insertion_point(field_release:trtcaffe.DetectionOutputParameter.save_file)
  if (!_internal_has_save_file()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return save_file_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void DetectionOutputParameter::set_allocated_save_file(std::string* save_file) {
  if (save_file != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  save_file_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), save_file,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:trtcaffe.DetectionOutputParameter.save_file)
}
inline std::string* DetectionOutputParameter::unsafe_arena_release_save_file() {
  // @@protoc_insertion_point(field_unsafe_arena_release:trtcaffe.DetectionOutputParameter.save_file)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000001u;
  return save_file_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void DetectionOutputParameter::unsafe_arena_set_allocated_save_file(
    std::string* save_file) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (save_file != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  save_file_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      save_file, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:trtcaffe.DetectionOutputParameter.save_file)
}

// -------------------------------------------------------------------

// DropoutParameter

// optional float dropout_ratio = 1 [default = 0.5];
inline bool DropoutParameter::_internal_has_dropout_ratio() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool DropoutParameter::has_dropout_ratio() const {
  return _internal_has_dropout_ratio();
}
inline void DropoutParameter::clear_dropout_ratio() {
  dropout_ratio_ = 0.5f;
  _has_bits_[0] &= ~0x00000002u;
}
inline float DropoutParameter::_internal_dropout_ratio() const {
  return dropout_ratio_;
}
inline float DropoutParameter::dropout_ratio() const {
  // @@protoc_insertion_point(field_get:trtcaffe.DropoutParameter.dropout_ratio)
  return _internal_dropout_ratio();
}
inline void DropoutParameter::_internal_set_dropout_ratio(float value) {
  _has_bits_[0] |= 0x00000002u;
  dropout_ratio_ = value;
}
inline void DropoutParameter::set_dropout_ratio(float value) {
  _internal_set_dropout_ratio(value);
  // @@protoc_insertion_point(field_set:trtcaffe.DropoutParameter.dropout_ratio)
}

// optional .trtcaffe.DropoutParameter.Engine engine = 2 [default = DEFAULT];
inline bool DropoutParameter::_internal_has_engine() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool DropoutParameter::has_engine() const {
  return _internal_has_engine();
}
inline void DropoutParameter::clear_engine() {
  engine_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::trtcaffe::DropoutParameter_Engine DropoutParameter::_internal_engine() const {
  return static_cast< ::trtcaffe::DropoutParameter_Engine >(engine_);
}
inline ::trtcaffe::DropoutParameter_Engine DropoutParameter::engine() const {
  // @@protoc_insertion_point(field_get:trtcaffe.DropoutParameter.engine)
  return _internal_engine();
}
inline void DropoutParameter::_internal_set_engine(::trtcaffe::DropoutParameter_Engine value) {
  assert(::trtcaffe::DropoutParameter_Engine_IsValid(value));
  _has_bits_[0] |= 0x00000001u;
  engine_ = value;
}
inline void DropoutParameter::set_engine(::trtcaffe::DropoutParameter_Engine value) {
  _internal_set_engine(value);
  // @@protoc_insertion_point(field_set:trtcaffe.DropoutParameter.engine)
}

// optional int64 random_seed = 3 [default = -1];
inline bool DropoutParameter::_internal_has_random_seed() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool DropoutParameter::has_random_seed() const {
  return _internal_has_random_seed();
}
inline void DropoutParameter::clear_random_seed() {
  random_seed_ = PROTOBUF_LONGLONG(-1);
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 DropoutParameter::_internal_random_seed() const {
  return random_seed_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 DropoutParameter::random_seed() const {
  // @@protoc_insertion_point(field_get:trtcaffe.DropoutParameter.random_seed)
  return _internal_random_seed();
}
inline void DropoutParameter::_internal_set_random_seed(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000004u;
  random_seed_ = value;
}
inline void DropoutParameter::set_random_seed(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_random_seed(value);
  // @@protoc_insertion_point(field_set:trtcaffe.DropoutParameter.random_seed)
}

// -------------------------------------------------------------------

// DummyDataParameter

// repeated .trtcaffe.FillerParameter data_filler = 1;
inline int DummyDataParameter::_internal_data_filler_size() const {
  return data_filler_.size();
}
inline int DummyDataParameter::data_filler_size() const {
  return _internal_data_filler_size();
}
inline void DummyDataParameter::clear_data_filler() {
  data_filler_.Clear();
}
inline ::trtcaffe::FillerParameter* DummyDataParameter::mutable_data_filler(int index) {
  // @@protoc_insertion_point(field_mutable:trtcaffe.DummyDataParameter.data_filler)
  return data_filler_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::trtcaffe::FillerParameter >*
DummyDataParameter::mutable_data_filler() {
  // @@protoc_insertion_point(field_mutable_list:trtcaffe.DummyDataParameter.data_filler)
  return &data_filler_;
}
inline const ::trtcaffe::FillerParameter& DummyDataParameter::_internal_data_filler(int index) const {
  return data_filler_.Get(index);
}
inline const ::trtcaffe::FillerParameter& DummyDataParameter::data_filler(int index) const {
  // @@protoc_insertion_point(field_get:trtcaffe.DummyDataParameter.data_filler)
  return _internal_data_filler(index);
}
inline ::trtcaffe::FillerParameter* DummyDataParameter::_internal_add_data_filler() {
  return data_filler_.Add();
}
inline ::trtcaffe::FillerParameter* DummyDataParameter::add_data_filler() {
  // @@protoc_insertion_point(field_add:trtcaffe.DummyDataParameter.data_filler)
  return _internal_add_data_filler();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::trtcaffe::FillerParameter >&
DummyDataParameter::data_filler() const {
  // @@protoc_insertion_point(field_list:trtcaffe.DummyDataParameter.data_filler)
  return data_filler_;
}

// repeated .trtcaffe.BlobShape shape = 6;
inline int DummyDataParameter::_internal_shape_size() const {
  return shape_.size();
}
inline int DummyDataParameter::shape_size() const {
  return _internal_shape_size();
}
inline void DummyDataParameter::clear_shape() {
  shape_.Clear();
}
inline ::trtcaffe::BlobShape* DummyDataParameter::mutable_shape(int index) {
  // @@protoc_insertion_point(field_mutable:trtcaffe.DummyDataParameter.shape)
  return shape_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::trtcaffe::BlobShape >*
DummyDataParameter::mutable_shape() {
  // @@protoc_insertion_point(field_mutable_list:trtcaffe.DummyDataParameter.shape)
  return &shape_;
}
inline const ::trtcaffe::BlobShape& DummyDataParameter::_internal_shape(int index) const {
  return shape_.Get(index);
}
inline const ::trtcaffe::BlobShape& DummyDataParameter::shape(int index) const {
  // @@protoc_insertion_point(field_get:trtcaffe.DummyDataParameter.shape)
  return _internal_shape(index);
}
inline ::trtcaffe::BlobShape* DummyDataParameter::_internal_add_shape() {
  return shape_.Add();
}
inline ::trtcaffe::BlobShape* DummyDataParameter::add_shape() {
  // @@protoc_insertion_point(field_add:trtcaffe.DummyDataParameter.shape)
  return _internal_add_shape();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::trtcaffe::BlobShape >&
DummyDataParameter::shape() const {
  // @@protoc_insertion_point(field_list:trtcaffe.DummyDataParameter.shape)
  return shape_;
}

// repeated uint32 num = 2;
inline int DummyDataParameter::_internal_num_size() const {
  return num_.size();
}
inline int DummyDataParameter::num_size() const {
  return _internal_num_size();
}
inline void DummyDataParameter::clear_num() {
  num_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 DummyDataParameter::_internal_num(int index) const {
  return num_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 DummyDataParameter::num(int index) const {
  // @@protoc_insertion_point(field_get:trtcaffe.DummyDataParameter.num)
  return _internal_num(index);
}
inline void DummyDataParameter::set_num(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  num_.Set(index, value);
  // @@protoc_insertion_point(field_set:trtcaffe.DummyDataParameter.num)
}
inline void DummyDataParameter::_internal_add_num(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  num_.Add(value);
}
inline void DummyDataParameter::add_num(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_add_num(value);
  // @@protoc_insertion_point(field_add:trtcaffe.DummyDataParameter.num)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
DummyDataParameter::_internal_num() const {
  return num_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
DummyDataParameter::num() const {
  // @@protoc_insertion_point(field_list:trtcaffe.DummyDataParameter.num)
  return _internal_num();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
DummyDataParameter::_internal_mutable_num() {
  return &num_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
DummyDataParameter::mutable_num() {
  // @@protoc_insertion_point(field_mutable_list:trtcaffe.DummyDataParameter.num)
  return _internal_mutable_num();
}

// repeated uint32 channels = 3;
inline int DummyDataParameter::_internal_channels_size() const {
  return channels_.size();
}
inline int DummyDataParameter::channels_size() const {
  return _internal_channels_size();
}
inline void DummyDataParameter::clear_channels() {
  channels_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 DummyDataParameter::_internal_channels(int index) const {
  return channels_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 DummyDataParameter::channels(int index) const {
  // @@protoc_insertion_point(field_get:trtcaffe.DummyDataParameter.channels)
  return _internal_channels(index);
}
inline void DummyDataParameter::set_channels(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  channels_.Set(index, value);
  // @@protoc_insertion_point(field_set:trtcaffe.DummyDataParameter.channels)
}
inline void DummyDataParameter::_internal_add_channels(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  channels_.Add(value);
}
inline void DummyDataParameter::add_channels(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_add_channels(value);
  // @@protoc_insertion_point(field_add:trtcaffe.DummyDataParameter.channels)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
DummyDataParameter::_internal_channels() const {
  return channels_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
DummyDataParameter::channels() const {
  // @@protoc_insertion_point(field_list:trtcaffe.DummyDataParameter.channels)
  return _internal_channels();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
DummyDataParameter::_internal_mutable_channels() {
  return &channels_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
DummyDataParameter::mutable_channels() {
  // @@protoc_insertion_point(field_mutable_list:trtcaffe.DummyDataParameter.channels)
  return _internal_mutable_channels();
}

// repeated uint32 height = 4;
inline int DummyDataParameter::_internal_height_size() const {
  return height_.size();
}
inline int DummyDataParameter::height_size() const {
  return _internal_height_size();
}
inline void DummyDataParameter::clear_height() {
  height_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 DummyDataParameter::_internal_height(int index) const {
  return height_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 DummyDataParameter::height(int index) const {
  // @@protoc_insertion_point(field_get:trtcaffe.DummyDataParameter.height)
  return _internal_height(index);
}
inline void DummyDataParameter::set_height(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  height_.Set(index, value);
  // @@protoc_insertion_point(field_set:trtcaffe.DummyDataParameter.height)
}
inline void DummyDataParameter::_internal_add_height(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  height_.Add(value);
}
inline void DummyDataParameter::add_height(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_add_height(value);
  // @@protoc_insertion_point(field_add:trtcaffe.DummyDataParameter.height)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
DummyDataParameter::_internal_height() const {
  return height_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
DummyDataParameter::height() const {
  // @@protoc_insertion_point(field_list:trtcaffe.DummyDataParameter.height)
  return _internal_height();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
DummyDataParameter::_internal_mutable_height() {
  return &height_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
DummyDataParameter::mutable_height() {
  // @@protoc_insertion_point(field_mutable_list:trtcaffe.DummyDataParameter.height)
  return _internal_mutable_height();
}

// repeated uint32 width = 5;
inline int DummyDataParameter::_internal_width_size() const {
  return width_.size();
}
inline int DummyDataParameter::width_size() const {
  return _internal_width_size();
}
inline void DummyDataParameter::clear_width() {
  width_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 DummyDataParameter::_internal_width(int index) const {
  return width_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 DummyDataParameter::width(int index) const {
  // @@protoc_insertion_point(field_get:trtcaffe.DummyDataParameter.width)
  return _internal_width(index);
}
inline void DummyDataParameter::set_width(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  width_.Set(index, value);
  // @@protoc_insertion_point(field_set:trtcaffe.DummyDataParameter.width)
}
inline void DummyDataParameter::_internal_add_width(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  width_.Add(value);
}
inline void DummyDataParameter::add_width(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_add_width(value);
  // @@protoc_insertion_point(field_add:trtcaffe.DummyDataParameter.width)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
DummyDataParameter::_internal_width() const {
  return width_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
DummyDataParameter::width() const {
  // @@protoc_insertion_point(field_list:trtcaffe.DummyDataParameter.width)
  return _internal_width();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
DummyDataParameter::_internal_mutable_width() {
  return &width_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
DummyDataParameter::mutable_width() {
  // @@protoc_insertion_point(field_mutable_list:trtcaffe.DummyDataParameter.width)
  return _internal_mutable_width();
}

// -------------------------------------------------------------------

// EltwiseParameter

// optional .trtcaffe.EltwiseParameter.EltwiseOp operation = 1 [default = SUM];
inline bool EltwiseParameter::_internal_has_operation() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool EltwiseParameter::has_operation() const {
  return _internal_has_operation();
}
inline void EltwiseParameter::clear_operation() {
  operation_ = 1;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::trtcaffe::EltwiseParameter_EltwiseOp EltwiseParameter::_internal_operation() const {
  return static_cast< ::trtcaffe::EltwiseParameter_EltwiseOp >(operation_);
}
inline ::trtcaffe::EltwiseParameter_EltwiseOp EltwiseParameter::operation() const {
  // @@protoc_insertion_point(field_get:trtcaffe.EltwiseParameter.operation)
  return _internal_operation();
}
inline void EltwiseParameter::_internal_set_operation(::trtcaffe::EltwiseParameter_EltwiseOp value) {
  assert(::trtcaffe::EltwiseParameter_EltwiseOp_IsValid(value));
  _has_bits_[0] |= 0x00000001u;
  operation_ = value;
}
inline void EltwiseParameter::set_operation(::trtcaffe::EltwiseParameter_EltwiseOp value) {
  _internal_set_operation(value);
  // @@protoc_insertion_point(field_set:trtcaffe.EltwiseParameter.operation)
}

// repeated float coeff = 2;
inline int EltwiseParameter::_internal_coeff_size() const {
  return coeff_.size();
}
inline int EltwiseParameter::coeff_size() const {
  return _internal_coeff_size();
}
inline void EltwiseParameter::clear_coeff() {
  coeff_.Clear();
}
inline float EltwiseParameter::_internal_coeff(int index) const {
  return coeff_.Get(index);
}
inline float EltwiseParameter::coeff(int index) const {
  // @@protoc_insertion_point(field_get:trtcaffe.EltwiseParameter.coeff)
  return _internal_coeff(index);
}
inline void EltwiseParameter::set_coeff(int index, float value) {
  coeff_.Set(index, value);
  // @@protoc_insertion_point(field_set:trtcaffe.EltwiseParameter.coeff)
}
inline void EltwiseParameter::_internal_add_coeff(float value) {
  coeff_.Add(value);
}
inline void EltwiseParameter::add_coeff(float value) {
  _internal_add_coeff(value);
  // @@protoc_insertion_point(field_add:trtcaffe.EltwiseParameter.coeff)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
EltwiseParameter::_internal_coeff() const {
  return coeff_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
EltwiseParameter::coeff() const {
  // @@protoc_insertion_point(field_list:trtcaffe.EltwiseParameter.coeff)
  return _internal_coeff();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
EltwiseParameter::_internal_mutable_coeff() {
  return &coeff_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
EltwiseParameter::mutable_coeff() {
  // @@protoc_insertion_point(field_mutable_list:trtcaffe.EltwiseParameter.coeff)
  return _internal_mutable_coeff();
}

// optional bool stable_prod_grad = 3 [default = true];
inline bool EltwiseParameter::_internal_has_stable_prod_grad() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool EltwiseParameter::has_stable_prod_grad() const {
  return _internal_has_stable_prod_grad();
}
inline void EltwiseParameter::clear_stable_prod_grad() {
  stable_prod_grad_ = true;
  _has_bits_[0] &= ~0x00000002u;
}
inline bool EltwiseParameter::_internal_stable_prod_grad() const {
  return stable_prod_grad_;
}
inline bool EltwiseParameter::stable_prod_grad() const {
  // @@protoc_insertion_point(field_get:trtcaffe.EltwiseParameter.stable_prod_grad)
  return _internal_stable_prod_grad();
}
inline void EltwiseParameter::_internal_set_stable_prod_grad(bool value) {
  _has_bits_[0] |= 0x00000002u;
  stable_prod_grad_ = value;
}
inline void EltwiseParameter::set_stable_prod_grad(bool value) {
  _internal_set_stable_prod_grad(value);
  // @@protoc_insertion_point(field_set:trtcaffe.EltwiseParameter.stable_prod_grad)
}

// -------------------------------------------------------------------

// ELUParameter

// optional float alpha = 1 [default = 1];
inline bool ELUParameter::_internal_has_alpha() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ELUParameter::has_alpha() const {
  return _internal_has_alpha();
}
inline void ELUParameter::clear_alpha() {
  alpha_ = 1;
  _has_bits_[0] &= ~0x00000001u;
}
inline float ELUParameter::_internal_alpha() const {
  return alpha_;
}
inline float ELUParameter::alpha() const {
  // @@protoc_insertion_point(field_get:trtcaffe.ELUParameter.alpha)
  return _internal_alpha();
}
inline void ELUParameter::_internal_set_alpha(float value) {
  _has_bits_[0] |= 0x00000001u;
  alpha_ = value;
}
inline void ELUParameter::set_alpha(float value) {
  _internal_set_alpha(value);
  // @@protoc_insertion_point(field_set:trtcaffe.ELUParameter.alpha)
}

// -------------------------------------------------------------------

// EmbedParameter

// optional uint32 num_output = 1;
inline bool EmbedParameter::_internal_has_num_output() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool EmbedParameter::has_num_output() const {
  return _internal_has_num_output();
}
inline void EmbedParameter::clear_num_output() {
  num_output_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 EmbedParameter::_internal_num_output() const {
  return num_output_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 EmbedParameter::num_output() const {
  // @@protoc_insertion_point(field_get:trtcaffe.EmbedParameter.num_output)
  return _internal_num_output();
}
inline void EmbedParameter::_internal_set_num_output(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  num_output_ = value;
}
inline void EmbedParameter::set_num_output(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_num_output(value);
  // @@protoc_insertion_point(field_set:trtcaffe.EmbedParameter.num_output)
}

// optional uint32 input_dim = 2;
inline bool EmbedParameter::_internal_has_input_dim() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool EmbedParameter::has_input_dim() const {
  return _internal_has_input_dim();
}
inline void EmbedParameter::clear_input_dim() {
  input_dim_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 EmbedParameter::_internal_input_dim() const {
  return input_dim_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 EmbedParameter::input_dim() const {
  // @@protoc_insertion_point(field_get:trtcaffe.EmbedParameter.input_dim)
  return _internal_input_dim();
}
inline void EmbedParameter::_internal_set_input_dim(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000008u;
  input_dim_ = value;
}
inline void EmbedParameter::set_input_dim(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_input_dim(value);
  // @@protoc_insertion_point(field_set:trtcaffe.EmbedParameter.input_dim)
}

// optional bool bias_term = 3 [default = true];
inline bool EmbedParameter::_internal_has_bias_term() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool EmbedParameter::has_bias_term() const {
  return _internal_has_bias_term();
}
inline void EmbedParameter::clear_bias_term() {
  bias_term_ = true;
  _has_bits_[0] &= ~0x00000010u;
}
inline bool EmbedParameter::_internal_bias_term() const {
  return bias_term_;
}
inline bool EmbedParameter::bias_term() const {
  // @@protoc_insertion_point(field_get:trtcaffe.EmbedParameter.bias_term)
  return _internal_bias_term();
}
inline void EmbedParameter::_internal_set_bias_term(bool value) {
  _has_bits_[0] |= 0x00000010u;
  bias_term_ = value;
}
inline void EmbedParameter::set_bias_term(bool value) {
  _internal_set_bias_term(value);
  // @@protoc_insertion_point(field_set:trtcaffe.EmbedParameter.bias_term)
}

// optional .trtcaffe.FillerParameter weight_filler = 4;
inline bool EmbedParameter::_internal_has_weight_filler() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || weight_filler_ != nullptr);
  return value;
}
inline bool EmbedParameter::has_weight_filler() const {
  return _internal_has_weight_filler();
}
inline void EmbedParameter::clear_weight_filler() {
  if (weight_filler_ != nullptr) weight_filler_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::trtcaffe::FillerParameter& EmbedParameter::_internal_weight_filler() const {
  const ::trtcaffe::FillerParameter* p = weight_filler_;
  return p != nullptr ? *p : *reinterpret_cast<const ::trtcaffe::FillerParameter*>(
      &::trtcaffe::_FillerParameter_default_instance_);
}
inline const ::trtcaffe::FillerParameter& EmbedParameter::weight_filler() const {
  // @@protoc_insertion_point(field_get:trtcaffe.EmbedParameter.weight_filler)
  return _internal_weight_filler();
}
inline void EmbedParameter::unsafe_arena_set_allocated_weight_filler(
    ::trtcaffe::FillerParameter* weight_filler) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(weight_filler_);
  }
  weight_filler_ = weight_filler;
  if (weight_filler) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:trtcaffe.EmbedParameter.weight_filler)
}
inline ::trtcaffe::FillerParameter* EmbedParameter::release_weight_filler() {
  auto temp = unsafe_arena_release_weight_filler();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::trtcaffe::FillerParameter* EmbedParameter::unsafe_arena_release_weight_filler() {
  // @@protoc_insertion_point(field_release:trtcaffe.EmbedParameter.weight_filler)
  _has_bits_[0] &= ~0x00000001u;
  ::trtcaffe::FillerParameter* temp = weight_filler_;
  weight_filler_ = nullptr;
  return temp;
}
inline ::trtcaffe::FillerParameter* EmbedParameter::_internal_mutable_weight_filler() {
  _has_bits_[0] |= 0x00000001u;
  if (weight_filler_ == nullptr) {
    auto* p = CreateMaybeMessage<::trtcaffe::FillerParameter>(GetArena());
    weight_filler_ = p;
  }
  return weight_filler_;
}
inline ::trtcaffe::FillerParameter* EmbedParameter::mutable_weight_filler() {
  // @@protoc_insertion_point(field_mutable:trtcaffe.EmbedParameter.weight_filler)
  return _internal_mutable_weight_filler();
}
inline void EmbedParameter::set_allocated_weight_filler(::trtcaffe::FillerParameter* weight_filler) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete weight_filler_;
  }
  if (weight_filler) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(weight_filler);
    if (message_arena != submessage_arena) {
      weight_filler = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, weight_filler, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  weight_filler_ = weight_filler;
  // @@protoc_insertion_point(field_set_allocated:trtcaffe.EmbedParameter.weight_filler)
}

// optional .trtcaffe.FillerParameter bias_filler = 5;
inline bool EmbedParameter::_internal_has_bias_filler() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || bias_filler_ != nullptr);
  return value;
}
inline bool EmbedParameter::has_bias_filler() const {
  return _internal_has_bias_filler();
}
inline void EmbedParameter::clear_bias_filler() {
  if (bias_filler_ != nullptr) bias_filler_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::trtcaffe::FillerParameter& EmbedParameter::_internal_bias_filler() const {
  const ::trtcaffe::FillerParameter* p = bias_filler_;
  return p != nullptr ? *p : *reinterpret_cast<const ::trtcaffe::FillerParameter*>(
      &::trtcaffe::_FillerParameter_default_instance_);
}
inline const ::trtcaffe::FillerParameter& EmbedParameter::bias_filler() const {
  // @@protoc_insertion_point(field_get:trtcaffe.EmbedParameter.bias_filler)
  return _internal_bias_filler();
}
inline void EmbedParameter::unsafe_arena_set_allocated_bias_filler(
    ::trtcaffe::FillerParameter* bias_filler) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(bias_filler_);
  }
  bias_filler_ = bias_filler;
  if (bias_filler) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:trtcaffe.EmbedParameter.bias_filler)
}
inline ::trtcaffe::FillerParameter* EmbedParameter::release_bias_filler() {
  auto temp = unsafe_arena_release_bias_filler();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::trtcaffe::FillerParameter* EmbedParameter::unsafe_arena_release_bias_filler() {
  // @@protoc_insertion_point(field_release:trtcaffe.EmbedParameter.bias_filler)
  _has_bits_[0] &= ~0x00000002u;
  ::trtcaffe::FillerParameter* temp = bias_filler_;
  bias_filler_ = nullptr;
  return temp;
}
inline ::trtcaffe::FillerParameter* EmbedParameter::_internal_mutable_bias_filler() {
  _has_bits_[0] |= 0x00000002u;
  if (bias_filler_ == nullptr) {
    auto* p = CreateMaybeMessage<::trtcaffe::FillerParameter>(GetArena());
    bias_filler_ = p;
  }
  return bias_filler_;
}
inline ::trtcaffe::FillerParameter* EmbedParameter::mutable_bias_filler() {
  // @@protoc_insertion_point(field_mutable:trtcaffe.EmbedParameter.bias_filler)
  return _internal_mutable_bias_filler();
}
inline void EmbedParameter::set_allocated_bias_filler(::trtcaffe::FillerParameter* bias_filler) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete bias_filler_;
  }
  if (bias_filler) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(bias_filler);
    if (message_arena != submessage_arena) {
      bias_filler = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, bias_filler, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  bias_filler_ = bias_filler;
  // @@protoc_insertion_point(field_set_allocated:trtcaffe.EmbedParameter.bias_filler)
}

// -------------------------------------------------------------------

// ExpParameter

// optional float base = 1 [default = -1];
inline bool ExpParameter::_internal_has_base() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ExpParameter::has_base() const {
  return _internal_has_base();
}
inline void ExpParameter::clear_base() {
  base_ = -1;
  _has_bits_[0] &= ~0x00000002u;
}
inline float ExpParameter::_internal_base() const {
  return base_;
}
inline float ExpParameter::base() const {
  // @@protoc_insertion_point(field_get:trtcaffe.ExpParameter.base)
  return _internal_base();
}
inline void ExpParameter::_internal_set_base(float value) {
  _has_bits_[0] |= 0x00000002u;
  base_ = value;
}
inline void ExpParameter::set_base(float value) {
  _internal_set_base(value);
  // @@protoc_insertion_point(field_set:trtcaffe.ExpParameter.base)
}

// optional float scale = 2 [default = 1];
inline bool ExpParameter::_internal_has_scale() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool ExpParameter::has_scale() const {
  return _internal_has_scale();
}
inline void ExpParameter::clear_scale() {
  scale_ = 1;
  _has_bits_[0] &= ~0x00000004u;
}
inline float ExpParameter::_internal_scale() const {
  return scale_;
}
inline float ExpParameter::scale() const {
  // @@protoc_insertion_point(field_get:trtcaffe.ExpParameter.scale)
  return _internal_scale();
}
inline void ExpParameter::_internal_set_scale(float value) {
  _has_bits_[0] |= 0x00000004u;
  scale_ = value;
}
inline void ExpParameter::set_scale(float value) {
  _internal_set_scale(value);
  // @@protoc_insertion_point(field_set:trtcaffe.ExpParameter.scale)
}

// optional float shift = 3 [default = 0];
inline bool ExpParameter::_internal_has_shift() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ExpParameter::has_shift() const {
  return _internal_has_shift();
}
inline void ExpParameter::clear_shift() {
  shift_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline float ExpParameter::_internal_shift() const {
  return shift_;
}
inline float ExpParameter::shift() const {
  // @@protoc_insertion_point(field_get:trtcaffe.ExpParameter.shift)
  return _internal_shift();
}
inline void ExpParameter::_internal_set_shift(float value) {
  _has_bits_[0] |= 0x00000001u;
  shift_ = value;
}
inline void ExpParameter::set_shift(float value) {
  _internal_set_shift(value);
  // @@protoc_insertion_point(field_set:trtcaffe.ExpParameter.shift)
}

// -------------------------------------------------------------------

// FlattenParameter

// optional int32 axis = 1 [default = 1];
inline bool FlattenParameter::_internal_has_axis() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool FlattenParameter::has_axis() const {
  return _internal_has_axis();
}
inline void FlattenParameter::clear_axis() {
  axis_ = 1;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 FlattenParameter::_internal_axis() const {
  return axis_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 FlattenParameter::axis() const {
  // @@protoc_insertion_point(field_get:trtcaffe.FlattenParameter.axis)
  return _internal_axis();
}
inline void FlattenParameter::_internal_set_axis(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000001u;
  axis_ = value;
}
inline void FlattenParameter::set_axis(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_axis(value);
  // @@protoc_insertion_point(field_set:trtcaffe.FlattenParameter.axis)
}

// optional int32 end_axis = 2 [default = -1];
inline bool FlattenParameter::_internal_has_end_axis() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool FlattenParameter::has_end_axis() const {
  return _internal_has_end_axis();
}
inline void FlattenParameter::clear_end_axis() {
  end_axis_ = -1;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 FlattenParameter::_internal_end_axis() const {
  return end_axis_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 FlattenParameter::end_axis() const {
  // @@protoc_insertion_point(field_get:trtcaffe.FlattenParameter.end_axis)
  return _internal_end_axis();
}
inline void FlattenParameter::_internal_set_end_axis(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  end_axis_ = value;
}
inline void FlattenParameter::set_end_axis(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_end_axis(value);
  // @@protoc_insertion_point(field_set:trtcaffe.FlattenParameter.end_axis)
}

// -------------------------------------------------------------------

// HDF5DataParameter

// optional string source = 1;
inline bool HDF5DataParameter::_internal_has_source() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool HDF5DataParameter::has_source() const {
  return _internal_has_source();
}
inline void HDF5DataParameter::clear_source() {
  source_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& HDF5DataParameter::source() const {
  // @@protoc_insertion_point(field_get:trtcaffe.HDF5DataParameter.source)
  return _internal_source();
}
inline void HDF5DataParameter::set_source(const std::string& value) {
  _internal_set_source(value);
  // @@protoc_insertion_point(field_set:trtcaffe.HDF5DataParameter.source)
}
inline std::string* HDF5DataParameter::mutable_source() {
  // @@protoc_insertion_point(field_mutable:trtcaffe.HDF5DataParameter.source)
  return _internal_mutable_source();
}
inline const std::string& HDF5DataParameter::_internal_source() const {
  return source_.Get();
}
inline void HDF5DataParameter::_internal_set_source(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  source_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void HDF5DataParameter::set_source(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  source_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:trtcaffe.HDF5DataParameter.source)
}
inline void HDF5DataParameter::set_source(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  source_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:trtcaffe.HDF5DataParameter.source)
}
inline void HDF5DataParameter::set_source(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  source_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:trtcaffe.HDF5DataParameter.source)
}
inline std::string* HDF5DataParameter::_internal_mutable_source() {
  _has_bits_[0] |= 0x00000001u;
  return source_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* HDF5DataParameter::release_source() {
  // @@protoc_insertion_point(field_release:trtcaffe.HDF5DataParameter.source)
  if (!_internal_has_source()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return source_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void HDF5DataParameter::set_allocated_source(std::string* source) {
  if (source != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  source_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), source,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:trtcaffe.HDF5DataParameter.source)
}
inline std::string* HDF5DataParameter::unsafe_arena_release_source() {
  // @@protoc_insertion_point(field_unsafe_arena_release:trtcaffe.HDF5DataParameter.source)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000001u;
  return source_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void HDF5DataParameter::unsafe_arena_set_allocated_source(
    std::string* source) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (source != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  source_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      source, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:trtcaffe.HDF5DataParameter.source)
}

// optional uint32 batch_size = 2;
inline bool HDF5DataParameter::_internal_has_batch_size() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool HDF5DataParameter::has_batch_size() const {
  return _internal_has_batch_size();
}
inline void HDF5DataParameter::clear_batch_size() {
  batch_size_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 HDF5DataParameter::_internal_batch_size() const {
  return batch_size_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 HDF5DataParameter::batch_size() const {
  // @@protoc_insertion_point(field_get:trtcaffe.HDF5DataParameter.batch_size)
  return _internal_batch_size();
}
inline void HDF5DataParameter::_internal_set_batch_size(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  batch_size_ = value;
}
inline void HDF5DataParameter::set_batch_size(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_batch_size(value);
  // @@protoc_insertion_point(field_set:trtcaffe.HDF5DataParameter.batch_size)
}

// optional bool shuffle = 3 [default = false];
inline bool HDF5DataParameter::_internal_has_shuffle() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool HDF5DataParameter::has_shuffle() const {
  return _internal_has_shuffle();
}
inline void HDF5DataParameter::clear_shuffle() {
  shuffle_ = false;
  _has_bits_[0] &= ~0x00000004u;
}
inline bool HDF5DataParameter::_internal_shuffle() const {
  return shuffle_;
}
inline bool HDF5DataParameter::shuffle() const {
  // @@protoc_insertion_point(field_get:trtcaffe.HDF5DataParameter.shuffle)
  return _internal_shuffle();
}
inline void HDF5DataParameter::_internal_set_shuffle(bool value) {
  _has_bits_[0] |= 0x00000004u;
  shuffle_ = value;
}
inline void HDF5DataParameter::set_shuffle(bool value) {
  _internal_set_shuffle(value);
  // @@protoc_insertion_point(field_set:trtcaffe.HDF5DataParameter.shuffle)
}

// -------------------------------------------------------------------

// HDF5OutputParameter

// optional string file_name = 1;
inline bool HDF5OutputParameter::_internal_has_file_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool HDF5OutputParameter::has_file_name() const {
  return _internal_has_file_name();
}
inline void HDF5OutputParameter::clear_file_name() {
  file_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& HDF5OutputParameter::file_name() const {
  // @@protoc_insertion_point(field_get:trtcaffe.HDF5OutputParameter.file_name)
  return _internal_file_name();
}
inline void HDF5OutputParameter::set_file_name(const std::string& value) {
  _internal_set_file_name(value);
  // @@protoc_insertion_point(field_set:trtcaffe.HDF5OutputParameter.file_name)
}
inline std::string* HDF5OutputParameter::mutable_file_name() {
  // @@protoc_insertion_point(field_mutable:trtcaffe.HDF5OutputParameter.file_name)
  return _internal_mutable_file_name();
}
inline const std::string& HDF5OutputParameter::_internal_file_name() const {
  return file_name_.Get();
}
inline void HDF5OutputParameter::_internal_set_file_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  file_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void HDF5OutputParameter::set_file_name(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  file_name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:trtcaffe.HDF5OutputParameter.file_name)
}
inline void HDF5OutputParameter::set_file_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  file_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:trtcaffe.HDF5OutputParameter.file_name)
}
inline void HDF5OutputParameter::set_file_name(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  file_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:trtcaffe.HDF5OutputParameter.file_name)
}
inline std::string* HDF5OutputParameter::_internal_mutable_file_name() {
  _has_bits_[0] |= 0x00000001u;
  return file_name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* HDF5OutputParameter::release_file_name() {
  // @@protoc_insertion_point(field_release:trtcaffe.HDF5OutputParameter.file_name)
  if (!_internal_has_file_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return file_name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void HDF5OutputParameter::set_allocated_file_name(std::string* file_name) {
  if (file_name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  file_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), file_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:trtcaffe.HDF5OutputParameter.file_name)
}
inline std::string* HDF5OutputParameter::unsafe_arena_release_file_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:trtcaffe.HDF5OutputParameter.file_name)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000001u;
  return file_name_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void HDF5OutputParameter::unsafe_arena_set_allocated_file_name(
    std::string* file_name) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (file_name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  file_name_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      file_name, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:trtcaffe.HDF5OutputParameter.file_name)
}

// -------------------------------------------------------------------

// HingeLossParameter

// optional .trtcaffe.HingeLossParameter.Norm norm = 1 [default = L1];
inline bool HingeLossParameter::_internal_has_norm() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool HingeLossParameter::has_norm() const {
  return _internal_has_norm();
}
inline void HingeLossParameter::clear_norm() {
  norm_ = 1;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::trtcaffe::HingeLossParameter_Norm HingeLossParameter::_internal_norm() const {
  return static_cast< ::trtcaffe::HingeLossParameter_Norm >(norm_);
}
inline ::trtcaffe::HingeLossParameter_Norm HingeLossParameter::norm() const {
  // @@protoc_insertion_point(field_get:trtcaffe.HingeLossParameter.norm)
  return _internal_norm();
}
inline void HingeLossParameter::_internal_set_norm(::trtcaffe::HingeLossParameter_Norm value) {
  assert(::trtcaffe::HingeLossParameter_Norm_IsValid(value));
  _has_bits_[0] |= 0x00000001u;
  norm_ = value;
}
inline void HingeLossParameter::set_norm(::trtcaffe::HingeLossParameter_Norm value) {
  _internal_set_norm(value);
  // @@protoc_insertion_point(field_set:trtcaffe.HingeLossParameter.norm)
}

// -------------------------------------------------------------------

// ImageDataParameter

// optional string source = 1;
inline bool ImageDataParameter::_internal_has_source() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ImageDataParameter::has_source() const {
  return _internal_has_source();
}
inline void ImageDataParameter::clear_source() {
  source_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ImageDataParameter::source() const {
  // @@protoc_insertion_point(field_get:trtcaffe.ImageDataParameter.source)
  return _internal_source();
}
inline void ImageDataParameter::set_source(const std::string& value) {
  _internal_set_source(value);
  // @@protoc_insertion_point(field_set:trtcaffe.ImageDataParameter.source)
}
inline std::string* ImageDataParameter::mutable_source() {
  // @@protoc_insertion_point(field_mutable:trtcaffe.ImageDataParameter.source)
  return _internal_mutable_source();
}
inline const std::string& ImageDataParameter::_internal_source() const {
  return source_.Get();
}
inline void ImageDataParameter::_internal_set_source(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  source_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ImageDataParameter::set_source(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  source_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:trtcaffe.ImageDataParameter.source)
}
inline void ImageDataParameter::set_source(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  source_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:trtcaffe.ImageDataParameter.source)
}
inline void ImageDataParameter::set_source(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  source_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:trtcaffe.ImageDataParameter.source)
}
inline std::string* ImageDataParameter::_internal_mutable_source() {
  _has_bits_[0] |= 0x00000001u;
  return source_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ImageDataParameter::release_source() {
  // @@protoc_insertion_point(field_release:trtcaffe.ImageDataParameter.source)
  if (!_internal_has_source()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return source_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ImageDataParameter::set_allocated_source(std::string* source) {
  if (source != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  source_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), source,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:trtcaffe.ImageDataParameter.source)
}
inline std::string* ImageDataParameter::unsafe_arena_release_source() {
  // @@protoc_insertion_point(field_unsafe_arena_release:trtcaffe.ImageDataParameter.source)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000001u;
  return source_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void ImageDataParameter::unsafe_arena_set_allocated_source(
    std::string* source) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (source != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  source_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      source, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:trtcaffe.ImageDataParameter.source)
}

// optional uint32 batch_size = 4 [default = 1];
inline bool ImageDataParameter::_internal_has_batch_size() const {
  bool value = (_has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool ImageDataParameter::has_batch_size() const {
  return _internal_has_batch_size();
}
inline void ImageDataParameter::clear_batch_size() {
  batch_size_ = 1u;
  _has_bits_[0] &= ~0x00000800u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ImageDataParameter::_internal_batch_size() const {
  return batch_size_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ImageDataParameter::batch_size() const {
  // @@protoc_insertion_point(field_get:trtcaffe.ImageDataParameter.batch_size)
  return _internal_batch_size();
}
inline void ImageDataParameter::_internal_set_batch_size(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000800u;
  batch_size_ = value;
}
inline void ImageDataParameter::set_batch_size(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_batch_size(value);
  // @@protoc_insertion_point(field_set:trtcaffe.ImageDataParameter.batch_size)
}

// optional uint32 rand_skip = 7 [default = 0];
inline bool ImageDataParameter::_internal_has_rand_skip() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool ImageDataParameter::has_rand_skip() const {
  return _internal_has_rand_skip();
}
inline void ImageDataParameter::clear_rand_skip() {
  rand_skip_ = 0u;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ImageDataParameter::_internal_rand_skip() const {
  return rand_skip_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ImageDataParameter::rand_skip() const {
  // @@protoc_insertion_point(field_get:trtcaffe.ImageDataParameter.rand_skip)
  return _internal_rand_skip();
}
inline void ImageDataParameter::_internal_set_rand_skip(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000010u;
  rand_skip_ = value;
}
inline void ImageDataParameter::set_rand_skip(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_rand_skip(value);
  // @@protoc_insertion_point(field_set:trtcaffe.ImageDataParameter.rand_skip)
}

// optional bool shuffle = 8 [default = false];
inline bool ImageDataParameter::_internal_has_shuffle() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool ImageDataParameter::has_shuffle() const {
  return _internal_has_shuffle();
}
inline void ImageDataParameter::clear_shuffle() {
  shuffle_ = false;
  _has_bits_[0] &= ~0x00000020u;
}
inline bool ImageDataParameter::_internal_shuffle() const {
  return shuffle_;
}
inline bool ImageDataParameter::shuffle() const {
  // @@protoc_insertion_point(field_get:trtcaffe.ImageDataParameter.shuffle)
  return _internal_shuffle();
}
inline void ImageDataParameter::_internal_set_shuffle(bool value) {
  _has_bits_[0] |= 0x00000020u;
  shuffle_ = value;
}
inline void ImageDataParameter::set_shuffle(bool value) {
  _internal_set_shuffle(value);
  // @@protoc_insertion_point(field_set:trtcaffe.ImageDataParameter.shuffle)
}

// optional uint32 new_height = 9 [default = 0];
inline bool ImageDataParameter::_internal_has_new_height() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool ImageDataParameter::has_new_height() const {
  return _internal_has_new_height();
}
inline void ImageDataParameter::clear_new_height() {
  new_height_ = 0u;
  _has_bits_[0] &= ~0x00000080u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ImageDataParameter::_internal_new_height() const {
  return new_height_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ImageDataParameter::new_height() const {
  // @@protoc_insertion_point(field_get:trtcaffe.ImageDataParameter.new_height)
  return _internal_new_height();
}
inline void ImageDataParameter::_internal_set_new_height(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000080u;
  new_height_ = value;
}
inline void ImageDataParameter::set_new_height(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_new_height(value);
  // @@protoc_insertion_point(field_set:trtcaffe.ImageDataParameter.new_height)
}

// optional uint32 new_width = 10 [default = 0];
inline bool ImageDataParameter::_internal_has_new_width() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool ImageDataParameter::has_new_width() const {
  return _internal_has_new_width();
}
inline void ImageDataParameter::clear_new_width() {
  new_width_ = 0u;
  _has_bits_[0] &= ~0x00000100u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ImageDataParameter::_internal_new_width() const {
  return new_width_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ImageDataParameter::new_width() const {
  // @@protoc_insertion_point(field_get:trtcaffe.ImageDataParameter.new_width)
  return _internal_new_width();
}
inline void ImageDataParameter::_internal_set_new_width(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000100u;
  new_width_ = value;
}
inline void ImageDataParameter::set_new_width(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_new_width(value);
  // @@protoc_insertion_point(field_set:trtcaffe.ImageDataParameter.new_width)
}

// optional bool is_color = 11 [default = true];
inline bool ImageDataParameter::_internal_has_is_color() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool ImageDataParameter::has_is_color() const {
  return _internal_has_is_color();
}
inline void ImageDataParameter::clear_is_color() {
  is_color_ = true;
  _has_bits_[0] &= ~0x00000200u;
}
inline bool ImageDataParameter::_internal_is_color() const {
  return is_color_;
}
inline bool ImageDataParameter::is_color() const {
  // @@protoc_insertion_point(field_get:trtcaffe.ImageDataParameter.is_color)
  return _internal_is_color();
}
inline void ImageDataParameter::_internal_set_is_color(bool value) {
  _has_bits_[0] |= 0x00000200u;
  is_color_ = value;
}
inline void ImageDataParameter::set_is_color(bool value) {
  _internal_set_is_color(value);
  // @@protoc_insertion_point(field_set:trtcaffe.ImageDataParameter.is_color)
}

// optional float scale = 2 [default = 1];
inline bool ImageDataParameter::_internal_has_scale() const {
  bool value = (_has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool ImageDataParameter::has_scale() const {
  return _internal_has_scale();
}
inline void ImageDataParameter::clear_scale() {
  scale_ = 1;
  _has_bits_[0] &= ~0x00000400u;
}
inline float ImageDataParameter::_internal_scale() const {
  return scale_;
}
inline float ImageDataParameter::scale() const {
  // @@protoc_insertion_point(field_get:trtcaffe.ImageDataParameter.scale)
  return _internal_scale();
}
inline void ImageDataParameter::_internal_set_scale(float value) {
  _has_bits_[0] |= 0x00000400u;
  scale_ = value;
}
inline void ImageDataParameter::set_scale(float value) {
  _internal_set_scale(value);
  // @@protoc_insertion_point(field_set:trtcaffe.ImageDataParameter.scale)
}

// optional string mean_file = 3;
inline bool ImageDataParameter::_internal_has_mean_file() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ImageDataParameter::has_mean_file() const {
  return _internal_has_mean_file();
}
inline void ImageDataParameter::clear_mean_file() {
  mean_file_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& ImageDataParameter::mean_file() const {
  // @@protoc_insertion_point(field_get:trtcaffe.ImageDataParameter.mean_file)
  return _internal_mean_file();
}
inline void ImageDataParameter::set_mean_file(const std::string& value) {
  _internal_set_mean_file(value);
  // @@protoc_insertion_point(field_set:trtcaffe.ImageDataParameter.mean_file)
}
inline std::string* ImageDataParameter::mutable_mean_file() {
  // @@protoc_insertion_point(field_mutable:trtcaffe.ImageDataParameter.mean_file)
  return _internal_mutable_mean_file();
}
inline const std::string& ImageDataParameter::_internal_mean_file() const {
  return mean_file_.Get();
}
inline void ImageDataParameter::_internal_set_mean_file(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  mean_file_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ImageDataParameter::set_mean_file(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  mean_file_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:trtcaffe.ImageDataParameter.mean_file)
}
inline void ImageDataParameter::set_mean_file(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  mean_file_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:trtcaffe.ImageDataParameter.mean_file)
}
inline void ImageDataParameter::set_mean_file(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  mean_file_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:trtcaffe.ImageDataParameter.mean_file)
}
inline std::string* ImageDataParameter::_internal_mutable_mean_file() {
  _has_bits_[0] |= 0x00000002u;
  return mean_file_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ImageDataParameter::release_mean_file() {
  // @@protoc_insertion_point(field_release:trtcaffe.ImageDataParameter.mean_file)
  if (!_internal_has_mean_file()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return mean_file_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ImageDataParameter::set_allocated_mean_file(std::string* mean_file) {
  if (mean_file != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  mean_file_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), mean_file,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:trtcaffe.ImageDataParameter.mean_file)
}
inline std::string* ImageDataParameter::unsafe_arena_release_mean_file() {
  // @@protoc_insertion_point(field_unsafe_arena_release:trtcaffe.ImageDataParameter.mean_file)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000002u;
  return mean_file_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void ImageDataParameter::unsafe_arena_set_allocated_mean_file(
    std::string* mean_file) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (mean_file != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  mean_file_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      mean_file, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:trtcaffe.ImageDataParameter.mean_file)
}

// optional uint32 crop_size = 5 [default = 0];
inline bool ImageDataParameter::_internal_has_crop_size() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool ImageDataParameter::has_crop_size() const {
  return _internal_has_crop_size();
}
inline void ImageDataParameter::clear_crop_size() {
  crop_size_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ImageDataParameter::_internal_crop_size() const {
  return crop_size_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ImageDataParameter::crop_size() const {
  // @@protoc_insertion_point(field_get:trtcaffe.ImageDataParameter.crop_size)
  return _internal_crop_size();
}
inline void ImageDataParameter::_internal_set_crop_size(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000008u;
  crop_size_ = value;
}
inline void ImageDataParameter::set_crop_size(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_crop_size(value);
  // @@protoc_insertion_point(field_set:trtcaffe.ImageDataParameter.crop_size)
}

// optional bool mirror = 6 [default = false];
inline bool ImageDataParameter::_internal_has_mirror() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool ImageDataParameter::has_mirror() const {
  return _internal_has_mirror();
}
inline void ImageDataParameter::clear_mirror() {
  mirror_ = false;
  _has_bits_[0] &= ~0x00000040u;
}
inline bool ImageDataParameter::_internal_mirror() const {
  return mirror_;
}
inline bool ImageDataParameter::mirror() const {
  // @@protoc_insertion_point(field_get:trtcaffe.ImageDataParameter.mirror)
  return _internal_mirror();
}
inline void ImageDataParameter::_internal_set_mirror(bool value) {
  _has_bits_[0] |= 0x00000040u;
  mirror_ = value;
}
inline void ImageDataParameter::set_mirror(bool value) {
  _internal_set_mirror(value);
  // @@protoc_insertion_point(field_set:trtcaffe.ImageDataParameter.mirror)
}

// optional string root_folder = 12 [default = ""];
inline bool ImageDataParameter::_internal_has_root_folder() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool ImageDataParameter::has_root_folder() const {
  return _internal_has_root_folder();
}
inline void ImageDataParameter::clear_root_folder() {
  root_folder_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& ImageDataParameter::root_folder() const {
  // @@protoc_insertion_point(field_get:trtcaffe.ImageDataParameter.root_folder)
  return _internal_root_folder();
}
inline void ImageDataParameter::set_root_folder(const std::string& value) {
  _internal_set_root_folder(value);
  // @@protoc_insertion_point(field_set:trtcaffe.ImageDataParameter.root_folder)
}
inline std::string* ImageDataParameter::mutable_root_folder() {
  // @@protoc_insertion_point(field_mutable:trtcaffe.ImageDataParameter.root_folder)
  return _internal_mutable_root_folder();
}
inline const std::string& ImageDataParameter::_internal_root_folder() const {
  return root_folder_.Get();
}
inline void ImageDataParameter::_internal_set_root_folder(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  root_folder_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ImageDataParameter::set_root_folder(std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  root_folder_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:trtcaffe.ImageDataParameter.root_folder)
}
inline void ImageDataParameter::set_root_folder(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  root_folder_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:trtcaffe.ImageDataParameter.root_folder)
}
inline void ImageDataParameter::set_root_folder(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000004u;
  root_folder_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:trtcaffe.ImageDataParameter.root_folder)
}
inline std::string* ImageDataParameter::_internal_mutable_root_folder() {
  _has_bits_[0] |= 0x00000004u;
  return root_folder_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ImageDataParameter::release_root_folder() {
  // @@protoc_insertion_point(field_release:trtcaffe.ImageDataParameter.root_folder)
  if (!_internal_has_root_folder()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return root_folder_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ImageDataParameter::set_allocated_root_folder(std::string* root_folder) {
  if (root_folder != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  root_folder_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), root_folder,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:trtcaffe.ImageDataParameter.root_folder)
}
inline std::string* ImageDataParameter::unsafe_arena_release_root_folder() {
  // @@protoc_insertion_point(field_unsafe_arena_release:trtcaffe.ImageDataParameter.root_folder)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000004u;
  return root_folder_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void ImageDataParameter::unsafe_arena_set_allocated_root_folder(
    std::string* root_folder) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (root_folder != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  root_folder_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      root_folder, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:trtcaffe.ImageDataParameter.root_folder)
}

// -------------------------------------------------------------------

// InfogainLossParameter

// optional string source = 1;
inline bool InfogainLossParameter::_internal_has_source() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool InfogainLossParameter::has_source() const {
  return _internal_has_source();
}
inline void InfogainLossParameter::clear_source() {
  source_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& InfogainLossParameter::source() const {
  // @@protoc_insertion_point(field_get:trtcaffe.InfogainLossParameter.source)
  return _internal_source();
}
inline void InfogainLossParameter::set_source(const std::string& value) {
  _internal_set_source(value);
  // @@protoc_insertion_point(field_set:trtcaffe.InfogainLossParameter.source)
}
inline std::string* InfogainLossParameter::mutable_source() {
  // @@protoc_insertion_point(field_mutable:trtcaffe.InfogainLossParameter.source)
  return _internal_mutable_source();
}
inline const std::string& InfogainLossParameter::_internal_source() const {
  return source_.Get();
}
inline void InfogainLossParameter::_internal_set_source(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  source_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void InfogainLossParameter::set_source(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  source_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:trtcaffe.InfogainLossParameter.source)
}
inline void InfogainLossParameter::set_source(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  source_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:trtcaffe.InfogainLossParameter.source)
}
inline void InfogainLossParameter::set_source(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  source_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:trtcaffe.InfogainLossParameter.source)
}
inline std::string* InfogainLossParameter::_internal_mutable_source() {
  _has_bits_[0] |= 0x00000001u;
  return source_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* InfogainLossParameter::release_source() {
  // @@protoc_insertion_point(field_release:trtcaffe.InfogainLossParameter.source)
  if (!_internal_has_source()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return source_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void InfogainLossParameter::set_allocated_source(std::string* source) {
  if (source != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  source_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), source,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:trtcaffe.InfogainLossParameter.source)
}
inline std::string* InfogainLossParameter::unsafe_arena_release_source() {
  // @@protoc_insertion_point(field_unsafe_arena_release:trtcaffe.InfogainLossParameter.source)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000001u;
  return source_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void InfogainLossParameter::unsafe_arena_set_allocated_source(
    std::string* source) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (source != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  source_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      source, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:trtcaffe.InfogainLossParameter.source)
}

// -------------------------------------------------------------------

// InnerProductParameter

// optional uint32 num_output = 1;
inline bool InnerProductParameter::_internal_has_num_output() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool InnerProductParameter::has_num_output() const {
  return _internal_has_num_output();
}
inline void InnerProductParameter::clear_num_output() {
  num_output_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 InnerProductParameter::_internal_num_output() const {
  return num_output_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 InnerProductParameter::num_output() const {
  // @@protoc_insertion_point(field_get:trtcaffe.InnerProductParameter.num_output)
  return _internal_num_output();
}
inline void InnerProductParameter::_internal_set_num_output(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  num_output_ = value;
}
inline void InnerProductParameter::set_num_output(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_num_output(value);
  // @@protoc_insertion_point(field_set:trtcaffe.InnerProductParameter.num_output)
}

// optional bool bias_term = 2 [default = true];
inline bool InnerProductParameter::_internal_has_bias_term() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool InnerProductParameter::has_bias_term() const {
  return _internal_has_bias_term();
}
inline void InnerProductParameter::clear_bias_term() {
  bias_term_ = true;
  _has_bits_[0] &= ~0x00000010u;
}
inline bool InnerProductParameter::_internal_bias_term() const {
  return bias_term_;
}
inline bool InnerProductParameter::bias_term() const {
  // @@protoc_insertion_point(field_get:trtcaffe.InnerProductParameter.bias_term)
  return _internal_bias_term();
}
inline void InnerProductParameter::_internal_set_bias_term(bool value) {
  _has_bits_[0] |= 0x00000010u;
  bias_term_ = value;
}
inline void InnerProductParameter::set_bias_term(bool value) {
  _internal_set_bias_term(value);
  // @@protoc_insertion_point(field_set:trtcaffe.InnerProductParameter.bias_term)
}

// optional .trtcaffe.FillerParameter weight_filler = 3;
inline bool InnerProductParameter::_internal_has_weight_filler() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || weight_filler_ != nullptr);
  return value;
}
inline bool InnerProductParameter::has_weight_filler() const {
  return _internal_has_weight_filler();
}
inline void InnerProductParameter::clear_weight_filler() {
  if (weight_filler_ != nullptr) weight_filler_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::trtcaffe::FillerParameter& InnerProductParameter::_internal_weight_filler() const {
  const ::trtcaffe::FillerParameter* p = weight_filler_;
  return p != nullptr ? *p : *reinterpret_cast<const ::trtcaffe::FillerParameter*>(
      &::trtcaffe::_FillerParameter_default_instance_);
}
inline const ::trtcaffe::FillerParameter& InnerProductParameter::weight_filler() const {
  // @@protoc_insertion_point(field_get:trtcaffe.InnerProductParameter.weight_filler)
  return _internal_weight_filler();
}
inline void InnerProductParameter::unsafe_arena_set_allocated_weight_filler(
    ::trtcaffe::FillerParameter* weight_filler) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(weight_filler_);
  }
  weight_filler_ = weight_filler;
  if (weight_filler) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:trtcaffe.InnerProductParameter.weight_filler)
}
inline ::trtcaffe::FillerParameter* InnerProductParameter::release_weight_filler() {
  auto temp = unsafe_arena_release_weight_filler();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::trtcaffe::FillerParameter* InnerProductParameter::unsafe_arena_release_weight_filler() {
  // @@protoc_insertion_point(field_release:trtcaffe.InnerProductParameter.weight_filler)
  _has_bits_[0] &= ~0x00000001u;
  ::trtcaffe::FillerParameter* temp = weight_filler_;
  weight_filler_ = nullptr;
  return temp;
}
inline ::trtcaffe::FillerParameter* InnerProductParameter::_internal_mutable_weight_filler() {
  _has_bits_[0] |= 0x00000001u;
  if (weight_filler_ == nullptr) {
    auto* p = CreateMaybeMessage<::trtcaffe::FillerParameter>(GetArena());
    weight_filler_ = p;
  }
  return weight_filler_;
}
inline ::trtcaffe::FillerParameter* InnerProductParameter::mutable_weight_filler() {
  // @@protoc_insertion_point(field_mutable:trtcaffe.InnerProductParameter.weight_filler)
  return _internal_mutable_weight_filler();
}
inline void InnerProductParameter::set_allocated_weight_filler(::trtcaffe::FillerParameter* weight_filler) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete weight_filler_;
  }
  if (weight_filler) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(weight_filler);
    if (message_arena != submessage_arena) {
      weight_filler = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, weight_filler, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  weight_filler_ = weight_filler;
  // @@protoc_insertion_point(field_set_allocated:trtcaffe.InnerProductParameter.weight_filler)
}

// optional .trtcaffe.FillerParameter bias_filler = 4;
inline bool InnerProductParameter::_internal_has_bias_filler() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || bias_filler_ != nullptr);
  return value;
}
inline bool InnerProductParameter::has_bias_filler() const {
  return _internal_has_bias_filler();
}
inline void InnerProductParameter::clear_bias_filler() {
  if (bias_filler_ != nullptr) bias_filler_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::trtcaffe::FillerParameter& InnerProductParameter::_internal_bias_filler() const {
  const ::trtcaffe::FillerParameter* p = bias_filler_;
  return p != nullptr ? *p : *reinterpret_cast<const ::trtcaffe::FillerParameter*>(
      &::trtcaffe::_FillerParameter_default_instance_);
}
inline const ::trtcaffe::FillerParameter& InnerProductParameter::bias_filler() const {
  // @@protoc_insertion_point(field_get:trtcaffe.InnerProductParameter.bias_filler)
  return _internal_bias_filler();
}
inline void InnerProductParameter::unsafe_arena_set_allocated_bias_filler(
    ::trtcaffe::FillerParameter* bias_filler) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(bias_filler_);
  }
  bias_filler_ = bias_filler;
  if (bias_filler) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:trtcaffe.InnerProductParameter.bias_filler)
}
inline ::trtcaffe::FillerParameter* InnerProductParameter::release_bias_filler() {
  auto temp = unsafe_arena_release_bias_filler();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::trtcaffe::FillerParameter* InnerProductParameter::unsafe_arena_release_bias_filler() {
  // @@protoc_insertion_point(field_release:trtcaffe.InnerProductParameter.bias_filler)
  _has_bits_[0] &= ~0x00000002u;
  ::trtcaffe::FillerParameter* temp = bias_filler_;
  bias_filler_ = nullptr;
  return temp;
}
inline ::trtcaffe::FillerParameter* InnerProductParameter::_internal_mutable_bias_filler() {
  _has_bits_[0] |= 0x00000002u;
  if (bias_filler_ == nullptr) {
    auto* p = CreateMaybeMessage<::trtcaffe::FillerParameter>(GetArena());
    bias_filler_ = p;
  }
  return bias_filler_;
}
inline ::trtcaffe::FillerParameter* InnerProductParameter::mutable_bias_filler() {
  // @@protoc_insertion_point(field_mutable:trtcaffe.InnerProductParameter.bias_filler)
  return _internal_mutable_bias_filler();
}
inline void InnerProductParameter::set_allocated_bias_filler(::trtcaffe::FillerParameter* bias_filler) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete bias_filler_;
  }
  if (bias_filler) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(bias_filler);
    if (message_arena != submessage_arena) {
      bias_filler = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, bias_filler, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  bias_filler_ = bias_filler;
  // @@protoc_insertion_point(field_set_allocated:trtcaffe.InnerProductParameter.bias_filler)
}

// optional int32 axis = 5 [default = 1];
inline bool InnerProductParameter::_internal_has_axis() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool InnerProductParameter::has_axis() const {
  return _internal_has_axis();
}
inline void InnerProductParameter::clear_axis() {
  axis_ = 1;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 InnerProductParameter::_internal_axis() const {
  return axis_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 InnerProductParameter::axis() const {
  // @@protoc_insertion_point(field_get:trtcaffe.InnerProductParameter.axis)
  return _internal_axis();
}
inline void InnerProductParameter::_internal_set_axis(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000020u;
  axis_ = value;
}
inline void InnerProductParameter::set_axis(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_axis(value);
  // @@protoc_insertion_point(field_set:trtcaffe.InnerProductParameter.axis)
}

// optional bool transpose = 6 [default = false];
inline bool InnerProductParameter::_internal_has_transpose() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool InnerProductParameter::has_transpose() const {
  return _internal_has_transpose();
}
inline void InnerProductParameter::clear_transpose() {
  transpose_ = false;
  _has_bits_[0] &= ~0x00000008u;
}
inline bool InnerProductParameter::_internal_transpose() const {
  return transpose_;
}
inline bool InnerProductParameter::transpose() const {
  // @@protoc_insertion_point(field_get:trtcaffe.InnerProductParameter.transpose)
  return _internal_transpose();
}
inline void InnerProductParameter::_internal_set_transpose(bool value) {
  _has_bits_[0] |= 0x00000008u;
  transpose_ = value;
}
inline void InnerProductParameter::set_transpose(bool value) {
  _internal_set_transpose(value);
  // @@protoc_insertion_point(field_set:trtcaffe.InnerProductParameter.transpose)
}

// -------------------------------------------------------------------

// InputParameter

// repeated .trtcaffe.BlobShape shape = 1;
inline int InputParameter::_internal_shape_size() const {
  return shape_.size();
}
inline int InputParameter::shape_size() const {
  return _internal_shape_size();
}
inline void InputParameter::clear_shape() {
  shape_.Clear();
}
inline ::trtcaffe::BlobShape* InputParameter::mutable_shape(int index) {
  // @@protoc_insertion_point(field_mutable:trtcaffe.InputParameter.shape)
  return shape_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::trtcaffe::BlobShape >*
InputParameter::mutable_shape() {
  // @@protoc_insertion_point(field_mutable_list:trtcaffe.InputParameter.shape)
  return &shape_;
}
inline const ::trtcaffe::BlobShape& InputParameter::_internal_shape(int index) const {
  return shape_.Get(index);
}
inline const ::trtcaffe::BlobShape& InputParameter::shape(int index) const {
  // @@protoc_insertion_point(field_get:trtcaffe.InputParameter.shape)
  return _internal_shape(index);
}
inline ::trtcaffe::BlobShape* InputParameter::_internal_add_shape() {
  return shape_.Add();
}
inline ::trtcaffe::BlobShape* InputParameter::add_shape() {
  // @@protoc_insertion_point(field_add:trtcaffe.InputParameter.shape)
  return _internal_add_shape();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::trtcaffe::BlobShape >&
InputParameter::shape() const {
  // @@protoc_insertion_point(field_list:trtcaffe.InputParameter.shape)
  return shape_;
}

// -------------------------------------------------------------------

// LogParameter

// optional float base = 1 [default = -1];
inline bool LogParameter::_internal_has_base() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool LogParameter::has_base() const {
  return _internal_has_base();
}
inline void LogParameter::clear_base() {
  base_ = -1;
  _has_bits_[0] &= ~0x00000002u;
}
inline float LogParameter::_internal_base() const {
  return base_;
}
inline float LogParameter::base() const {
  // @@protoc_insertion_point(field_get:trtcaffe.LogParameter.base)
  return _internal_base();
}
inline void LogParameter::_internal_set_base(float value) {
  _has_bits_[0] |= 0x00000002u;
  base_ = value;
}
inline void LogParameter::set_base(float value) {
  _internal_set_base(value);
  // @@protoc_insertion_point(field_set:trtcaffe.LogParameter.base)
}

// optional float scale = 2 [default = 1];
inline bool LogParameter::_internal_has_scale() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool LogParameter::has_scale() const {
  return _internal_has_scale();
}
inline void LogParameter::clear_scale() {
  scale_ = 1;
  _has_bits_[0] &= ~0x00000004u;
}
inline float LogParameter::_internal_scale() const {
  return scale_;
}
inline float LogParameter::scale() const {
  // @@protoc_insertion_point(field_get:trtcaffe.LogParameter.scale)
  return _internal_scale();
}
inline void LogParameter::_internal_set_scale(float value) {
  _has_bits_[0] |= 0x00000004u;
  scale_ = value;
}
inline void LogParameter::set_scale(float value) {
  _internal_set_scale(value);
  // @@protoc_insertion_point(field_set:trtcaffe.LogParameter.scale)
}

// optional float shift = 3 [default = 0];
inline bool LogParameter::_internal_has_shift() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool LogParameter::has_shift() const {
  return _internal_has_shift();
}
inline void LogParameter::clear_shift() {
  shift_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline float LogParameter::_internal_shift() const {
  return shift_;
}
inline float LogParameter::shift() const {
  // @@protoc_insertion_point(field_get:trtcaffe.LogParameter.shift)
  return _internal_shift();
}
inline void LogParameter::_internal_set_shift(float value) {
  _has_bits_[0] |= 0x00000001u;
  shift_ = value;
}
inline void LogParameter::set_shift(float value) {
  _internal_set_shift(value);
  // @@protoc_insertion_point(field_set:trtcaffe.LogParameter.shift)
}

// -------------------------------------------------------------------

// LRNParameter

// optional uint32 local_size = 1 [default = 5];
inline bool LRNParameter::_internal_has_local_size() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool LRNParameter::has_local_size() const {
  return _internal_has_local_size();
}
inline void LRNParameter::clear_local_size() {
  local_size_ = 5u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 LRNParameter::_internal_local_size() const {
  return local_size_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 LRNParameter::local_size() const {
  // @@protoc_insertion_point(field_get:trtcaffe.LRNParameter.local_size)
  return _internal_local_size();
}
inline void LRNParameter::_internal_set_local_size(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  local_size_ = value;
}
inline void LRNParameter::set_local_size(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_local_size(value);
  // @@protoc_insertion_point(field_set:trtcaffe.LRNParameter.local_size)
}

// optional float alpha = 2 [default = 1];
inline bool LRNParameter::_internal_has_alpha() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool LRNParameter::has_alpha() const {
  return _internal_has_alpha();
}
inline void LRNParameter::clear_alpha() {
  alpha_ = 1;
  _has_bits_[0] &= ~0x00000008u;
}
inline float LRNParameter::_internal_alpha() const {
  return alpha_;
}
inline float LRNParameter::alpha() const {
  // @@protoc_insertion_point(field_get:trtcaffe.LRNParameter.alpha)
  return _internal_alpha();
}
inline void LRNParameter::_internal_set_alpha(float value) {
  _has_bits_[0] |= 0x00000008u;
  alpha_ = value;
}
inline void LRNParameter::set_alpha(float value) {
  _internal_set_alpha(value);
  // @@protoc_insertion_point(field_set:trtcaffe.LRNParameter.alpha)
}

// optional float beta = 3 [default = 0.75];
inline bool LRNParameter::_internal_has_beta() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool LRNParameter::has_beta() const {
  return _internal_has_beta();
}
inline void LRNParameter::clear_beta() {
  beta_ = 0.75f;
  _has_bits_[0] &= ~0x00000010u;
}
inline float LRNParameter::_internal_beta() const {
  return beta_;
}
inline float LRNParameter::beta() const {
  // @@protoc_insertion_point(field_get:trtcaffe.LRNParameter.beta)
  return _internal_beta();
}
inline void LRNParameter::_internal_set_beta(float value) {
  _has_bits_[0] |= 0x00000010u;
  beta_ = value;
}
inline void LRNParameter::set_beta(float value) {
  _internal_set_beta(value);
  // @@protoc_insertion_point(field_set:trtcaffe.LRNParameter.beta)
}

// optional .trtcaffe.LRNParameter.NormRegion norm_region = 4 [default = ACROSS_CHANNELS];
inline bool LRNParameter::_internal_has_norm_region() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool LRNParameter::has_norm_region() const {
  return _internal_has_norm_region();
}
inline void LRNParameter::clear_norm_region() {
  norm_region_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::trtcaffe::LRNParameter_NormRegion LRNParameter::_internal_norm_region() const {
  return static_cast< ::trtcaffe::LRNParameter_NormRegion >(norm_region_);
}
inline ::trtcaffe::LRNParameter_NormRegion LRNParameter::norm_region() const {
  // @@protoc_insertion_point(field_get:trtcaffe.LRNParameter.norm_region)
  return _internal_norm_region();
}
inline void LRNParameter::_internal_set_norm_region(::trtcaffe::LRNParameter_NormRegion value) {
  assert(::trtcaffe::LRNParameter_NormRegion_IsValid(value));
  _has_bits_[0] |= 0x00000001u;
  norm_region_ = value;
}
inline void LRNParameter::set_norm_region(::trtcaffe::LRNParameter_NormRegion value) {
  _internal_set_norm_region(value);
  // @@protoc_insertion_point(field_set:trtcaffe.LRNParameter.norm_region)
}

// optional float k = 5 [default = 1];
inline bool LRNParameter::_internal_has_k() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool LRNParameter::has_k() const {
  return _internal_has_k();
}
inline void LRNParameter::clear_k() {
  k_ = 1;
  _has_bits_[0] &= ~0x00000020u;
}
inline float LRNParameter::_internal_k() const {
  return k_;
}
inline float LRNParameter::k() const {
  // @@protoc_insertion_point(field_get:trtcaffe.LRNParameter.k)
  return _internal_k();
}
inline void LRNParameter::_internal_set_k(float value) {
  _has_bits_[0] |= 0x00000020u;
  k_ = value;
}
inline void LRNParameter::set_k(float value) {
  _internal_set_k(value);
  // @@protoc_insertion_point(field_set:trtcaffe.LRNParameter.k)
}

// optional .trtcaffe.LRNParameter.Engine engine = 6 [default = DEFAULT];
inline bool LRNParameter::_internal_has_engine() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool LRNParameter::has_engine() const {
  return _internal_has_engine();
}
inline void LRNParameter::clear_engine() {
  engine_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::trtcaffe::LRNParameter_Engine LRNParameter::_internal_engine() const {
  return static_cast< ::trtcaffe::LRNParameter_Engine >(engine_);
}
inline ::trtcaffe::LRNParameter_Engine LRNParameter::engine() const {
  // @@protoc_insertion_point(field_get:trtcaffe.LRNParameter.engine)
  return _internal_engine();
}
inline void LRNParameter::_internal_set_engine(::trtcaffe::LRNParameter_Engine value) {
  assert(::trtcaffe::LRNParameter_Engine_IsValid(value));
  _has_bits_[0] |= 0x00000002u;
  engine_ = value;
}
inline void LRNParameter::set_engine(::trtcaffe::LRNParameter_Engine value) {
  _internal_set_engine(value);
  // @@protoc_insertion_point(field_set:trtcaffe.LRNParameter.engine)
}

// -------------------------------------------------------------------

// MemoryDataParameter

// optional uint32 batch_size = 1;
inline bool MemoryDataParameter::_internal_has_batch_size() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool MemoryDataParameter::has_batch_size() const {
  return _internal_has_batch_size();
}
inline void MemoryDataParameter::clear_batch_size() {
  batch_size_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MemoryDataParameter::_internal_batch_size() const {
  return batch_size_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MemoryDataParameter::batch_size() const {
  // @@protoc_insertion_point(field_get:trtcaffe.MemoryDataParameter.batch_size)
  return _internal_batch_size();
}
inline void MemoryDataParameter::_internal_set_batch_size(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  batch_size_ = value;
}
inline void MemoryDataParameter::set_batch_size(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_batch_size(value);
  // @@protoc_insertion_point(field_set:trtcaffe.MemoryDataParameter.batch_size)
}

// optional uint32 channels = 2;
inline bool MemoryDataParameter::_internal_has_channels() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool MemoryDataParameter::has_channels() const {
  return _internal_has_channels();
}
inline void MemoryDataParameter::clear_channels() {
  channels_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MemoryDataParameter::_internal_channels() const {
  return channels_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MemoryDataParameter::channels() const {
  // @@protoc_insertion_point(field_get:trtcaffe.MemoryDataParameter.channels)
  return _internal_channels();
}
inline void MemoryDataParameter::_internal_set_channels(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  channels_ = value;
}
inline void MemoryDataParameter::set_channels(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_channels(value);
  // @@protoc_insertion_point(field_set:trtcaffe.MemoryDataParameter.channels)
}

// optional uint32 height = 3;
inline bool MemoryDataParameter::_internal_has_height() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool MemoryDataParameter::has_height() const {
  return _internal_has_height();
}
inline void MemoryDataParameter::clear_height() {
  height_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MemoryDataParameter::_internal_height() const {
  return height_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MemoryDataParameter::height() const {
  // @@protoc_insertion_point(field_get:trtcaffe.MemoryDataParameter.height)
  return _internal_height();
}
inline void MemoryDataParameter::_internal_set_height(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  height_ = value;
}
inline void MemoryDataParameter::set_height(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_height(value);
  // @@protoc_insertion_point(field_set:trtcaffe.MemoryDataParameter.height)
}

// optional uint32 width = 4;
inline bool MemoryDataParameter::_internal_has_width() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool MemoryDataParameter::has_width() const {
  return _internal_has_width();
}
inline void MemoryDataParameter::clear_width() {
  width_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MemoryDataParameter::_internal_width() const {
  return width_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MemoryDataParameter::width() const {
  // @@protoc_insertion_point(field_get:trtcaffe.MemoryDataParameter.width)
  return _internal_width();
}
inline void MemoryDataParameter::_internal_set_width(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000008u;
  width_ = value;
}
inline void MemoryDataParameter::set_width(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_width(value);
  // @@protoc_insertion_point(field_set:trtcaffe.MemoryDataParameter.width)
}

// -------------------------------------------------------------------

// MVNParameter

// optional bool normalize_variance = 1 [default = true];
inline bool MVNParameter::_internal_has_normalize_variance() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool MVNParameter::has_normalize_variance() const {
  return _internal_has_normalize_variance();
}
inline void MVNParameter::clear_normalize_variance() {
  normalize_variance_ = true;
  _has_bits_[0] &= ~0x00000002u;
}
inline bool MVNParameter::_internal_normalize_variance() const {
  return normalize_variance_;
}
inline bool MVNParameter::normalize_variance() const {
  // @@protoc_insertion_point(field_get:trtcaffe.MVNParameter.normalize_variance)
  return _internal_normalize_variance();
}
inline void MVNParameter::_internal_set_normalize_variance(bool value) {
  _has_bits_[0] |= 0x00000002u;
  normalize_variance_ = value;
}
inline void MVNParameter::set_normalize_variance(bool value) {
  _internal_set_normalize_variance(value);
  // @@protoc_insertion_point(field_set:trtcaffe.MVNParameter.normalize_variance)
}

// optional bool across_channels = 2 [default = false];
inline bool MVNParameter::_internal_has_across_channels() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool MVNParameter::has_across_channels() const {
  return _internal_has_across_channels();
}
inline void MVNParameter::clear_across_channels() {
  across_channels_ = false;
  _has_bits_[0] &= ~0x00000001u;
}
inline bool MVNParameter::_internal_across_channels() const {
  return across_channels_;
}
inline bool MVNParameter::across_channels() const {
  // @@protoc_insertion_point(field_get:trtcaffe.MVNParameter.across_channels)
  return _internal_across_channels();
}
inline void MVNParameter::_internal_set_across_channels(bool value) {
  _has_bits_[0] |= 0x00000001u;
  across_channels_ = value;
}
inline void MVNParameter::set_across_channels(bool value) {
  _internal_set_across_channels(value);
  // @@protoc_insertion_point(field_set:trtcaffe.MVNParameter.across_channels)
}

// optional float eps = 3 [default = 1e-09];
inline bool MVNParameter::_internal_has_eps() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool MVNParameter::has_eps() const {
  return _internal_has_eps();
}
inline void MVNParameter::clear_eps() {
  eps_ = 1e-09f;
  _has_bits_[0] &= ~0x00000004u;
}
inline float MVNParameter::_internal_eps() const {
  return eps_;
}
inline float MVNParameter::eps() const {
  // @@protoc_insertion_point(field_get:trtcaffe.MVNParameter.eps)
  return _internal_eps();
}
inline void MVNParameter::_internal_set_eps(float value) {
  _has_bits_[0] |= 0x00000004u;
  eps_ = value;
}
inline void MVNParameter::set_eps(float value) {
  _internal_set_eps(value);
  // @@protoc_insertion_point(field_set:trtcaffe.MVNParameter.eps)
}

// -------------------------------------------------------------------

// NormalizeParameter

// optional bool across_spatial = 1 [default = true];
inline bool NormalizeParameter::_internal_has_across_spatial() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool NormalizeParameter::has_across_spatial() const {
  return _internal_has_across_spatial();
}
inline void NormalizeParameter::clear_across_spatial() {
  across_spatial_ = true;
  _has_bits_[0] &= ~0x00000002u;
}
inline bool NormalizeParameter::_internal_across_spatial() const {
  return across_spatial_;
}
inline bool NormalizeParameter::across_spatial() const {
  // @@protoc_insertion_point(field_get:trtcaffe.NormalizeParameter.across_spatial)
  return _internal_across_spatial();
}
inline void NormalizeParameter::_internal_set_across_spatial(bool value) {
  _has_bits_[0] |= 0x00000002u;
  across_spatial_ = value;
}
inline void NormalizeParameter::set_across_spatial(bool value) {
  _internal_set_across_spatial(value);
  // @@protoc_insertion_point(field_set:trtcaffe.NormalizeParameter.across_spatial)
}

// optional .trtcaffe.FillerParameter scale_filler = 2;
inline bool NormalizeParameter::_internal_has_scale_filler() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || scale_filler_ != nullptr);
  return value;
}
inline bool NormalizeParameter::has_scale_filler() const {
  return _internal_has_scale_filler();
}
inline void NormalizeParameter::clear_scale_filler() {
  if (scale_filler_ != nullptr) scale_filler_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::trtcaffe::FillerParameter& NormalizeParameter::_internal_scale_filler() const {
  const ::trtcaffe::FillerParameter* p = scale_filler_;
  return p != nullptr ? *p : *reinterpret_cast<const ::trtcaffe::FillerParameter*>(
      &::trtcaffe::_FillerParameter_default_instance_);
}
inline const ::trtcaffe::FillerParameter& NormalizeParameter::scale_filler() const {
  // @@protoc_insertion_point(field_get:trtcaffe.NormalizeParameter.scale_filler)
  return _internal_scale_filler();
}
inline void NormalizeParameter::unsafe_arena_set_allocated_scale_filler(
    ::trtcaffe::FillerParameter* scale_filler) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(scale_filler_);
  }
  scale_filler_ = scale_filler;
  if (scale_filler) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:trtcaffe.NormalizeParameter.scale_filler)
}
inline ::trtcaffe::FillerParameter* NormalizeParameter::release_scale_filler() {
  auto temp = unsafe_arena_release_scale_filler();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::trtcaffe::FillerParameter* NormalizeParameter::unsafe_arena_release_scale_filler() {
  // @@protoc_insertion_point(field_release:trtcaffe.NormalizeParameter.scale_filler)
  _has_bits_[0] &= ~0x00000001u;
  ::trtcaffe::FillerParameter* temp = scale_filler_;
  scale_filler_ = nullptr;
  return temp;
}
inline ::trtcaffe::FillerParameter* NormalizeParameter::_internal_mutable_scale_filler() {
  _has_bits_[0] |= 0x00000001u;
  if (scale_filler_ == nullptr) {
    auto* p = CreateMaybeMessage<::trtcaffe::FillerParameter>(GetArena());
    scale_filler_ = p;
  }
  return scale_filler_;
}
inline ::trtcaffe::FillerParameter* NormalizeParameter::mutable_scale_filler() {
  // @@protoc_insertion_point(field_mutable:trtcaffe.NormalizeParameter.scale_filler)
  return _internal_mutable_scale_filler();
}
inline void NormalizeParameter::set_allocated_scale_filler(::trtcaffe::FillerParameter* scale_filler) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete scale_filler_;
  }
  if (scale_filler) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(scale_filler);
    if (message_arena != submessage_arena) {
      scale_filler = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, scale_filler, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  scale_filler_ = scale_filler;
  // @@protoc_insertion_point(field_set_allocated:trtcaffe.NormalizeParameter.scale_filler)
}

// optional bool channel_shared = 3 [default = true];
inline bool NormalizeParameter::_internal_has_channel_shared() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool NormalizeParameter::has_channel_shared() const {
  return _internal_has_channel_shared();
}
inline void NormalizeParameter::clear_channel_shared() {
  channel_shared_ = true;
  _has_bits_[0] &= ~0x00000004u;
}
inline bool NormalizeParameter::_internal_channel_shared() const {
  return channel_shared_;
}
inline bool NormalizeParameter::channel_shared() const {
  // @@protoc_insertion_point(field_get:trtcaffe.NormalizeParameter.channel_shared)
  return _internal_channel_shared();
}
inline void NormalizeParameter::_internal_set_channel_shared(bool value) {
  _has_bits_[0] |= 0x00000004u;
  channel_shared_ = value;
}
inline void NormalizeParameter::set_channel_shared(bool value) {
  _internal_set_channel_shared(value);
  // @@protoc_insertion_point(field_set:trtcaffe.NormalizeParameter.channel_shared)
}

// optional float eps = 4 [default = 1e-10];
inline bool NormalizeParameter::_internal_has_eps() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool NormalizeParameter::has_eps() const {
  return _internal_has_eps();
}
inline void NormalizeParameter::clear_eps() {
  eps_ = 1e-10f;
  _has_bits_[0] &= ~0x00000008u;
}
inline float NormalizeParameter::_internal_eps() const {
  return eps_;
}
inline float NormalizeParameter::eps() const {
  // @@protoc_insertion_point(field_get:trtcaffe.NormalizeParameter.eps)
  return _internal_eps();
}
inline void NormalizeParameter::_internal_set_eps(float value) {
  _has_bits_[0] |= 0x00000008u;
  eps_ = value;
}
inline void NormalizeParameter::set_eps(float value) {
  _internal_set_eps(value);
  // @@protoc_insertion_point(field_set:trtcaffe.NormalizeParameter.eps)
}

// -------------------------------------------------------------------

// PermuteParameter

// repeated uint32 order = 1;
inline int PermuteParameter::_internal_order_size() const {
  return order_.size();
}
inline int PermuteParameter::order_size() const {
  return _internal_order_size();
}
inline void PermuteParameter::clear_order() {
  order_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PermuteParameter::_internal_order(int index) const {
  return order_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PermuteParameter::order(int index) const {
  // @@protoc_insertion_point(field_get:trtcaffe.PermuteParameter.order)
  return _internal_order(index);
}
inline void PermuteParameter::set_order(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  order_.Set(index, value);
  // @@protoc_insertion_point(field_set:trtcaffe.PermuteParameter.order)
}
inline void PermuteParameter::_internal_add_order(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  order_.Add(value);
}
inline void PermuteParameter::add_order(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_add_order(value);
  // @@protoc_insertion_point(field_add:trtcaffe.PermuteParameter.order)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
PermuteParameter::_internal_order() const {
  return order_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
PermuteParameter::order() const {
  // @@protoc_insertion_point(field_list:trtcaffe.PermuteParameter.order)
  return _internal_order();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
PermuteParameter::_internal_mutable_order() {
  return &order_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
PermuteParameter::mutable_order() {
  // @@protoc_insertion_point(field_mutable_list:trtcaffe.PermuteParameter.order)
  return _internal_mutable_order();
}

// -------------------------------------------------------------------

// PoolingParameter

// optional .trtcaffe.PoolingParameter.PoolMethod pool = 1 [default = MAX];
inline bool PoolingParameter::_internal_has_pool() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool PoolingParameter::has_pool() const {
  return _internal_has_pool();
}
inline void PoolingParameter::clear_pool() {
  pool_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::trtcaffe::PoolingParameter_PoolMethod PoolingParameter::_internal_pool() const {
  return static_cast< ::trtcaffe::PoolingParameter_PoolMethod >(pool_);
}
inline ::trtcaffe::PoolingParameter_PoolMethod PoolingParameter::pool() const {
  // @@protoc_insertion_point(field_get:trtcaffe.PoolingParameter.pool)
  return _internal_pool();
}
inline void PoolingParameter::_internal_set_pool(::trtcaffe::PoolingParameter_PoolMethod value) {
  assert(::trtcaffe::PoolingParameter_PoolMethod_IsValid(value));
  _has_bits_[0] |= 0x00000001u;
  pool_ = value;
}
inline void PoolingParameter::set_pool(::trtcaffe::PoolingParameter_PoolMethod value) {
  _internal_set_pool(value);
  // @@protoc_insertion_point(field_set:trtcaffe.PoolingParameter.pool)
}

// optional uint32 pad = 4 [default = 0];
inline bool PoolingParameter::_internal_has_pad() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool PoolingParameter::has_pad() const {
  return _internal_has_pad();
}
inline void PoolingParameter::clear_pad() {
  pad_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PoolingParameter::_internal_pad() const {
  return pad_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PoolingParameter::pad() const {
  // @@protoc_insertion_point(field_get:trtcaffe.PoolingParameter.pad)
  return _internal_pad();
}
inline void PoolingParameter::_internal_set_pad(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  pad_ = value;
}
inline void PoolingParameter::set_pad(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_pad(value);
  // @@protoc_insertion_point(field_set:trtcaffe.PoolingParameter.pad)
}

// optional uint32 pad_h = 9 [default = 0];
inline bool PoolingParameter::_internal_has_pad_h() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool PoolingParameter::has_pad_h() const {
  return _internal_has_pad_h();
}
inline void PoolingParameter::clear_pad_h() {
  pad_h_ = 0u;
  _has_bits_[0] &= ~0x00000080u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PoolingParameter::_internal_pad_h() const {
  return pad_h_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PoolingParameter::pad_h() const {
  // @@protoc_insertion_point(field_get:trtcaffe.PoolingParameter.pad_h)
  return _internal_pad_h();
}
inline void PoolingParameter::_internal_set_pad_h(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000080u;
  pad_h_ = value;
}
inline void PoolingParameter::set_pad_h(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_pad_h(value);
  // @@protoc_insertion_point(field_set:trtcaffe.PoolingParameter.pad_h)
}

// optional uint32 pad_w = 10 [default = 0];
inline bool PoolingParameter::_internal_has_pad_w() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool PoolingParameter::has_pad_w() const {
  return _internal_has_pad_w();
}
inline void PoolingParameter::clear_pad_w() {
  pad_w_ = 0u;
  _has_bits_[0] &= ~0x00000100u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PoolingParameter::_internal_pad_w() const {
  return pad_w_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PoolingParameter::pad_w() const {
  // @@protoc_insertion_point(field_get:trtcaffe.PoolingParameter.pad_w)
  return _internal_pad_w();
}
inline void PoolingParameter::_internal_set_pad_w(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000100u;
  pad_w_ = value;
}
inline void PoolingParameter::set_pad_w(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_pad_w(value);
  // @@protoc_insertion_point(field_set:trtcaffe.PoolingParameter.pad_w)
}

// optional uint32 kernel_size = 2;
inline bool PoolingParameter::_internal_has_kernel_size() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool PoolingParameter::has_kernel_size() const {
  return _internal_has_kernel_size();
}
inline void PoolingParameter::clear_kernel_size() {
  kernel_size_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PoolingParameter::_internal_kernel_size() const {
  return kernel_size_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PoolingParameter::kernel_size() const {
  // @@protoc_insertion_point(field_get:trtcaffe.PoolingParameter.kernel_size)
  return _internal_kernel_size();
}
inline void PoolingParameter::_internal_set_kernel_size(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  kernel_size_ = value;
}
inline void PoolingParameter::set_kernel_size(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_kernel_size(value);
  // @@protoc_insertion_point(field_set:trtcaffe.PoolingParameter.kernel_size)
}

// optional uint32 kernel_h = 5;
inline bool PoolingParameter::_internal_has_kernel_h() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool PoolingParameter::has_kernel_h() const {
  return _internal_has_kernel_h();
}
inline void PoolingParameter::clear_kernel_h() {
  kernel_h_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PoolingParameter::_internal_kernel_h() const {
  return kernel_h_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PoolingParameter::kernel_h() const {
  // @@protoc_insertion_point(field_get:trtcaffe.PoolingParameter.kernel_h)
  return _internal_kernel_h();
}
inline void PoolingParameter::_internal_set_kernel_h(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000008u;
  kernel_h_ = value;
}
inline void PoolingParameter::set_kernel_h(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_kernel_h(value);
  // @@protoc_insertion_point(field_set:trtcaffe.PoolingParameter.kernel_h)
}

// optional uint32 kernel_w = 6;
inline bool PoolingParameter::_internal_has_kernel_w() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool PoolingParameter::has_kernel_w() const {
  return _internal_has_kernel_w();
}
inline void PoolingParameter::clear_kernel_w() {
  kernel_w_ = 0u;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PoolingParameter::_internal_kernel_w() const {
  return kernel_w_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PoolingParameter::kernel_w() const {
  // @@protoc_insertion_point(field_get:trtcaffe.PoolingParameter.kernel_w)
  return _internal_kernel_w();
}
inline void PoolingParameter::_internal_set_kernel_w(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000010u;
  kernel_w_ = value;
}
inline void PoolingParameter::set_kernel_w(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_kernel_w(value);
  // @@protoc_insertion_point(field_set:trtcaffe.PoolingParameter.kernel_w)
}

// optional uint32 stride = 3 [default = 1];
inline bool PoolingParameter::_internal_has_stride() const {
  bool value = (_has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline bool PoolingParameter::has_stride() const {
  return _internal_has_stride();
}
inline void PoolingParameter::clear_stride() {
  stride_ = 1u;
  _has_bits_[0] &= ~0x00001000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PoolingParameter::_internal_stride() const {
  return stride_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PoolingParameter::stride() const {
  // @@protoc_insertion_point(field_get:trtcaffe.PoolingParameter.stride)
  return _internal_stride();
}
inline void PoolingParameter::_internal_set_stride(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00001000u;
  stride_ = value;
}
inline void PoolingParameter::set_stride(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_stride(value);
  // @@protoc_insertion_point(field_set:trtcaffe.PoolingParameter.stride)
}

// optional uint32 stride_h = 7;
inline bool PoolingParameter::_internal_has_stride_h() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool PoolingParameter::has_stride_h() const {
  return _internal_has_stride_h();
}
inline void PoolingParameter::clear_stride_h() {
  stride_h_ = 0u;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PoolingParameter::_internal_stride_h() const {
  return stride_h_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PoolingParameter::stride_h() const {
  // @@protoc_insertion_point(field_get:trtcaffe.PoolingParameter.stride_h)
  return _internal_stride_h();
}
inline void PoolingParameter::_internal_set_stride_h(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000020u;
  stride_h_ = value;
}
inline void PoolingParameter::set_stride_h(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_stride_h(value);
  // @@protoc_insertion_point(field_set:trtcaffe.PoolingParameter.stride_h)
}

// optional uint32 stride_w = 8;
inline bool PoolingParameter::_internal_has_stride_w() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool PoolingParameter::has_stride_w() const {
  return _internal_has_stride_w();
}
inline void PoolingParameter::clear_stride_w() {
  stride_w_ = 0u;
  _has_bits_[0] &= ~0x00000040u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PoolingParameter::_internal_stride_w() const {
  return stride_w_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PoolingParameter::stride_w() const {
  // @@protoc_insertion_point(field_get:trtcaffe.PoolingParameter.stride_w)
  return _internal_stride_w();
}
inline void PoolingParameter::_internal_set_stride_w(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000040u;
  stride_w_ = value;
}
inline void PoolingParameter::set_stride_w(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_stride_w(value);
  // @@protoc_insertion_point(field_set:trtcaffe.PoolingParameter.stride_w)
}

// optional .trtcaffe.PoolingParameter.Engine engine = 11 [default = DEFAULT];
inline bool PoolingParameter::_internal_has_engine() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool PoolingParameter::has_engine() const {
  return _internal_has_engine();
}
inline void PoolingParameter::clear_engine() {
  engine_ = 0;
  _has_bits_[0] &= ~0x00000200u;
}
inline ::trtcaffe::PoolingParameter_Engine PoolingParameter::_internal_engine() const {
  return static_cast< ::trtcaffe::PoolingParameter_Engine >(engine_);
}
inline ::trtcaffe::PoolingParameter_Engine PoolingParameter::engine() const {
  // @@protoc_insertion_point(field_get:trtcaffe.PoolingParameter.engine)
  return _internal_engine();
}
inline void PoolingParameter::_internal_set_engine(::trtcaffe::PoolingParameter_Engine value) {
  assert(::trtcaffe::PoolingParameter_Engine_IsValid(value));
  _has_bits_[0] |= 0x00000200u;
  engine_ = value;
}
inline void PoolingParameter::set_engine(::trtcaffe::PoolingParameter_Engine value) {
  _internal_set_engine(value);
  // @@protoc_insertion_point(field_set:trtcaffe.PoolingParameter.engine)
}

// optional bool global_pooling = 12 [default = false];
inline bool PoolingParameter::_internal_has_global_pooling() const {
  bool value = (_has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool PoolingParameter::has_global_pooling() const {
  return _internal_has_global_pooling();
}
inline void PoolingParameter::clear_global_pooling() {
  global_pooling_ = false;
  _has_bits_[0] &= ~0x00000400u;
}
inline bool PoolingParameter::_internal_global_pooling() const {
  return global_pooling_;
}
inline bool PoolingParameter::global_pooling() const {
  // @@protoc_insertion_point(field_get:trtcaffe.PoolingParameter.global_pooling)
  return _internal_global_pooling();
}
inline void PoolingParameter::_internal_set_global_pooling(bool value) {
  _has_bits_[0] |= 0x00000400u;
  global_pooling_ = value;
}
inline void PoolingParameter::set_global_pooling(bool value) {
  _internal_set_global_pooling(value);
  // @@protoc_insertion_point(field_set:trtcaffe.PoolingParameter.global_pooling)
}

// optional bool torch_pooling = 40 [default = false];
inline bool PoolingParameter::_internal_has_torch_pooling() const {
  bool value = (_has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool PoolingParameter::has_torch_pooling() const {
  return _internal_has_torch_pooling();
}
inline void PoolingParameter::clear_torch_pooling() {
  torch_pooling_ = false;
  _has_bits_[0] &= ~0x00000800u;
}
inline bool PoolingParameter::_internal_torch_pooling() const {
  return torch_pooling_;
}
inline bool PoolingParameter::torch_pooling() const {
  // @@protoc_insertion_point(field_get:trtcaffe.PoolingParameter.torch_pooling)
  return _internal_torch_pooling();
}
inline void PoolingParameter::_internal_set_torch_pooling(bool value) {
  _has_bits_[0] |= 0x00000800u;
  torch_pooling_ = value;
}
inline void PoolingParameter::set_torch_pooling(bool value) {
  _internal_set_torch_pooling(value);
  // @@protoc_insertion_point(field_set:trtcaffe.PoolingParameter.torch_pooling)
}

// -------------------------------------------------------------------

// PowerParameter

// optional float power = 1 [default = 1];
inline bool PowerParameter::_internal_has_power() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool PowerParameter::has_power() const {
  return _internal_has_power();
}
inline void PowerParameter::clear_power() {
  power_ = 1;
  _has_bits_[0] &= ~0x00000002u;
}
inline float PowerParameter::_internal_power() const {
  return power_;
}
inline float PowerParameter::power() const {
  // @@protoc_insertion_point(field_get:trtcaffe.PowerParameter.power)
  return _internal_power();
}
inline void PowerParameter::_internal_set_power(float value) {
  _has_bits_[0] |= 0x00000002u;
  power_ = value;
}
inline void PowerParameter::set_power(float value) {
  _internal_set_power(value);
  // @@protoc_insertion_point(field_set:trtcaffe.PowerParameter.power)
}

// optional float scale = 2 [default = 1];
inline bool PowerParameter::_internal_has_scale() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool PowerParameter::has_scale() const {
  return _internal_has_scale();
}
inline void PowerParameter::clear_scale() {
  scale_ = 1;
  _has_bits_[0] &= ~0x00000004u;
}
inline float PowerParameter::_internal_scale() const {
  return scale_;
}
inline float PowerParameter::scale() const {
  // @@protoc_insertion_point(field_get:trtcaffe.PowerParameter.scale)
  return _internal_scale();
}
inline void PowerParameter::_internal_set_scale(float value) {
  _has_bits_[0] |= 0x00000004u;
  scale_ = value;
}
inline void PowerParameter::set_scale(float value) {
  _internal_set_scale(value);
  // @@protoc_insertion_point(field_set:trtcaffe.PowerParameter.scale)
}

// optional float shift = 3 [default = 0];
inline bool PowerParameter::_internal_has_shift() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool PowerParameter::has_shift() const {
  return _internal_has_shift();
}
inline void PowerParameter::clear_shift() {
  shift_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline float PowerParameter::_internal_shift() const {
  return shift_;
}
inline float PowerParameter::shift() const {
  // @@protoc_insertion_point(field_get:trtcaffe.PowerParameter.shift)
  return _internal_shift();
}
inline void PowerParameter::_internal_set_shift(float value) {
  _has_bits_[0] |= 0x00000001u;
  shift_ = value;
}
inline void PowerParameter::set_shift(float value) {
  _internal_set_shift(value);
  // @@protoc_insertion_point(field_set:trtcaffe.PowerParameter.shift)
}

// -------------------------------------------------------------------

// PriorBoxParameter

// repeated float min_size = 1;
inline int PriorBoxParameter::_internal_min_size_size() const {
  return min_size_.size();
}
inline int PriorBoxParameter::min_size_size() const {
  return _internal_min_size_size();
}
inline void PriorBoxParameter::clear_min_size() {
  min_size_.Clear();
}
inline float PriorBoxParameter::_internal_min_size(int index) const {
  return min_size_.Get(index);
}
inline float PriorBoxParameter::min_size(int index) const {
  // @@protoc_insertion_point(field_get:trtcaffe.PriorBoxParameter.min_size)
  return _internal_min_size(index);
}
inline void PriorBoxParameter::set_min_size(int index, float value) {
  min_size_.Set(index, value);
  // @@protoc_insertion_point(field_set:trtcaffe.PriorBoxParameter.min_size)
}
inline void PriorBoxParameter::_internal_add_min_size(float value) {
  min_size_.Add(value);
}
inline void PriorBoxParameter::add_min_size(float value) {
  _internal_add_min_size(value);
  // @@protoc_insertion_point(field_add:trtcaffe.PriorBoxParameter.min_size)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
PriorBoxParameter::_internal_min_size() const {
  return min_size_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
PriorBoxParameter::min_size() const {
  // @@protoc_insertion_point(field_list:trtcaffe.PriorBoxParameter.min_size)
  return _internal_min_size();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
PriorBoxParameter::_internal_mutable_min_size() {
  return &min_size_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
PriorBoxParameter::mutable_min_size() {
  // @@protoc_insertion_point(field_mutable_list:trtcaffe.PriorBoxParameter.min_size)
  return _internal_mutable_min_size();
}

// repeated float max_size = 2;
inline int PriorBoxParameter::_internal_max_size_size() const {
  return max_size_.size();
}
inline int PriorBoxParameter::max_size_size() const {
  return _internal_max_size_size();
}
inline void PriorBoxParameter::clear_max_size() {
  max_size_.Clear();
}
inline float PriorBoxParameter::_internal_max_size(int index) const {
  return max_size_.Get(index);
}
inline float PriorBoxParameter::max_size(int index) const {
  // @@protoc_insertion_point(field_get:trtcaffe.PriorBoxParameter.max_size)
  return _internal_max_size(index);
}
inline void PriorBoxParameter::set_max_size(int index, float value) {
  max_size_.Set(index, value);
  // @@protoc_insertion_point(field_set:trtcaffe.PriorBoxParameter.max_size)
}
inline void PriorBoxParameter::_internal_add_max_size(float value) {
  max_size_.Add(value);
}
inline void PriorBoxParameter::add_max_size(float value) {
  _internal_add_max_size(value);
  // @@protoc_insertion_point(field_add:trtcaffe.PriorBoxParameter.max_size)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
PriorBoxParameter::_internal_max_size() const {
  return max_size_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
PriorBoxParameter::max_size() const {
  // @@protoc_insertion_point(field_list:trtcaffe.PriorBoxParameter.max_size)
  return _internal_max_size();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
PriorBoxParameter::_internal_mutable_max_size() {
  return &max_size_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
PriorBoxParameter::mutable_max_size() {
  // @@protoc_insertion_point(field_mutable_list:trtcaffe.PriorBoxParameter.max_size)
  return _internal_mutable_max_size();
}

// repeated float aspect_ratio = 3;
inline int PriorBoxParameter::_internal_aspect_ratio_size() const {
  return aspect_ratio_.size();
}
inline int PriorBoxParameter::aspect_ratio_size() const {
  return _internal_aspect_ratio_size();
}
inline void PriorBoxParameter::clear_aspect_ratio() {
  aspect_ratio_.Clear();
}
inline float PriorBoxParameter::_internal_aspect_ratio(int index) const {
  return aspect_ratio_.Get(index);
}
inline float PriorBoxParameter::aspect_ratio(int index) const {
  // @@protoc_insertion_point(field_get:trtcaffe.PriorBoxParameter.aspect_ratio)
  return _internal_aspect_ratio(index);
}
inline void PriorBoxParameter::set_aspect_ratio(int index, float value) {
  aspect_ratio_.Set(index, value);
  // @@protoc_insertion_point(field_set:trtcaffe.PriorBoxParameter.aspect_ratio)
}
inline void PriorBoxParameter::_internal_add_aspect_ratio(float value) {
  aspect_ratio_.Add(value);
}
inline void PriorBoxParameter::add_aspect_ratio(float value) {
  _internal_add_aspect_ratio(value);
  // @@protoc_insertion_point(field_add:trtcaffe.PriorBoxParameter.aspect_ratio)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
PriorBoxParameter::_internal_aspect_ratio() const {
  return aspect_ratio_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
PriorBoxParameter::aspect_ratio() const {
  // @@protoc_insertion_point(field_list:trtcaffe.PriorBoxParameter.aspect_ratio)
  return _internal_aspect_ratio();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
PriorBoxParameter::_internal_mutable_aspect_ratio() {
  return &aspect_ratio_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
PriorBoxParameter::mutable_aspect_ratio() {
  // @@protoc_insertion_point(field_mutable_list:trtcaffe.PriorBoxParameter.aspect_ratio)
  return _internal_mutable_aspect_ratio();
}

// optional bool flip = 4 [default = true];
inline bool PriorBoxParameter::_internal_has_flip() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool PriorBoxParameter::has_flip() const {
  return _internal_has_flip();
}
inline void PriorBoxParameter::clear_flip() {
  flip_ = true;
  _has_bits_[0] &= ~0x00000080u;
}
inline bool PriorBoxParameter::_internal_flip() const {
  return flip_;
}
inline bool PriorBoxParameter::flip() const {
  // @@protoc_insertion_point(field_get:trtcaffe.PriorBoxParameter.flip)
  return _internal_flip();
}
inline void PriorBoxParameter::_internal_set_flip(bool value) {
  _has_bits_[0] |= 0x00000080u;
  flip_ = value;
}
inline void PriorBoxParameter::set_flip(bool value) {
  _internal_set_flip(value);
  // @@protoc_insertion_point(field_set:trtcaffe.PriorBoxParameter.flip)
}

// optional bool clip = 5 [default = false];
inline bool PriorBoxParameter::_internal_has_clip() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool PriorBoxParameter::has_clip() const {
  return _internal_has_clip();
}
inline void PriorBoxParameter::clear_clip() {
  clip_ = false;
  _has_bits_[0] &= ~0x00000001u;
}
inline bool PriorBoxParameter::_internal_clip() const {
  return clip_;
}
inline bool PriorBoxParameter::clip() const {
  // @@protoc_insertion_point(field_get:trtcaffe.PriorBoxParameter.clip)
  return _internal_clip();
}
inline void PriorBoxParameter::_internal_set_clip(bool value) {
  _has_bits_[0] |= 0x00000001u;
  clip_ = value;
}
inline void PriorBoxParameter::set_clip(bool value) {
  _internal_set_clip(value);
  // @@protoc_insertion_point(field_set:trtcaffe.PriorBoxParameter.clip)
}

// repeated float variance = 6;
inline int PriorBoxParameter::_internal_variance_size() const {
  return variance_.size();
}
inline int PriorBoxParameter::variance_size() const {
  return _internal_variance_size();
}
inline void PriorBoxParameter::clear_variance() {
  variance_.Clear();
}
inline float PriorBoxParameter::_internal_variance(int index) const {
  return variance_.Get(index);
}
inline float PriorBoxParameter::variance(int index) const {
  // @@protoc_insertion_point(field_get:trtcaffe.PriorBoxParameter.variance)
  return _internal_variance(index);
}
inline void PriorBoxParameter::set_variance(int index, float value) {
  variance_.Set(index, value);
  // @@protoc_insertion_point(field_set:trtcaffe.PriorBoxParameter.variance)
}
inline void PriorBoxParameter::_internal_add_variance(float value) {
  variance_.Add(value);
}
inline void PriorBoxParameter::add_variance(float value) {
  _internal_add_variance(value);
  // @@protoc_insertion_point(field_add:trtcaffe.PriorBoxParameter.variance)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
PriorBoxParameter::_internal_variance() const {
  return variance_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
PriorBoxParameter::variance() const {
  // @@protoc_insertion_point(field_list:trtcaffe.PriorBoxParameter.variance)
  return _internal_variance();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
PriorBoxParameter::_internal_mutable_variance() {
  return &variance_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
PriorBoxParameter::mutable_variance() {
  // @@protoc_insertion_point(field_mutable_list:trtcaffe.PriorBoxParameter.variance)
  return _internal_mutable_variance();
}

// optional uint32 img_size = 7;
inline bool PriorBoxParameter::_internal_has_img_size() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool PriorBoxParameter::has_img_size() const {
  return _internal_has_img_size();
}
inline void PriorBoxParameter::clear_img_size() {
  img_size_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PriorBoxParameter::_internal_img_size() const {
  return img_size_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PriorBoxParameter::img_size() const {
  // @@protoc_insertion_point(field_get:trtcaffe.PriorBoxParameter.img_size)
  return _internal_img_size();
}
inline void PriorBoxParameter::_internal_set_img_size(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  img_size_ = value;
}
inline void PriorBoxParameter::set_img_size(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_img_size(value);
  // @@protoc_insertion_point(field_set:trtcaffe.PriorBoxParameter.img_size)
}

// optional uint32 img_h = 8;
inline bool PriorBoxParameter::_internal_has_img_h() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool PriorBoxParameter::has_img_h() const {
  return _internal_has_img_h();
}
inline void PriorBoxParameter::clear_img_h() {
  img_h_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PriorBoxParameter::_internal_img_h() const {
  return img_h_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PriorBoxParameter::img_h() const {
  // @@protoc_insertion_point(field_get:trtcaffe.PriorBoxParameter.img_h)
  return _internal_img_h();
}
inline void PriorBoxParameter::_internal_set_img_h(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  img_h_ = value;
}
inline void PriorBoxParameter::set_img_h(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_img_h(value);
  // @@protoc_insertion_point(field_set:trtcaffe.PriorBoxParameter.img_h)
}

// optional uint32 img_w = 9;
inline bool PriorBoxParameter::_internal_has_img_w() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool PriorBoxParameter::has_img_w() const {
  return _internal_has_img_w();
}
inline void PriorBoxParameter::clear_img_w() {
  img_w_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PriorBoxParameter::_internal_img_w() const {
  return img_w_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PriorBoxParameter::img_w() const {
  // @@protoc_insertion_point(field_get:trtcaffe.PriorBoxParameter.img_w)
  return _internal_img_w();
}
inline void PriorBoxParameter::_internal_set_img_w(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000008u;
  img_w_ = value;
}
inline void PriorBoxParameter::set_img_w(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_img_w(value);
  // @@protoc_insertion_point(field_set:trtcaffe.PriorBoxParameter.img_w)
}

// optional float step = 10;
inline bool PriorBoxParameter::_internal_has_step() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool PriorBoxParameter::has_step() const {
  return _internal_has_step();
}
inline void PriorBoxParameter::clear_step() {
  step_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline float PriorBoxParameter::_internal_step() const {
  return step_;
}
inline float PriorBoxParameter::step() const {
  // @@protoc_insertion_point(field_get:trtcaffe.PriorBoxParameter.step)
  return _internal_step();
}
inline void PriorBoxParameter::_internal_set_step(float value) {
  _has_bits_[0] |= 0x00000010u;
  step_ = value;
}
inline void PriorBoxParameter::set_step(float value) {
  _internal_set_step(value);
  // @@protoc_insertion_point(field_set:trtcaffe.PriorBoxParameter.step)
}

// optional float step_h = 11;
inline bool PriorBoxParameter::_internal_has_step_h() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool PriorBoxParameter::has_step_h() const {
  return _internal_has_step_h();
}
inline void PriorBoxParameter::clear_step_h() {
  step_h_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline float PriorBoxParameter::_internal_step_h() const {
  return step_h_;
}
inline float PriorBoxParameter::step_h() const {
  // @@protoc_insertion_point(field_get:trtcaffe.PriorBoxParameter.step_h)
  return _internal_step_h();
}
inline void PriorBoxParameter::_internal_set_step_h(float value) {
  _has_bits_[0] |= 0x00000020u;
  step_h_ = value;
}
inline void PriorBoxParameter::set_step_h(float value) {
  _internal_set_step_h(value);
  // @@protoc_insertion_point(field_set:trtcaffe.PriorBoxParameter.step_h)
}

// optional float step_w = 12;
inline bool PriorBoxParameter::_internal_has_step_w() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool PriorBoxParameter::has_step_w() const {
  return _internal_has_step_w();
}
inline void PriorBoxParameter::clear_step_w() {
  step_w_ = 0;
  _has_bits_[0] &= ~0x00000040u;
}
inline float PriorBoxParameter::_internal_step_w() const {
  return step_w_;
}
inline float PriorBoxParameter::step_w() const {
  // @@protoc_insertion_point(field_get:trtcaffe.PriorBoxParameter.step_w)
  return _internal_step_w();
}
inline void PriorBoxParameter::_internal_set_step_w(float value) {
  _has_bits_[0] |= 0x00000040u;
  step_w_ = value;
}
inline void PriorBoxParameter::set_step_w(float value) {
  _internal_set_step_w(value);
  // @@protoc_insertion_point(field_set:trtcaffe.PriorBoxParameter.step_w)
}

// optional float offset = 13 [default = 0.5];
inline bool PriorBoxParameter::_internal_has_offset() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool PriorBoxParameter::has_offset() const {
  return _internal_has_offset();
}
inline void PriorBoxParameter::clear_offset() {
  offset_ = 0.5f;
  _has_bits_[0] &= ~0x00000100u;
}
inline float PriorBoxParameter::_internal_offset() const {
  return offset_;
}
inline float PriorBoxParameter::offset() const {
  // @@protoc_insertion_point(field_get:trtcaffe.PriorBoxParameter.offset)
  return _internal_offset();
}
inline void PriorBoxParameter::_internal_set_offset(float value) {
  _has_bits_[0] |= 0x00000100u;
  offset_ = value;
}
inline void PriorBoxParameter::set_offset(float value) {
  _internal_set_offset(value);
  // @@protoc_insertion_point(field_set:trtcaffe.PriorBoxParameter.offset)
}

// -------------------------------------------------------------------

// ROIPoolingParameter

// optional uint32 pooled_h = 1 [default = 0];
inline bool ROIPoolingParameter::_internal_has_pooled_h() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ROIPoolingParameter::has_pooled_h() const {
  return _internal_has_pooled_h();
}
inline void ROIPoolingParameter::clear_pooled_h() {
  pooled_h_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ROIPoolingParameter::_internal_pooled_h() const {
  return pooled_h_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ROIPoolingParameter::pooled_h() const {
  // @@protoc_insertion_point(field_get:trtcaffe.ROIPoolingParameter.pooled_h)
  return _internal_pooled_h();
}
inline void ROIPoolingParameter::_internal_set_pooled_h(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  pooled_h_ = value;
}
inline void ROIPoolingParameter::set_pooled_h(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_pooled_h(value);
  // @@protoc_insertion_point(field_set:trtcaffe.ROIPoolingParameter.pooled_h)
}

// optional uint32 pooled_w = 2 [default = 0];
inline bool ROIPoolingParameter::_internal_has_pooled_w() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ROIPoolingParameter::has_pooled_w() const {
  return _internal_has_pooled_w();
}
inline void ROIPoolingParameter::clear_pooled_w() {
  pooled_w_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ROIPoolingParameter::_internal_pooled_w() const {
  return pooled_w_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ROIPoolingParameter::pooled_w() const {
  // @@protoc_insertion_point(field_get:trtcaffe.ROIPoolingParameter.pooled_w)
  return _internal_pooled_w();
}
inline void ROIPoolingParameter::_internal_set_pooled_w(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  pooled_w_ = value;
}
inline void ROIPoolingParameter::set_pooled_w(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_pooled_w(value);
  // @@protoc_insertion_point(field_set:trtcaffe.ROIPoolingParameter.pooled_w)
}

// optional float spatial_scale = 3 [default = 1];
inline bool ROIPoolingParameter::_internal_has_spatial_scale() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool ROIPoolingParameter::has_spatial_scale() const {
  return _internal_has_spatial_scale();
}
inline void ROIPoolingParameter::clear_spatial_scale() {
  spatial_scale_ = 1;
  _has_bits_[0] &= ~0x00000004u;
}
inline float ROIPoolingParameter::_internal_spatial_scale() const {
  return spatial_scale_;
}
inline float ROIPoolingParameter::spatial_scale() const {
  // @@protoc_insertion_point(field_get:trtcaffe.ROIPoolingParameter.spatial_scale)
  return _internal_spatial_scale();
}
inline void ROIPoolingParameter::_internal_set_spatial_scale(float value) {
  _has_bits_[0] |= 0x00000004u;
  spatial_scale_ = value;
}
inline void ROIPoolingParameter::set_spatial_scale(float value) {
  _internal_set_spatial_scale(value);
  // @@protoc_insertion_point(field_set:trtcaffe.ROIPoolingParameter.spatial_scale)
}

// -------------------------------------------------------------------

// RegionProposalParameter

// optional uint32 prenms_top = 1;
inline bool RegionProposalParameter::_internal_has_prenms_top() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool RegionProposalParameter::has_prenms_top() const {
  return _internal_has_prenms_top();
}
inline void RegionProposalParameter::clear_prenms_top() {
  prenms_top_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RegionProposalParameter::_internal_prenms_top() const {
  return prenms_top_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RegionProposalParameter::prenms_top() const {
  // @@protoc_insertion_point(field_get:trtcaffe.RegionProposalParameter.prenms_top)
  return _internal_prenms_top();
}
inline void RegionProposalParameter::_internal_set_prenms_top(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  prenms_top_ = value;
}
inline void RegionProposalParameter::set_prenms_top(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_prenms_top(value);
  // @@protoc_insertion_point(field_set:trtcaffe.RegionProposalParameter.prenms_top)
}

// optional uint32 nms_max_out = 2;
inline bool RegionProposalParameter::_internal_has_nms_max_out() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool RegionProposalParameter::has_nms_max_out() const {
  return _internal_has_nms_max_out();
}
inline void RegionProposalParameter::clear_nms_max_out() {
  nms_max_out_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RegionProposalParameter::_internal_nms_max_out() const {
  return nms_max_out_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RegionProposalParameter::nms_max_out() const {
  // @@protoc_insertion_point(field_get:trtcaffe.RegionProposalParameter.nms_max_out)
  return _internal_nms_max_out();
}
inline void RegionProposalParameter::_internal_set_nms_max_out(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  nms_max_out_ = value;
}
inline void RegionProposalParameter::set_nms_max_out(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_nms_max_out(value);
  // @@protoc_insertion_point(field_set:trtcaffe.RegionProposalParameter.nms_max_out)
}

// optional float iou_threshold = 3;
inline bool RegionProposalParameter::_internal_has_iou_threshold() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool RegionProposalParameter::has_iou_threshold() const {
  return _internal_has_iou_threshold();
}
inline void RegionProposalParameter::clear_iou_threshold() {
  iou_threshold_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline float RegionProposalParameter::_internal_iou_threshold() const {
  return iou_threshold_;
}
inline float RegionProposalParameter::iou_threshold() const {
  // @@protoc_insertion_point(field_get:trtcaffe.RegionProposalParameter.iou_threshold)
  return _internal_iou_threshold();
}
inline void RegionProposalParameter::_internal_set_iou_threshold(float value) {
  _has_bits_[0] |= 0x00000004u;
  iou_threshold_ = value;
}
inline void RegionProposalParameter::set_iou_threshold(float value) {
  _internal_set_iou_threshold(value);
  // @@protoc_insertion_point(field_set:trtcaffe.RegionProposalParameter.iou_threshold)
}

// optional float min_box_size = 4;
inline bool RegionProposalParameter::_internal_has_min_box_size() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool RegionProposalParameter::has_min_box_size() const {
  return _internal_has_min_box_size();
}
inline void RegionProposalParameter::clear_min_box_size() {
  min_box_size_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline float RegionProposalParameter::_internal_min_box_size() const {
  return min_box_size_;
}
inline float RegionProposalParameter::min_box_size() const {
  // @@protoc_insertion_point(field_get:trtcaffe.RegionProposalParameter.min_box_size)
  return _internal_min_box_size();
}
inline void RegionProposalParameter::_internal_set_min_box_size(float value) {
  _has_bits_[0] |= 0x00000008u;
  min_box_size_ = value;
}
inline void RegionProposalParameter::set_min_box_size(float value) {
  _internal_set_min_box_size(value);
  // @@protoc_insertion_point(field_set:trtcaffe.RegionProposalParameter.min_box_size)
}

// optional uint32 feature_stride = 5;
inline bool RegionProposalParameter::_internal_has_feature_stride() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool RegionProposalParameter::has_feature_stride() const {
  return _internal_has_feature_stride();
}
inline void RegionProposalParameter::clear_feature_stride() {
  feature_stride_ = 0u;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RegionProposalParameter::_internal_feature_stride() const {
  return feature_stride_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RegionProposalParameter::feature_stride() const {
  // @@protoc_insertion_point(field_get:trtcaffe.RegionProposalParameter.feature_stride)
  return _internal_feature_stride();
}
inline void RegionProposalParameter::_internal_set_feature_stride(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000010u;
  feature_stride_ = value;
}
inline void RegionProposalParameter::set_feature_stride(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_feature_stride(value);
  // @@protoc_insertion_point(field_set:trtcaffe.RegionProposalParameter.feature_stride)
}

// optional uint32 anchor_ratio_count = 6 [default = 1];
inline bool RegionProposalParameter::_internal_has_anchor_ratio_count() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool RegionProposalParameter::has_anchor_ratio_count() const {
  return _internal_has_anchor_ratio_count();
}
inline void RegionProposalParameter::clear_anchor_ratio_count() {
  anchor_ratio_count_ = 1u;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RegionProposalParameter::_internal_anchor_ratio_count() const {
  return anchor_ratio_count_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RegionProposalParameter::anchor_ratio_count() const {
  // @@protoc_insertion_point(field_get:trtcaffe.RegionProposalParameter.anchor_ratio_count)
  return _internal_anchor_ratio_count();
}
inline void RegionProposalParameter::_internal_set_anchor_ratio_count(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000020u;
  anchor_ratio_count_ = value;
}
inline void RegionProposalParameter::set_anchor_ratio_count(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_anchor_ratio_count(value);
  // @@protoc_insertion_point(field_set:trtcaffe.RegionProposalParameter.anchor_ratio_count)
}

// optional uint32 anchor_scale_count = 7 [default = 1];
inline bool RegionProposalParameter::_internal_has_anchor_scale_count() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool RegionProposalParameter::has_anchor_scale_count() const {
  return _internal_has_anchor_scale_count();
}
inline void RegionProposalParameter::clear_anchor_scale_count() {
  anchor_scale_count_ = 1u;
  _has_bits_[0] &= ~0x00000040u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RegionProposalParameter::_internal_anchor_scale_count() const {
  return anchor_scale_count_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RegionProposalParameter::anchor_scale_count() const {
  // @@protoc_insertion_point(field_get:trtcaffe.RegionProposalParameter.anchor_scale_count)
  return _internal_anchor_scale_count();
}
inline void RegionProposalParameter::_internal_set_anchor_scale_count(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000040u;
  anchor_scale_count_ = value;
}
inline void RegionProposalParameter::set_anchor_scale_count(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_anchor_scale_count(value);
  // @@protoc_insertion_point(field_set:trtcaffe.RegionProposalParameter.anchor_scale_count)
}

// repeated float anchor_ratio = 8;
inline int RegionProposalParameter::_internal_anchor_ratio_size() const {
  return anchor_ratio_.size();
}
inline int RegionProposalParameter::anchor_ratio_size() const {
  return _internal_anchor_ratio_size();
}
inline void RegionProposalParameter::clear_anchor_ratio() {
  anchor_ratio_.Clear();
}
inline float RegionProposalParameter::_internal_anchor_ratio(int index) const {
  return anchor_ratio_.Get(index);
}
inline float RegionProposalParameter::anchor_ratio(int index) const {
  // @@protoc_insertion_point(field_get:trtcaffe.RegionProposalParameter.anchor_ratio)
  return _internal_anchor_ratio(index);
}
inline void RegionProposalParameter::set_anchor_ratio(int index, float value) {
  anchor_ratio_.Set(index, value);
  // @@protoc_insertion_point(field_set:trtcaffe.RegionProposalParameter.anchor_ratio)
}
inline void RegionProposalParameter::_internal_add_anchor_ratio(float value) {
  anchor_ratio_.Add(value);
}
inline void RegionProposalParameter::add_anchor_ratio(float value) {
  _internal_add_anchor_ratio(value);
  // @@protoc_insertion_point(field_add:trtcaffe.RegionProposalParameter.anchor_ratio)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
RegionProposalParameter::_internal_anchor_ratio() const {
  return anchor_ratio_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
RegionProposalParameter::anchor_ratio() const {
  // @@protoc_insertion_point(field_list:trtcaffe.RegionProposalParameter.anchor_ratio)
  return _internal_anchor_ratio();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
RegionProposalParameter::_internal_mutable_anchor_ratio() {
  return &anchor_ratio_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
RegionProposalParameter::mutable_anchor_ratio() {
  // @@protoc_insertion_point(field_mutable_list:trtcaffe.RegionProposalParameter.anchor_ratio)
  return _internal_mutable_anchor_ratio();
}

// repeated float anchor_scale = 9;
inline int RegionProposalParameter::_internal_anchor_scale_size() const {
  return anchor_scale_.size();
}
inline int RegionProposalParameter::anchor_scale_size() const {
  return _internal_anchor_scale_size();
}
inline void RegionProposalParameter::clear_anchor_scale() {
  anchor_scale_.Clear();
}
inline float RegionProposalParameter::_internal_anchor_scale(int index) const {
  return anchor_scale_.Get(index);
}
inline float RegionProposalParameter::anchor_scale(int index) const {
  // @@protoc_insertion_point(field_get:trtcaffe.RegionProposalParameter.anchor_scale)
  return _internal_anchor_scale(index);
}
inline void RegionProposalParameter::set_anchor_scale(int index, float value) {
  anchor_scale_.Set(index, value);
  // @@protoc_insertion_point(field_set:trtcaffe.RegionProposalParameter.anchor_scale)
}
inline void RegionProposalParameter::_internal_add_anchor_scale(float value) {
  anchor_scale_.Add(value);
}
inline void RegionProposalParameter::add_anchor_scale(float value) {
  _internal_add_anchor_scale(value);
  // @@protoc_insertion_point(field_add:trtcaffe.RegionProposalParameter.anchor_scale)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
RegionProposalParameter::_internal_anchor_scale() const {
  return anchor_scale_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
RegionProposalParameter::anchor_scale() const {
  // @@protoc_insertion_point(field_list:trtcaffe.RegionProposalParameter.anchor_scale)
  return _internal_anchor_scale();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
RegionProposalParameter::_internal_mutable_anchor_scale() {
  return &anchor_scale_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
RegionProposalParameter::mutable_anchor_scale() {
  // @@protoc_insertion_point(field_mutable_list:trtcaffe.RegionProposalParameter.anchor_scale)
  return _internal_mutable_anchor_scale();
}

// -------------------------------------------------------------------

// PythonParameter

// optional string module = 1;
inline bool PythonParameter::_internal_has_module() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool PythonParameter::has_module() const {
  return _internal_has_module();
}
inline void PythonParameter::clear_module() {
  module_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& PythonParameter::module() const {
  // @@protoc_insertion_point(field_get:trtcaffe.PythonParameter.module)
  return _internal_module();
}
inline void PythonParameter::set_module(const std::string& value) {
  _internal_set_module(value);
  // @@protoc_insertion_point(field_set:trtcaffe.PythonParameter.module)
}
inline std::string* PythonParameter::mutable_module() {
  // @@protoc_insertion_point(field_mutable:trtcaffe.PythonParameter.module)
  return _internal_mutable_module();
}
inline const std::string& PythonParameter::_internal_module() const {
  return module_.Get();
}
inline void PythonParameter::_internal_set_module(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  module_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void PythonParameter::set_module(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  module_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:trtcaffe.PythonParameter.module)
}
inline void PythonParameter::set_module(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  module_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:trtcaffe.PythonParameter.module)
}
inline void PythonParameter::set_module(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  module_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:trtcaffe.PythonParameter.module)
}
inline std::string* PythonParameter::_internal_mutable_module() {
  _has_bits_[0] |= 0x00000001u;
  return module_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* PythonParameter::release_module() {
  // @@protoc_insertion_point(field_release:trtcaffe.PythonParameter.module)
  if (!_internal_has_module()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return module_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PythonParameter::set_allocated_module(std::string* module) {
  if (module != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  module_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), module,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:trtcaffe.PythonParameter.module)
}
inline std::string* PythonParameter::unsafe_arena_release_module() {
  // @@protoc_insertion_point(field_unsafe_arena_release:trtcaffe.PythonParameter.module)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000001u;
  return module_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void PythonParameter::unsafe_arena_set_allocated_module(
    std::string* module) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (module != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  module_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      module, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:trtcaffe.PythonParameter.module)
}

// optional string layer = 2;
inline bool PythonParameter::_internal_has_layer() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool PythonParameter::has_layer() const {
  return _internal_has_layer();
}
inline void PythonParameter::clear_layer() {
  layer_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& PythonParameter::layer() const {
  // @@protoc_insertion_point(field_get:trtcaffe.PythonParameter.layer)
  return _internal_layer();
}
inline void PythonParameter::set_layer(const std::string& value) {
  _internal_set_layer(value);
  // @@protoc_insertion_point(field_set:trtcaffe.PythonParameter.layer)
}
inline std::string* PythonParameter::mutable_layer() {
  // @@protoc_insertion_point(field_mutable:trtcaffe.PythonParameter.layer)
  return _internal_mutable_layer();
}
inline const std::string& PythonParameter::_internal_layer() const {
  return layer_.Get();
}
inline void PythonParameter::_internal_set_layer(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  layer_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void PythonParameter::set_layer(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  layer_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:trtcaffe.PythonParameter.layer)
}
inline void PythonParameter::set_layer(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  layer_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:trtcaffe.PythonParameter.layer)
}
inline void PythonParameter::set_layer(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  layer_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:trtcaffe.PythonParameter.layer)
}
inline std::string* PythonParameter::_internal_mutable_layer() {
  _has_bits_[0] |= 0x00000002u;
  return layer_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* PythonParameter::release_layer() {
  // @@protoc_insertion_point(field_release:trtcaffe.PythonParameter.layer)
  if (!_internal_has_layer()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return layer_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PythonParameter::set_allocated_layer(std::string* layer) {
  if (layer != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  layer_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), layer,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:trtcaffe.PythonParameter.layer)
}
inline std::string* PythonParameter::unsafe_arena_release_layer() {
  // @@protoc_insertion_point(field_unsafe_arena_release:trtcaffe.PythonParameter.layer)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000002u;
  return layer_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void PythonParameter::unsafe_arena_set_allocated_layer(
    std::string* layer) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (layer != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  layer_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      layer, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:trtcaffe.PythonParameter.layer)
}

// optional string param_str = 3 [default = ""];
inline bool PythonParameter::_internal_has_param_str() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool PythonParameter::has_param_str() const {
  return _internal_has_param_str();
}
inline void PythonParameter::clear_param_str() {
  param_str_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& PythonParameter::param_str() const {
  // @@protoc_insertion_point(field_get:trtcaffe.PythonParameter.param_str)
  return _internal_param_str();
}
inline void PythonParameter::set_param_str(const std::string& value) {
  _internal_set_param_str(value);
  // @@protoc_insertion_point(field_set:trtcaffe.PythonParameter.param_str)
}
inline std::string* PythonParameter::mutable_param_str() {
  // @@protoc_insertion_point(field_mutable:trtcaffe.PythonParameter.param_str)
  return _internal_mutable_param_str();
}
inline const std::string& PythonParameter::_internal_param_str() const {
  return param_str_.Get();
}
inline void PythonParameter::_internal_set_param_str(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  param_str_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void PythonParameter::set_param_str(std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  param_str_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:trtcaffe.PythonParameter.param_str)
}
inline void PythonParameter::set_param_str(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  param_str_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:trtcaffe.PythonParameter.param_str)
}
inline void PythonParameter::set_param_str(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000004u;
  param_str_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:trtcaffe.PythonParameter.param_str)
}
inline std::string* PythonParameter::_internal_mutable_param_str() {
  _has_bits_[0] |= 0x00000004u;
  return param_str_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* PythonParameter::release_param_str() {
  // @@protoc_insertion_point(field_release:trtcaffe.PythonParameter.param_str)
  if (!_internal_has_param_str()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return param_str_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PythonParameter::set_allocated_param_str(std::string* param_str) {
  if (param_str != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  param_str_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), param_str,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:trtcaffe.PythonParameter.param_str)
}
inline std::string* PythonParameter::unsafe_arena_release_param_str() {
  // @@protoc_insertion_point(field_unsafe_arena_release:trtcaffe.PythonParameter.param_str)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000004u;
  return param_str_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void PythonParameter::unsafe_arena_set_allocated_param_str(
    std::string* param_str) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (param_str != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  param_str_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      param_str, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:trtcaffe.PythonParameter.param_str)
}

// optional bool share_in_parallel = 4 [default = false];
inline bool PythonParameter::_internal_has_share_in_parallel() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool PythonParameter::has_share_in_parallel() const {
  return _internal_has_share_in_parallel();
}
inline void PythonParameter::clear_share_in_parallel() {
  share_in_parallel_ = false;
  _has_bits_[0] &= ~0x00000008u;
}
inline bool PythonParameter::_internal_share_in_parallel() const {
  return share_in_parallel_;
}
inline bool PythonParameter::share_in_parallel() const {
  // @@protoc_insertion_point(field_get:trtcaffe.PythonParameter.share_in_parallel)
  return _internal_share_in_parallel();
}
inline void PythonParameter::_internal_set_share_in_parallel(bool value) {
  _has_bits_[0] |= 0x00000008u;
  share_in_parallel_ = value;
}
inline void PythonParameter::set_share_in_parallel(bool value) {
  _internal_set_share_in_parallel(value);
  // @@protoc_insertion_point(field_set:trtcaffe.PythonParameter.share_in_parallel)
}

// -------------------------------------------------------------------

// ReductionParameter

// optional .trtcaffe.ReductionParameter.ReductionOp operation = 1 [default = SUM];
inline bool ReductionParameter::_internal_has_operation() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ReductionParameter::has_operation() const {
  return _internal_has_operation();
}
inline void ReductionParameter::clear_operation() {
  operation_ = 1;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::trtcaffe::ReductionParameter_ReductionOp ReductionParameter::_internal_operation() const {
  return static_cast< ::trtcaffe::ReductionParameter_ReductionOp >(operation_);
}
inline ::trtcaffe::ReductionParameter_ReductionOp ReductionParameter::operation() const {
  // @@protoc_insertion_point(field_get:trtcaffe.ReductionParameter.operation)
  return _internal_operation();
}
inline void ReductionParameter::_internal_set_operation(::trtcaffe::ReductionParameter_ReductionOp value) {
  assert(::trtcaffe::ReductionParameter_ReductionOp_IsValid(value));
  _has_bits_[0] |= 0x00000002u;
  operation_ = value;
}
inline void ReductionParameter::set_operation(::trtcaffe::ReductionParameter_ReductionOp value) {
  _internal_set_operation(value);
  // @@protoc_insertion_point(field_set:trtcaffe.ReductionParameter.operation)
}

// optional int32 axis = 2 [default = 0];
inline bool ReductionParameter::_internal_has_axis() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ReductionParameter::has_axis() const {
  return _internal_has_axis();
}
inline void ReductionParameter::clear_axis() {
  axis_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ReductionParameter::_internal_axis() const {
  return axis_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ReductionParameter::axis() const {
  // @@protoc_insertion_point(field_get:trtcaffe.ReductionParameter.axis)
  return _internal_axis();
}
inline void ReductionParameter::_internal_set_axis(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000001u;
  axis_ = value;
}
inline void ReductionParameter::set_axis(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_axis(value);
  // @@protoc_insertion_point(field_set:trtcaffe.ReductionParameter.axis)
}

// optional float coeff = 3 [default = 1];
inline bool ReductionParameter::_internal_has_coeff() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool ReductionParameter::has_coeff() const {
  return _internal_has_coeff();
}
inline void ReductionParameter::clear_coeff() {
  coeff_ = 1;
  _has_bits_[0] &= ~0x00000004u;
}
inline float ReductionParameter::_internal_coeff() const {
  return coeff_;
}
inline float ReductionParameter::coeff() const {
  // @@protoc_insertion_point(field_get:trtcaffe.ReductionParameter.coeff)
  return _internal_coeff();
}
inline void ReductionParameter::_internal_set_coeff(float value) {
  _has_bits_[0] |= 0x00000004u;
  coeff_ = value;
}
inline void ReductionParameter::set_coeff(float value) {
  _internal_set_coeff(value);
  // @@protoc_insertion_point(field_set:trtcaffe.ReductionParameter.coeff)
}

// -------------------------------------------------------------------

// ReLUParameter

// optional float negative_slope = 1 [default = 0];
inline bool ReLUParameter::_internal_has_negative_slope() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ReLUParameter::has_negative_slope() const {
  return _internal_has_negative_slope();
}
inline void ReLUParameter::clear_negative_slope() {
  negative_slope_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline float ReLUParameter::_internal_negative_slope() const {
  return negative_slope_;
}
inline float ReLUParameter::negative_slope() const {
  // @@protoc_insertion_point(field_get:trtcaffe.ReLUParameter.negative_slope)
  return _internal_negative_slope();
}
inline void ReLUParameter::_internal_set_negative_slope(float value) {
  _has_bits_[0] |= 0x00000001u;
  negative_slope_ = value;
}
inline void ReLUParameter::set_negative_slope(float value) {
  _internal_set_negative_slope(value);
  // @@protoc_insertion_point(field_set:trtcaffe.ReLUParameter.negative_slope)
}

// optional .trtcaffe.ReLUParameter.Engine engine = 2 [default = DEFAULT];
inline bool ReLUParameter::_internal_has_engine() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ReLUParameter::has_engine() const {
  return _internal_has_engine();
}
inline void ReLUParameter::clear_engine() {
  engine_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::trtcaffe::ReLUParameter_Engine ReLUParameter::_internal_engine() const {
  return static_cast< ::trtcaffe::ReLUParameter_Engine >(engine_);
}
inline ::trtcaffe::ReLUParameter_Engine ReLUParameter::engine() const {
  // @@protoc_insertion_point(field_get:trtcaffe.ReLUParameter.engine)
  return _internal_engine();
}
inline void ReLUParameter::_internal_set_engine(::trtcaffe::ReLUParameter_Engine value) {
  assert(::trtcaffe::ReLUParameter_Engine_IsValid(value));
  _has_bits_[0] |= 0x00000002u;
  engine_ = value;
}
inline void ReLUParameter::set_engine(::trtcaffe::ReLUParameter_Engine value) {
  _internal_set_engine(value);
  // @@protoc_insertion_point(field_set:trtcaffe.ReLUParameter.engine)
}

// -------------------------------------------------------------------

// ReshapeParameter

// optional .trtcaffe.BlobShape shape = 1;
inline bool ReshapeParameter::_internal_has_shape() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || shape_ != nullptr);
  return value;
}
inline bool ReshapeParameter::has_shape() const {
  return _internal_has_shape();
}
inline void ReshapeParameter::clear_shape() {
  if (shape_ != nullptr) shape_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::trtcaffe::BlobShape& ReshapeParameter::_internal_shape() const {
  const ::trtcaffe::BlobShape* p = shape_;
  return p != nullptr ? *p : *reinterpret_cast<const ::trtcaffe::BlobShape*>(
      &::trtcaffe::_BlobShape_default_instance_);
}
inline const ::trtcaffe::BlobShape& ReshapeParameter::shape() const {
  // @@protoc_insertion_point(field_get:trtcaffe.ReshapeParameter.shape)
  return _internal_shape();
}
inline void ReshapeParameter::unsafe_arena_set_allocated_shape(
    ::trtcaffe::BlobShape* shape) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(shape_);
  }
  shape_ = shape;
  if (shape) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:trtcaffe.ReshapeParameter.shape)
}
inline ::trtcaffe::BlobShape* ReshapeParameter::release_shape() {
  auto temp = unsafe_arena_release_shape();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::trtcaffe::BlobShape* ReshapeParameter::unsafe_arena_release_shape() {
  // @@protoc_insertion_point(field_release:trtcaffe.ReshapeParameter.shape)
  _has_bits_[0] &= ~0x00000001u;
  ::trtcaffe::BlobShape* temp = shape_;
  shape_ = nullptr;
  return temp;
}
inline ::trtcaffe::BlobShape* ReshapeParameter::_internal_mutable_shape() {
  _has_bits_[0] |= 0x00000001u;
  if (shape_ == nullptr) {
    auto* p = CreateMaybeMessage<::trtcaffe::BlobShape>(GetArena());
    shape_ = p;
  }
  return shape_;
}
inline ::trtcaffe::BlobShape* ReshapeParameter::mutable_shape() {
  // @@protoc_insertion_point(field_mutable:trtcaffe.ReshapeParameter.shape)
  return _internal_mutable_shape();
}
inline void ReshapeParameter::set_allocated_shape(::trtcaffe::BlobShape* shape) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete shape_;
  }
  if (shape) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(shape);
    if (message_arena != submessage_arena) {
      shape = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, shape, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  shape_ = shape;
  // @@protoc_insertion_point(field_set_allocated:trtcaffe.ReshapeParameter.shape)
}

// optional int32 axis = 2 [default = 0];
inline bool ReshapeParameter::_internal_has_axis() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ReshapeParameter::has_axis() const {
  return _internal_has_axis();
}
inline void ReshapeParameter::clear_axis() {
  axis_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ReshapeParameter::_internal_axis() const {
  return axis_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ReshapeParameter::axis() const {
  // @@protoc_insertion_point(field_get:trtcaffe.ReshapeParameter.axis)
  return _internal_axis();
}
inline void ReshapeParameter::_internal_set_axis(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  axis_ = value;
}
inline void ReshapeParameter::set_axis(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_axis(value);
  // @@protoc_insertion_point(field_set:trtcaffe.ReshapeParameter.axis)
}

// optional int32 num_axes = 3 [default = -1];
inline bool ReshapeParameter::_internal_has_num_axes() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool ReshapeParameter::has_num_axes() const {
  return _internal_has_num_axes();
}
inline void ReshapeParameter::clear_num_axes() {
  num_axes_ = -1;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ReshapeParameter::_internal_num_axes() const {
  return num_axes_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ReshapeParameter::num_axes() const {
  // @@protoc_insertion_point(field_get:trtcaffe.ReshapeParameter.num_axes)
  return _internal_num_axes();
}
inline void ReshapeParameter::_internal_set_num_axes(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000004u;
  num_axes_ = value;
}
inline void ReshapeParameter::set_num_axes(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_num_axes(value);
  // @@protoc_insertion_point(field_set:trtcaffe.ReshapeParameter.num_axes)
}

// -------------------------------------------------------------------

// ScaleParameter

// optional int32 axis = 1 [default = 1];
inline bool ScaleParameter::_internal_has_axis() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool ScaleParameter::has_axis() const {
  return _internal_has_axis();
}
inline void ScaleParameter::clear_axis() {
  axis_ = 1;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ScaleParameter::_internal_axis() const {
  return axis_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ScaleParameter::axis() const {
  // @@protoc_insertion_point(field_get:trtcaffe.ScaleParameter.axis)
  return _internal_axis();
}
inline void ScaleParameter::_internal_set_axis(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000008u;
  axis_ = value;
}
inline void ScaleParameter::set_axis(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_axis(value);
  // @@protoc_insertion_point(field_set:trtcaffe.ScaleParameter.axis)
}

// optional int32 num_axes = 2 [default = 1];
inline bool ScaleParameter::_internal_has_num_axes() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool ScaleParameter::has_num_axes() const {
  return _internal_has_num_axes();
}
inline void ScaleParameter::clear_num_axes() {
  num_axes_ = 1;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ScaleParameter::_internal_num_axes() const {
  return num_axes_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ScaleParameter::num_axes() const {
  // @@protoc_insertion_point(field_get:trtcaffe.ScaleParameter.num_axes)
  return _internal_num_axes();
}
inline void ScaleParameter::_internal_set_num_axes(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000010u;
  num_axes_ = value;
}
inline void ScaleParameter::set_num_axes(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_num_axes(value);
  // @@protoc_insertion_point(field_set:trtcaffe.ScaleParameter.num_axes)
}

// optional .trtcaffe.FillerParameter filler = 3;
inline bool ScaleParameter::_internal_has_filler() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || filler_ != nullptr);
  return value;
}
inline bool ScaleParameter::has_filler() const {
  return _internal_has_filler();
}
inline void ScaleParameter::clear_filler() {
  if (filler_ != nullptr) filler_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::trtcaffe::FillerParameter& ScaleParameter::_internal_filler() const {
  const ::trtcaffe::FillerParameter* p = filler_;
  return p != nullptr ? *p : *reinterpret_cast<const ::trtcaffe::FillerParameter*>(
      &::trtcaffe::_FillerParameter_default_instance_);
}
inline const ::trtcaffe::FillerParameter& ScaleParameter::filler() const {
  // @@protoc_insertion_point(field_get:trtcaffe.ScaleParameter.filler)
  return _internal_filler();
}
inline void ScaleParameter::unsafe_arena_set_allocated_filler(
    ::trtcaffe::FillerParameter* filler) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(filler_);
  }
  filler_ = filler;
  if (filler) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:trtcaffe.ScaleParameter.filler)
}
inline ::trtcaffe::FillerParameter* ScaleParameter::release_filler() {
  auto temp = unsafe_arena_release_filler();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::trtcaffe::FillerParameter* ScaleParameter::unsafe_arena_release_filler() {
  // @@protoc_insertion_point(field_release:trtcaffe.ScaleParameter.filler)
  _has_bits_[0] &= ~0x00000001u;
  ::trtcaffe::FillerParameter* temp = filler_;
  filler_ = nullptr;
  return temp;
}
inline ::trtcaffe::FillerParameter* ScaleParameter::_internal_mutable_filler() {
  _has_bits_[0] |= 0x00000001u;
  if (filler_ == nullptr) {
    auto* p = CreateMaybeMessage<::trtcaffe::FillerParameter>(GetArena());
    filler_ = p;
  }
  return filler_;
}
inline ::trtcaffe::FillerParameter* ScaleParameter::mutable_filler() {
  // @@protoc_insertion_point(field_mutable:trtcaffe.ScaleParameter.filler)
  return _internal_mutable_filler();
}
inline void ScaleParameter::set_allocated_filler(::trtcaffe::FillerParameter* filler) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete filler_;
  }
  if (filler) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(filler);
    if (message_arena != submessage_arena) {
      filler = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, filler, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  filler_ = filler;
  // @@protoc_insertion_point(field_set_allocated:trtcaffe.ScaleParameter.filler)
}

// optional bool bias_term = 4 [default = false];
inline bool ScaleParameter::_internal_has_bias_term() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool ScaleParameter::has_bias_term() const {
  return _internal_has_bias_term();
}
inline void ScaleParameter::clear_bias_term() {
  bias_term_ = false;
  _has_bits_[0] &= ~0x00000004u;
}
inline bool ScaleParameter::_internal_bias_term() const {
  return bias_term_;
}
inline bool ScaleParameter::bias_term() const {
  // @@protoc_insertion_point(field_get:trtcaffe.ScaleParameter.bias_term)
  return _internal_bias_term();
}
inline void ScaleParameter::_internal_set_bias_term(bool value) {
  _has_bits_[0] |= 0x00000004u;
  bias_term_ = value;
}
inline void ScaleParameter::set_bias_term(bool value) {
  _internal_set_bias_term(value);
  // @@protoc_insertion_point(field_set:trtcaffe.ScaleParameter.bias_term)
}

// optional .trtcaffe.FillerParameter bias_filler = 5;
inline bool ScaleParameter::_internal_has_bias_filler() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || bias_filler_ != nullptr);
  return value;
}
inline bool ScaleParameter::has_bias_filler() const {
  return _internal_has_bias_filler();
}
inline void ScaleParameter::clear_bias_filler() {
  if (bias_filler_ != nullptr) bias_filler_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::trtcaffe::FillerParameter& ScaleParameter::_internal_bias_filler() const {
  const ::trtcaffe::FillerParameter* p = bias_filler_;
  return p != nullptr ? *p : *reinterpret_cast<const ::trtcaffe::FillerParameter*>(
      &::trtcaffe::_FillerParameter_default_instance_);
}
inline const ::trtcaffe::FillerParameter& ScaleParameter::bias_filler() const {
  // @@protoc_insertion_point(field_get:trtcaffe.ScaleParameter.bias_filler)
  return _internal_bias_filler();
}
inline void ScaleParameter::unsafe_arena_set_allocated_bias_filler(
    ::trtcaffe::FillerParameter* bias_filler) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(bias_filler_);
  }
  bias_filler_ = bias_filler;
  if (bias_filler) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:trtcaffe.ScaleParameter.bias_filler)
}
inline ::trtcaffe::FillerParameter* ScaleParameter::release_bias_filler() {
  auto temp = unsafe_arena_release_bias_filler();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::trtcaffe::FillerParameter* ScaleParameter::unsafe_arena_release_bias_filler() {
  // @@protoc_insertion_point(field_release:trtcaffe.ScaleParameter.bias_filler)
  _has_bits_[0] &= ~0x00000002u;
  ::trtcaffe::FillerParameter* temp = bias_filler_;
  bias_filler_ = nullptr;
  return temp;
}
inline ::trtcaffe::FillerParameter* ScaleParameter::_internal_mutable_bias_filler() {
  _has_bits_[0] |= 0x00000002u;
  if (bias_filler_ == nullptr) {
    auto* p = CreateMaybeMessage<::trtcaffe::FillerParameter>(GetArena());
    bias_filler_ = p;
  }
  return bias_filler_;
}
inline ::trtcaffe::FillerParameter* ScaleParameter::mutable_bias_filler() {
  // @@protoc_insertion_point(field_mutable:trtcaffe.ScaleParameter.bias_filler)
  return _internal_mutable_bias_filler();
}
inline void ScaleParameter::set_allocated_bias_filler(::trtcaffe::FillerParameter* bias_filler) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete bias_filler_;
  }
  if (bias_filler) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(bias_filler);
    if (message_arena != submessage_arena) {
      bias_filler = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, bias_filler, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  bias_filler_ = bias_filler;
  // @@protoc_insertion_point(field_set_allocated:trtcaffe.ScaleParameter.bias_filler)
}

// -------------------------------------------------------------------

// SigmoidParameter

// optional .trtcaffe.SigmoidParameter.Engine engine = 1 [default = DEFAULT];
inline bool SigmoidParameter::_internal_has_engine() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool SigmoidParameter::has_engine() const {
  return _internal_has_engine();
}
inline void SigmoidParameter::clear_engine() {
  engine_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::trtcaffe::SigmoidParameter_Engine SigmoidParameter::_internal_engine() const {
  return static_cast< ::trtcaffe::SigmoidParameter_Engine >(engine_);
}
inline ::trtcaffe::SigmoidParameter_Engine SigmoidParameter::engine() const {
  // @@protoc_insertion_point(field_get:trtcaffe.SigmoidParameter.engine)
  return _internal_engine();
}
inline void SigmoidParameter::_internal_set_engine(::trtcaffe::SigmoidParameter_Engine value) {
  assert(::trtcaffe::SigmoidParameter_Engine_IsValid(value));
  _has_bits_[0] |= 0x00000001u;
  engine_ = value;
}
inline void SigmoidParameter::set_engine(::trtcaffe::SigmoidParameter_Engine value) {
  _internal_set_engine(value);
  // @@protoc_insertion_point(field_set:trtcaffe.SigmoidParameter.engine)
}

// -------------------------------------------------------------------

// SliceParameter

// optional int32 axis = 3 [default = 1];
inline bool SliceParameter::_internal_has_axis() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool SliceParameter::has_axis() const {
  return _internal_has_axis();
}
inline void SliceParameter::clear_axis() {
  axis_ = 1;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SliceParameter::_internal_axis() const {
  return axis_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SliceParameter::axis() const {
  // @@protoc_insertion_point(field_get:trtcaffe.SliceParameter.axis)
  return _internal_axis();
}
inline void SliceParameter::_internal_set_axis(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  axis_ = value;
}
inline void SliceParameter::set_axis(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_axis(value);
  // @@protoc_insertion_point(field_set:trtcaffe.SliceParameter.axis)
}

// repeated uint32 slice_point = 2;
inline int SliceParameter::_internal_slice_point_size() const {
  return slice_point_.size();
}
inline int SliceParameter::slice_point_size() const {
  return _internal_slice_point_size();
}
inline void SliceParameter::clear_slice_point() {
  slice_point_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SliceParameter::_internal_slice_point(int index) const {
  return slice_point_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SliceParameter::slice_point(int index) const {
  // @@protoc_insertion_point(field_get:trtcaffe.SliceParameter.slice_point)
  return _internal_slice_point(index);
}
inline void SliceParameter::set_slice_point(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  slice_point_.Set(index, value);
  // @@protoc_insertion_point(field_set:trtcaffe.SliceParameter.slice_point)
}
inline void SliceParameter::_internal_add_slice_point(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  slice_point_.Add(value);
}
inline void SliceParameter::add_slice_point(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_add_slice_point(value);
  // @@protoc_insertion_point(field_add:trtcaffe.SliceParameter.slice_point)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
SliceParameter::_internal_slice_point() const {
  return slice_point_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
SliceParameter::slice_point() const {
  // @@protoc_insertion_point(field_list:trtcaffe.SliceParameter.slice_point)
  return _internal_slice_point();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
SliceParameter::_internal_mutable_slice_point() {
  return &slice_point_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
SliceParameter::mutable_slice_point() {
  // @@protoc_insertion_point(field_mutable_list:trtcaffe.SliceParameter.slice_point)
  return _internal_mutable_slice_point();
}

// optional uint32 slice_dim = 1 [default = 1];
inline bool SliceParameter::_internal_has_slice_dim() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool SliceParameter::has_slice_dim() const {
  return _internal_has_slice_dim();
}
inline void SliceParameter::clear_slice_dim() {
  slice_dim_ = 1u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SliceParameter::_internal_slice_dim() const {
  return slice_dim_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SliceParameter::slice_dim() const {
  // @@protoc_insertion_point(field_get:trtcaffe.SliceParameter.slice_dim)
  return _internal_slice_dim();
}
inline void SliceParameter::_internal_set_slice_dim(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  slice_dim_ = value;
}
inline void SliceParameter::set_slice_dim(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_slice_dim(value);
  // @@protoc_insertion_point(field_set:trtcaffe.SliceParameter.slice_dim)
}

// -------------------------------------------------------------------

// SoftmaxParameter

// optional .trtcaffe.SoftmaxParameter.Engine engine = 1 [default = DEFAULT];
inline bool SoftmaxParameter::_internal_has_engine() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool SoftmaxParameter::has_engine() const {
  return _internal_has_engine();
}
inline void SoftmaxParameter::clear_engine() {
  engine_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::trtcaffe::SoftmaxParameter_Engine SoftmaxParameter::_internal_engine() const {
  return static_cast< ::trtcaffe::SoftmaxParameter_Engine >(engine_);
}
inline ::trtcaffe::SoftmaxParameter_Engine SoftmaxParameter::engine() const {
  // @@protoc_insertion_point(field_get:trtcaffe.SoftmaxParameter.engine)
  return _internal_engine();
}
inline void SoftmaxParameter::_internal_set_engine(::trtcaffe::SoftmaxParameter_Engine value) {
  assert(::trtcaffe::SoftmaxParameter_Engine_IsValid(value));
  _has_bits_[0] |= 0x00000001u;
  engine_ = value;
}
inline void SoftmaxParameter::set_engine(::trtcaffe::SoftmaxParameter_Engine value) {
  _internal_set_engine(value);
  // @@protoc_insertion_point(field_set:trtcaffe.SoftmaxParameter.engine)
}

// optional int32 axis = 2 [default = 1];
inline bool SoftmaxParameter::_internal_has_axis() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool SoftmaxParameter::has_axis() const {
  return _internal_has_axis();
}
inline void SoftmaxParameter::clear_axis() {
  axis_ = 1;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SoftmaxParameter::_internal_axis() const {
  return axis_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SoftmaxParameter::axis() const {
  // @@protoc_insertion_point(field_get:trtcaffe.SoftmaxParameter.axis)
  return _internal_axis();
}
inline void SoftmaxParameter::_internal_set_axis(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  axis_ = value;
}
inline void SoftmaxParameter::set_axis(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_axis(value);
  // @@protoc_insertion_point(field_set:trtcaffe.SoftmaxParameter.axis)
}

// -------------------------------------------------------------------

// TanHParameter

// optional .trtcaffe.TanHParameter.Engine engine = 1 [default = DEFAULT];
inline bool TanHParameter::_internal_has_engine() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool TanHParameter::has_engine() const {
  return _internal_has_engine();
}
inline void TanHParameter::clear_engine() {
  engine_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::trtcaffe::TanHParameter_Engine TanHParameter::_internal_engine() const {
  return static_cast< ::trtcaffe::TanHParameter_Engine >(engine_);
}
inline ::trtcaffe::TanHParameter_Engine TanHParameter::engine() const {
  // @@protoc_insertion_point(field_get:trtcaffe.TanHParameter.engine)
  return _internal_engine();
}
inline void TanHParameter::_internal_set_engine(::trtcaffe::TanHParameter_Engine value) {
  assert(::trtcaffe::TanHParameter_Engine_IsValid(value));
  _has_bits_[0] |= 0x00000001u;
  engine_ = value;
}
inline void TanHParameter::set_engine(::trtcaffe::TanHParameter_Engine value) {
  _internal_set_engine(value);
  // @@protoc_insertion_point(field_set:trtcaffe.TanHParameter.engine)
}

// -------------------------------------------------------------------

// TileParameter

// optional int32 axis = 1 [default = 1];
inline bool TileParameter::_internal_has_axis() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool TileParameter::has_axis() const {
  return _internal_has_axis();
}
inline void TileParameter::clear_axis() {
  axis_ = 1;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TileParameter::_internal_axis() const {
  return axis_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TileParameter::axis() const {
  // @@protoc_insertion_point(field_get:trtcaffe.TileParameter.axis)
  return _internal_axis();
}
inline void TileParameter::_internal_set_axis(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  axis_ = value;
}
inline void TileParameter::set_axis(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_axis(value);
  // @@protoc_insertion_point(field_set:trtcaffe.TileParameter.axis)
}

// optional int32 tiles = 2;
inline bool TileParameter::_internal_has_tiles() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool TileParameter::has_tiles() const {
  return _internal_has_tiles();
}
inline void TileParameter::clear_tiles() {
  tiles_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TileParameter::_internal_tiles() const {
  return tiles_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TileParameter::tiles() const {
  // @@protoc_insertion_point(field_get:trtcaffe.TileParameter.tiles)
  return _internal_tiles();
}
inline void TileParameter::_internal_set_tiles(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000001u;
  tiles_ = value;
}
inline void TileParameter::set_tiles(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_tiles(value);
  // @@protoc_insertion_point(field_set:trtcaffe.TileParameter.tiles)
}

// -------------------------------------------------------------------

// ThresholdParameter

// optional float threshold = 1 [default = 0];
inline bool ThresholdParameter::_internal_has_threshold() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ThresholdParameter::has_threshold() const {
  return _internal_has_threshold();
}
inline void ThresholdParameter::clear_threshold() {
  threshold_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline float ThresholdParameter::_internal_threshold() const {
  return threshold_;
}
inline float ThresholdParameter::threshold() const {
  // @@protoc_insertion_point(field_get:trtcaffe.ThresholdParameter.threshold)
  return _internal_threshold();
}
inline void ThresholdParameter::_internal_set_threshold(float value) {
  _has_bits_[0] |= 0x00000001u;
  threshold_ = value;
}
inline void ThresholdParameter::set_threshold(float value) {
  _internal_set_threshold(value);
  // @@protoc_insertion_point(field_set:trtcaffe.ThresholdParameter.threshold)
}

// -------------------------------------------------------------------

// WindowDataParameter

// optional string source = 1;
inline bool WindowDataParameter::_internal_has_source() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool WindowDataParameter::has_source() const {
  return _internal_has_source();
}
inline void WindowDataParameter::clear_source() {
  source_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& WindowDataParameter::source() const {
  // @@protoc_insertion_point(field_get:trtcaffe.WindowDataParameter.source)
  return _internal_source();
}
inline void WindowDataParameter::set_source(const std::string& value) {
  _internal_set_source(value);
  // @@protoc_insertion_point(field_set:trtcaffe.WindowDataParameter.source)
}
inline std::string* WindowDataParameter::mutable_source() {
  // @@protoc_insertion_point(field_mutable:trtcaffe.WindowDataParameter.source)
  return _internal_mutable_source();
}
inline const std::string& WindowDataParameter::_internal_source() const {
  return source_.Get();
}
inline void WindowDataParameter::_internal_set_source(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  source_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void WindowDataParameter::set_source(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  source_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:trtcaffe.WindowDataParameter.source)
}
inline void WindowDataParameter::set_source(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  source_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:trtcaffe.WindowDataParameter.source)
}
inline void WindowDataParameter::set_source(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  source_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:trtcaffe.WindowDataParameter.source)
}
inline std::string* WindowDataParameter::_internal_mutable_source() {
  _has_bits_[0] |= 0x00000001u;
  return source_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* WindowDataParameter::release_source() {
  // @@protoc_insertion_point(field_release:trtcaffe.WindowDataParameter.source)
  if (!_internal_has_source()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return source_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void WindowDataParameter::set_allocated_source(std::string* source) {
  if (source != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  source_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), source,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:trtcaffe.WindowDataParameter.source)
}
inline std::string* WindowDataParameter::unsafe_arena_release_source() {
  // @@protoc_insertion_point(field_unsafe_arena_release:trtcaffe.WindowDataParameter.source)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000001u;
  return source_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void WindowDataParameter::unsafe_arena_set_allocated_source(
    std::string* source) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (source != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  source_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      source, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:trtcaffe.WindowDataParameter.source)
}

// optional float scale = 2 [default = 1];
inline bool WindowDataParameter::_internal_has_scale() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool WindowDataParameter::has_scale() const {
  return _internal_has_scale();
}
inline void WindowDataParameter::clear_scale() {
  scale_ = 1;
  _has_bits_[0] &= ~0x00000200u;
}
inline float WindowDataParameter::_internal_scale() const {
  return scale_;
}
inline float WindowDataParameter::scale() const {
  // @@protoc_insertion_point(field_get:trtcaffe.WindowDataParameter.scale)
  return _internal_scale();
}
inline void WindowDataParameter::_internal_set_scale(float value) {
  _has_bits_[0] |= 0x00000200u;
  scale_ = value;
}
inline void WindowDataParameter::set_scale(float value) {
  _internal_set_scale(value);
  // @@protoc_insertion_point(field_set:trtcaffe.WindowDataParameter.scale)
}

// optional string mean_file = 3;
inline bool WindowDataParameter::_internal_has_mean_file() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool WindowDataParameter::has_mean_file() const {
  return _internal_has_mean_file();
}
inline void WindowDataParameter::clear_mean_file() {
  mean_file_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& WindowDataParameter::mean_file() const {
  // @@protoc_insertion_point(field_get:trtcaffe.WindowDataParameter.mean_file)
  return _internal_mean_file();
}
inline void WindowDataParameter::set_mean_file(const std::string& value) {
  _internal_set_mean_file(value);
  // @@protoc_insertion_point(field_set:trtcaffe.WindowDataParameter.mean_file)
}
inline std::string* WindowDataParameter::mutable_mean_file() {
  // @@protoc_insertion_point(field_mutable:trtcaffe.WindowDataParameter.mean_file)
  return _internal_mutable_mean_file();
}
inline const std::string& WindowDataParameter::_internal_mean_file() const {
  return mean_file_.Get();
}
inline void WindowDataParameter::_internal_set_mean_file(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  mean_file_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void WindowDataParameter::set_mean_file(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  mean_file_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:trtcaffe.WindowDataParameter.mean_file)
}
inline void WindowDataParameter::set_mean_file(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  mean_file_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:trtcaffe.WindowDataParameter.mean_file)
}
inline void WindowDataParameter::set_mean_file(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  mean_file_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:trtcaffe.WindowDataParameter.mean_file)
}
inline std::string* WindowDataParameter::_internal_mutable_mean_file() {
  _has_bits_[0] |= 0x00000002u;
  return mean_file_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* WindowDataParameter::release_mean_file() {
  // @@protoc_insertion_point(field_release:trtcaffe.WindowDataParameter.mean_file)
  if (!_internal_has_mean_file()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return mean_file_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void WindowDataParameter::set_allocated_mean_file(std::string* mean_file) {
  if (mean_file != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  mean_file_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), mean_file,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:trtcaffe.WindowDataParameter.mean_file)
}
inline std::string* WindowDataParameter::unsafe_arena_release_mean_file() {
  // @@protoc_insertion_point(field_unsafe_arena_release:trtcaffe.WindowDataParameter.mean_file)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000002u;
  return mean_file_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void WindowDataParameter::unsafe_arena_set_allocated_mean_file(
    std::string* mean_file) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (mean_file != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  mean_file_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      mean_file, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:trtcaffe.WindowDataParameter.mean_file)
}

// optional uint32 batch_size = 4;
inline bool WindowDataParameter::_internal_has_batch_size() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool WindowDataParameter::has_batch_size() const {
  return _internal_has_batch_size();
}
inline void WindowDataParameter::clear_batch_size() {
  batch_size_ = 0u;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 WindowDataParameter::_internal_batch_size() const {
  return batch_size_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 WindowDataParameter::batch_size() const {
  // @@protoc_insertion_point(field_get:trtcaffe.WindowDataParameter.batch_size)
  return _internal_batch_size();
}
inline void WindowDataParameter::_internal_set_batch_size(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000010u;
  batch_size_ = value;
}
inline void WindowDataParameter::set_batch_size(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_batch_size(value);
  // @@protoc_insertion_point(field_set:trtcaffe.WindowDataParameter.batch_size)
}

// optional uint32 crop_size = 5 [default = 0];
inline bool WindowDataParameter::_internal_has_crop_size() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool WindowDataParameter::has_crop_size() const {
  return _internal_has_crop_size();
}
inline void WindowDataParameter::clear_crop_size() {
  crop_size_ = 0u;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 WindowDataParameter::_internal_crop_size() const {
  return crop_size_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 WindowDataParameter::crop_size() const {
  // @@protoc_insertion_point(field_get:trtcaffe.WindowDataParameter.crop_size)
  return _internal_crop_size();
}
inline void WindowDataParameter::_internal_set_crop_size(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000020u;
  crop_size_ = value;
}
inline void WindowDataParameter::set_crop_size(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_crop_size(value);
  // @@protoc_insertion_point(field_set:trtcaffe.WindowDataParameter.crop_size)
}

// optional bool mirror = 6 [default = false];
inline bool WindowDataParameter::_internal_has_mirror() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool WindowDataParameter::has_mirror() const {
  return _internal_has_mirror();
}
inline void WindowDataParameter::clear_mirror() {
  mirror_ = false;
  _has_bits_[0] &= ~0x00000040u;
}
inline bool WindowDataParameter::_internal_mirror() const {
  return mirror_;
}
inline bool WindowDataParameter::mirror() const {
  // @@protoc_insertion_point(field_get:trtcaffe.WindowDataParameter.mirror)
  return _internal_mirror();
}
inline void WindowDataParameter::_internal_set_mirror(bool value) {
  _has_bits_[0] |= 0x00000040u;
  mirror_ = value;
}
inline void WindowDataParameter::set_mirror(bool value) {
  _internal_set_mirror(value);
  // @@protoc_insertion_point(field_set:trtcaffe.WindowDataParameter.mirror)
}

// optional float fg_threshold = 7 [default = 0.5];
inline bool WindowDataParameter::_internal_has_fg_threshold() const {
  bool value = (_has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool WindowDataParameter::has_fg_threshold() const {
  return _internal_has_fg_threshold();
}
inline void WindowDataParameter::clear_fg_threshold() {
  fg_threshold_ = 0.5f;
  _has_bits_[0] &= ~0x00000400u;
}
inline float WindowDataParameter::_internal_fg_threshold() const {
  return fg_threshold_;
}
inline float WindowDataParameter::fg_threshold() const {
  // @@protoc_insertion_point(field_get:trtcaffe.WindowDataParameter.fg_threshold)
  return _internal_fg_threshold();
}
inline void WindowDataParameter::_internal_set_fg_threshold(float value) {
  _has_bits_[0] |= 0x00000400u;
  fg_threshold_ = value;
}
inline void WindowDataParameter::set_fg_threshold(float value) {
  _internal_set_fg_threshold(value);
  // @@protoc_insertion_point(field_set:trtcaffe.WindowDataParameter.fg_threshold)
}

// optional float bg_threshold = 8 [default = 0.5];
inline bool WindowDataParameter::_internal_has_bg_threshold() const {
  bool value = (_has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool WindowDataParameter::has_bg_threshold() const {
  return _internal_has_bg_threshold();
}
inline void WindowDataParameter::clear_bg_threshold() {
  bg_threshold_ = 0.5f;
  _has_bits_[0] &= ~0x00000800u;
}
inline float WindowDataParameter::_internal_bg_threshold() const {
  return bg_threshold_;
}
inline float WindowDataParameter::bg_threshold() const {
  // @@protoc_insertion_point(field_get:trtcaffe.WindowDataParameter.bg_threshold)
  return _internal_bg_threshold();
}
inline void WindowDataParameter::_internal_set_bg_threshold(float value) {
  _has_bits_[0] |= 0x00000800u;
  bg_threshold_ = value;
}
inline void WindowDataParameter::set_bg_threshold(float value) {
  _internal_set_bg_threshold(value);
  // @@protoc_insertion_point(field_set:trtcaffe.WindowDataParameter.bg_threshold)
}

// optional float fg_fraction = 9 [default = 0.25];
inline bool WindowDataParameter::_internal_has_fg_fraction() const {
  bool value = (_has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline bool WindowDataParameter::has_fg_fraction() const {
  return _internal_has_fg_fraction();
}
inline void WindowDataParameter::clear_fg_fraction() {
  fg_fraction_ = 0.25f;
  _has_bits_[0] &= ~0x00001000u;
}
inline float WindowDataParameter::_internal_fg_fraction() const {
  return fg_fraction_;
}
inline float WindowDataParameter::fg_fraction() const {
  // @@protoc_insertion_point(field_get:trtcaffe.WindowDataParameter.fg_fraction)
  return _internal_fg_fraction();
}
inline void WindowDataParameter::_internal_set_fg_fraction(float value) {
  _has_bits_[0] |= 0x00001000u;
  fg_fraction_ = value;
}
inline void WindowDataParameter::set_fg_fraction(float value) {
  _internal_set_fg_fraction(value);
  // @@protoc_insertion_point(field_set:trtcaffe.WindowDataParameter.fg_fraction)
}

// optional uint32 context_pad = 10 [default = 0];
inline bool WindowDataParameter::_internal_has_context_pad() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool WindowDataParameter::has_context_pad() const {
  return _internal_has_context_pad();
}
inline void WindowDataParameter::clear_context_pad() {
  context_pad_ = 0u;
  _has_bits_[0] &= ~0x00000100u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 WindowDataParameter::_internal_context_pad() const {
  return context_pad_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 WindowDataParameter::context_pad() const {
  // @@protoc_insertion_point(field_get:trtcaffe.WindowDataParameter.context_pad)
  return _internal_context_pad();
}
inline void WindowDataParameter::_internal_set_context_pad(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000100u;
  context_pad_ = value;
}
inline void WindowDataParameter::set_context_pad(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_context_pad(value);
  // @@protoc_insertion_point(field_set:trtcaffe.WindowDataParameter.context_pad)
}

// optional string crop_mode = 11 [default = "warp"];
inline bool WindowDataParameter::_internal_has_crop_mode() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool WindowDataParameter::has_crop_mode() const {
  return _internal_has_crop_mode();
}
inline void WindowDataParameter::clear_crop_mode() {
  crop_mode_.ClearToDefault(&::trtcaffe::WindowDataParameter::_i_give_permission_to_break_this_code_default_crop_mode_.get(), GetArena());
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& WindowDataParameter::crop_mode() const {
  // @@protoc_insertion_point(field_get:trtcaffe.WindowDataParameter.crop_mode)
  return _internal_crop_mode();
}
inline void WindowDataParameter::set_crop_mode(const std::string& value) {
  _internal_set_crop_mode(value);
  // @@protoc_insertion_point(field_set:trtcaffe.WindowDataParameter.crop_mode)
}
inline std::string* WindowDataParameter::mutable_crop_mode() {
  // @@protoc_insertion_point(field_mutable:trtcaffe.WindowDataParameter.crop_mode)
  return _internal_mutable_crop_mode();
}
inline const std::string& WindowDataParameter::_internal_crop_mode() const {
  return crop_mode_.Get();
}
inline void WindowDataParameter::_internal_set_crop_mode(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  crop_mode_.Set(&::trtcaffe::WindowDataParameter::_i_give_permission_to_break_this_code_default_crop_mode_.get(), value, GetArena());
}
inline void WindowDataParameter::set_crop_mode(std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  crop_mode_.Set(
    &::trtcaffe::WindowDataParameter::_i_give_permission_to_break_this_code_default_crop_mode_.get(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:trtcaffe.WindowDataParameter.crop_mode)
}
inline void WindowDataParameter::set_crop_mode(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  crop_mode_.Set(&::trtcaffe::WindowDataParameter::_i_give_permission_to_break_this_code_default_crop_mode_.get(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:trtcaffe.WindowDataParameter.crop_mode)
}
inline void WindowDataParameter::set_crop_mode(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000004u;
  crop_mode_.Set(&::trtcaffe::WindowDataParameter::_i_give_permission_to_break_this_code_default_crop_mode_.get(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:trtcaffe.WindowDataParameter.crop_mode)
}
inline std::string* WindowDataParameter::_internal_mutable_crop_mode() {
  _has_bits_[0] |= 0x00000004u;
  return crop_mode_.Mutable(&::trtcaffe::WindowDataParameter::_i_give_permission_to_break_this_code_default_crop_mode_.get(), GetArena());
}
inline std::string* WindowDataParameter::release_crop_mode() {
  // @@protoc_insertion_point(field_release:trtcaffe.WindowDataParameter.crop_mode)
  if (!_internal_has_crop_mode()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return crop_mode_.ReleaseNonDefault(&::trtcaffe::WindowDataParameter::_i_give_permission_to_break_this_code_default_crop_mode_.get(), GetArena());
}
inline void WindowDataParameter::set_allocated_crop_mode(std::string* crop_mode) {
  if (crop_mode != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  crop_mode_.SetAllocated(&::trtcaffe::WindowDataParameter::_i_give_permission_to_break_this_code_default_crop_mode_.get(), crop_mode,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:trtcaffe.WindowDataParameter.crop_mode)
}
inline std::string* WindowDataParameter::unsafe_arena_release_crop_mode() {
  // @@protoc_insertion_point(field_unsafe_arena_release:trtcaffe.WindowDataParameter.crop_mode)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000004u;
  return crop_mode_.UnsafeArenaRelease(&::trtcaffe::WindowDataParameter::_i_give_permission_to_break_this_code_default_crop_mode_.get(),
      GetArena());
}
inline void WindowDataParameter::unsafe_arena_set_allocated_crop_mode(
    std::string* crop_mode) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (crop_mode != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  crop_mode_.UnsafeArenaSetAllocated(&::trtcaffe::WindowDataParameter::_i_give_permission_to_break_this_code_default_crop_mode_.get(),
      crop_mode, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:trtcaffe.WindowDataParameter.crop_mode)
}

// optional bool cache_images = 12 [default = false];
inline bool WindowDataParameter::_internal_has_cache_images() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool WindowDataParameter::has_cache_images() const {
  return _internal_has_cache_images();
}
inline void WindowDataParameter::clear_cache_images() {
  cache_images_ = false;
  _has_bits_[0] &= ~0x00000080u;
}
inline bool WindowDataParameter::_internal_cache_images() const {
  return cache_images_;
}
inline bool WindowDataParameter::cache_images() const {
  // @@protoc_insertion_point(field_get:trtcaffe.WindowDataParameter.cache_images)
  return _internal_cache_images();
}
inline void WindowDataParameter::_internal_set_cache_images(bool value) {
  _has_bits_[0] |= 0x00000080u;
  cache_images_ = value;
}
inline void WindowDataParameter::set_cache_images(bool value) {
  _internal_set_cache_images(value);
  // @@protoc_insertion_point(field_set:trtcaffe.WindowDataParameter.cache_images)
}

// optional string root_folder = 13 [default = ""];
inline bool WindowDataParameter::_internal_has_root_folder() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool WindowDataParameter::has_root_folder() const {
  return _internal_has_root_folder();
}
inline void WindowDataParameter::clear_root_folder() {
  root_folder_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000008u;
}
inline const std::string& WindowDataParameter::root_folder() const {
  // @@protoc_insertion_point(field_get:trtcaffe.WindowDataParameter.root_folder)
  return _internal_root_folder();
}
inline void WindowDataParameter::set_root_folder(const std::string& value) {
  _internal_set_root_folder(value);
  // @@protoc_insertion_point(field_set:trtcaffe.WindowDataParameter.root_folder)
}
inline std::string* WindowDataParameter::mutable_root_folder() {
  // @@protoc_insertion_point(field_mutable:trtcaffe.WindowDataParameter.root_folder)
  return _internal_mutable_root_folder();
}
inline const std::string& WindowDataParameter::_internal_root_folder() const {
  return root_folder_.Get();
}
inline void WindowDataParameter::_internal_set_root_folder(const std::string& value) {
  _has_bits_[0] |= 0x00000008u;
  root_folder_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void WindowDataParameter::set_root_folder(std::string&& value) {
  _has_bits_[0] |= 0x00000008u;
  root_folder_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:trtcaffe.WindowDataParameter.root_folder)
}
inline void WindowDataParameter::set_root_folder(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000008u;
  root_folder_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:trtcaffe.WindowDataParameter.root_folder)
}
inline void WindowDataParameter::set_root_folder(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000008u;
  root_folder_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:trtcaffe.WindowDataParameter.root_folder)
}
inline std::string* WindowDataParameter::_internal_mutable_root_folder() {
  _has_bits_[0] |= 0x00000008u;
  return root_folder_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* WindowDataParameter::release_root_folder() {
  // @@protoc_insertion_point(field_release:trtcaffe.WindowDataParameter.root_folder)
  if (!_internal_has_root_folder()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000008u;
  return root_folder_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void WindowDataParameter::set_allocated_root_folder(std::string* root_folder) {
  if (root_folder != nullptr) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  root_folder_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), root_folder,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:trtcaffe.WindowDataParameter.root_folder)
}
inline std::string* WindowDataParameter::unsafe_arena_release_root_folder() {
  // @@protoc_insertion_point(field_unsafe_arena_release:trtcaffe.WindowDataParameter.root_folder)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000008u;
  return root_folder_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void WindowDataParameter::unsafe_arena_set_allocated_root_folder(
    std::string* root_folder) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (root_folder != nullptr) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  root_folder_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      root_folder, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:trtcaffe.WindowDataParameter.root_folder)
}

// -------------------------------------------------------------------

// SPPParameter

// optional uint32 pyramid_height = 1;
inline bool SPPParameter::_internal_has_pyramid_height() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool SPPParameter::has_pyramid_height() const {
  return _internal_has_pyramid_height();
}
inline void SPPParameter::clear_pyramid_height() {
  pyramid_height_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SPPParameter::_internal_pyramid_height() const {
  return pyramid_height_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SPPParameter::pyramid_height() const {
  // @@protoc_insertion_point(field_get:trtcaffe.SPPParameter.pyramid_height)
  return _internal_pyramid_height();
}
inline void SPPParameter::_internal_set_pyramid_height(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  pyramid_height_ = value;
}
inline void SPPParameter::set_pyramid_height(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_pyramid_height(value);
  // @@protoc_insertion_point(field_set:trtcaffe.SPPParameter.pyramid_height)
}

// optional .trtcaffe.SPPParameter.PoolMethod pool = 2 [default = MAX];
inline bool SPPParameter::_internal_has_pool() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool SPPParameter::has_pool() const {
  return _internal_has_pool();
}
inline void SPPParameter::clear_pool() {
  pool_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::trtcaffe::SPPParameter_PoolMethod SPPParameter::_internal_pool() const {
  return static_cast< ::trtcaffe::SPPParameter_PoolMethod >(pool_);
}
inline ::trtcaffe::SPPParameter_PoolMethod SPPParameter::pool() const {
  // @@protoc_insertion_point(field_get:trtcaffe.SPPParameter.pool)
  return _internal_pool();
}
inline void SPPParameter::_internal_set_pool(::trtcaffe::SPPParameter_PoolMethod value) {
  assert(::trtcaffe::SPPParameter_PoolMethod_IsValid(value));
  _has_bits_[0] |= 0x00000002u;
  pool_ = value;
}
inline void SPPParameter::set_pool(::trtcaffe::SPPParameter_PoolMethod value) {
  _internal_set_pool(value);
  // @@protoc_insertion_point(field_set:trtcaffe.SPPParameter.pool)
}

// optional .trtcaffe.SPPParameter.Engine engine = 6 [default = DEFAULT];
inline bool SPPParameter::_internal_has_engine() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool SPPParameter::has_engine() const {
  return _internal_has_engine();
}
inline void SPPParameter::clear_engine() {
  engine_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::trtcaffe::SPPParameter_Engine SPPParameter::_internal_engine() const {
  return static_cast< ::trtcaffe::SPPParameter_Engine >(engine_);
}
inline ::trtcaffe::SPPParameter_Engine SPPParameter::engine() const {
  // @@protoc_insertion_point(field_get:trtcaffe.SPPParameter.engine)
  return _internal_engine();
}
inline void SPPParameter::_internal_set_engine(::trtcaffe::SPPParameter_Engine value) {
  assert(::trtcaffe::SPPParameter_Engine_IsValid(value));
  _has_bits_[0] |= 0x00000004u;
  engine_ = value;
}
inline void SPPParameter::set_engine(::trtcaffe::SPPParameter_Engine value) {
  _internal_set_engine(value);
  // @@protoc_insertion_point(field_set:trtcaffe.SPPParameter.engine)
}

// -------------------------------------------------------------------

// V1LayerParameter

// repeated string bottom = 2;
inline int V1LayerParameter::_internal_bottom_size() const {
  return bottom_.size();
}
inline int V1LayerParameter::bottom_size() const {
  return _internal_bottom_size();
}
inline void V1LayerParameter::clear_bottom() {
  bottom_.Clear();
}
inline std::string* V1LayerParameter::add_bottom() {
  // @@protoc_insertion_point(field_add_mutable:trtcaffe.V1LayerParameter.bottom)
  return _internal_add_bottom();
}
inline const std::string& V1LayerParameter::_internal_bottom(int index) const {
  return bottom_.Get(index);
}
inline const std::string& V1LayerParameter::bottom(int index) const {
  // @@protoc_insertion_point(field_get:trtcaffe.V1LayerParameter.bottom)
  return _internal_bottom(index);
}
inline std::string* V1LayerParameter::mutable_bottom(int index) {
  // @@protoc_insertion_point(field_mutable:trtcaffe.V1LayerParameter.bottom)
  return bottom_.Mutable(index);
}
inline void V1LayerParameter::set_bottom(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:trtcaffe.V1LayerParameter.bottom)
  bottom_.Mutable(index)->assign(value);
}
inline void V1LayerParameter::set_bottom(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:trtcaffe.V1LayerParameter.bottom)
  bottom_.Mutable(index)->assign(std::move(value));
}
inline void V1LayerParameter::set_bottom(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  bottom_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:trtcaffe.V1LayerParameter.bottom)
}
inline void V1LayerParameter::set_bottom(int index, const char* value, size_t size) {
  bottom_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:trtcaffe.V1LayerParameter.bottom)
}
inline std::string* V1LayerParameter::_internal_add_bottom() {
  return bottom_.Add();
}
inline void V1LayerParameter::add_bottom(const std::string& value) {
  bottom_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:trtcaffe.V1LayerParameter.bottom)
}
inline void V1LayerParameter::add_bottom(std::string&& value) {
  bottom_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:trtcaffe.V1LayerParameter.bottom)
}
inline void V1LayerParameter::add_bottom(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  bottom_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:trtcaffe.V1LayerParameter.bottom)
}
inline void V1LayerParameter::add_bottom(const char* value, size_t size) {
  bottom_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:trtcaffe.V1LayerParameter.bottom)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
V1LayerParameter::bottom() const {
  // @@protoc_insertion_point(field_list:trtcaffe.V1LayerParameter.bottom)
  return bottom_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
V1LayerParameter::mutable_bottom() {
  // @@protoc_insertion_point(field_mutable_list:trtcaffe.V1LayerParameter.bottom)
  return &bottom_;
}

// repeated string top = 3;
inline int V1LayerParameter::_internal_top_size() const {
  return top_.size();
}
inline int V1LayerParameter::top_size() const {
  return _internal_top_size();
}
inline void V1LayerParameter::clear_top() {
  top_.Clear();
}
inline std::string* V1LayerParameter::add_top() {
  // @@protoc_insertion_point(field_add_mutable:trtcaffe.V1LayerParameter.top)
  return _internal_add_top();
}
inline const std::string& V1LayerParameter::_internal_top(int index) const {
  return top_.Get(index);
}
inline const std::string& V1LayerParameter::top(int index) const {
  // @@protoc_insertion_point(field_get:trtcaffe.V1LayerParameter.top)
  return _internal_top(index);
}
inline std::string* V1LayerParameter::mutable_top(int index) {
  // @@protoc_insertion_point(field_mutable:trtcaffe.V1LayerParameter.top)
  return top_.Mutable(index);
}
inline void V1LayerParameter::set_top(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:trtcaffe.V1LayerParameter.top)
  top_.Mutable(index)->assign(value);
}
inline void V1LayerParameter::set_top(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:trtcaffe.V1LayerParameter.top)
  top_.Mutable(index)->assign(std::move(value));
}
inline void V1LayerParameter::set_top(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  top_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:trtcaffe.V1LayerParameter.top)
}
inline void V1LayerParameter::set_top(int index, const char* value, size_t size) {
  top_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:trtcaffe.V1LayerParameter.top)
}
inline std::string* V1LayerParameter::_internal_add_top() {
  return top_.Add();
}
inline void V1LayerParameter::add_top(const std::string& value) {
  top_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:trtcaffe.V1LayerParameter.top)
}
inline void V1LayerParameter::add_top(std::string&& value) {
  top_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:trtcaffe.V1LayerParameter.top)
}
inline void V1LayerParameter::add_top(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  top_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:trtcaffe.V1LayerParameter.top)
}
inline void V1LayerParameter::add_top(const char* value, size_t size) {
  top_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:trtcaffe.V1LayerParameter.top)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
V1LayerParameter::top() const {
  // @@protoc_insertion_point(field_list:trtcaffe.V1LayerParameter.top)
  return top_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
V1LayerParameter::mutable_top() {
  // @@protoc_insertion_point(field_mutable_list:trtcaffe.V1LayerParameter.top)
  return &top_;
}

// optional string name = 4;
inline bool V1LayerParameter::_internal_has_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool V1LayerParameter::has_name() const {
  return _internal_has_name();
}
inline void V1LayerParameter::clear_name() {
  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& V1LayerParameter::name() const {
  // @@protoc_insertion_point(field_get:trtcaffe.V1LayerParameter.name)
  return _internal_name();
}
inline void V1LayerParameter::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:trtcaffe.V1LayerParameter.name)
}
inline std::string* V1LayerParameter::mutable_name() {
  // @@protoc_insertion_point(field_mutable:trtcaffe.V1LayerParameter.name)
  return _internal_mutable_name();
}
inline const std::string& V1LayerParameter::_internal_name() const {
  return name_.Get();
}
inline void V1LayerParameter::_internal_set_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void V1LayerParameter::set_name(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:trtcaffe.V1LayerParameter.name)
}
inline void V1LayerParameter::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:trtcaffe.V1LayerParameter.name)
}
inline void V1LayerParameter::set_name(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:trtcaffe.V1LayerParameter.name)
}
inline std::string* V1LayerParameter::_internal_mutable_name() {
  _has_bits_[0] |= 0x00000001u;
  return name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* V1LayerParameter::release_name() {
  // @@protoc_insertion_point(field_release:trtcaffe.V1LayerParameter.name)
  if (!_internal_has_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void V1LayerParameter::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:trtcaffe.V1LayerParameter.name)
}
inline std::string* V1LayerParameter::unsafe_arena_release_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:trtcaffe.V1LayerParameter.name)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000001u;
  return name_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void V1LayerParameter::unsafe_arena_set_allocated_name(
    std::string* name) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  name_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      name, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:trtcaffe.V1LayerParameter.name)
}

// repeated .trtcaffe.NetStateRule include = 32;
inline int V1LayerParameter::_internal_include_size() const {
  return include_.size();
}
inline int V1LayerParameter::include_size() const {
  return _internal_include_size();
}
inline void V1LayerParameter::clear_include() {
  include_.Clear();
}
inline ::trtcaffe::NetStateRule* V1LayerParameter::mutable_include(int index) {
  // @@protoc_insertion_point(field_mutable:trtcaffe.V1LayerParameter.include)
  return include_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::trtcaffe::NetStateRule >*
V1LayerParameter::mutable_include() {
  // @@protoc_insertion_point(field_mutable_list:trtcaffe.V1LayerParameter.include)
  return &include_;
}
inline const ::trtcaffe::NetStateRule& V1LayerParameter::_internal_include(int index) const {
  return include_.Get(index);
}
inline const ::trtcaffe::NetStateRule& V1LayerParameter::include(int index) const {
  // @@protoc_insertion_point(field_get:trtcaffe.V1LayerParameter.include)
  return _internal_include(index);
}
inline ::trtcaffe::NetStateRule* V1LayerParameter::_internal_add_include() {
  return include_.Add();
}
inline ::trtcaffe::NetStateRule* V1LayerParameter::add_include() {
  // @@protoc_insertion_point(field_add:trtcaffe.V1LayerParameter.include)
  return _internal_add_include();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::trtcaffe::NetStateRule >&
V1LayerParameter::include() const {
  // @@protoc_insertion_point(field_list:trtcaffe.V1LayerParameter.include)
  return include_;
}

// repeated .trtcaffe.NetStateRule exclude = 33;
inline int V1LayerParameter::_internal_exclude_size() const {
  return exclude_.size();
}
inline int V1LayerParameter::exclude_size() const {
  return _internal_exclude_size();
}
inline void V1LayerParameter::clear_exclude() {
  exclude_.Clear();
}
inline ::trtcaffe::NetStateRule* V1LayerParameter::mutable_exclude(int index) {
  // @@protoc_insertion_point(field_mutable:trtcaffe.V1LayerParameter.exclude)
  return exclude_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::trtcaffe::NetStateRule >*
V1LayerParameter::mutable_exclude() {
  // @@protoc_insertion_point(field_mutable_list:trtcaffe.V1LayerParameter.exclude)
  return &exclude_;
}
inline const ::trtcaffe::NetStateRule& V1LayerParameter::_internal_exclude(int index) const {
  return exclude_.Get(index);
}
inline const ::trtcaffe::NetStateRule& V1LayerParameter::exclude(int index) const {
  // @@protoc_insertion_point(field_get:trtcaffe.V1LayerParameter.exclude)
  return _internal_exclude(index);
}
inline ::trtcaffe::NetStateRule* V1LayerParameter::_internal_add_exclude() {
  return exclude_.Add();
}
inline ::trtcaffe::NetStateRule* V1LayerParameter::add_exclude() {
  // @@protoc_insertion_point(field_add:trtcaffe.V1LayerParameter.exclude)
  return _internal_add_exclude();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::trtcaffe::NetStateRule >&
V1LayerParameter::exclude() const {
  // @@protoc_insertion_point(field_list:trtcaffe.V1LayerParameter.exclude)
  return exclude_;
}

// optional .trtcaffe.V1LayerParameter.LayerType type = 5;
inline bool V1LayerParameter::_internal_has_type() const {
  bool value = (_has_bits_[1] & 0x00000002u) != 0;
  return value;
}
inline bool V1LayerParameter::has_type() const {
  return _internal_has_type();
}
inline void V1LayerParameter::clear_type() {
  type_ = 0;
  _has_bits_[1] &= ~0x00000002u;
}
inline ::trtcaffe::V1LayerParameter_LayerType V1LayerParameter::_internal_type() const {
  return static_cast< ::trtcaffe::V1LayerParameter_LayerType >(type_);
}
inline ::trtcaffe::V1LayerParameter_LayerType V1LayerParameter::type() const {
  // @@protoc_insertion_point(field_get:trtcaffe.V1LayerParameter.type)
  return _internal_type();
}
inline void V1LayerParameter::_internal_set_type(::trtcaffe::V1LayerParameter_LayerType value) {
  assert(::trtcaffe::V1LayerParameter_LayerType_IsValid(value));
  _has_bits_[1] |= 0x00000002u;
  type_ = value;
}
inline void V1LayerParameter::set_type(::trtcaffe::V1LayerParameter_LayerType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:trtcaffe.V1LayerParameter.type)
}

// repeated .trtcaffe.BlobProto blobs = 6;
inline int V1LayerParameter::_internal_blobs_size() const {
  return blobs_.size();
}
inline int V1LayerParameter::blobs_size() const {
  return _internal_blobs_size();
}
inline void V1LayerParameter::clear_blobs() {
  blobs_.Clear();
}
inline ::trtcaffe::BlobProto* V1LayerParameter::mutable_blobs(int index) {
  // @@protoc_insertion_point(field_mutable:trtcaffe.V1LayerParameter.blobs)
  return blobs_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::trtcaffe::BlobProto >*
V1LayerParameter::mutable_blobs() {
  // @@protoc_insertion_point(field_mutable_list:trtcaffe.V1LayerParameter.blobs)
  return &blobs_;
}
inline const ::trtcaffe::BlobProto& V1LayerParameter::_internal_blobs(int index) const {
  return blobs_.Get(index);
}
inline const ::trtcaffe::BlobProto& V1LayerParameter::blobs(int index) const {
  // @@protoc_insertion_point(field_get:trtcaffe.V1LayerParameter.blobs)
  return _internal_blobs(index);
}
inline ::trtcaffe::BlobProto* V1LayerParameter::_internal_add_blobs() {
  return blobs_.Add();
}
inline ::trtcaffe::BlobProto* V1LayerParameter::add_blobs() {
  // @@protoc_insertion_point(field_add:trtcaffe.V1LayerParameter.blobs)
  return _internal_add_blobs();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::trtcaffe::BlobProto >&
V1LayerParameter::blobs() const {
  // @@protoc_insertion_point(field_list:trtcaffe.V1LayerParameter.blobs)
  return blobs_;
}

// repeated string param = 1001;
inline int V1LayerParameter::_internal_param_size() const {
  return param_.size();
}
inline int V1LayerParameter::param_size() const {
  return _internal_param_size();
}
inline void V1LayerParameter::clear_param() {
  param_.Clear();
}
inline std::string* V1LayerParameter::add_param() {
  // @@protoc_insertion_point(field_add_mutable:trtcaffe.V1LayerParameter.param)
  return _internal_add_param();
}
inline const std::string& V1LayerParameter::_internal_param(int index) const {
  return param_.Get(index);
}
inline const std::string& V1LayerParameter::param(int index) const {
  // @@protoc_insertion_point(field_get:trtcaffe.V1LayerParameter.param)
  return _internal_param(index);
}
inline std::string* V1LayerParameter::mutable_param(int index) {
  // @@protoc_insertion_point(field_mutable:trtcaffe.V1LayerParameter.param)
  return param_.Mutable(index);
}
inline void V1LayerParameter::set_param(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:trtcaffe.V1LayerParameter.param)
  param_.Mutable(index)->assign(value);
}
inline void V1LayerParameter::set_param(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:trtcaffe.V1LayerParameter.param)
  param_.Mutable(index)->assign(std::move(value));
}
inline void V1LayerParameter::set_param(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  param_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:trtcaffe.V1LayerParameter.param)
}
inline void V1LayerParameter::set_param(int index, const char* value, size_t size) {
  param_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:trtcaffe.V1LayerParameter.param)
}
inline std::string* V1LayerParameter::_internal_add_param() {
  return param_.Add();
}
inline void V1LayerParameter::add_param(const std::string& value) {
  param_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:trtcaffe.V1LayerParameter.param)
}
inline void V1LayerParameter::add_param(std::string&& value) {
  param_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:trtcaffe.V1LayerParameter.param)
}
inline void V1LayerParameter::add_param(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  param_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:trtcaffe.V1LayerParameter.param)
}
inline void V1LayerParameter::add_param(const char* value, size_t size) {
  param_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:trtcaffe.V1LayerParameter.param)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
V1LayerParameter::param() const {
  // @@protoc_insertion_point(field_list:trtcaffe.V1LayerParameter.param)
  return param_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
V1LayerParameter::mutable_param() {
  // @@protoc_insertion_point(field_mutable_list:trtcaffe.V1LayerParameter.param)
  return &param_;
}

// repeated .trtcaffe.V1LayerParameter.DimCheckMode blob_share_mode = 1002;
inline int V1LayerParameter::_internal_blob_share_mode_size() const {
  return blob_share_mode_.size();
}
inline int V1LayerParameter::blob_share_mode_size() const {
  return _internal_blob_share_mode_size();
}
inline void V1LayerParameter::clear_blob_share_mode() {
  blob_share_mode_.Clear();
}
inline ::trtcaffe::V1LayerParameter_DimCheckMode V1LayerParameter::_internal_blob_share_mode(int index) const {
  return static_cast< ::trtcaffe::V1LayerParameter_DimCheckMode >(blob_share_mode_.Get(index));
}
inline ::trtcaffe::V1LayerParameter_DimCheckMode V1LayerParameter::blob_share_mode(int index) const {
  // @@protoc_insertion_point(field_get:trtcaffe.V1LayerParameter.blob_share_mode)
  return _internal_blob_share_mode(index);
}
inline void V1LayerParameter::set_blob_share_mode(int index, ::trtcaffe::V1LayerParameter_DimCheckMode value) {
  assert(::trtcaffe::V1LayerParameter_DimCheckMode_IsValid(value));
  blob_share_mode_.Set(index, value);
  // @@protoc_insertion_point(field_set:trtcaffe.V1LayerParameter.blob_share_mode)
}
inline void V1LayerParameter::_internal_add_blob_share_mode(::trtcaffe::V1LayerParameter_DimCheckMode value) {
  assert(::trtcaffe::V1LayerParameter_DimCheckMode_IsValid(value));
  blob_share_mode_.Add(value);
}
inline void V1LayerParameter::add_blob_share_mode(::trtcaffe::V1LayerParameter_DimCheckMode value) {
  // @@protoc_insertion_point(field_add:trtcaffe.V1LayerParameter.blob_share_mode)
  _internal_add_blob_share_mode(value);
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>&
V1LayerParameter::blob_share_mode() const {
  // @@protoc_insertion_point(field_list:trtcaffe.V1LayerParameter.blob_share_mode)
  return blob_share_mode_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
V1LayerParameter::_internal_mutable_blob_share_mode() {
  return &blob_share_mode_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
V1LayerParameter::mutable_blob_share_mode() {
  // @@protoc_insertion_point(field_mutable_list:trtcaffe.V1LayerParameter.blob_share_mode)
  return _internal_mutable_blob_share_mode();
}

// repeated float blobs_lr = 7;
inline int V1LayerParameter::_internal_blobs_lr_size() const {
  return blobs_lr_.size();
}
inline int V1LayerParameter::blobs_lr_size() const {
  return _internal_blobs_lr_size();
}
inline void V1LayerParameter::clear_blobs_lr() {
  blobs_lr_.Clear();
}
inline float V1LayerParameter::_internal_blobs_lr(int index) const {
  return blobs_lr_.Get(index);
}
inline float V1LayerParameter::blobs_lr(int index) const {
  // @@protoc_insertion_point(field_get:trtcaffe.V1LayerParameter.blobs_lr)
  return _internal_blobs_lr(index);
}
inline void V1LayerParameter::set_blobs_lr(int index, float value) {
  blobs_lr_.Set(index, value);
  // @@protoc_insertion_point(field_set:trtcaffe.V1LayerParameter.blobs_lr)
}
inline void V1LayerParameter::_internal_add_blobs_lr(float value) {
  blobs_lr_.Add(value);
}
inline void V1LayerParameter::add_blobs_lr(float value) {
  _internal_add_blobs_lr(value);
  // @@protoc_insertion_point(field_add:trtcaffe.V1LayerParameter.blobs_lr)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
V1LayerParameter::_internal_blobs_lr() const {
  return blobs_lr_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
V1LayerParameter::blobs_lr() const {
  // @@protoc_insertion_point(field_list:trtcaffe.V1LayerParameter.blobs_lr)
  return _internal_blobs_lr();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
V1LayerParameter::_internal_mutable_blobs_lr() {
  return &blobs_lr_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
V1LayerParameter::mutable_blobs_lr() {
  // @@protoc_insertion_point(field_mutable_list:trtcaffe.V1LayerParameter.blobs_lr)
  return _internal_mutable_blobs_lr();
}

// repeated float weight_decay = 8;
inline int V1LayerParameter::_internal_weight_decay_size() const {
  return weight_decay_.size();
}
inline int V1LayerParameter::weight_decay_size() const {
  return _internal_weight_decay_size();
}
inline void V1LayerParameter::clear_weight_decay() {
  weight_decay_.Clear();
}
inline float V1LayerParameter::_internal_weight_decay(int index) const {
  return weight_decay_.Get(index);
}
inline float V1LayerParameter::weight_decay(int index) const {
  // @@protoc_insertion_point(field_get:trtcaffe.V1LayerParameter.weight_decay)
  return _internal_weight_decay(index);
}
inline void V1LayerParameter::set_weight_decay(int index, float value) {
  weight_decay_.Set(index, value);
  // @@protoc_insertion_point(field_set:trtcaffe.V1LayerParameter.weight_decay)
}
inline void V1LayerParameter::_internal_add_weight_decay(float value) {
  weight_decay_.Add(value);
}
inline void V1LayerParameter::add_weight_decay(float value) {
  _internal_add_weight_decay(value);
  // @@protoc_insertion_point(field_add:trtcaffe.V1LayerParameter.weight_decay)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
V1LayerParameter::_internal_weight_decay() const {
  return weight_decay_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
V1LayerParameter::weight_decay() const {
  // @@protoc_insertion_point(field_list:trtcaffe.V1LayerParameter.weight_decay)
  return _internal_weight_decay();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
V1LayerParameter::_internal_mutable_weight_decay() {
  return &weight_decay_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
V1LayerParameter::mutable_weight_decay() {
  // @@protoc_insertion_point(field_mutable_list:trtcaffe.V1LayerParameter.weight_decay)
  return _internal_mutable_weight_decay();
}

// repeated float loss_weight = 35;
inline int V1LayerParameter::_internal_loss_weight_size() const {
  return loss_weight_.size();
}
inline int V1LayerParameter::loss_weight_size() const {
  return _internal_loss_weight_size();
}
inline void V1LayerParameter::clear_loss_weight() {
  loss_weight_.Clear();
}
inline float V1LayerParameter::_internal_loss_weight(int index) const {
  return loss_weight_.Get(index);
}
inline float V1LayerParameter::loss_weight(int index) const {
  // @@protoc_insertion_point(field_get:trtcaffe.V1LayerParameter.loss_weight)
  return _internal_loss_weight(index);
}
inline void V1LayerParameter::set_loss_weight(int index, float value) {
  loss_weight_.Set(index, value);
  // @@protoc_insertion_point(field_set:trtcaffe.V1LayerParameter.loss_weight)
}
inline void V1LayerParameter::_internal_add_loss_weight(float value) {
  loss_weight_.Add(value);
}
inline void V1LayerParameter::add_loss_weight(float value) {
  _internal_add_loss_weight(value);
  // @@protoc_insertion_point(field_add:trtcaffe.V1LayerParameter.loss_weight)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
V1LayerParameter::_internal_loss_weight() const {
  return loss_weight_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
V1LayerParameter::loss_weight() const {
  // @@protoc_insertion_point(field_list:trtcaffe.V1LayerParameter.loss_weight)
  return _internal_loss_weight();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
V1LayerParameter::_internal_mutable_loss_weight() {
  return &loss_weight_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
V1LayerParameter::mutable_loss_weight() {
  // @@protoc_insertion_point(field_mutable_list:trtcaffe.V1LayerParameter.loss_weight)
  return _internal_mutable_loss_weight();
}

// optional .trtcaffe.AccuracyParameter accuracy_param = 27;
inline bool V1LayerParameter::_internal_has_accuracy_param() const {
  bool value = (_has_bits_[0] & 0x00100000u) != 0;
  PROTOBUF_ASSUME(!value || accuracy_param_ != nullptr);
  return value;
}
inline bool V1LayerParameter::has_accuracy_param() const {
  return _internal_has_accuracy_param();
}
inline void V1LayerParameter::clear_accuracy_param() {
  if (accuracy_param_ != nullptr) accuracy_param_->Clear();
  _has_bits_[0] &= ~0x00100000u;
}
inline const ::trtcaffe::AccuracyParameter& V1LayerParameter::_internal_accuracy_param() const {
  const ::trtcaffe::AccuracyParameter* p = accuracy_param_;
  return p != nullptr ? *p : *reinterpret_cast<const ::trtcaffe::AccuracyParameter*>(
      &::trtcaffe::_AccuracyParameter_default_instance_);
}
inline const ::trtcaffe::AccuracyParameter& V1LayerParameter::accuracy_param() const {
  // @@protoc_insertion_point(field_get:trtcaffe.V1LayerParameter.accuracy_param)
  return _internal_accuracy_param();
}
inline void V1LayerParameter::unsafe_arena_set_allocated_accuracy_param(
    ::trtcaffe::AccuracyParameter* accuracy_param) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(accuracy_param_);
  }
  accuracy_param_ = accuracy_param;
  if (accuracy_param) {
    _has_bits_[0] |= 0x00100000u;
  } else {
    _has_bits_[0] &= ~0x00100000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:trtcaffe.V1LayerParameter.accuracy_param)
}
inline ::trtcaffe::AccuracyParameter* V1LayerParameter::release_accuracy_param() {
  auto temp = unsafe_arena_release_accuracy_param();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::trtcaffe::AccuracyParameter* V1LayerParameter::unsafe_arena_release_accuracy_param() {
  // @@protoc_insertion_point(field_release:trtcaffe.V1LayerParameter.accuracy_param)
  _has_bits_[0] &= ~0x00100000u;
  ::trtcaffe::AccuracyParameter* temp = accuracy_param_;
  accuracy_param_ = nullptr;
  return temp;
}
inline ::trtcaffe::AccuracyParameter* V1LayerParameter::_internal_mutable_accuracy_param() {
  _has_bits_[0] |= 0x00100000u;
  if (accuracy_param_ == nullptr) {
    auto* p = CreateMaybeMessage<::trtcaffe::AccuracyParameter>(GetArena());
    accuracy_param_ = p;
  }
  return accuracy_param_;
}
inline ::trtcaffe::AccuracyParameter* V1LayerParameter::mutable_accuracy_param() {
  // @@protoc_insertion_point(field_mutable:trtcaffe.V1LayerParameter.accuracy_param)
  return _internal_mutable_accuracy_param();
}
inline void V1LayerParameter::set_allocated_accuracy_param(::trtcaffe::AccuracyParameter* accuracy_param) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete accuracy_param_;
  }
  if (accuracy_param) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(accuracy_param);
    if (message_arena != submessage_arena) {
      accuracy_param = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, accuracy_param, submessage_arena);
    }
    _has_bits_[0] |= 0x00100000u;
  } else {
    _has_bits_[0] &= ~0x00100000u;
  }
  accuracy_param_ = accuracy_param;
  // @@protoc_insertion_point(field_set_allocated:trtcaffe.V1LayerParameter.accuracy_param)
}

// optional .trtcaffe.ArgMaxParameter argmax_param = 23;
inline bool V1LayerParameter::_internal_has_argmax_param() const {
  bool value = (_has_bits_[0] & 0x00010000u) != 0;
  PROTOBUF_ASSUME(!value || argmax_param_ != nullptr);
  return value;
}
inline bool V1LayerParameter::has_argmax_param() const {
  return _internal_has_argmax_param();
}
inline void V1LayerParameter::clear_argmax_param() {
  if (argmax_param_ != nullptr) argmax_param_->Clear();
  _has_bits_[0] &= ~0x00010000u;
}
inline const ::trtcaffe::ArgMaxParameter& V1LayerParameter::_internal_argmax_param() const {
  const ::trtcaffe::ArgMaxParameter* p = argmax_param_;
  return p != nullptr ? *p : *reinterpret_cast<const ::trtcaffe::ArgMaxParameter*>(
      &::trtcaffe::_ArgMaxParameter_default_instance_);
}
inline const ::trtcaffe::ArgMaxParameter& V1LayerParameter::argmax_param() const {
  // @@protoc_insertion_point(field_get:trtcaffe.V1LayerParameter.argmax_param)
  return _internal_argmax_param();
}
inline void V1LayerParameter::unsafe_arena_set_allocated_argmax_param(
    ::trtcaffe::ArgMaxParameter* argmax_param) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(argmax_param_);
  }
  argmax_param_ = argmax_param;
  if (argmax_param) {
    _has_bits_[0] |= 0x00010000u;
  } else {
    _has_bits_[0] &= ~0x00010000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:trtcaffe.V1LayerParameter.argmax_param)
}
inline ::trtcaffe::ArgMaxParameter* V1LayerParameter::release_argmax_param() {
  auto temp = unsafe_arena_release_argmax_param();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::trtcaffe::ArgMaxParameter* V1LayerParameter::unsafe_arena_release_argmax_param() {
  // @@protoc_insertion_point(field_release:trtcaffe.V1LayerParameter.argmax_param)
  _has_bits_[0] &= ~0x00010000u;
  ::trtcaffe::ArgMaxParameter* temp = argmax_param_;
  argmax_param_ = nullptr;
  return temp;
}
inline ::trtcaffe::ArgMaxParameter* V1LayerParameter::_internal_mutable_argmax_param() {
  _has_bits_[0] |= 0x00010000u;
  if (argmax_param_ == nullptr) {
    auto* p = CreateMaybeMessage<::trtcaffe::ArgMaxParameter>(GetArena());
    argmax_param_ = p;
  }
  return argmax_param_;
}
inline ::trtcaffe::ArgMaxParameter* V1LayerParameter::mutable_argmax_param() {
  // @@protoc_insertion_point(field_mutable:trtcaffe.V1LayerParameter.argmax_param)
  return _internal_mutable_argmax_param();
}
inline void V1LayerParameter::set_allocated_argmax_param(::trtcaffe::ArgMaxParameter* argmax_param) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete argmax_param_;
  }
  if (argmax_param) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(argmax_param);
    if (message_arena != submessage_arena) {
      argmax_param = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, argmax_param, submessage_arena);
    }
    _has_bits_[0] |= 0x00010000u;
  } else {
    _has_bits_[0] &= ~0x00010000u;
  }
  argmax_param_ = argmax_param;
  // @@protoc_insertion_point(field_set_allocated:trtcaffe.V1LayerParameter.argmax_param)
}

// optional .trtcaffe.ConcatParameter concat_param = 9;
inline bool V1LayerParameter::_internal_has_concat_param() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || concat_param_ != nullptr);
  return value;
}
inline bool V1LayerParameter::has_concat_param() const {
  return _internal_has_concat_param();
}
inline void V1LayerParameter::clear_concat_param() {
  if (concat_param_ != nullptr) concat_param_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::trtcaffe::ConcatParameter& V1LayerParameter::_internal_concat_param() const {
  const ::trtcaffe::ConcatParameter* p = concat_param_;
  return p != nullptr ? *p : *reinterpret_cast<const ::trtcaffe::ConcatParameter*>(
      &::trtcaffe::_ConcatParameter_default_instance_);
}
inline const ::trtcaffe::ConcatParameter& V1LayerParameter::concat_param() const {
  // @@protoc_insertion_point(field_get:trtcaffe.V1LayerParameter.concat_param)
  return _internal_concat_param();
}
inline void V1LayerParameter::unsafe_arena_set_allocated_concat_param(
    ::trtcaffe::ConcatParameter* concat_param) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(concat_param_);
  }
  concat_param_ = concat_param;
  if (concat_param) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:trtcaffe.V1LayerParameter.concat_param)
}
inline ::trtcaffe::ConcatParameter* V1LayerParameter::release_concat_param() {
  auto temp = unsafe_arena_release_concat_param();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::trtcaffe::ConcatParameter* V1LayerParameter::unsafe_arena_release_concat_param() {
  // @@protoc_insertion_point(field_release:trtcaffe.V1LayerParameter.concat_param)
  _has_bits_[0] &= ~0x00000004u;
  ::trtcaffe::ConcatParameter* temp = concat_param_;
  concat_param_ = nullptr;
  return temp;
}
inline ::trtcaffe::ConcatParameter* V1LayerParameter::_internal_mutable_concat_param() {
  _has_bits_[0] |= 0x00000004u;
  if (concat_param_ == nullptr) {
    auto* p = CreateMaybeMessage<::trtcaffe::ConcatParameter>(GetArena());
    concat_param_ = p;
  }
  return concat_param_;
}
inline ::trtcaffe::ConcatParameter* V1LayerParameter::mutable_concat_param() {
  // @@protoc_insertion_point(field_mutable:trtcaffe.V1LayerParameter.concat_param)
  return _internal_mutable_concat_param();
}
inline void V1LayerParameter::set_allocated_concat_param(::trtcaffe::ConcatParameter* concat_param) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete concat_param_;
  }
  if (concat_param) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(concat_param);
    if (message_arena != submessage_arena) {
      concat_param = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, concat_param, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  concat_param_ = concat_param;
  // @@protoc_insertion_point(field_set_allocated:trtcaffe.V1LayerParameter.concat_param)
}

// optional .trtcaffe.ContrastiveLossParameter contrastive_loss_param = 40;
inline bool V1LayerParameter::_internal_has_contrastive_loss_param() const {
  bool value = (_has_bits_[0] & 0x20000000u) != 0;
  PROTOBUF_ASSUME(!value || contrastive_loss_param_ != nullptr);
  return value;
}
inline bool V1LayerParameter::has_contrastive_loss_param() const {
  return _internal_has_contrastive_loss_param();
}
inline void V1LayerParameter::clear_contrastive_loss_param() {
  if (contrastive_loss_param_ != nullptr) contrastive_loss_param_->Clear();
  _has_bits_[0] &= ~0x20000000u;
}
inline const ::trtcaffe::ContrastiveLossParameter& V1LayerParameter::_internal_contrastive_loss_param() const {
  const ::trtcaffe::ContrastiveLossParameter* p = contrastive_loss_param_;
  return p != nullptr ? *p : *reinterpret_cast<const ::trtcaffe::ContrastiveLossParameter*>(
      &::trtcaffe::_ContrastiveLossParameter_default_instance_);
}
inline const ::trtcaffe::ContrastiveLossParameter& V1LayerParameter::contrastive_loss_param() const {
  // @@protoc_insertion_point(field_get:trtcaffe.V1LayerParameter.contrastive_loss_param)
  return _internal_contrastive_loss_param();
}
inline void V1LayerParameter::unsafe_arena_set_allocated_contrastive_loss_param(
    ::trtcaffe::ContrastiveLossParameter* contrastive_loss_param) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(contrastive_loss_param_);
  }
  contrastive_loss_param_ = contrastive_loss_param;
  if (contrastive_loss_param) {
    _has_bits_[0] |= 0x20000000u;
  } else {
    _has_bits_[0] &= ~0x20000000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:trtcaffe.V1LayerParameter.contrastive_loss_param)
}
inline ::trtcaffe::ContrastiveLossParameter* V1LayerParameter::release_contrastive_loss_param() {
  auto temp = unsafe_arena_release_contrastive_loss_param();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::trtcaffe::ContrastiveLossParameter* V1LayerParameter::unsafe_arena_release_contrastive_loss_param() {
  // @@protoc_insertion_point(field_release:trtcaffe.V1LayerParameter.contrastive_loss_param)
  _has_bits_[0] &= ~0x20000000u;
  ::trtcaffe::ContrastiveLossParameter* temp = contrastive_loss_param_;
  contrastive_loss_param_ = nullptr;
  return temp;
}
inline ::trtcaffe::ContrastiveLossParameter* V1LayerParameter::_internal_mutable_contrastive_loss_param() {
  _has_bits_[0] |= 0x20000000u;
  if (contrastive_loss_param_ == nullptr) {
    auto* p = CreateMaybeMessage<::trtcaffe::ContrastiveLossParameter>(GetArena());
    contrastive_loss_param_ = p;
  }
  return contrastive_loss_param_;
}
inline ::trtcaffe::ContrastiveLossParameter* V1LayerParameter::mutable_contrastive_loss_param() {
  // @@protoc_insertion_point(field_mutable:trtcaffe.V1LayerParameter.contrastive_loss_param)
  return _internal_mutable_contrastive_loss_param();
}
inline void V1LayerParameter::set_allocated_contrastive_loss_param(::trtcaffe::ContrastiveLossParameter* contrastive_loss_param) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete contrastive_loss_param_;
  }
  if (contrastive_loss_param) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(contrastive_loss_param);
    if (message_arena != submessage_arena) {
      contrastive_loss_param = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, contrastive_loss_param, submessage_arena);
    }
    _has_bits_[0] |= 0x20000000u;
  } else {
    _has_bits_[0] &= ~0x20000000u;
  }
  contrastive_loss_param_ = contrastive_loss_param;
  // @@protoc_insertion_point(field_set_allocated:trtcaffe.V1LayerParameter.contrastive_loss_param)
}

// optional .trtcaffe.ConvolutionParameter convolution_param = 10;
inline bool V1LayerParameter::_internal_has_convolution_param() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || convolution_param_ != nullptr);
  return value;
}
inline bool V1LayerParameter::has_convolution_param() const {
  return _internal_has_convolution_param();
}
inline void V1LayerParameter::clear_convolution_param() {
  if (convolution_param_ != nullptr) convolution_param_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
inline const ::trtcaffe::ConvolutionParameter& V1LayerParameter::_internal_convolution_param() const {
  const ::trtcaffe::ConvolutionParameter* p = convolution_param_;
  return p != nullptr ? *p : *reinterpret_cast<const ::trtcaffe::ConvolutionParameter*>(
      &::trtcaffe::_ConvolutionParameter_default_instance_);
}
inline const ::trtcaffe::ConvolutionParameter& V1LayerParameter::convolution_param() const {
  // @@protoc_insertion_point(field_get:trtcaffe.V1LayerParameter.convolution_param)
  return _internal_convolution_param();
}
inline void V1LayerParameter::unsafe_arena_set_allocated_convolution_param(
    ::trtcaffe::ConvolutionParameter* convolution_param) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(convolution_param_);
  }
  convolution_param_ = convolution_param;
  if (convolution_param) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:trtcaffe.V1LayerParameter.convolution_param)
}
inline ::trtcaffe::ConvolutionParameter* V1LayerParameter::release_convolution_param() {
  auto temp = unsafe_arena_release_convolution_param();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::trtcaffe::ConvolutionParameter* V1LayerParameter::unsafe_arena_release_convolution_param() {
  // @@protoc_insertion_point(field_release:trtcaffe.V1LayerParameter.convolution_param)
  _has_bits_[0] &= ~0x00000008u;
  ::trtcaffe::ConvolutionParameter* temp = convolution_param_;
  convolution_param_ = nullptr;
  return temp;
}
inline ::trtcaffe::ConvolutionParameter* V1LayerParameter::_internal_mutable_convolution_param() {
  _has_bits_[0] |= 0x00000008u;
  if (convolution_param_ == nullptr) {
    auto* p = CreateMaybeMessage<::trtcaffe::ConvolutionParameter>(GetArena());
    convolution_param_ = p;
  }
  return convolution_param_;
}
inline ::trtcaffe::ConvolutionParameter* V1LayerParameter::mutable_convolution_param() {
  // @@protoc_insertion_point(field_mutable:trtcaffe.V1LayerParameter.convolution_param)
  return _internal_mutable_convolution_param();
}
inline void V1LayerParameter::set_allocated_convolution_param(::trtcaffe::ConvolutionParameter* convolution_param) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete convolution_param_;
  }
  if (convolution_param) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(convolution_param);
    if (message_arena != submessage_arena) {
      convolution_param = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, convolution_param, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  convolution_param_ = convolution_param;
  // @@protoc_insertion_point(field_set_allocated:trtcaffe.V1LayerParameter.convolution_param)
}

// optional .trtcaffe.CropParameter crop_param = 44;
inline bool V1LayerParameter::_internal_has_crop_param() const {
  bool value = (_has_bits_[1] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || crop_param_ != nullptr);
  return value;
}
inline bool V1LayerParameter::has_crop_param() const {
  return _internal_has_crop_param();
}
inline void V1LayerParameter::clear_crop_param() {
  if (crop_param_ != nullptr) crop_param_->Clear();
  _has_bits_[1] &= ~0x00000001u;
}
inline const ::trtcaffe::CropParameter& V1LayerParameter::_internal_crop_param() const {
  const ::trtcaffe::CropParameter* p = crop_param_;
  return p != nullptr ? *p : *reinterpret_cast<const ::trtcaffe::CropParameter*>(
      &::trtcaffe::_CropParameter_default_instance_);
}
inline const ::trtcaffe::CropParameter& V1LayerParameter::crop_param() const {
  // @@protoc_insertion_point(field_get:trtcaffe.V1LayerParameter.crop_param)
  return _internal_crop_param();
}
inline void V1LayerParameter::unsafe_arena_set_allocated_crop_param(
    ::trtcaffe::CropParameter* crop_param) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(crop_param_);
  }
  crop_param_ = crop_param;
  if (crop_param) {
    _has_bits_[1] |= 0x00000001u;
  } else {
    _has_bits_[1] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:trtcaffe.V1LayerParameter.crop_param)
}
inline ::trtcaffe::CropParameter* V1LayerParameter::release_crop_param() {
  auto temp = unsafe_arena_release_crop_param();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::trtcaffe::CropParameter* V1LayerParameter::unsafe_arena_release_crop_param() {
  // @@protoc_insertion_point(field_release:trtcaffe.V1LayerParameter.crop_param)
  _has_bits_[1] &= ~0x00000001u;
  ::trtcaffe::CropParameter* temp = crop_param_;
  crop_param_ = nullptr;
  return temp;
}
inline ::trtcaffe::CropParameter* V1LayerParameter::_internal_mutable_crop_param() {
  _has_bits_[1] |= 0x00000001u;
  if (crop_param_ == nullptr) {
    auto* p = CreateMaybeMessage<::trtcaffe::CropParameter>(GetArena());
    crop_param_ = p;
  }
  return crop_param_;
}
inline ::trtcaffe::CropParameter* V1LayerParameter::mutable_crop_param() {
  // @@protoc_insertion_point(field_mutable:trtcaffe.V1LayerParameter.crop_param)
  return _internal_mutable_crop_param();
}
inline void V1LayerParameter::set_allocated_crop_param(::trtcaffe::CropParameter* crop_param) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete crop_param_;
  }
  if (crop_param) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(crop_param);
    if (message_arena != submessage_arena) {
      crop_param = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, crop_param, submessage_arena);
    }
    _has_bits_[1] |= 0x00000001u;
  } else {
    _has_bits_[1] &= ~0x00000001u;
  }
  crop_param_ = crop_param;
  // @@protoc_insertion_point(field_set_allocated:trtcaffe.V1LayerParameter.crop_param)
}

// optional .trtcaffe.DataParameter data_param = 11;
inline bool V1LayerParameter::_internal_has_data_param() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  PROTOBUF_ASSUME(!value || data_param_ != nullptr);
  return value;
}
inline bool V1LayerParameter::has_data_param() const {
  return _internal_has_data_param();
}
inline void V1LayerParameter::clear_data_param() {
  if (data_param_ != nullptr) data_param_->Clear();
  _has_bits_[0] &= ~0x00000010u;
}
inline const ::trtcaffe::DataParameter& V1LayerParameter::_internal_data_param() const {
  const ::trtcaffe::DataParameter* p = data_param_;
  return p != nullptr ? *p : *reinterpret_cast<const ::trtcaffe::DataParameter*>(
      &::trtcaffe::_DataParameter_default_instance_);
}
inline const ::trtcaffe::DataParameter& V1LayerParameter::data_param() const {
  // @@protoc_insertion_point(field_get:trtcaffe.V1LayerParameter.data_param)
  return _internal_data_param();
}
inline void V1LayerParameter::unsafe_arena_set_allocated_data_param(
    ::trtcaffe::DataParameter* data_param) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(data_param_);
  }
  data_param_ = data_param;
  if (data_param) {
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:trtcaffe.V1LayerParameter.data_param)
}
inline ::trtcaffe::DataParameter* V1LayerParameter::release_data_param() {
  auto temp = unsafe_arena_release_data_param();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::trtcaffe::DataParameter* V1LayerParameter::unsafe_arena_release_data_param() {
  // @@protoc_insertion_point(field_release:trtcaffe.V1LayerParameter.data_param)
  _has_bits_[0] &= ~0x00000010u;
  ::trtcaffe::DataParameter* temp = data_param_;
  data_param_ = nullptr;
  return temp;
}
inline ::trtcaffe::DataParameter* V1LayerParameter::_internal_mutable_data_param() {
  _has_bits_[0] |= 0x00000010u;
  if (data_param_ == nullptr) {
    auto* p = CreateMaybeMessage<::trtcaffe::DataParameter>(GetArena());
    data_param_ = p;
  }
  return data_param_;
}
inline ::trtcaffe::DataParameter* V1LayerParameter::mutable_data_param() {
  // @@protoc_insertion_point(field_mutable:trtcaffe.V1LayerParameter.data_param)
  return _internal_mutable_data_param();
}
inline void V1LayerParameter::set_allocated_data_param(::trtcaffe::DataParameter* data_param) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete data_param_;
  }
  if (data_param) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(data_param);
    if (message_arena != submessage_arena) {
      data_param = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, data_param, submessage_arena);
    }
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  data_param_ = data_param;
  // @@protoc_insertion_point(field_set_allocated:trtcaffe.V1LayerParameter.data_param)
}

// optional .trtcaffe.DropoutParameter dropout_param = 12;
inline bool V1LayerParameter::_internal_has_dropout_param() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  PROTOBUF_ASSUME(!value || dropout_param_ != nullptr);
  return value;
}
inline bool V1LayerParameter::has_dropout_param() const {
  return _internal_has_dropout_param();
}
inline void V1LayerParameter::clear_dropout_param() {
  if (dropout_param_ != nullptr) dropout_param_->Clear();
  _has_bits_[0] &= ~0x00000020u;
}
inline const ::trtcaffe::DropoutParameter& V1LayerParameter::_internal_dropout_param() const {
  const ::trtcaffe::DropoutParameter* p = dropout_param_;
  return p != nullptr ? *p : *reinterpret_cast<const ::trtcaffe::DropoutParameter*>(
      &::trtcaffe::_DropoutParameter_default_instance_);
}
inline const ::trtcaffe::DropoutParameter& V1LayerParameter::dropout_param() const {
  // @@protoc_insertion_point(field_get:trtcaffe.V1LayerParameter.dropout_param)
  return _internal_dropout_param();
}
inline void V1LayerParameter::unsafe_arena_set_allocated_dropout_param(
    ::trtcaffe::DropoutParameter* dropout_param) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(dropout_param_);
  }
  dropout_param_ = dropout_param;
  if (dropout_param) {
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:trtcaffe.V1LayerParameter.dropout_param)
}
inline ::trtcaffe::DropoutParameter* V1LayerParameter::release_dropout_param() {
  auto temp = unsafe_arena_release_dropout_param();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::trtcaffe::DropoutParameter* V1LayerParameter::unsafe_arena_release_dropout_param() {
  // @@protoc_insertion_point(field_release:trtcaffe.V1LayerParameter.dropout_param)
  _has_bits_[0] &= ~0x00000020u;
  ::trtcaffe::DropoutParameter* temp = dropout_param_;
  dropout_param_ = nullptr;
  return temp;
}
inline ::trtcaffe::DropoutParameter* V1LayerParameter::_internal_mutable_dropout_param() {
  _has_bits_[0] |= 0x00000020u;
  if (dropout_param_ == nullptr) {
    auto* p = CreateMaybeMessage<::trtcaffe::DropoutParameter>(GetArena());
    dropout_param_ = p;
  }
  return dropout_param_;
}
inline ::trtcaffe::DropoutParameter* V1LayerParameter::mutable_dropout_param() {
  // @@protoc_insertion_point(field_mutable:trtcaffe.V1LayerParameter.dropout_param)
  return _internal_mutable_dropout_param();
}
inline void V1LayerParameter::set_allocated_dropout_param(::trtcaffe::DropoutParameter* dropout_param) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete dropout_param_;
  }
  if (dropout_param) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(dropout_param);
    if (message_arena != submessage_arena) {
      dropout_param = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, dropout_param, submessage_arena);
    }
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  dropout_param_ = dropout_param;
  // @@protoc_insertion_point(field_set_allocated:trtcaffe.V1LayerParameter.dropout_param)
}

// optional .trtcaffe.DummyDataParameter dummy_data_param = 26;
inline bool V1LayerParameter::_internal_has_dummy_data_param() const {
  bool value = (_has_bits_[0] & 0x00080000u) != 0;
  PROTOBUF_ASSUME(!value || dummy_data_param_ != nullptr);
  return value;
}
inline bool V1LayerParameter::has_dummy_data_param() const {
  return _internal_has_dummy_data_param();
}
inline void V1LayerParameter::clear_dummy_data_param() {
  if (dummy_data_param_ != nullptr) dummy_data_param_->Clear();
  _has_bits_[0] &= ~0x00080000u;
}
inline const ::trtcaffe::DummyDataParameter& V1LayerParameter::_internal_dummy_data_param() const {
  const ::trtcaffe::DummyDataParameter* p = dummy_data_param_;
  return p != nullptr ? *p : *reinterpret_cast<const ::trtcaffe::DummyDataParameter*>(
      &::trtcaffe::_DummyDataParameter_default_instance_);
}
inline const ::trtcaffe::DummyDataParameter& V1LayerParameter::dummy_data_param() const {
  // @@protoc_insertion_point(field_get:trtcaffe.V1LayerParameter.dummy_data_param)
  return _internal_dummy_data_param();
}
inline void V1LayerParameter::unsafe_arena_set_allocated_dummy_data_param(
    ::trtcaffe::DummyDataParameter* dummy_data_param) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(dummy_data_param_);
  }
  dummy_data_param_ = dummy_data_param;
  if (dummy_data_param) {
    _has_bits_[0] |= 0x00080000u;
  } else {
    _has_bits_[0] &= ~0x00080000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:trtcaffe.V1LayerParameter.dummy_data_param)
}
inline ::trtcaffe::DummyDataParameter* V1LayerParameter::release_dummy_data_param() {
  auto temp = unsafe_arena_release_dummy_data_param();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::trtcaffe::DummyDataParameter* V1LayerParameter::unsafe_arena_release_dummy_data_param() {
  // @@protoc_insertion_point(field_release:trtcaffe.V1LayerParameter.dummy_data_param)
  _has_bits_[0] &= ~0x00080000u;
  ::trtcaffe::DummyDataParameter* temp = dummy_data_param_;
  dummy_data_param_ = nullptr;
  return temp;
}
inline ::trtcaffe::DummyDataParameter* V1LayerParameter::_internal_mutable_dummy_data_param() {
  _has_bits_[0] |= 0x00080000u;
  if (dummy_data_param_ == nullptr) {
    auto* p = CreateMaybeMessage<::trtcaffe::DummyDataParameter>(GetArena());
    dummy_data_param_ = p;
  }
  return dummy_data_param_;
}
inline ::trtcaffe::DummyDataParameter* V1LayerParameter::mutable_dummy_data_param() {
  // @@protoc_insertion_point(field_mutable:trtcaffe.V1LayerParameter.dummy_data_param)
  return _internal_mutable_dummy_data_param();
}
inline void V1LayerParameter::set_allocated_dummy_data_param(::trtcaffe::DummyDataParameter* dummy_data_param) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete dummy_data_param_;
  }
  if (dummy_data_param) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(dummy_data_param);
    if (message_arena != submessage_arena) {
      dummy_data_param = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, dummy_data_param, submessage_arena);
    }
    _has_bits_[0] |= 0x00080000u;
  } else {
    _has_bits_[0] &= ~0x00080000u;
  }
  dummy_data_param_ = dummy_data_param;
  // @@protoc_insertion_point(field_set_allocated:trtcaffe.V1LayerParameter.dummy_data_param)
}

// optional .trtcaffe.EltwiseParameter eltwise_param = 24;
inline bool V1LayerParameter::_internal_has_eltwise_param() const {
  bool value = (_has_bits_[0] & 0x00020000u) != 0;
  PROTOBUF_ASSUME(!value || eltwise_param_ != nullptr);
  return value;
}
inline bool V1LayerParameter::has_eltwise_param() const {
  return _internal_has_eltwise_param();
}
inline void V1LayerParameter::clear_eltwise_param() {
  if (eltwise_param_ != nullptr) eltwise_param_->Clear();
  _has_bits_[0] &= ~0x00020000u;
}
inline const ::trtcaffe::EltwiseParameter& V1LayerParameter::_internal_eltwise_param() const {
  const ::trtcaffe::EltwiseParameter* p = eltwise_param_;
  return p != nullptr ? *p : *reinterpret_cast<const ::trtcaffe::EltwiseParameter*>(
      &::trtcaffe::_EltwiseParameter_default_instance_);
}
inline const ::trtcaffe::EltwiseParameter& V1LayerParameter::eltwise_param() const {
  // @@protoc_insertion_point(field_get:trtcaffe.V1LayerParameter.eltwise_param)
  return _internal_eltwise_param();
}
inline void V1LayerParameter::unsafe_arena_set_allocated_eltwise_param(
    ::trtcaffe::EltwiseParameter* eltwise_param) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(eltwise_param_);
  }
  eltwise_param_ = eltwise_param;
  if (eltwise_param) {
    _has_bits_[0] |= 0x00020000u;
  } else {
    _has_bits_[0] &= ~0x00020000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:trtcaffe.V1LayerParameter.eltwise_param)
}
inline ::trtcaffe::EltwiseParameter* V1LayerParameter::release_eltwise_param() {
  auto temp = unsafe_arena_release_eltwise_param();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::trtcaffe::EltwiseParameter* V1LayerParameter::unsafe_arena_release_eltwise_param() {
  // @@protoc_insertion_point(field_release:trtcaffe.V1LayerParameter.eltwise_param)
  _has_bits_[0] &= ~0x00020000u;
  ::trtcaffe::EltwiseParameter* temp = eltwise_param_;
  eltwise_param_ = nullptr;
  return temp;
}
inline ::trtcaffe::EltwiseParameter* V1LayerParameter::_internal_mutable_eltwise_param() {
  _has_bits_[0] |= 0x00020000u;
  if (eltwise_param_ == nullptr) {
    auto* p = CreateMaybeMessage<::trtcaffe::EltwiseParameter>(GetArena());
    eltwise_param_ = p;
  }
  return eltwise_param_;
}
inline ::trtcaffe::EltwiseParameter* V1LayerParameter::mutable_eltwise_param() {
  // @@protoc_insertion_point(field_mutable:trtcaffe.V1LayerParameter.eltwise_param)
  return _internal_mutable_eltwise_param();
}
inline void V1LayerParameter::set_allocated_eltwise_param(::trtcaffe::EltwiseParameter* eltwise_param) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete eltwise_param_;
  }
  if (eltwise_param) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(eltwise_param);
    if (message_arena != submessage_arena) {
      eltwise_param = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, eltwise_param, submessage_arena);
    }
    _has_bits_[0] |= 0x00020000u;
  } else {
    _has_bits_[0] &= ~0x00020000u;
  }
  eltwise_param_ = eltwise_param;
  // @@protoc_insertion_point(field_set_allocated:trtcaffe.V1LayerParameter.eltwise_param)
}

// optional .trtcaffe.ExpParameter exp_param = 41;
inline bool V1LayerParameter::_internal_has_exp_param() const {
  bool value = (_has_bits_[0] & 0x40000000u) != 0;
  PROTOBUF_ASSUME(!value || exp_param_ != nullptr);
  return value;
}
inline bool V1LayerParameter::has_exp_param() const {
  return _internal_has_exp_param();
}
inline void V1LayerParameter::clear_exp_param() {
  if (exp_param_ != nullptr) exp_param_->Clear();
  _has_bits_[0] &= ~0x40000000u;
}
inline const ::trtcaffe::ExpParameter& V1LayerParameter::_internal_exp_param() const {
  const ::trtcaffe::ExpParameter* p = exp_param_;
  return p != nullptr ? *p : *reinterpret_cast<const ::trtcaffe::ExpParameter*>(
      &::trtcaffe::_ExpParameter_default_instance_);
}
inline const ::trtcaffe::ExpParameter& V1LayerParameter::exp_param() const {
  // @@protoc_insertion_point(field_get:trtcaffe.V1LayerParameter.exp_param)
  return _internal_exp_param();
}
inline void V1LayerParameter::unsafe_arena_set_allocated_exp_param(
    ::trtcaffe::ExpParameter* exp_param) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(exp_param_);
  }
  exp_param_ = exp_param;
  if (exp_param) {
    _has_bits_[0] |= 0x40000000u;
  } else {
    _has_bits_[0] &= ~0x40000000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:trtcaffe.V1LayerParameter.exp_param)
}
inline ::trtcaffe::ExpParameter* V1LayerParameter::release_exp_param() {
  auto temp = unsafe_arena_release_exp_param();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::trtcaffe::ExpParameter* V1LayerParameter::unsafe_arena_release_exp_param() {
  // @@protoc_insertion_point(field_release:trtcaffe.V1LayerParameter.exp_param)
  _has_bits_[0] &= ~0x40000000u;
  ::trtcaffe::ExpParameter* temp = exp_param_;
  exp_param_ = nullptr;
  return temp;
}
inline ::trtcaffe::ExpParameter* V1LayerParameter::_internal_mutable_exp_param() {
  _has_bits_[0] |= 0x40000000u;
  if (exp_param_ == nullptr) {
    auto* p = CreateMaybeMessage<::trtcaffe::ExpParameter>(GetArena());
    exp_param_ = p;
  }
  return exp_param_;
}
inline ::trtcaffe::ExpParameter* V1LayerParameter::mutable_exp_param() {
  // @@protoc_insertion_point(field_mutable:trtcaffe.V1LayerParameter.exp_param)
  return _internal_mutable_exp_param();
}
inline void V1LayerParameter::set_allocated_exp_param(::trtcaffe::ExpParameter* exp_param) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete exp_param_;
  }
  if (exp_param) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(exp_param);
    if (message_arena != submessage_arena) {
      exp_param = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, exp_param, submessage_arena);
    }
    _has_bits_[0] |= 0x40000000u;
  } else {
    _has_bits_[0] &= ~0x40000000u;
  }
  exp_param_ = exp_param;
  // @@protoc_insertion_point(field_set_allocated:trtcaffe.V1LayerParameter.exp_param)
}

// optional .trtcaffe.HDF5DataParameter hdf5_data_param = 13;
inline bool V1LayerParameter::_internal_has_hdf5_data_param() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  PROTOBUF_ASSUME(!value || hdf5_data_param_ != nullptr);
  return value;
}
inline bool V1LayerParameter::has_hdf5_data_param() const {
  return _internal_has_hdf5_data_param();
}
inline void V1LayerParameter::clear_hdf5_data_param() {
  if (hdf5_data_param_ != nullptr) hdf5_data_param_->Clear();
  _has_bits_[0] &= ~0x00000040u;
}
inline const ::trtcaffe::HDF5DataParameter& V1LayerParameter::_internal_hdf5_data_param() const {
  const ::trtcaffe::HDF5DataParameter* p = hdf5_data_param_;
  return p != nullptr ? *p : *reinterpret_cast<const ::trtcaffe::HDF5DataParameter*>(
      &::trtcaffe::_HDF5DataParameter_default_instance_);
}
inline const ::trtcaffe::HDF5DataParameter& V1LayerParameter::hdf5_data_param() const {
  // @@protoc_insertion_point(field_get:trtcaffe.V1LayerParameter.hdf5_data_param)
  return _internal_hdf5_data_param();
}
inline void V1LayerParameter::unsafe_arena_set_allocated_hdf5_data_param(
    ::trtcaffe::HDF5DataParameter* hdf5_data_param) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(hdf5_data_param_);
  }
  hdf5_data_param_ = hdf5_data_param;
  if (hdf5_data_param) {
    _has_bits_[0] |= 0x00000040u;
  } else {
    _has_bits_[0] &= ~0x00000040u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:trtcaffe.V1LayerParameter.hdf5_data_param)
}
inline ::trtcaffe::HDF5DataParameter* V1LayerParameter::release_hdf5_data_param() {
  auto temp = unsafe_arena_release_hdf5_data_param();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::trtcaffe::HDF5DataParameter* V1LayerParameter::unsafe_arena_release_hdf5_data_param() {
  // @@protoc_insertion_point(field_release:trtcaffe.V1LayerParameter.hdf5_data_param)
  _has_bits_[0] &= ~0x00000040u;
  ::trtcaffe::HDF5DataParameter* temp = hdf5_data_param_;
  hdf5_data_param_ = nullptr;
  return temp;
}
inline ::trtcaffe::HDF5DataParameter* V1LayerParameter::_internal_mutable_hdf5_data_param() {
  _has_bits_[0] |= 0x00000040u;
  if (hdf5_data_param_ == nullptr) {
    auto* p = CreateMaybeMessage<::trtcaffe::HDF5DataParameter>(GetArena());
    hdf5_data_param_ = p;
  }
  return hdf5_data_param_;
}
inline ::trtcaffe::HDF5DataParameter* V1LayerParameter::mutable_hdf5_data_param() {
  // @@protoc_insertion_point(field_mutable:trtcaffe.V1LayerParameter.hdf5_data_param)
  return _internal_mutable_hdf5_data_param();
}
inline void V1LayerParameter::set_allocated_hdf5_data_param(::trtcaffe::HDF5DataParameter* hdf5_data_param) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete hdf5_data_param_;
  }
  if (hdf5_data_param) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(hdf5_data_param);
    if (message_arena != submessage_arena) {
      hdf5_data_param = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, hdf5_data_param, submessage_arena);
    }
    _has_bits_[0] |= 0x00000040u;
  } else {
    _has_bits_[0] &= ~0x00000040u;
  }
  hdf5_data_param_ = hdf5_data_param;
  // @@protoc_insertion_point(field_set_allocated:trtcaffe.V1LayerParameter.hdf5_data_param)
}

// optional .trtcaffe.HDF5OutputParameter hdf5_output_param = 14;
inline bool V1LayerParameter::_internal_has_hdf5_output_param() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  PROTOBUF_ASSUME(!value || hdf5_output_param_ != nullptr);
  return value;
}
inline bool V1LayerParameter::has_hdf5_output_param() const {
  return _internal_has_hdf5_output_param();
}
inline void V1LayerParameter::clear_hdf5_output_param() {
  if (hdf5_output_param_ != nullptr) hdf5_output_param_->Clear();
  _has_bits_[0] &= ~0x00000080u;
}
inline const ::trtcaffe::HDF5OutputParameter& V1LayerParameter::_internal_hdf5_output_param() const {
  const ::trtcaffe::HDF5OutputParameter* p = hdf5_output_param_;
  return p != nullptr ? *p : *reinterpret_cast<const ::trtcaffe::HDF5OutputParameter*>(
      &::trtcaffe::_HDF5OutputParameter_default_instance_);
}
inline const ::trtcaffe::HDF5OutputParameter& V1LayerParameter::hdf5_output_param() const {
  // @@protoc_insertion_point(field_get:trtcaffe.V1LayerParameter.hdf5_output_param)
  return _internal_hdf5_output_param();
}
inline void V1LayerParameter::unsafe_arena_set_allocated_hdf5_output_param(
    ::trtcaffe::HDF5OutputParameter* hdf5_output_param) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(hdf5_output_param_);
  }
  hdf5_output_param_ = hdf5_output_param;
  if (hdf5_output_param) {
    _has_bits_[0] |= 0x00000080u;
  } else {
    _has_bits_[0] &= ~0x00000080u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:trtcaffe.V1LayerParameter.hdf5_output_param)
}
inline ::trtcaffe::HDF5OutputParameter* V1LayerParameter::release_hdf5_output_param() {
  auto temp = unsafe_arena_release_hdf5_output_param();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::trtcaffe::HDF5OutputParameter* V1LayerParameter::unsafe_arena_release_hdf5_output_param() {
  // @@protoc_insertion_point(field_release:trtcaffe.V1LayerParameter.hdf5_output_param)
  _has_bits_[0] &= ~0x00000080u;
  ::trtcaffe::HDF5OutputParameter* temp = hdf5_output_param_;
  hdf5_output_param_ = nullptr;
  return temp;
}
inline ::trtcaffe::HDF5OutputParameter* V1LayerParameter::_internal_mutable_hdf5_output_param() {
  _has_bits_[0] |= 0x00000080u;
  if (hdf5_output_param_ == nullptr) {
    auto* p = CreateMaybeMessage<::trtcaffe::HDF5OutputParameter>(GetArena());
    hdf5_output_param_ = p;
  }
  return hdf5_output_param_;
}
inline ::trtcaffe::HDF5OutputParameter* V1LayerParameter::mutable_hdf5_output_param() {
  // @@protoc_insertion_point(field_mutable:trtcaffe.V1LayerParameter.hdf5_output_param)
  return _internal_mutable_hdf5_output_param();
}
inline void V1LayerParameter::set_allocated_hdf5_output_param(::trtcaffe::HDF5OutputParameter* hdf5_output_param) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete hdf5_output_param_;
  }
  if (hdf5_output_param) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(hdf5_output_param);
    if (message_arena != submessage_arena) {
      hdf5_output_param = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, hdf5_output_param, submessage_arena);
    }
    _has_bits_[0] |= 0x00000080u;
  } else {
    _has_bits_[0] &= ~0x00000080u;
  }
  hdf5_output_param_ = hdf5_output_param;
  // @@protoc_insertion_point(field_set_allocated:trtcaffe.V1LayerParameter.hdf5_output_param)
}

// optional .trtcaffe.HingeLossParameter hinge_loss_param = 29;
inline bool V1LayerParameter::_internal_has_hinge_loss_param() const {
  bool value = (_has_bits_[0] & 0x00200000u) != 0;
  PROTOBUF_ASSUME(!value || hinge_loss_param_ != nullptr);
  return value;
}
inline bool V1LayerParameter::has_hinge_loss_param() const {
  return _internal_has_hinge_loss_param();
}
inline void V1LayerParameter::clear_hinge_loss_param() {
  if (hinge_loss_param_ != nullptr) hinge_loss_param_->Clear();
  _has_bits_[0] &= ~0x00200000u;
}
inline const ::trtcaffe::HingeLossParameter& V1LayerParameter::_internal_hinge_loss_param() const {
  const ::trtcaffe::HingeLossParameter* p = hinge_loss_param_;
  return p != nullptr ? *p : *reinterpret_cast<const ::trtcaffe::HingeLossParameter*>(
      &::trtcaffe::_HingeLossParameter_default_instance_);
}
inline const ::trtcaffe::HingeLossParameter& V1LayerParameter::hinge_loss_param() const {
  // @@protoc_insertion_point(field_get:trtcaffe.V1LayerParameter.hinge_loss_param)
  return _internal_hinge_loss_param();
}
inline void V1LayerParameter::unsafe_arena_set_allocated_hinge_loss_param(
    ::trtcaffe::HingeLossParameter* hinge_loss_param) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(hinge_loss_param_);
  }
  hinge_loss_param_ = hinge_loss_param;
  if (hinge_loss_param) {
    _has_bits_[0] |= 0x00200000u;
  } else {
    _has_bits_[0] &= ~0x00200000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:trtcaffe.V1LayerParameter.hinge_loss_param)
}
inline ::trtcaffe::HingeLossParameter* V1LayerParameter::release_hinge_loss_param() {
  auto temp = unsafe_arena_release_hinge_loss_param();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::trtcaffe::HingeLossParameter* V1LayerParameter::unsafe_arena_release_hinge_loss_param() {
  // @@protoc_insertion_point(field_release:trtcaffe.V1LayerParameter.hinge_loss_param)
  _has_bits_[0] &= ~0x00200000u;
  ::trtcaffe::HingeLossParameter* temp = hinge_loss_param_;
  hinge_loss_param_ = nullptr;
  return temp;
}
inline ::trtcaffe::HingeLossParameter* V1LayerParameter::_internal_mutable_hinge_loss_param() {
  _has_bits_[0] |= 0x00200000u;
  if (hinge_loss_param_ == nullptr) {
    auto* p = CreateMaybeMessage<::trtcaffe::HingeLossParameter>(GetArena());
    hinge_loss_param_ = p;
  }
  return hinge_loss_param_;
}
inline ::trtcaffe::HingeLossParameter* V1LayerParameter::mutable_hinge_loss_param() {
  // @@protoc_insertion_point(field_mutable:trtcaffe.V1LayerParameter.hinge_loss_param)
  return _internal_mutable_hinge_loss_param();
}
inline void V1LayerParameter::set_allocated_hinge_loss_param(::trtcaffe::HingeLossParameter* hinge_loss_param) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete hinge_loss_param_;
  }
  if (hinge_loss_param) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(hinge_loss_param);
    if (message_arena != submessage_arena) {
      hinge_loss_param = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, hinge_loss_param, submessage_arena);
    }
    _has_bits_[0] |= 0x00200000u;
  } else {
    _has_bits_[0] &= ~0x00200000u;
  }
  hinge_loss_param_ = hinge_loss_param;
  // @@protoc_insertion_point(field_set_allocated:trtcaffe.V1LayerParameter.hinge_loss_param)
}

// optional .trtcaffe.ImageDataParameter image_data_param = 15;
inline bool V1LayerParameter::_internal_has_image_data_param() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  PROTOBUF_ASSUME(!value || image_data_param_ != nullptr);
  return value;
}
inline bool V1LayerParameter::has_image_data_param() const {
  return _internal_has_image_data_param();
}
inline void V1LayerParameter::clear_image_data_param() {
  if (image_data_param_ != nullptr) image_data_param_->Clear();
  _has_bits_[0] &= ~0x00000100u;
}
inline const ::trtcaffe::ImageDataParameter& V1LayerParameter::_internal_image_data_param() const {
  const ::trtcaffe::ImageDataParameter* p = image_data_param_;
  return p != nullptr ? *p : *reinterpret_cast<const ::trtcaffe::ImageDataParameter*>(
      &::trtcaffe::_ImageDataParameter_default_instance_);
}
inline const ::trtcaffe::ImageDataParameter& V1LayerParameter::image_data_param() const {
  // @@protoc_insertion_point(field_get:trtcaffe.V1LayerParameter.image_data_param)
  return _internal_image_data_param();
}
inline void V1LayerParameter::unsafe_arena_set_allocated_image_data_param(
    ::trtcaffe::ImageDataParameter* image_data_param) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(image_data_param_);
  }
  image_data_param_ = image_data_param;
  if (image_data_param) {
    _has_bits_[0] |= 0x00000100u;
  } else {
    _has_bits_[0] &= ~0x00000100u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:trtcaffe.V1LayerParameter.image_data_param)
}
inline ::trtcaffe::ImageDataParameter* V1LayerParameter::release_image_data_param() {
  auto temp = unsafe_arena_release_image_data_param();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::trtcaffe::ImageDataParameter* V1LayerParameter::unsafe_arena_release_image_data_param() {
  // @@protoc_insertion_point(field_release:trtcaffe.V1LayerParameter.image_data_param)
  _has_bits_[0] &= ~0x00000100u;
  ::trtcaffe::ImageDataParameter* temp = image_data_param_;
  image_data_param_ = nullptr;
  return temp;
}
inline ::trtcaffe::ImageDataParameter* V1LayerParameter::_internal_mutable_image_data_param() {
  _has_bits_[0] |= 0x00000100u;
  if (image_data_param_ == nullptr) {
    auto* p = CreateMaybeMessage<::trtcaffe::ImageDataParameter>(GetArena());
    image_data_param_ = p;
  }
  return image_data_param_;
}
inline ::trtcaffe::ImageDataParameter* V1LayerParameter::mutable_image_data_param() {
  // @@protoc_insertion_point(field_mutable:trtcaffe.V1LayerParameter.image_data_param)
  return _internal_mutable_image_data_param();
}
inline void V1LayerParameter::set_allocated_image_data_param(::trtcaffe::ImageDataParameter* image_data_param) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete image_data_param_;
  }
  if (image_data_param) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(image_data_param);
    if (message_arena != submessage_arena) {
      image_data_param = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, image_data_param, submessage_arena);
    }
    _has_bits_[0] |= 0x00000100u;
  } else {
    _has_bits_[0] &= ~0x00000100u;
  }
  image_data_param_ = image_data_param;
  // @@protoc_insertion_point(field_set_allocated:trtcaffe.V1LayerParameter.image_data_param)
}

// optional .trtcaffe.InfogainLossParameter infogain_loss_param = 16;
inline bool V1LayerParameter::_internal_has_infogain_loss_param() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  PROTOBUF_ASSUME(!value || infogain_loss_param_ != nullptr);
  return value;
}
inline bool V1LayerParameter::has_infogain_loss_param() const {
  return _internal_has_infogain_loss_param();
}
inline void V1LayerParameter::clear_infogain_loss_param() {
  if (infogain_loss_param_ != nullptr) infogain_loss_param_->Clear();
  _has_bits_[0] &= ~0x00000200u;
}
inline const ::trtcaffe::InfogainLossParameter& V1LayerParameter::_internal_infogain_loss_param() const {
  const ::trtcaffe::InfogainLossParameter* p = infogain_loss_param_;
  return p != nullptr ? *p : *reinterpret_cast<const ::trtcaffe::InfogainLossParameter*>(
      &::trtcaffe::_InfogainLossParameter_default_instance_);
}
inline const ::trtcaffe::InfogainLossParameter& V1LayerParameter::infogain_loss_param() const {
  // @@protoc_insertion_point(field_get:trtcaffe.V1LayerParameter.infogain_loss_param)
  return _internal_infogain_loss_param();
}
inline void V1LayerParameter::unsafe_arena_set_allocated_infogain_loss_param(
    ::trtcaffe::InfogainLossParameter* infogain_loss_param) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(infogain_loss_param_);
  }
  infogain_loss_param_ = infogain_loss_param;
  if (infogain_loss_param) {
    _has_bits_[0] |= 0x00000200u;
  } else {
    _has_bits_[0] &= ~0x00000200u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:trtcaffe.V1LayerParameter.infogain_loss_param)
}
inline ::trtcaffe::InfogainLossParameter* V1LayerParameter::release_infogain_loss_param() {
  auto temp = unsafe_arena_release_infogain_loss_param();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::trtcaffe::InfogainLossParameter* V1LayerParameter::unsafe_arena_release_infogain_loss_param() {
  // @@protoc_insertion_point(field_release:trtcaffe.V1LayerParameter.infogain_loss_param)
  _has_bits_[0] &= ~0x00000200u;
  ::trtcaffe::InfogainLossParameter* temp = infogain_loss_param_;
  infogain_loss_param_ = nullptr;
  return temp;
}
inline ::trtcaffe::InfogainLossParameter* V1LayerParameter::_internal_mutable_infogain_loss_param() {
  _has_bits_[0] |= 0x00000200u;
  if (infogain_loss_param_ == nullptr) {
    auto* p = CreateMaybeMessage<::trtcaffe::InfogainLossParameter>(GetArena());
    infogain_loss_param_ = p;
  }
  return infogain_loss_param_;
}
inline ::trtcaffe::InfogainLossParameter* V1LayerParameter::mutable_infogain_loss_param() {
  // @@protoc_insertion_point(field_mutable:trtcaffe.V1LayerParameter.infogain_loss_param)
  return _internal_mutable_infogain_loss_param();
}
inline void V1LayerParameter::set_allocated_infogain_loss_param(::trtcaffe::InfogainLossParameter* infogain_loss_param) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete infogain_loss_param_;
  }
  if (infogain_loss_param) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(infogain_loss_param);
    if (message_arena != submessage_arena) {
      infogain_loss_param = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, infogain_loss_param, submessage_arena);
    }
    _has_bits_[0] |= 0x00000200u;
  } else {
    _has_bits_[0] &= ~0x00000200u;
  }
  infogain_loss_param_ = infogain_loss_param;
  // @@protoc_insertion_point(field_set_allocated:trtcaffe.V1LayerParameter.infogain_loss_param)
}

// optional .trtcaffe.InnerProductParameter inner_product_param = 17;
inline bool V1LayerParameter::_internal_has_inner_product_param() const {
  bool value = (_has_bits_[0] & 0x00000400u) != 0;
  PROTOBUF_ASSUME(!value || inner_product_param_ != nullptr);
  return value;
}
inline bool V1LayerParameter::has_inner_product_param() const {
  return _internal_has_inner_product_param();
}
inline void V1LayerParameter::clear_inner_product_param() {
  if (inner_product_param_ != nullptr) inner_product_param_->Clear();
  _has_bits_[0] &= ~0x00000400u;
}
inline const ::trtcaffe::InnerProductParameter& V1LayerParameter::_internal_inner_product_param() const {
  const ::trtcaffe::InnerProductParameter* p = inner_product_param_;
  return p != nullptr ? *p : *reinterpret_cast<const ::trtcaffe::InnerProductParameter*>(
      &::trtcaffe::_InnerProductParameter_default_instance_);
}
inline const ::trtcaffe::InnerProductParameter& V1LayerParameter::inner_product_param() const {
  // @@protoc_insertion_point(field_get:trtcaffe.V1LayerParameter.inner_product_param)
  return _internal_inner_product_param();
}
inline void V1LayerParameter::unsafe_arena_set_allocated_inner_product_param(
    ::trtcaffe::InnerProductParameter* inner_product_param) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(inner_product_param_);
  }
  inner_product_param_ = inner_product_param;
  if (inner_product_param) {
    _has_bits_[0] |= 0x00000400u;
  } else {
    _has_bits_[0] &= ~0x00000400u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:trtcaffe.V1LayerParameter.inner_product_param)
}
inline ::trtcaffe::InnerProductParameter* V1LayerParameter::release_inner_product_param() {
  auto temp = unsafe_arena_release_inner_product_param();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::trtcaffe::InnerProductParameter* V1LayerParameter::unsafe_arena_release_inner_product_param() {
  // @@protoc_insertion_point(field_release:trtcaffe.V1LayerParameter.inner_product_param)
  _has_bits_[0] &= ~0x00000400u;
  ::trtcaffe::InnerProductParameter* temp = inner_product_param_;
  inner_product_param_ = nullptr;
  return temp;
}
inline ::trtcaffe::InnerProductParameter* V1LayerParameter::_internal_mutable_inner_product_param() {
  _has_bits_[0] |= 0x00000400u;
  if (inner_product_param_ == nullptr) {
    auto* p = CreateMaybeMessage<::trtcaffe::InnerProductParameter>(GetArena());
    inner_product_param_ = p;
  }
  return inner_product_param_;
}
inline ::trtcaffe::InnerProductParameter* V1LayerParameter::mutable_inner_product_param() {
  // @@protoc_insertion_point(field_mutable:trtcaffe.V1LayerParameter.inner_product_param)
  return _internal_mutable_inner_product_param();
}
inline void V1LayerParameter::set_allocated_inner_product_param(::trtcaffe::InnerProductParameter* inner_product_param) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete inner_product_param_;
  }
  if (inner_product_param) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(inner_product_param);
    if (message_arena != submessage_arena) {
      inner_product_param = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, inner_product_param, submessage_arena);
    }
    _has_bits_[0] |= 0x00000400u;
  } else {
    _has_bits_[0] &= ~0x00000400u;
  }
  inner_product_param_ = inner_product_param;
  // @@protoc_insertion_point(field_set_allocated:trtcaffe.V1LayerParameter.inner_product_param)
}

// optional .trtcaffe.LRNParameter lrn_param = 18;
inline bool V1LayerParameter::_internal_has_lrn_param() const {
  bool value = (_has_bits_[0] & 0x00000800u) != 0;
  PROTOBUF_ASSUME(!value || lrn_param_ != nullptr);
  return value;
}
inline bool V1LayerParameter::has_lrn_param() const {
  return _internal_has_lrn_param();
}
inline void V1LayerParameter::clear_lrn_param() {
  if (lrn_param_ != nullptr) lrn_param_->Clear();
  _has_bits_[0] &= ~0x00000800u;
}
inline const ::trtcaffe::LRNParameter& V1LayerParameter::_internal_lrn_param() const {
  const ::trtcaffe::LRNParameter* p = lrn_param_;
  return p != nullptr ? *p : *reinterpret_cast<const ::trtcaffe::LRNParameter*>(
      &::trtcaffe::_LRNParameter_default_instance_);
}
inline const ::trtcaffe::LRNParameter& V1LayerParameter::lrn_param() const {
  // @@protoc_insertion_point(field_get:trtcaffe.V1LayerParameter.lrn_param)
  return _internal_lrn_param();
}
inline void V1LayerParameter::unsafe_arena_set_allocated_lrn_param(
    ::trtcaffe::LRNParameter* lrn_param) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(lrn_param_);
  }
  lrn_param_ = lrn_param;
  if (lrn_param) {
    _has_bits_[0] |= 0x00000800u;
  } else {
    _has_bits_[0] &= ~0x00000800u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:trtcaffe.V1LayerParameter.lrn_param)
}
inline ::trtcaffe::LRNParameter* V1LayerParameter::release_lrn_param() {
  auto temp = unsafe_arena_release_lrn_param();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::trtcaffe::LRNParameter* V1LayerParameter::unsafe_arena_release_lrn_param() {
  // @@protoc_insertion_point(field_release:trtcaffe.V1LayerParameter.lrn_param)
  _has_bits_[0] &= ~0x00000800u;
  ::trtcaffe::LRNParameter* temp = lrn_param_;
  lrn_param_ = nullptr;
  return temp;
}
inline ::trtcaffe::LRNParameter* V1LayerParameter::_internal_mutable_lrn_param() {
  _has_bits_[0] |= 0x00000800u;
  if (lrn_param_ == nullptr) {
    auto* p = CreateMaybeMessage<::trtcaffe::LRNParameter>(GetArena());
    lrn_param_ = p;
  }
  return lrn_param_;
}
inline ::trtcaffe::LRNParameter* V1LayerParameter::mutable_lrn_param() {
  // @@protoc_insertion_point(field_mutable:trtcaffe.V1LayerParameter.lrn_param)
  return _internal_mutable_lrn_param();
}
inline void V1LayerParameter::set_allocated_lrn_param(::trtcaffe::LRNParameter* lrn_param) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete lrn_param_;
  }
  if (lrn_param) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(lrn_param);
    if (message_arena != submessage_arena) {
      lrn_param = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, lrn_param, submessage_arena);
    }
    _has_bits_[0] |= 0x00000800u;
  } else {
    _has_bits_[0] &= ~0x00000800u;
  }
  lrn_param_ = lrn_param;
  // @@protoc_insertion_point(field_set_allocated:trtcaffe.V1LayerParameter.lrn_param)
}

// optional .trtcaffe.MemoryDataParameter memory_data_param = 22;
inline bool V1LayerParameter::_internal_has_memory_data_param() const {
  bool value = (_has_bits_[0] & 0x00008000u) != 0;
  PROTOBUF_ASSUME(!value || memory_data_param_ != nullptr);
  return value;
}
inline bool V1LayerParameter::has_memory_data_param() const {
  return _internal_has_memory_data_param();
}
inline void V1LayerParameter::clear_memory_data_param() {
  if (memory_data_param_ != nullptr) memory_data_param_->Clear();
  _has_bits_[0] &= ~0x00008000u;
}
inline const ::trtcaffe::MemoryDataParameter& V1LayerParameter::_internal_memory_data_param() const {
  const ::trtcaffe::MemoryDataParameter* p = memory_data_param_;
  return p != nullptr ? *p : *reinterpret_cast<const ::trtcaffe::MemoryDataParameter*>(
      &::trtcaffe::_MemoryDataParameter_default_instance_);
}
inline const ::trtcaffe::MemoryDataParameter& V1LayerParameter::memory_data_param() const {
  // @@protoc_insertion_point(field_get:trtcaffe.V1LayerParameter.memory_data_param)
  return _internal_memory_data_param();
}
inline void V1LayerParameter::unsafe_arena_set_allocated_memory_data_param(
    ::trtcaffe::MemoryDataParameter* memory_data_param) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(memory_data_param_);
  }
  memory_data_param_ = memory_data_param;
  if (memory_data_param) {
    _has_bits_[0] |= 0x00008000u;
  } else {
    _has_bits_[0] &= ~0x00008000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:trtcaffe.V1LayerParameter.memory_data_param)
}
inline ::trtcaffe::MemoryDataParameter* V1LayerParameter::release_memory_data_param() {
  auto temp = unsafe_arena_release_memory_data_param();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::trtcaffe::MemoryDataParameter* V1LayerParameter::unsafe_arena_release_memory_data_param() {
  // @@protoc_insertion_point(field_release:trtcaffe.V1LayerParameter.memory_data_param)
  _has_bits_[0] &= ~0x00008000u;
  ::trtcaffe::MemoryDataParameter* temp = memory_data_param_;
  memory_data_param_ = nullptr;
  return temp;
}
inline ::trtcaffe::MemoryDataParameter* V1LayerParameter::_internal_mutable_memory_data_param() {
  _has_bits_[0] |= 0x00008000u;
  if (memory_data_param_ == nullptr) {
    auto* p = CreateMaybeMessage<::trtcaffe::MemoryDataParameter>(GetArena());
    memory_data_param_ = p;
  }
  return memory_data_param_;
}
inline ::trtcaffe::MemoryDataParameter* V1LayerParameter::mutable_memory_data_param() {
  // @@protoc_insertion_point(field_mutable:trtcaffe.V1LayerParameter.memory_data_param)
  return _internal_mutable_memory_data_param();
}
inline void V1LayerParameter::set_allocated_memory_data_param(::trtcaffe::MemoryDataParameter* memory_data_param) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete memory_data_param_;
  }
  if (memory_data_param) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(memory_data_param);
    if (message_arena != submessage_arena) {
      memory_data_param = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, memory_data_param, submessage_arena);
    }
    _has_bits_[0] |= 0x00008000u;
  } else {
    _has_bits_[0] &= ~0x00008000u;
  }
  memory_data_param_ = memory_data_param;
  // @@protoc_insertion_point(field_set_allocated:trtcaffe.V1LayerParameter.memory_data_param)
}

// optional .trtcaffe.MVNParameter mvn_param = 34;
inline bool V1LayerParameter::_internal_has_mvn_param() const {
  bool value = (_has_bits_[0] & 0x01000000u) != 0;
  PROTOBUF_ASSUME(!value || mvn_param_ != nullptr);
  return value;
}
inline bool V1LayerParameter::has_mvn_param() const {
  return _internal_has_mvn_param();
}
inline void V1LayerParameter::clear_mvn_param() {
  if (mvn_param_ != nullptr) mvn_param_->Clear();
  _has_bits_[0] &= ~0x01000000u;
}
inline const ::trtcaffe::MVNParameter& V1LayerParameter::_internal_mvn_param() const {
  const ::trtcaffe::MVNParameter* p = mvn_param_;
  return p != nullptr ? *p : *reinterpret_cast<const ::trtcaffe::MVNParameter*>(
      &::trtcaffe::_MVNParameter_default_instance_);
}
inline const ::trtcaffe::MVNParameter& V1LayerParameter::mvn_param() const {
  // @@protoc_insertion_point(field_get:trtcaffe.V1LayerParameter.mvn_param)
  return _internal_mvn_param();
}
inline void V1LayerParameter::unsafe_arena_set_allocated_mvn_param(
    ::trtcaffe::MVNParameter* mvn_param) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(mvn_param_);
  }
  mvn_param_ = mvn_param;
  if (mvn_param) {
    _has_bits_[0] |= 0x01000000u;
  } else {
    _has_bits_[0] &= ~0x01000000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:trtcaffe.V1LayerParameter.mvn_param)
}
inline ::trtcaffe::MVNParameter* V1LayerParameter::release_mvn_param() {
  auto temp = unsafe_arena_release_mvn_param();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::trtcaffe::MVNParameter* V1LayerParameter::unsafe_arena_release_mvn_param() {
  // @@protoc_insertion_point(field_release:trtcaffe.V1LayerParameter.mvn_param)
  _has_bits_[0] &= ~0x01000000u;
  ::trtcaffe::MVNParameter* temp = mvn_param_;
  mvn_param_ = nullptr;
  return temp;
}
inline ::trtcaffe::MVNParameter* V1LayerParameter::_internal_mutable_mvn_param() {
  _has_bits_[0] |= 0x01000000u;
  if (mvn_param_ == nullptr) {
    auto* p = CreateMaybeMessage<::trtcaffe::MVNParameter>(GetArena());
    mvn_param_ = p;
  }
  return mvn_param_;
}
inline ::trtcaffe::MVNParameter* V1LayerParameter::mutable_mvn_param() {
  // @@protoc_insertion_point(field_mutable:trtcaffe.V1LayerParameter.mvn_param)
  return _internal_mutable_mvn_param();
}
inline void V1LayerParameter::set_allocated_mvn_param(::trtcaffe::MVNParameter* mvn_param) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete mvn_param_;
  }
  if (mvn_param) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(mvn_param);
    if (message_arena != submessage_arena) {
      mvn_param = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, mvn_param, submessage_arena);
    }
    _has_bits_[0] |= 0x01000000u;
  } else {
    _has_bits_[0] &= ~0x01000000u;
  }
  mvn_param_ = mvn_param;
  // @@protoc_insertion_point(field_set_allocated:trtcaffe.V1LayerParameter.mvn_param)
}

// optional .trtcaffe.PoolingParameter pooling_param = 19;
inline bool V1LayerParameter::_internal_has_pooling_param() const {
  bool value = (_has_bits_[0] & 0x00001000u) != 0;
  PROTOBUF_ASSUME(!value || pooling_param_ != nullptr);
  return value;
}
inline bool V1LayerParameter::has_pooling_param() const {
  return _internal_has_pooling_param();
}
inline void V1LayerParameter::clear_pooling_param() {
  if (pooling_param_ != nullptr) pooling_param_->Clear();
  _has_bits_[0] &= ~0x00001000u;
}
inline const ::trtcaffe::PoolingParameter& V1LayerParameter::_internal_pooling_param() const {
  const ::trtcaffe::PoolingParameter* p = pooling_param_;
  return p != nullptr ? *p : *reinterpret_cast<const ::trtcaffe::PoolingParameter*>(
      &::trtcaffe::_PoolingParameter_default_instance_);
}
inline const ::trtcaffe::PoolingParameter& V1LayerParameter::pooling_param() const {
  // @@protoc_insertion_point(field_get:trtcaffe.V1LayerParameter.pooling_param)
  return _internal_pooling_param();
}
inline void V1LayerParameter::unsafe_arena_set_allocated_pooling_param(
    ::trtcaffe::PoolingParameter* pooling_param) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(pooling_param_);
  }
  pooling_param_ = pooling_param;
  if (pooling_param) {
    _has_bits_[0] |= 0x00001000u;
  } else {
    _has_bits_[0] &= ~0x00001000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:trtcaffe.V1LayerParameter.pooling_param)
}
inline ::trtcaffe::PoolingParameter* V1LayerParameter::release_pooling_param() {
  auto temp = unsafe_arena_release_pooling_param();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::trtcaffe::PoolingParameter* V1LayerParameter::unsafe_arena_release_pooling_param() {
  // @@protoc_insertion_point(field_release:trtcaffe.V1LayerParameter.pooling_param)
  _has_bits_[0] &= ~0x00001000u;
  ::trtcaffe::PoolingParameter* temp = pooling_param_;
  pooling_param_ = nullptr;
  return temp;
}
inline ::trtcaffe::PoolingParameter* V1LayerParameter::_internal_mutable_pooling_param() {
  _has_bits_[0] |= 0x00001000u;
  if (pooling_param_ == nullptr) {
    auto* p = CreateMaybeMessage<::trtcaffe::PoolingParameter>(GetArena());
    pooling_param_ = p;
  }
  return pooling_param_;
}
inline ::trtcaffe::PoolingParameter* V1LayerParameter::mutable_pooling_param() {
  // @@protoc_insertion_point(field_mutable:trtcaffe.V1LayerParameter.pooling_param)
  return _internal_mutable_pooling_param();
}
inline void V1LayerParameter::set_allocated_pooling_param(::trtcaffe::PoolingParameter* pooling_param) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete pooling_param_;
  }
  if (pooling_param) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(pooling_param);
    if (message_arena != submessage_arena) {
      pooling_param = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pooling_param, submessage_arena);
    }
    _has_bits_[0] |= 0x00001000u;
  } else {
    _has_bits_[0] &= ~0x00001000u;
  }
  pooling_param_ = pooling_param;
  // @@protoc_insertion_point(field_set_allocated:trtcaffe.V1LayerParameter.pooling_param)
}

// optional .trtcaffe.PowerParameter power_param = 21;
inline bool V1LayerParameter::_internal_has_power_param() const {
  bool value = (_has_bits_[0] & 0x00004000u) != 0;
  PROTOBUF_ASSUME(!value || power_param_ != nullptr);
  return value;
}
inline bool V1LayerParameter::has_power_param() const {
  return _internal_has_power_param();
}
inline void V1LayerParameter::clear_power_param() {
  if (power_param_ != nullptr) power_param_->Clear();
  _has_bits_[0] &= ~0x00004000u;
}
inline const ::trtcaffe::PowerParameter& V1LayerParameter::_internal_power_param() const {
  const ::trtcaffe::PowerParameter* p = power_param_;
  return p != nullptr ? *p : *reinterpret_cast<const ::trtcaffe::PowerParameter*>(
      &::trtcaffe::_PowerParameter_default_instance_);
}
inline const ::trtcaffe::PowerParameter& V1LayerParameter::power_param() const {
  // @@protoc_insertion_point(field_get:trtcaffe.V1LayerParameter.power_param)
  return _internal_power_param();
}
inline void V1LayerParameter::unsafe_arena_set_allocated_power_param(
    ::trtcaffe::PowerParameter* power_param) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(power_param_);
  }
  power_param_ = power_param;
  if (power_param) {
    _has_bits_[0] |= 0x00004000u;
  } else {
    _has_bits_[0] &= ~0x00004000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:trtcaffe.V1LayerParameter.power_param)
}
inline ::trtcaffe::PowerParameter* V1LayerParameter::release_power_param() {
  auto temp = unsafe_arena_release_power_param();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::trtcaffe::PowerParameter* V1LayerParameter::unsafe_arena_release_power_param() {
  // @@protoc_insertion_point(field_release:trtcaffe.V1LayerParameter.power_param)
  _has_bits_[0] &= ~0x00004000u;
  ::trtcaffe::PowerParameter* temp = power_param_;
  power_param_ = nullptr;
  return temp;
}
inline ::trtcaffe::PowerParameter* V1LayerParameter::_internal_mutable_power_param() {
  _has_bits_[0] |= 0x00004000u;
  if (power_param_ == nullptr) {
    auto* p = CreateMaybeMessage<::trtcaffe::PowerParameter>(GetArena());
    power_param_ = p;
  }
  return power_param_;
}
inline ::trtcaffe::PowerParameter* V1LayerParameter::mutable_power_param() {
  // @@protoc_insertion_point(field_mutable:trtcaffe.V1LayerParameter.power_param)
  return _internal_mutable_power_param();
}
inline void V1LayerParameter::set_allocated_power_param(::trtcaffe::PowerParameter* power_param) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete power_param_;
  }
  if (power_param) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(power_param);
    if (message_arena != submessage_arena) {
      power_param = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, power_param, submessage_arena);
    }
    _has_bits_[0] |= 0x00004000u;
  } else {
    _has_bits_[0] &= ~0x00004000u;
  }
  power_param_ = power_param;
  // @@protoc_insertion_point(field_set_allocated:trtcaffe.V1LayerParameter.power_param)
}

// optional .trtcaffe.ReLUParameter relu_param = 30;
inline bool V1LayerParameter::_internal_has_relu_param() const {
  bool value = (_has_bits_[0] & 0x00400000u) != 0;
  PROTOBUF_ASSUME(!value || relu_param_ != nullptr);
  return value;
}
inline bool V1LayerParameter::has_relu_param() const {
  return _internal_has_relu_param();
}
inline void V1LayerParameter::clear_relu_param() {
  if (relu_param_ != nullptr) relu_param_->Clear();
  _has_bits_[0] &= ~0x00400000u;
}
inline const ::trtcaffe::ReLUParameter& V1LayerParameter::_internal_relu_param() const {
  const ::trtcaffe::ReLUParameter* p = relu_param_;
  return p != nullptr ? *p : *reinterpret_cast<const ::trtcaffe::ReLUParameter*>(
      &::trtcaffe::_ReLUParameter_default_instance_);
}
inline const ::trtcaffe::ReLUParameter& V1LayerParameter::relu_param() const {
  // @@protoc_insertion_point(field_get:trtcaffe.V1LayerParameter.relu_param)
  return _internal_relu_param();
}
inline void V1LayerParameter::unsafe_arena_set_allocated_relu_param(
    ::trtcaffe::ReLUParameter* relu_param) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(relu_param_);
  }
  relu_param_ = relu_param;
  if (relu_param) {
    _has_bits_[0] |= 0x00400000u;
  } else {
    _has_bits_[0] &= ~0x00400000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:trtcaffe.V1LayerParameter.relu_param)
}
inline ::trtcaffe::ReLUParameter* V1LayerParameter::release_relu_param() {
  auto temp = unsafe_arena_release_relu_param();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::trtcaffe::ReLUParameter* V1LayerParameter::unsafe_arena_release_relu_param() {
  // @@protoc_insertion_point(field_release:trtcaffe.V1LayerParameter.relu_param)
  _has_bits_[0] &= ~0x00400000u;
  ::trtcaffe::ReLUParameter* temp = relu_param_;
  relu_param_ = nullptr;
  return temp;
}
inline ::trtcaffe::ReLUParameter* V1LayerParameter::_internal_mutable_relu_param() {
  _has_bits_[0] |= 0x00400000u;
  if (relu_param_ == nullptr) {
    auto* p = CreateMaybeMessage<::trtcaffe::ReLUParameter>(GetArena());
    relu_param_ = p;
  }
  return relu_param_;
}
inline ::trtcaffe::ReLUParameter* V1LayerParameter::mutable_relu_param() {
  // @@protoc_insertion_point(field_mutable:trtcaffe.V1LayerParameter.relu_param)
  return _internal_mutable_relu_param();
}
inline void V1LayerParameter::set_allocated_relu_param(::trtcaffe::ReLUParameter* relu_param) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete relu_param_;
  }
  if (relu_param) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(relu_param);
    if (message_arena != submessage_arena) {
      relu_param = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, relu_param, submessage_arena);
    }
    _has_bits_[0] |= 0x00400000u;
  } else {
    _has_bits_[0] &= ~0x00400000u;
  }
  relu_param_ = relu_param;
  // @@protoc_insertion_point(field_set_allocated:trtcaffe.V1LayerParameter.relu_param)
}

// optional .trtcaffe.SigmoidParameter sigmoid_param = 38;
inline bool V1LayerParameter::_internal_has_sigmoid_param() const {
  bool value = (_has_bits_[0] & 0x08000000u) != 0;
  PROTOBUF_ASSUME(!value || sigmoid_param_ != nullptr);
  return value;
}
inline bool V1LayerParameter::has_sigmoid_param() const {
  return _internal_has_sigmoid_param();
}
inline void V1LayerParameter::clear_sigmoid_param() {
  if (sigmoid_param_ != nullptr) sigmoid_param_->Clear();
  _has_bits_[0] &= ~0x08000000u;
}
inline const ::trtcaffe::SigmoidParameter& V1LayerParameter::_internal_sigmoid_param() const {
  const ::trtcaffe::SigmoidParameter* p = sigmoid_param_;
  return p != nullptr ? *p : *reinterpret_cast<const ::trtcaffe::SigmoidParameter*>(
      &::trtcaffe::_SigmoidParameter_default_instance_);
}
inline const ::trtcaffe::SigmoidParameter& V1LayerParameter::sigmoid_param() const {
  // @@protoc_insertion_point(field_get:trtcaffe.V1LayerParameter.sigmoid_param)
  return _internal_sigmoid_param();
}
inline void V1LayerParameter::unsafe_arena_set_allocated_sigmoid_param(
    ::trtcaffe::SigmoidParameter* sigmoid_param) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(sigmoid_param_);
  }
  sigmoid_param_ = sigmoid_param;
  if (sigmoid_param) {
    _has_bits_[0] |= 0x08000000u;
  } else {
    _has_bits_[0] &= ~0x08000000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:trtcaffe.V1LayerParameter.sigmoid_param)
}
inline ::trtcaffe::SigmoidParameter* V1LayerParameter::release_sigmoid_param() {
  auto temp = unsafe_arena_release_sigmoid_param();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::trtcaffe::SigmoidParameter* V1LayerParameter::unsafe_arena_release_sigmoid_param() {
  // @@protoc_insertion_point(field_release:trtcaffe.V1LayerParameter.sigmoid_param)
  _has_bits_[0] &= ~0x08000000u;
  ::trtcaffe::SigmoidParameter* temp = sigmoid_param_;
  sigmoid_param_ = nullptr;
  return temp;
}
inline ::trtcaffe::SigmoidParameter* V1LayerParameter::_internal_mutable_sigmoid_param() {
  _has_bits_[0] |= 0x08000000u;
  if (sigmoid_param_ == nullptr) {
    auto* p = CreateMaybeMessage<::trtcaffe::SigmoidParameter>(GetArena());
    sigmoid_param_ = p;
  }
  return sigmoid_param_;
}
inline ::trtcaffe::SigmoidParameter* V1LayerParameter::mutable_sigmoid_param() {
  // @@protoc_insertion_point(field_mutable:trtcaffe.V1LayerParameter.sigmoid_param)
  return _internal_mutable_sigmoid_param();
}
inline void V1LayerParameter::set_allocated_sigmoid_param(::trtcaffe::SigmoidParameter* sigmoid_param) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete sigmoid_param_;
  }
  if (sigmoid_param) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(sigmoid_param);
    if (message_arena != submessage_arena) {
      sigmoid_param = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, sigmoid_param, submessage_arena);
    }
    _has_bits_[0] |= 0x08000000u;
  } else {
    _has_bits_[0] &= ~0x08000000u;
  }
  sigmoid_param_ = sigmoid_param;
  // @@protoc_insertion_point(field_set_allocated:trtcaffe.V1LayerParameter.sigmoid_param)
}

// optional .trtcaffe.SoftmaxParameter softmax_param = 39;
inline bool V1LayerParameter::_internal_has_softmax_param() const {
  bool value = (_has_bits_[0] & 0x10000000u) != 0;
  PROTOBUF_ASSUME(!value || softmax_param_ != nullptr);
  return value;
}
inline bool V1LayerParameter::has_softmax_param() const {
  return _internal_has_softmax_param();
}
inline void V1LayerParameter::clear_softmax_param() {
  if (softmax_param_ != nullptr) softmax_param_->Clear();
  _has_bits_[0] &= ~0x10000000u;
}
inline const ::trtcaffe::SoftmaxParameter& V1LayerParameter::_internal_softmax_param() const {
  const ::trtcaffe::SoftmaxParameter* p = softmax_param_;
  return p != nullptr ? *p : *reinterpret_cast<const ::trtcaffe::SoftmaxParameter*>(
      &::trtcaffe::_SoftmaxParameter_default_instance_);
}
inline const ::trtcaffe::SoftmaxParameter& V1LayerParameter::softmax_param() const {
  // @@protoc_insertion_point(field_get:trtcaffe.V1LayerParameter.softmax_param)
  return _internal_softmax_param();
}
inline void V1LayerParameter::unsafe_arena_set_allocated_softmax_param(
    ::trtcaffe::SoftmaxParameter* softmax_param) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(softmax_param_);
  }
  softmax_param_ = softmax_param;
  if (softmax_param) {
    _has_bits_[0] |= 0x10000000u;
  } else {
    _has_bits_[0] &= ~0x10000000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:trtcaffe.V1LayerParameter.softmax_param)
}
inline ::trtcaffe::SoftmaxParameter* V1LayerParameter::release_softmax_param() {
  auto temp = unsafe_arena_release_softmax_param();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::trtcaffe::SoftmaxParameter* V1LayerParameter::unsafe_arena_release_softmax_param() {
  // @@protoc_insertion_point(field_release:trtcaffe.V1LayerParameter.softmax_param)
  _has_bits_[0] &= ~0x10000000u;
  ::trtcaffe::SoftmaxParameter* temp = softmax_param_;
  softmax_param_ = nullptr;
  return temp;
}
inline ::trtcaffe::SoftmaxParameter* V1LayerParameter::_internal_mutable_softmax_param() {
  _has_bits_[0] |= 0x10000000u;
  if (softmax_param_ == nullptr) {
    auto* p = CreateMaybeMessage<::trtcaffe::SoftmaxParameter>(GetArena());
    softmax_param_ = p;
  }
  return softmax_param_;
}
inline ::trtcaffe::SoftmaxParameter* V1LayerParameter::mutable_softmax_param() {
  // @@protoc_insertion_point(field_mutable:trtcaffe.V1LayerParameter.softmax_param)
  return _internal_mutable_softmax_param();
}
inline void V1LayerParameter::set_allocated_softmax_param(::trtcaffe::SoftmaxParameter* softmax_param) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete softmax_param_;
  }
  if (softmax_param) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(softmax_param);
    if (message_arena != submessage_arena) {
      softmax_param = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, softmax_param, submessage_arena);
    }
    _has_bits_[0] |= 0x10000000u;
  } else {
    _has_bits_[0] &= ~0x10000000u;
  }
  softmax_param_ = softmax_param;
  // @@protoc_insertion_point(field_set_allocated:trtcaffe.V1LayerParameter.softmax_param)
}

// optional .trtcaffe.SliceParameter slice_param = 31;
inline bool V1LayerParameter::_internal_has_slice_param() const {
  bool value = (_has_bits_[0] & 0x00800000u) != 0;
  PROTOBUF_ASSUME(!value || slice_param_ != nullptr);
  return value;
}
inline bool V1LayerParameter::has_slice_param() const {
  return _internal_has_slice_param();
}
inline void V1LayerParameter::clear_slice_param() {
  if (slice_param_ != nullptr) slice_param_->Clear();
  _has_bits_[0] &= ~0x00800000u;
}
inline const ::trtcaffe::SliceParameter& V1LayerParameter::_internal_slice_param() const {
  const ::trtcaffe::SliceParameter* p = slice_param_;
  return p != nullptr ? *p : *reinterpret_cast<const ::trtcaffe::SliceParameter*>(
      &::trtcaffe::_SliceParameter_default_instance_);
}
inline const ::trtcaffe::SliceParameter& V1LayerParameter::slice_param() const {
  // @@protoc_insertion_point(field_get:trtcaffe.V1LayerParameter.slice_param)
  return _internal_slice_param();
}
inline void V1LayerParameter::unsafe_arena_set_allocated_slice_param(
    ::trtcaffe::SliceParameter* slice_param) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(slice_param_);
  }
  slice_param_ = slice_param;
  if (slice_param) {
    _has_bits_[0] |= 0x00800000u;
  } else {
    _has_bits_[0] &= ~0x00800000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:trtcaffe.V1LayerParameter.slice_param)
}
inline ::trtcaffe::SliceParameter* V1LayerParameter::release_slice_param() {
  auto temp = unsafe_arena_release_slice_param();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::trtcaffe::SliceParameter* V1LayerParameter::unsafe_arena_release_slice_param() {
  // @@protoc_insertion_point(field_release:trtcaffe.V1LayerParameter.slice_param)
  _has_bits_[0] &= ~0x00800000u;
  ::trtcaffe::SliceParameter* temp = slice_param_;
  slice_param_ = nullptr;
  return temp;
}
inline ::trtcaffe::SliceParameter* V1LayerParameter::_internal_mutable_slice_param() {
  _has_bits_[0] |= 0x00800000u;
  if (slice_param_ == nullptr) {
    auto* p = CreateMaybeMessage<::trtcaffe::SliceParameter>(GetArena());
    slice_param_ = p;
  }
  return slice_param_;
}
inline ::trtcaffe::SliceParameter* V1LayerParameter::mutable_slice_param() {
  // @@protoc_insertion_point(field_mutable:trtcaffe.V1LayerParameter.slice_param)
  return _internal_mutable_slice_param();
}
inline void V1LayerParameter::set_allocated_slice_param(::trtcaffe::SliceParameter* slice_param) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete slice_param_;
  }
  if (slice_param) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(slice_param);
    if (message_arena != submessage_arena) {
      slice_param = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, slice_param, submessage_arena);
    }
    _has_bits_[0] |= 0x00800000u;
  } else {
    _has_bits_[0] &= ~0x00800000u;
  }
  slice_param_ = slice_param;
  // @@protoc_insertion_point(field_set_allocated:trtcaffe.V1LayerParameter.slice_param)
}

// optional .trtcaffe.TanHParameter tanh_param = 37;
inline bool V1LayerParameter::_internal_has_tanh_param() const {
  bool value = (_has_bits_[0] & 0x04000000u) != 0;
  PROTOBUF_ASSUME(!value || tanh_param_ != nullptr);
  return value;
}
inline bool V1LayerParameter::has_tanh_param() const {
  return _internal_has_tanh_param();
}
inline void V1LayerParameter::clear_tanh_param() {
  if (tanh_param_ != nullptr) tanh_param_->Clear();
  _has_bits_[0] &= ~0x04000000u;
}
inline const ::trtcaffe::TanHParameter& V1LayerParameter::_internal_tanh_param() const {
  const ::trtcaffe::TanHParameter* p = tanh_param_;
  return p != nullptr ? *p : *reinterpret_cast<const ::trtcaffe::TanHParameter*>(
      &::trtcaffe::_TanHParameter_default_instance_);
}
inline const ::trtcaffe::TanHParameter& V1LayerParameter::tanh_param() const {
  // @@protoc_insertion_point(field_get:trtcaffe.V1LayerParameter.tanh_param)
  return _internal_tanh_param();
}
inline void V1LayerParameter::unsafe_arena_set_allocated_tanh_param(
    ::trtcaffe::TanHParameter* tanh_param) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tanh_param_);
  }
  tanh_param_ = tanh_param;
  if (tanh_param) {
    _has_bits_[0] |= 0x04000000u;
  } else {
    _has_bits_[0] &= ~0x04000000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:trtcaffe.V1LayerParameter.tanh_param)
}
inline ::trtcaffe::TanHParameter* V1LayerParameter::release_tanh_param() {
  auto temp = unsafe_arena_release_tanh_param();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::trtcaffe::TanHParameter* V1LayerParameter::unsafe_arena_release_tanh_param() {
  // @@protoc_insertion_point(field_release:trtcaffe.V1LayerParameter.tanh_param)
  _has_bits_[0] &= ~0x04000000u;
  ::trtcaffe::TanHParameter* temp = tanh_param_;
  tanh_param_ = nullptr;
  return temp;
}
inline ::trtcaffe::TanHParameter* V1LayerParameter::_internal_mutable_tanh_param() {
  _has_bits_[0] |= 0x04000000u;
  if (tanh_param_ == nullptr) {
    auto* p = CreateMaybeMessage<::trtcaffe::TanHParameter>(GetArena());
    tanh_param_ = p;
  }
  return tanh_param_;
}
inline ::trtcaffe::TanHParameter* V1LayerParameter::mutable_tanh_param() {
  // @@protoc_insertion_point(field_mutable:trtcaffe.V1LayerParameter.tanh_param)
  return _internal_mutable_tanh_param();
}
inline void V1LayerParameter::set_allocated_tanh_param(::trtcaffe::TanHParameter* tanh_param) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete tanh_param_;
  }
  if (tanh_param) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(tanh_param);
    if (message_arena != submessage_arena) {
      tanh_param = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tanh_param, submessage_arena);
    }
    _has_bits_[0] |= 0x04000000u;
  } else {
    _has_bits_[0] &= ~0x04000000u;
  }
  tanh_param_ = tanh_param;
  // @@protoc_insertion_point(field_set_allocated:trtcaffe.V1LayerParameter.tanh_param)
}

// optional .trtcaffe.ThresholdParameter threshold_param = 25;
inline bool V1LayerParameter::_internal_has_threshold_param() const {
  bool value = (_has_bits_[0] & 0x00040000u) != 0;
  PROTOBUF_ASSUME(!value || threshold_param_ != nullptr);
  return value;
}
inline bool V1LayerParameter::has_threshold_param() const {
  return _internal_has_threshold_param();
}
inline void V1LayerParameter::clear_threshold_param() {
  if (threshold_param_ != nullptr) threshold_param_->Clear();
  _has_bits_[0] &= ~0x00040000u;
}
inline const ::trtcaffe::ThresholdParameter& V1LayerParameter::_internal_threshold_param() const {
  const ::trtcaffe::ThresholdParameter* p = threshold_param_;
  return p != nullptr ? *p : *reinterpret_cast<const ::trtcaffe::ThresholdParameter*>(
      &::trtcaffe::_ThresholdParameter_default_instance_);
}
inline const ::trtcaffe::ThresholdParameter& V1LayerParameter::threshold_param() const {
  // @@protoc_insertion_point(field_get:trtcaffe.V1LayerParameter.threshold_param)
  return _internal_threshold_param();
}
inline void V1LayerParameter::unsafe_arena_set_allocated_threshold_param(
    ::trtcaffe::ThresholdParameter* threshold_param) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(threshold_param_);
  }
  threshold_param_ = threshold_param;
  if (threshold_param) {
    _has_bits_[0] |= 0x00040000u;
  } else {
    _has_bits_[0] &= ~0x00040000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:trtcaffe.V1LayerParameter.threshold_param)
}
inline ::trtcaffe::ThresholdParameter* V1LayerParameter::release_threshold_param() {
  auto temp = unsafe_arena_release_threshold_param();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::trtcaffe::ThresholdParameter* V1LayerParameter::unsafe_arena_release_threshold_param() {
  // @@protoc_insertion_point(field_release:trtcaffe.V1LayerParameter.threshold_param)
  _has_bits_[0] &= ~0x00040000u;
  ::trtcaffe::ThresholdParameter* temp = threshold_param_;
  threshold_param_ = nullptr;
  return temp;
}
inline ::trtcaffe::ThresholdParameter* V1LayerParameter::_internal_mutable_threshold_param() {
  _has_bits_[0] |= 0x00040000u;
  if (threshold_param_ == nullptr) {
    auto* p = CreateMaybeMessage<::trtcaffe::ThresholdParameter>(GetArena());
    threshold_param_ = p;
  }
  return threshold_param_;
}
inline ::trtcaffe::ThresholdParameter* V1LayerParameter::mutable_threshold_param() {
  // @@protoc_insertion_point(field_mutable:trtcaffe.V1LayerParameter.threshold_param)
  return _internal_mutable_threshold_param();
}
inline void V1LayerParameter::set_allocated_threshold_param(::trtcaffe::ThresholdParameter* threshold_param) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete threshold_param_;
  }
  if (threshold_param) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(threshold_param);
    if (message_arena != submessage_arena) {
      threshold_param = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, threshold_param, submessage_arena);
    }
    _has_bits_[0] |= 0x00040000u;
  } else {
    _has_bits_[0] &= ~0x00040000u;
  }
  threshold_param_ = threshold_param;
  // @@protoc_insertion_point(field_set_allocated:trtcaffe.V1LayerParameter.threshold_param)
}

// optional .trtcaffe.WindowDataParameter window_data_param = 20;
inline bool V1LayerParameter::_internal_has_window_data_param() const {
  bool value = (_has_bits_[0] & 0x00002000u) != 0;
  PROTOBUF_ASSUME(!value || window_data_param_ != nullptr);
  return value;
}
inline bool V1LayerParameter::has_window_data_param() const {
  return _internal_has_window_data_param();
}
inline void V1LayerParameter::clear_window_data_param() {
  if (window_data_param_ != nullptr) window_data_param_->Clear();
  _has_bits_[0] &= ~0x00002000u;
}
inline const ::trtcaffe::WindowDataParameter& V1LayerParameter::_internal_window_data_param() const {
  const ::trtcaffe::WindowDataParameter* p = window_data_param_;
  return p != nullptr ? *p : *reinterpret_cast<const ::trtcaffe::WindowDataParameter*>(
      &::trtcaffe::_WindowDataParameter_default_instance_);
}
inline const ::trtcaffe::WindowDataParameter& V1LayerParameter::window_data_param() const {
  // @@protoc_insertion_point(field_get:trtcaffe.V1LayerParameter.window_data_param)
  return _internal_window_data_param();
}
inline void V1LayerParameter::unsafe_arena_set_allocated_window_data_param(
    ::trtcaffe::WindowDataParameter* window_data_param) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(window_data_param_);
  }
  window_data_param_ = window_data_param;
  if (window_data_param) {
    _has_bits_[0] |= 0x00002000u;
  } else {
    _has_bits_[0] &= ~0x00002000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:trtcaffe.V1LayerParameter.window_data_param)
}
inline ::trtcaffe::WindowDataParameter* V1LayerParameter::release_window_data_param() {
  auto temp = unsafe_arena_release_window_data_param();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::trtcaffe::WindowDataParameter* V1LayerParameter::unsafe_arena_release_window_data_param() {
  // @@protoc_insertion_point(field_release:trtcaffe.V1LayerParameter.window_data_param)
  _has_bits_[0] &= ~0x00002000u;
  ::trtcaffe::WindowDataParameter* temp = window_data_param_;
  window_data_param_ = nullptr;
  return temp;
}
inline ::trtcaffe::WindowDataParameter* V1LayerParameter::_internal_mutable_window_data_param() {
  _has_bits_[0] |= 0x00002000u;
  if (window_data_param_ == nullptr) {
    auto* p = CreateMaybeMessage<::trtcaffe::WindowDataParameter>(GetArena());
    window_data_param_ = p;
  }
  return window_data_param_;
}
inline ::trtcaffe::WindowDataParameter* V1LayerParameter::mutable_window_data_param() {
  // @@protoc_insertion_point(field_mutable:trtcaffe.V1LayerParameter.window_data_param)
  return _internal_mutable_window_data_param();
}
inline void V1LayerParameter::set_allocated_window_data_param(::trtcaffe::WindowDataParameter* window_data_param) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete window_data_param_;
  }
  if (window_data_param) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(window_data_param);
    if (message_arena != submessage_arena) {
      window_data_param = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, window_data_param, submessage_arena);
    }
    _has_bits_[0] |= 0x00002000u;
  } else {
    _has_bits_[0] &= ~0x00002000u;
  }
  window_data_param_ = window_data_param;
  // @@protoc_insertion_point(field_set_allocated:trtcaffe.V1LayerParameter.window_data_param)
}

// optional .trtcaffe.TransformationParameter transform_param = 36;
inline bool V1LayerParameter::_internal_has_transform_param() const {
  bool value = (_has_bits_[0] & 0x02000000u) != 0;
  PROTOBUF_ASSUME(!value || transform_param_ != nullptr);
  return value;
}
inline bool V1LayerParameter::has_transform_param() const {
  return _internal_has_transform_param();
}
inline void V1LayerParameter::clear_transform_param() {
  if (transform_param_ != nullptr) transform_param_->Clear();
  _has_bits_[0] &= ~0x02000000u;
}
inline const ::trtcaffe::TransformationParameter& V1LayerParameter::_internal_transform_param() const {
  const ::trtcaffe::TransformationParameter* p = transform_param_;
  return p != nullptr ? *p : *reinterpret_cast<const ::trtcaffe::TransformationParameter*>(
      &::trtcaffe::_TransformationParameter_default_instance_);
}
inline const ::trtcaffe::TransformationParameter& V1LayerParameter::transform_param() const {
  // @@protoc_insertion_point(field_get:trtcaffe.V1LayerParameter.transform_param)
  return _internal_transform_param();
}
inline void V1LayerParameter::unsafe_arena_set_allocated_transform_param(
    ::trtcaffe::TransformationParameter* transform_param) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(transform_param_);
  }
  transform_param_ = transform_param;
  if (transform_param) {
    _has_bits_[0] |= 0x02000000u;
  } else {
    _has_bits_[0] &= ~0x02000000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:trtcaffe.V1LayerParameter.transform_param)
}
inline ::trtcaffe::TransformationParameter* V1LayerParameter::release_transform_param() {
  auto temp = unsafe_arena_release_transform_param();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::trtcaffe::TransformationParameter* V1LayerParameter::unsafe_arena_release_transform_param() {
  // @@protoc_insertion_point(field_release:trtcaffe.V1LayerParameter.transform_param)
  _has_bits_[0] &= ~0x02000000u;
  ::trtcaffe::TransformationParameter* temp = transform_param_;
  transform_param_ = nullptr;
  return temp;
}
inline ::trtcaffe::TransformationParameter* V1LayerParameter::_internal_mutable_transform_param() {
  _has_bits_[0] |= 0x02000000u;
  if (transform_param_ == nullptr) {
    auto* p = CreateMaybeMessage<::trtcaffe::TransformationParameter>(GetArena());
    transform_param_ = p;
  }
  return transform_param_;
}
inline ::trtcaffe::TransformationParameter* V1LayerParameter::mutable_transform_param() {
  // @@protoc_insertion_point(field_mutable:trtcaffe.V1LayerParameter.transform_param)
  return _internal_mutable_transform_param();
}
inline void V1LayerParameter::set_allocated_transform_param(::trtcaffe::TransformationParameter* transform_param) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete transform_param_;
  }
  if (transform_param) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(transform_param);
    if (message_arena != submessage_arena) {
      transform_param = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, transform_param, submessage_arena);
    }
    _has_bits_[0] |= 0x02000000u;
  } else {
    _has_bits_[0] &= ~0x02000000u;
  }
  transform_param_ = transform_param;
  // @@protoc_insertion_point(field_set_allocated:trtcaffe.V1LayerParameter.transform_param)
}

// optional .trtcaffe.LossParameter loss_param = 42;
inline bool V1LayerParameter::_internal_has_loss_param() const {
  bool value = (_has_bits_[0] & 0x80000000u) != 0;
  PROTOBUF_ASSUME(!value || loss_param_ != nullptr);
  return value;
}
inline bool V1LayerParameter::has_loss_param() const {
  return _internal_has_loss_param();
}
inline void V1LayerParameter::clear_loss_param() {
  if (loss_param_ != nullptr) loss_param_->Clear();
  _has_bits_[0] &= ~0x80000000u;
}
inline const ::trtcaffe::LossParameter& V1LayerParameter::_internal_loss_param() const {
  const ::trtcaffe::LossParameter* p = loss_param_;
  return p != nullptr ? *p : *reinterpret_cast<const ::trtcaffe::LossParameter*>(
      &::trtcaffe::_LossParameter_default_instance_);
}
inline const ::trtcaffe::LossParameter& V1LayerParameter::loss_param() const {
  // @@protoc_insertion_point(field_get:trtcaffe.V1LayerParameter.loss_param)
  return _internal_loss_param();
}
inline void V1LayerParameter::unsafe_arena_set_allocated_loss_param(
    ::trtcaffe::LossParameter* loss_param) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(loss_param_);
  }
  loss_param_ = loss_param;
  if (loss_param) {
    _has_bits_[0] |= 0x80000000u;
  } else {
    _has_bits_[0] &= ~0x80000000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:trtcaffe.V1LayerParameter.loss_param)
}
inline ::trtcaffe::LossParameter* V1LayerParameter::release_loss_param() {
  auto temp = unsafe_arena_release_loss_param();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::trtcaffe::LossParameter* V1LayerParameter::unsafe_arena_release_loss_param() {
  // @@protoc_insertion_point(field_release:trtcaffe.V1LayerParameter.loss_param)
  _has_bits_[0] &= ~0x80000000u;
  ::trtcaffe::LossParameter* temp = loss_param_;
  loss_param_ = nullptr;
  return temp;
}
inline ::trtcaffe::LossParameter* V1LayerParameter::_internal_mutable_loss_param() {
  _has_bits_[0] |= 0x80000000u;
  if (loss_param_ == nullptr) {
    auto* p = CreateMaybeMessage<::trtcaffe::LossParameter>(GetArena());
    loss_param_ = p;
  }
  return loss_param_;
}
inline ::trtcaffe::LossParameter* V1LayerParameter::mutable_loss_param() {
  // @@protoc_insertion_point(field_mutable:trtcaffe.V1LayerParameter.loss_param)
  return _internal_mutable_loss_param();
}
inline void V1LayerParameter::set_allocated_loss_param(::trtcaffe::LossParameter* loss_param) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete loss_param_;
  }
  if (loss_param) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(loss_param);
    if (message_arena != submessage_arena) {
      loss_param = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, loss_param, submessage_arena);
    }
    _has_bits_[0] |= 0x80000000u;
  } else {
    _has_bits_[0] &= ~0x80000000u;
  }
  loss_param_ = loss_param;
  // @@protoc_insertion_point(field_set_allocated:trtcaffe.V1LayerParameter.loss_param)
}

// optional .trtcaffe.V0LayerParameter layer = 1;
inline bool V1LayerParameter::_internal_has_layer() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || layer_ != nullptr);
  return value;
}
inline bool V1LayerParameter::has_layer() const {
  return _internal_has_layer();
}
inline void V1LayerParameter::clear_layer() {
  if (layer_ != nullptr) layer_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::trtcaffe::V0LayerParameter& V1LayerParameter::_internal_layer() const {
  const ::trtcaffe::V0LayerParameter* p = layer_;
  return p != nullptr ? *p : *reinterpret_cast<const ::trtcaffe::V0LayerParameter*>(
      &::trtcaffe::_V0LayerParameter_default_instance_);
}
inline const ::trtcaffe::V0LayerParameter& V1LayerParameter::layer() const {
  // @@protoc_insertion_point(field_get:trtcaffe.V1LayerParameter.layer)
  return _internal_layer();
}
inline void V1LayerParameter::unsafe_arena_set_allocated_layer(
    ::trtcaffe::V0LayerParameter* layer) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(layer_);
  }
  layer_ = layer;
  if (layer) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:trtcaffe.V1LayerParameter.layer)
}
inline ::trtcaffe::V0LayerParameter* V1LayerParameter::release_layer() {
  auto temp = unsafe_arena_release_layer();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::trtcaffe::V0LayerParameter* V1LayerParameter::unsafe_arena_release_layer() {
  // @@protoc_insertion_point(field_release:trtcaffe.V1LayerParameter.layer)
  _has_bits_[0] &= ~0x00000002u;
  ::trtcaffe::V0LayerParameter* temp = layer_;
  layer_ = nullptr;
  return temp;
}
inline ::trtcaffe::V0LayerParameter* V1LayerParameter::_internal_mutable_layer() {
  _has_bits_[0] |= 0x00000002u;
  if (layer_ == nullptr) {
    auto* p = CreateMaybeMessage<::trtcaffe::V0LayerParameter>(GetArena());
    layer_ = p;
  }
  return layer_;
}
inline ::trtcaffe::V0LayerParameter* V1LayerParameter::mutable_layer() {
  // @@protoc_insertion_point(field_mutable:trtcaffe.V1LayerParameter.layer)
  return _internal_mutable_layer();
}
inline void V1LayerParameter::set_allocated_layer(::trtcaffe::V0LayerParameter* layer) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete layer_;
  }
  if (layer) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(layer);
    if (message_arena != submessage_arena) {
      layer = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, layer, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  layer_ = layer;
  // @@protoc_insertion_point(field_set_allocated:trtcaffe.V1LayerParameter.layer)
}

// -------------------------------------------------------------------

// V0LayerParameter

// optional string name = 1;
inline bool V0LayerParameter::_internal_has_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool V0LayerParameter::has_name() const {
  return _internal_has_name();
}
inline void V0LayerParameter::clear_name() {
  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& V0LayerParameter::name() const {
  // @@protoc_insertion_point(field_get:trtcaffe.V0LayerParameter.name)
  return _internal_name();
}
inline void V0LayerParameter::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:trtcaffe.V0LayerParameter.name)
}
inline std::string* V0LayerParameter::mutable_name() {
  // @@protoc_insertion_point(field_mutable:trtcaffe.V0LayerParameter.name)
  return _internal_mutable_name();
}
inline const std::string& V0LayerParameter::_internal_name() const {
  return name_.Get();
}
inline void V0LayerParameter::_internal_set_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void V0LayerParameter::set_name(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:trtcaffe.V0LayerParameter.name)
}
inline void V0LayerParameter::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:trtcaffe.V0LayerParameter.name)
}
inline void V0LayerParameter::set_name(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:trtcaffe.V0LayerParameter.name)
}
inline std::string* V0LayerParameter::_internal_mutable_name() {
  _has_bits_[0] |= 0x00000001u;
  return name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* V0LayerParameter::release_name() {
  // @@protoc_insertion_point(field_release:trtcaffe.V0LayerParameter.name)
  if (!_internal_has_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void V0LayerParameter::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:trtcaffe.V0LayerParameter.name)
}
inline std::string* V0LayerParameter::unsafe_arena_release_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:trtcaffe.V0LayerParameter.name)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000001u;
  return name_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void V0LayerParameter::unsafe_arena_set_allocated_name(
    std::string* name) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  name_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      name, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:trtcaffe.V0LayerParameter.name)
}

// optional string type = 2;
inline bool V0LayerParameter::_internal_has_type() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool V0LayerParameter::has_type() const {
  return _internal_has_type();
}
inline void V0LayerParameter::clear_type() {
  type_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& V0LayerParameter::type() const {
  // @@protoc_insertion_point(field_get:trtcaffe.V0LayerParameter.type)
  return _internal_type();
}
inline void V0LayerParameter::set_type(const std::string& value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:trtcaffe.V0LayerParameter.type)
}
inline std::string* V0LayerParameter::mutable_type() {
  // @@protoc_insertion_point(field_mutable:trtcaffe.V0LayerParameter.type)
  return _internal_mutable_type();
}
inline const std::string& V0LayerParameter::_internal_type() const {
  return type_.Get();
}
inline void V0LayerParameter::_internal_set_type(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void V0LayerParameter::set_type(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  type_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:trtcaffe.V0LayerParameter.type)
}
inline void V0LayerParameter::set_type(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:trtcaffe.V0LayerParameter.type)
}
inline void V0LayerParameter::set_type(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:trtcaffe.V0LayerParameter.type)
}
inline std::string* V0LayerParameter::_internal_mutable_type() {
  _has_bits_[0] |= 0x00000002u;
  return type_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* V0LayerParameter::release_type() {
  // @@protoc_insertion_point(field_release:trtcaffe.V0LayerParameter.type)
  if (!_internal_has_type()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return type_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void V0LayerParameter::set_allocated_type(std::string* type) {
  if (type != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  type_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), type,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:trtcaffe.V0LayerParameter.type)
}
inline std::string* V0LayerParameter::unsafe_arena_release_type() {
  // @@protoc_insertion_point(field_unsafe_arena_release:trtcaffe.V0LayerParameter.type)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000002u;
  return type_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void V0LayerParameter::unsafe_arena_set_allocated_type(
    std::string* type) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (type != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  type_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      type, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:trtcaffe.V0LayerParameter.type)
}

// optional uint32 num_output = 3;
inline bool V0LayerParameter::_internal_has_num_output() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool V0LayerParameter::has_num_output() const {
  return _internal_has_num_output();
}
inline void V0LayerParameter::clear_num_output() {
  num_output_ = 0u;
  _has_bits_[0] &= ~0x00000100u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 V0LayerParameter::_internal_num_output() const {
  return num_output_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 V0LayerParameter::num_output() const {
  // @@protoc_insertion_point(field_get:trtcaffe.V0LayerParameter.num_output)
  return _internal_num_output();
}
inline void V0LayerParameter::_internal_set_num_output(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000100u;
  num_output_ = value;
}
inline void V0LayerParameter::set_num_output(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_num_output(value);
  // @@protoc_insertion_point(field_set:trtcaffe.V0LayerParameter.num_output)
}

// optional bool biasterm = 4 [default = true];
inline bool V0LayerParameter::_internal_has_biasterm() const {
  bool value = (_has_bits_[0] & 0x00800000u) != 0;
  return value;
}
inline bool V0LayerParameter::has_biasterm() const {
  return _internal_has_biasterm();
}
inline void V0LayerParameter::clear_biasterm() {
  biasterm_ = true;
  _has_bits_[0] &= ~0x00800000u;
}
inline bool V0LayerParameter::_internal_biasterm() const {
  return biasterm_;
}
inline bool V0LayerParameter::biasterm() const {
  // @@protoc_insertion_point(field_get:trtcaffe.V0LayerParameter.biasterm)
  return _internal_biasterm();
}
inline void V0LayerParameter::_internal_set_biasterm(bool value) {
  _has_bits_[0] |= 0x00800000u;
  biasterm_ = value;
}
inline void V0LayerParameter::set_biasterm(bool value) {
  _internal_set_biasterm(value);
  // @@protoc_insertion_point(field_set:trtcaffe.V0LayerParameter.biasterm)
}

// optional .trtcaffe.FillerParameter weight_filler = 5;
inline bool V0LayerParameter::_internal_has_weight_filler() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  PROTOBUF_ASSUME(!value || weight_filler_ != nullptr);
  return value;
}
inline bool V0LayerParameter::has_weight_filler() const {
  return _internal_has_weight_filler();
}
inline void V0LayerParameter::clear_weight_filler() {
  if (weight_filler_ != nullptr) weight_filler_->Clear();
  _has_bits_[0] &= ~0x00000020u;
}
inline const ::trtcaffe::FillerParameter& V0LayerParameter::_internal_weight_filler() const {
  const ::trtcaffe::FillerParameter* p = weight_filler_;
  return p != nullptr ? *p : *reinterpret_cast<const ::trtcaffe::FillerParameter*>(
      &::trtcaffe::_FillerParameter_default_instance_);
}
inline const ::trtcaffe::FillerParameter& V0LayerParameter::weight_filler() const {
  // @@protoc_insertion_point(field_get:trtcaffe.V0LayerParameter.weight_filler)
  return _internal_weight_filler();
}
inline void V0LayerParameter::unsafe_arena_set_allocated_weight_filler(
    ::trtcaffe::FillerParameter* weight_filler) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(weight_filler_);
  }
  weight_filler_ = weight_filler;
  if (weight_filler) {
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:trtcaffe.V0LayerParameter.weight_filler)
}
inline ::trtcaffe::FillerParameter* V0LayerParameter::release_weight_filler() {
  auto temp = unsafe_arena_release_weight_filler();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::trtcaffe::FillerParameter* V0LayerParameter::unsafe_arena_release_weight_filler() {
  // @@protoc_insertion_point(field_release:trtcaffe.V0LayerParameter.weight_filler)
  _has_bits_[0] &= ~0x00000020u;
  ::trtcaffe::FillerParameter* temp = weight_filler_;
  weight_filler_ = nullptr;
  return temp;
}
inline ::trtcaffe::FillerParameter* V0LayerParameter::_internal_mutable_weight_filler() {
  _has_bits_[0] |= 0x00000020u;
  if (weight_filler_ == nullptr) {
    auto* p = CreateMaybeMessage<::trtcaffe::FillerParameter>(GetArena());
    weight_filler_ = p;
  }
  return weight_filler_;
}
inline ::trtcaffe::FillerParameter* V0LayerParameter::mutable_weight_filler() {
  // @@protoc_insertion_point(field_mutable:trtcaffe.V0LayerParameter.weight_filler)
  return _internal_mutable_weight_filler();
}
inline void V0LayerParameter::set_allocated_weight_filler(::trtcaffe::FillerParameter* weight_filler) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete weight_filler_;
  }
  if (weight_filler) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(weight_filler);
    if (message_arena != submessage_arena) {
      weight_filler = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, weight_filler, submessage_arena);
    }
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  weight_filler_ = weight_filler;
  // @@protoc_insertion_point(field_set_allocated:trtcaffe.V0LayerParameter.weight_filler)
}

// optional .trtcaffe.FillerParameter bias_filler = 6;
inline bool V0LayerParameter::_internal_has_bias_filler() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  PROTOBUF_ASSUME(!value || bias_filler_ != nullptr);
  return value;
}
inline bool V0LayerParameter::has_bias_filler() const {
  return _internal_has_bias_filler();
}
inline void V0LayerParameter::clear_bias_filler() {
  if (bias_filler_ != nullptr) bias_filler_->Clear();
  _has_bits_[0] &= ~0x00000040u;
}
inline const ::trtcaffe::FillerParameter& V0LayerParameter::_internal_bias_filler() const {
  const ::trtcaffe::FillerParameter* p = bias_filler_;
  return p != nullptr ? *p : *reinterpret_cast<const ::trtcaffe::FillerParameter*>(
      &::trtcaffe::_FillerParameter_default_instance_);
}
inline const ::trtcaffe::FillerParameter& V0LayerParameter::bias_filler() const {
  // @@protoc_insertion_point(field_get:trtcaffe.V0LayerParameter.bias_filler)
  return _internal_bias_filler();
}
inline void V0LayerParameter::unsafe_arena_set_allocated_bias_filler(
    ::trtcaffe::FillerParameter* bias_filler) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(bias_filler_);
  }
  bias_filler_ = bias_filler;
  if (bias_filler) {
    _has_bits_[0] |= 0x00000040u;
  } else {
    _has_bits_[0] &= ~0x00000040u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:trtcaffe.V0LayerParameter.bias_filler)
}
inline ::trtcaffe::FillerParameter* V0LayerParameter::release_bias_filler() {
  auto temp = unsafe_arena_release_bias_filler();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::trtcaffe::FillerParameter* V0LayerParameter::unsafe_arena_release_bias_filler() {
  // @@protoc_insertion_point(field_release:trtcaffe.V0LayerParameter.bias_filler)
  _has_bits_[0] &= ~0x00000040u;
  ::trtcaffe::FillerParameter* temp = bias_filler_;
  bias_filler_ = nullptr;
  return temp;
}
inline ::trtcaffe::FillerParameter* V0LayerParameter::_internal_mutable_bias_filler() {
  _has_bits_[0] |= 0x00000040u;
  if (bias_filler_ == nullptr) {
    auto* p = CreateMaybeMessage<::trtcaffe::FillerParameter>(GetArena());
    bias_filler_ = p;
  }
  return bias_filler_;
}
inline ::trtcaffe::FillerParameter* V0LayerParameter::mutable_bias_filler() {
  // @@protoc_insertion_point(field_mutable:trtcaffe.V0LayerParameter.bias_filler)
  return _internal_mutable_bias_filler();
}
inline void V0LayerParameter::set_allocated_bias_filler(::trtcaffe::FillerParameter* bias_filler) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete bias_filler_;
  }
  if (bias_filler) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(bias_filler);
    if (message_arena != submessage_arena) {
      bias_filler = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, bias_filler, submessage_arena);
    }
    _has_bits_[0] |= 0x00000040u;
  } else {
    _has_bits_[0] &= ~0x00000040u;
  }
  bias_filler_ = bias_filler;
  // @@protoc_insertion_point(field_set_allocated:trtcaffe.V0LayerParameter.bias_filler)
}

// optional uint32 pad = 7 [default = 0];
inline bool V0LayerParameter::_internal_has_pad() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool V0LayerParameter::has_pad() const {
  return _internal_has_pad();
}
inline void V0LayerParameter::clear_pad() {
  pad_ = 0u;
  _has_bits_[0] &= ~0x00000200u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 V0LayerParameter::_internal_pad() const {
  return pad_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 V0LayerParameter::pad() const {
  // @@protoc_insertion_point(field_get:trtcaffe.V0LayerParameter.pad)
  return _internal_pad();
}
inline void V0LayerParameter::_internal_set_pad(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000200u;
  pad_ = value;
}
inline void V0LayerParameter::set_pad(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_pad(value);
  // @@protoc_insertion_point(field_set:trtcaffe.V0LayerParameter.pad)
}

// optional uint32 kernelsize = 8;
inline bool V0LayerParameter::_internal_has_kernelsize() const {
  bool value = (_has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool V0LayerParameter::has_kernelsize() const {
  return _internal_has_kernelsize();
}
inline void V0LayerParameter::clear_kernelsize() {
  kernelsize_ = 0u;
  _has_bits_[0] &= ~0x00000400u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 V0LayerParameter::_internal_kernelsize() const {
  return kernelsize_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 V0LayerParameter::kernelsize() const {
  // @@protoc_insertion_point(field_get:trtcaffe.V0LayerParameter.kernelsize)
  return _internal_kernelsize();
}
inline void V0LayerParameter::_internal_set_kernelsize(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000400u;
  kernelsize_ = value;
}
inline void V0LayerParameter::set_kernelsize(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_kernelsize(value);
  // @@protoc_insertion_point(field_set:trtcaffe.V0LayerParameter.kernelsize)
}

// optional uint32 group = 9 [default = 1];
inline bool V0LayerParameter::_internal_has_group() const {
  bool value = (_has_bits_[0] & 0x01000000u) != 0;
  return value;
}
inline bool V0LayerParameter::has_group() const {
  return _internal_has_group();
}
inline void V0LayerParameter::clear_group() {
  group_ = 1u;
  _has_bits_[0] &= ~0x01000000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 V0LayerParameter::_internal_group() const {
  return group_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 V0LayerParameter::group() const {
  // @@protoc_insertion_point(field_get:trtcaffe.V0LayerParameter.group)
  return _internal_group();
}
inline void V0LayerParameter::_internal_set_group(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x01000000u;
  group_ = value;
}
inline void V0LayerParameter::set_group(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_group(value);
  // @@protoc_insertion_point(field_set:trtcaffe.V0LayerParameter.group)
}

// optional uint32 stride = 10 [default = 1];
inline bool V0LayerParameter::_internal_has_stride() const {
  bool value = (_has_bits_[0] & 0x02000000u) != 0;
  return value;
}
inline bool V0LayerParameter::has_stride() const {
  return _internal_has_stride();
}
inline void V0LayerParameter::clear_stride() {
  stride_ = 1u;
  _has_bits_[0] &= ~0x02000000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 V0LayerParameter::_internal_stride() const {
  return stride_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 V0LayerParameter::stride() const {
  // @@protoc_insertion_point(field_get:trtcaffe.V0LayerParameter.stride)
  return _internal_stride();
}
inline void V0LayerParameter::_internal_set_stride(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x02000000u;
  stride_ = value;
}
inline void V0LayerParameter::set_stride(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_stride(value);
  // @@protoc_insertion_point(field_set:trtcaffe.V0LayerParameter.stride)
}

// optional .trtcaffe.V0LayerParameter.PoolMethod pool = 11 [default = MAX];
inline bool V0LayerParameter::_internal_has_pool() const {
  bool value = (_has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool V0LayerParameter::has_pool() const {
  return _internal_has_pool();
}
inline void V0LayerParameter::clear_pool() {
  pool_ = 0;
  _has_bits_[0] &= ~0x00000800u;
}
inline ::trtcaffe::V0LayerParameter_PoolMethod V0LayerParameter::_internal_pool() const {
  return static_cast< ::trtcaffe::V0LayerParameter_PoolMethod >(pool_);
}
inline ::trtcaffe::V0LayerParameter_PoolMethod V0LayerParameter::pool() const {
  // @@protoc_insertion_point(field_get:trtcaffe.V0LayerParameter.pool)
  return _internal_pool();
}
inline void V0LayerParameter::_internal_set_pool(::trtcaffe::V0LayerParameter_PoolMethod value) {
  assert(::trtcaffe::V0LayerParameter_PoolMethod_IsValid(value));
  _has_bits_[0] |= 0x00000800u;
  pool_ = value;
}
inline void V0LayerParameter::set_pool(::trtcaffe::V0LayerParameter_PoolMethod value) {
  _internal_set_pool(value);
  // @@protoc_insertion_point(field_set:trtcaffe.V0LayerParameter.pool)
}

// optional float dropout_ratio = 12 [default = 0.5];
inline bool V0LayerParameter::_internal_has_dropout_ratio() const {
  bool value = (_has_bits_[0] & 0x04000000u) != 0;
  return value;
}
inline bool V0LayerParameter::has_dropout_ratio() const {
  return _internal_has_dropout_ratio();
}
inline void V0LayerParameter::clear_dropout_ratio() {
  dropout_ratio_ = 0.5f;
  _has_bits_[0] &= ~0x04000000u;
}
inline float V0LayerParameter::_internal_dropout_ratio() const {
  return dropout_ratio_;
}
inline float V0LayerParameter::dropout_ratio() const {
  // @@protoc_insertion_point(field_get:trtcaffe.V0LayerParameter.dropout_ratio)
  return _internal_dropout_ratio();
}
inline void V0LayerParameter::_internal_set_dropout_ratio(float value) {
  _has_bits_[0] |= 0x04000000u;
  dropout_ratio_ = value;
}
inline void V0LayerParameter::set_dropout_ratio(float value) {
  _internal_set_dropout_ratio(value);
  // @@protoc_insertion_point(field_set:trtcaffe.V0LayerParameter.dropout_ratio)
}

// optional uint32 local_size = 13 [default = 5];
inline bool V0LayerParameter::_internal_has_local_size() const {
  bool value = (_has_bits_[0] & 0x08000000u) != 0;
  return value;
}
inline bool V0LayerParameter::has_local_size() const {
  return _internal_has_local_size();
}
inline void V0LayerParameter::clear_local_size() {
  local_size_ = 5u;
  _has_bits_[0] &= ~0x08000000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 V0LayerParameter::_internal_local_size() const {
  return local_size_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 V0LayerParameter::local_size() const {
  // @@protoc_insertion_point(field_get:trtcaffe.V0LayerParameter.local_size)
  return _internal_local_size();
}
inline void V0LayerParameter::_internal_set_local_size(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x08000000u;
  local_size_ = value;
}
inline void V0LayerParameter::set_local_size(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_local_size(value);
  // @@protoc_insertion_point(field_set:trtcaffe.V0LayerParameter.local_size)
}

// optional float alpha = 14 [default = 1];
inline bool V0LayerParameter::_internal_has_alpha() const {
  bool value = (_has_bits_[0] & 0x10000000u) != 0;
  return value;
}
inline bool V0LayerParameter::has_alpha() const {
  return _internal_has_alpha();
}
inline void V0LayerParameter::clear_alpha() {
  alpha_ = 1;
  _has_bits_[0] &= ~0x10000000u;
}
inline float V0LayerParameter::_internal_alpha() const {
  return alpha_;
}
inline float V0LayerParameter::alpha() const {
  // @@protoc_insertion_point(field_get:trtcaffe.V0LayerParameter.alpha)
  return _internal_alpha();
}
inline void V0LayerParameter::_internal_set_alpha(float value) {
  _has_bits_[0] |= 0x10000000u;
  alpha_ = value;
}
inline void V0LayerParameter::set_alpha(float value) {
  _internal_set_alpha(value);
  // @@protoc_insertion_point(field_set:trtcaffe.V0LayerParameter.alpha)
}

// optional float beta = 15 [default = 0.75];
inline bool V0LayerParameter::_internal_has_beta() const {
  bool value = (_has_bits_[0] & 0x20000000u) != 0;
  return value;
}
inline bool V0LayerParameter::has_beta() const {
  return _internal_has_beta();
}
inline void V0LayerParameter::clear_beta() {
  beta_ = 0.75f;
  _has_bits_[0] &= ~0x20000000u;
}
inline float V0LayerParameter::_internal_beta() const {
  return beta_;
}
inline float V0LayerParameter::beta() const {
  // @@protoc_insertion_point(field_get:trtcaffe.V0LayerParameter.beta)
  return _internal_beta();
}
inline void V0LayerParameter::_internal_set_beta(float value) {
  _has_bits_[0] |= 0x20000000u;
  beta_ = value;
}
inline void V0LayerParameter::set_beta(float value) {
  _internal_set_beta(value);
  // @@protoc_insertion_point(field_set:trtcaffe.V0LayerParameter.beta)
}

// optional float k = 22 [default = 1];
inline bool V0LayerParameter::_internal_has_k() const {
  bool value = (_has_bits_[0] & 0x80000000u) != 0;
  return value;
}
inline bool V0LayerParameter::has_k() const {
  return _internal_has_k();
}
inline void V0LayerParameter::clear_k() {
  k_ = 1;
  _has_bits_[0] &= ~0x80000000u;
}
inline float V0LayerParameter::_internal_k() const {
  return k_;
}
inline float V0LayerParameter::k() const {
  // @@protoc_insertion_point(field_get:trtcaffe.V0LayerParameter.k)
  return _internal_k();
}
inline void V0LayerParameter::_internal_set_k(float value) {
  _has_bits_[0] |= 0x80000000u;
  k_ = value;
}
inline void V0LayerParameter::set_k(float value) {
  _internal_set_k(value);
  // @@protoc_insertion_point(field_set:trtcaffe.V0LayerParameter.k)
}

// optional string source = 16;
inline bool V0LayerParameter::_internal_has_source() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool V0LayerParameter::has_source() const {
  return _internal_has_source();
}
inline void V0LayerParameter::clear_source() {
  source_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& V0LayerParameter::source() const {
  // @@protoc_insertion_point(field_get:trtcaffe.V0LayerParameter.source)
  return _internal_source();
}
inline void V0LayerParameter::set_source(const std::string& value) {
  _internal_set_source(value);
  // @@protoc_insertion_point(field_set:trtcaffe.V0LayerParameter.source)
}
inline std::string* V0LayerParameter::mutable_source() {
  // @@protoc_insertion_point(field_mutable:trtcaffe.V0LayerParameter.source)
  return _internal_mutable_source();
}
inline const std::string& V0LayerParameter::_internal_source() const {
  return source_.Get();
}
inline void V0LayerParameter::_internal_set_source(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  source_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void V0LayerParameter::set_source(std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  source_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:trtcaffe.V0LayerParameter.source)
}
inline void V0LayerParameter::set_source(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  source_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:trtcaffe.V0LayerParameter.source)
}
inline void V0LayerParameter::set_source(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000004u;
  source_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:trtcaffe.V0LayerParameter.source)
}
inline std::string* V0LayerParameter::_internal_mutable_source() {
  _has_bits_[0] |= 0x00000004u;
  return source_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* V0LayerParameter::release_source() {
  // @@protoc_insertion_point(field_release:trtcaffe.V0LayerParameter.source)
  if (!_internal_has_source()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return source_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void V0LayerParameter::set_allocated_source(std::string* source) {
  if (source != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  source_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), source,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:trtcaffe.V0LayerParameter.source)
}
inline std::string* V0LayerParameter::unsafe_arena_release_source() {
  // @@protoc_insertion_point(field_unsafe_arena_release:trtcaffe.V0LayerParameter.source)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000004u;
  return source_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void V0LayerParameter::unsafe_arena_set_allocated_source(
    std::string* source) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (source != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  source_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      source, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:trtcaffe.V0LayerParameter.source)
}

// optional float scale = 17 [default = 1];
inline bool V0LayerParameter::_internal_has_scale() const {
  bool value = (_has_bits_[0] & 0x40000000u) != 0;
  return value;
}
inline bool V0LayerParameter::has_scale() const {
  return _internal_has_scale();
}
inline void V0LayerParameter::clear_scale() {
  scale_ = 1;
  _has_bits_[0] &= ~0x40000000u;
}
inline float V0LayerParameter::_internal_scale() const {
  return scale_;
}
inline float V0LayerParameter::scale() const {
  // @@protoc_insertion_point(field_get:trtcaffe.V0LayerParameter.scale)
  return _internal_scale();
}
inline void V0LayerParameter::_internal_set_scale(float value) {
  _has_bits_[0] |= 0x40000000u;
  scale_ = value;
}
inline void V0LayerParameter::set_scale(float value) {
  _internal_set_scale(value);
  // @@protoc_insertion_point(field_set:trtcaffe.V0LayerParameter.scale)
}

// optional string meanfile = 18;
inline bool V0LayerParameter::_internal_has_meanfile() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool V0LayerParameter::has_meanfile() const {
  return _internal_has_meanfile();
}
inline void V0LayerParameter::clear_meanfile() {
  meanfile_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000008u;
}
inline const std::string& V0LayerParameter::meanfile() const {
  // @@protoc_insertion_point(field_get:trtcaffe.V0LayerParameter.meanfile)
  return _internal_meanfile();
}
inline void V0LayerParameter::set_meanfile(const std::string& value) {
  _internal_set_meanfile(value);
  // @@protoc_insertion_point(field_set:trtcaffe.V0LayerParameter.meanfile)
}
inline std::string* V0LayerParameter::mutable_meanfile() {
  // @@protoc_insertion_point(field_mutable:trtcaffe.V0LayerParameter.meanfile)
  return _internal_mutable_meanfile();
}
inline const std::string& V0LayerParameter::_internal_meanfile() const {
  return meanfile_.Get();
}
inline void V0LayerParameter::_internal_set_meanfile(const std::string& value) {
  _has_bits_[0] |= 0x00000008u;
  meanfile_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void V0LayerParameter::set_meanfile(std::string&& value) {
  _has_bits_[0] |= 0x00000008u;
  meanfile_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:trtcaffe.V0LayerParameter.meanfile)
}
inline void V0LayerParameter::set_meanfile(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000008u;
  meanfile_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:trtcaffe.V0LayerParameter.meanfile)
}
inline void V0LayerParameter::set_meanfile(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000008u;
  meanfile_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:trtcaffe.V0LayerParameter.meanfile)
}
inline std::string* V0LayerParameter::_internal_mutable_meanfile() {
  _has_bits_[0] |= 0x00000008u;
  return meanfile_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* V0LayerParameter::release_meanfile() {
  // @@protoc_insertion_point(field_release:trtcaffe.V0LayerParameter.meanfile)
  if (!_internal_has_meanfile()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000008u;
  return meanfile_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void V0LayerParameter::set_allocated_meanfile(std::string* meanfile) {
  if (meanfile != nullptr) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  meanfile_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), meanfile,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:trtcaffe.V0LayerParameter.meanfile)
}
inline std::string* V0LayerParameter::unsafe_arena_release_meanfile() {
  // @@protoc_insertion_point(field_unsafe_arena_release:trtcaffe.V0LayerParameter.meanfile)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000008u;
  return meanfile_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void V0LayerParameter::unsafe_arena_set_allocated_meanfile(
    std::string* meanfile) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (meanfile != nullptr) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  meanfile_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      meanfile, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:trtcaffe.V0LayerParameter.meanfile)
}

// optional uint32 batchsize = 19;
inline bool V0LayerParameter::_internal_has_batchsize() const {
  bool value = (_has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline bool V0LayerParameter::has_batchsize() const {
  return _internal_has_batchsize();
}
inline void V0LayerParameter::clear_batchsize() {
  batchsize_ = 0u;
  _has_bits_[0] &= ~0x00001000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 V0LayerParameter::_internal_batchsize() const {
  return batchsize_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 V0LayerParameter::batchsize() const {
  // @@protoc_insertion_point(field_get:trtcaffe.V0LayerParameter.batchsize)
  return _internal_batchsize();
}
inline void V0LayerParameter::_internal_set_batchsize(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00001000u;
  batchsize_ = value;
}
inline void V0LayerParameter::set_batchsize(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_batchsize(value);
  // @@protoc_insertion_point(field_set:trtcaffe.V0LayerParameter.batchsize)
}

// optional uint32 cropsize = 20 [default = 0];
inline bool V0LayerParameter::_internal_has_cropsize() const {
  bool value = (_has_bits_[0] & 0x00002000u) != 0;
  return value;
}
inline bool V0LayerParameter::has_cropsize() const {
  return _internal_has_cropsize();
}
inline void V0LayerParameter::clear_cropsize() {
  cropsize_ = 0u;
  _has_bits_[0] &= ~0x00002000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 V0LayerParameter::_internal_cropsize() const {
  return cropsize_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 V0LayerParameter::cropsize() const {
  // @@protoc_insertion_point(field_get:trtcaffe.V0LayerParameter.cropsize)
  return _internal_cropsize();
}
inline void V0LayerParameter::_internal_set_cropsize(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00002000u;
  cropsize_ = value;
}
inline void V0LayerParameter::set_cropsize(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_cropsize(value);
  // @@protoc_insertion_point(field_set:trtcaffe.V0LayerParameter.cropsize)
}

// optional bool mirror = 21 [default = false];
inline bool V0LayerParameter::_internal_has_mirror() const {
  bool value = (_has_bits_[0] & 0x00008000u) != 0;
  return value;
}
inline bool V0LayerParameter::has_mirror() const {
  return _internal_has_mirror();
}
inline void V0LayerParameter::clear_mirror() {
  mirror_ = false;
  _has_bits_[0] &= ~0x00008000u;
}
inline bool V0LayerParameter::_internal_mirror() const {
  return mirror_;
}
inline bool V0LayerParameter::mirror() const {
  // @@protoc_insertion_point(field_get:trtcaffe.V0LayerParameter.mirror)
  return _internal_mirror();
}
inline void V0LayerParameter::_internal_set_mirror(bool value) {
  _has_bits_[0] |= 0x00008000u;
  mirror_ = value;
}
inline void V0LayerParameter::set_mirror(bool value) {
  _internal_set_mirror(value);
  // @@protoc_insertion_point(field_set:trtcaffe.V0LayerParameter.mirror)
}

// repeated .trtcaffe.BlobProto blobs = 50;
inline int V0LayerParameter::_internal_blobs_size() const {
  return blobs_.size();
}
inline int V0LayerParameter::blobs_size() const {
  return _internal_blobs_size();
}
inline void V0LayerParameter::clear_blobs() {
  blobs_.Clear();
}
inline ::trtcaffe::BlobProto* V0LayerParameter::mutable_blobs(int index) {
  // @@protoc_insertion_point(field_mutable:trtcaffe.V0LayerParameter.blobs)
  return blobs_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::trtcaffe::BlobProto >*
V0LayerParameter::mutable_blobs() {
  // @@protoc_insertion_point(field_mutable_list:trtcaffe.V0LayerParameter.blobs)
  return &blobs_;
}
inline const ::trtcaffe::BlobProto& V0LayerParameter::_internal_blobs(int index) const {
  return blobs_.Get(index);
}
inline const ::trtcaffe::BlobProto& V0LayerParameter::blobs(int index) const {
  // @@protoc_insertion_point(field_get:trtcaffe.V0LayerParameter.blobs)
  return _internal_blobs(index);
}
inline ::trtcaffe::BlobProto* V0LayerParameter::_internal_add_blobs() {
  return blobs_.Add();
}
inline ::trtcaffe::BlobProto* V0LayerParameter::add_blobs() {
  // @@protoc_insertion_point(field_add:trtcaffe.V0LayerParameter.blobs)
  return _internal_add_blobs();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::trtcaffe::BlobProto >&
V0LayerParameter::blobs() const {
  // @@protoc_insertion_point(field_list:trtcaffe.V0LayerParameter.blobs)
  return blobs_;
}

// repeated float blobs_lr = 51;
inline int V0LayerParameter::_internal_blobs_lr_size() const {
  return blobs_lr_.size();
}
inline int V0LayerParameter::blobs_lr_size() const {
  return _internal_blobs_lr_size();
}
inline void V0LayerParameter::clear_blobs_lr() {
  blobs_lr_.Clear();
}
inline float V0LayerParameter::_internal_blobs_lr(int index) const {
  return blobs_lr_.Get(index);
}
inline float V0LayerParameter::blobs_lr(int index) const {
  // @@protoc_insertion_point(field_get:trtcaffe.V0LayerParameter.blobs_lr)
  return _internal_blobs_lr(index);
}
inline void V0LayerParameter::set_blobs_lr(int index, float value) {
  blobs_lr_.Set(index, value);
  // @@protoc_insertion_point(field_set:trtcaffe.V0LayerParameter.blobs_lr)
}
inline void V0LayerParameter::_internal_add_blobs_lr(float value) {
  blobs_lr_.Add(value);
}
inline void V0LayerParameter::add_blobs_lr(float value) {
  _internal_add_blobs_lr(value);
  // @@protoc_insertion_point(field_add:trtcaffe.V0LayerParameter.blobs_lr)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
V0LayerParameter::_internal_blobs_lr() const {
  return blobs_lr_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
V0LayerParameter::blobs_lr() const {
  // @@protoc_insertion_point(field_list:trtcaffe.V0LayerParameter.blobs_lr)
  return _internal_blobs_lr();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
V0LayerParameter::_internal_mutable_blobs_lr() {
  return &blobs_lr_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
V0LayerParameter::mutable_blobs_lr() {
  // @@protoc_insertion_point(field_mutable_list:trtcaffe.V0LayerParameter.blobs_lr)
  return _internal_mutable_blobs_lr();
}

// repeated float weight_decay = 52;
inline int V0LayerParameter::_internal_weight_decay_size() const {
  return weight_decay_.size();
}
inline int V0LayerParameter::weight_decay_size() const {
  return _internal_weight_decay_size();
}
inline void V0LayerParameter::clear_weight_decay() {
  weight_decay_.Clear();
}
inline float V0LayerParameter::_internal_weight_decay(int index) const {
  return weight_decay_.Get(index);
}
inline float V0LayerParameter::weight_decay(int index) const {
  // @@protoc_insertion_point(field_get:trtcaffe.V0LayerParameter.weight_decay)
  return _internal_weight_decay(index);
}
inline void V0LayerParameter::set_weight_decay(int index, float value) {
  weight_decay_.Set(index, value);
  // @@protoc_insertion_point(field_set:trtcaffe.V0LayerParameter.weight_decay)
}
inline void V0LayerParameter::_internal_add_weight_decay(float value) {
  weight_decay_.Add(value);
}
inline void V0LayerParameter::add_weight_decay(float value) {
  _internal_add_weight_decay(value);
  // @@protoc_insertion_point(field_add:trtcaffe.V0LayerParameter.weight_decay)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
V0LayerParameter::_internal_weight_decay() const {
  return weight_decay_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
V0LayerParameter::weight_decay() const {
  // @@protoc_insertion_point(field_list:trtcaffe.V0LayerParameter.weight_decay)
  return _internal_weight_decay();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
V0LayerParameter::_internal_mutable_weight_decay() {
  return &weight_decay_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
V0LayerParameter::mutable_weight_decay() {
  // @@protoc_insertion_point(field_mutable_list:trtcaffe.V0LayerParameter.weight_decay)
  return _internal_mutable_weight_decay();
}

// optional uint32 rand_skip = 53 [default = 0];
inline bool V0LayerParameter::_internal_has_rand_skip() const {
  bool value = (_has_bits_[0] & 0x00020000u) != 0;
  return value;
}
inline bool V0LayerParameter::has_rand_skip() const {
  return _internal_has_rand_skip();
}
inline void V0LayerParameter::clear_rand_skip() {
  rand_skip_ = 0u;
  _has_bits_[0] &= ~0x00020000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 V0LayerParameter::_internal_rand_skip() const {
  return rand_skip_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 V0LayerParameter::rand_skip() const {
  // @@protoc_insertion_point(field_get:trtcaffe.V0LayerParameter.rand_skip)
  return _internal_rand_skip();
}
inline void V0LayerParameter::_internal_set_rand_skip(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00020000u;
  rand_skip_ = value;
}
inline void V0LayerParameter::set_rand_skip(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_rand_skip(value);
  // @@protoc_insertion_point(field_set:trtcaffe.V0LayerParameter.rand_skip)
}

// optional float det_fg_threshold = 54 [default = 0.5];
inline bool V0LayerParameter::_internal_has_det_fg_threshold() const {
  bool value = (_has_bits_[1] & 0x00000001u) != 0;
  return value;
}
inline bool V0LayerParameter::has_det_fg_threshold() const {
  return _internal_has_det_fg_threshold();
}
inline void V0LayerParameter::clear_det_fg_threshold() {
  det_fg_threshold_ = 0.5f;
  _has_bits_[1] &= ~0x00000001u;
}
inline float V0LayerParameter::_internal_det_fg_threshold() const {
  return det_fg_threshold_;
}
inline float V0LayerParameter::det_fg_threshold() const {
  // @@protoc_insertion_point(field_get:trtcaffe.V0LayerParameter.det_fg_threshold)
  return _internal_det_fg_threshold();
}
inline void V0LayerParameter::_internal_set_det_fg_threshold(float value) {
  _has_bits_[1] |= 0x00000001u;
  det_fg_threshold_ = value;
}
inline void V0LayerParameter::set_det_fg_threshold(float value) {
  _internal_set_det_fg_threshold(value);
  // @@protoc_insertion_point(field_set:trtcaffe.V0LayerParameter.det_fg_threshold)
}

// optional float det_bg_threshold = 55 [default = 0.5];
inline bool V0LayerParameter::_internal_has_det_bg_threshold() const {
  bool value = (_has_bits_[1] & 0x00000002u) != 0;
  return value;
}
inline bool V0LayerParameter::has_det_bg_threshold() const {
  return _internal_has_det_bg_threshold();
}
inline void V0LayerParameter::clear_det_bg_threshold() {
  det_bg_threshold_ = 0.5f;
  _has_bits_[1] &= ~0x00000002u;
}
inline float V0LayerParameter::_internal_det_bg_threshold() const {
  return det_bg_threshold_;
}
inline float V0LayerParameter::det_bg_threshold() const {
  // @@protoc_insertion_point(field_get:trtcaffe.V0LayerParameter.det_bg_threshold)
  return _internal_det_bg_threshold();
}
inline void V0LayerParameter::_internal_set_det_bg_threshold(float value) {
  _has_bits_[1] |= 0x00000002u;
  det_bg_threshold_ = value;
}
inline void V0LayerParameter::set_det_bg_threshold(float value) {
  _internal_set_det_bg_threshold(value);
  // @@protoc_insertion_point(field_set:trtcaffe.V0LayerParameter.det_bg_threshold)
}

// optional float det_fg_fraction = 56 [default = 0.25];
inline bool V0LayerParameter::_internal_has_det_fg_fraction() const {
  bool value = (_has_bits_[1] & 0x00000004u) != 0;
  return value;
}
inline bool V0LayerParameter::has_det_fg_fraction() const {
  return _internal_has_det_fg_fraction();
}
inline void V0LayerParameter::clear_det_fg_fraction() {
  det_fg_fraction_ = 0.25f;
  _has_bits_[1] &= ~0x00000004u;
}
inline float V0LayerParameter::_internal_det_fg_fraction() const {
  return det_fg_fraction_;
}
inline float V0LayerParameter::det_fg_fraction() const {
  // @@protoc_insertion_point(field_get:trtcaffe.V0LayerParameter.det_fg_fraction)
  return _internal_det_fg_fraction();
}
inline void V0LayerParameter::_internal_set_det_fg_fraction(float value) {
  _has_bits_[1] |= 0x00000004u;
  det_fg_fraction_ = value;
}
inline void V0LayerParameter::set_det_fg_fraction(float value) {
  _internal_set_det_fg_fraction(value);
  // @@protoc_insertion_point(field_set:trtcaffe.V0LayerParameter.det_fg_fraction)
}

// optional uint32 det_context_pad = 58 [default = 0];
inline bool V0LayerParameter::_internal_has_det_context_pad() const {
  bool value = (_has_bits_[0] & 0x00040000u) != 0;
  return value;
}
inline bool V0LayerParameter::has_det_context_pad() const {
  return _internal_has_det_context_pad();
}
inline void V0LayerParameter::clear_det_context_pad() {
  det_context_pad_ = 0u;
  _has_bits_[0] &= ~0x00040000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 V0LayerParameter::_internal_det_context_pad() const {
  return det_context_pad_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 V0LayerParameter::det_context_pad() const {
  // @@protoc_insertion_point(field_get:trtcaffe.V0LayerParameter.det_context_pad)
  return _internal_det_context_pad();
}
inline void V0LayerParameter::_internal_set_det_context_pad(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00040000u;
  det_context_pad_ = value;
}
inline void V0LayerParameter::set_det_context_pad(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_det_context_pad(value);
  // @@protoc_insertion_point(field_set:trtcaffe.V0LayerParameter.det_context_pad)
}

// optional string det_crop_mode = 59 [default = "warp"];
inline bool V0LayerParameter::_internal_has_det_crop_mode() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool V0LayerParameter::has_det_crop_mode() const {
  return _internal_has_det_crop_mode();
}
inline void V0LayerParameter::clear_det_crop_mode() {
  det_crop_mode_.ClearToDefault(&::trtcaffe::V0LayerParameter::_i_give_permission_to_break_this_code_default_det_crop_mode_.get(), GetArena());
  _has_bits_[0] &= ~0x00000010u;
}
inline const std::string& V0LayerParameter::det_crop_mode() const {
  // @@protoc_insertion_point(field_get:trtcaffe.V0LayerParameter.det_crop_mode)
  return _internal_det_crop_mode();
}
inline void V0LayerParameter::set_det_crop_mode(const std::string& value) {
  _internal_set_det_crop_mode(value);
  // @@protoc_insertion_point(field_set:trtcaffe.V0LayerParameter.det_crop_mode)
}
inline std::string* V0LayerParameter::mutable_det_crop_mode() {
  // @@protoc_insertion_point(field_mutable:trtcaffe.V0LayerParameter.det_crop_mode)
  return _internal_mutable_det_crop_mode();
}
inline const std::string& V0LayerParameter::_internal_det_crop_mode() const {
  return det_crop_mode_.Get();
}
inline void V0LayerParameter::_internal_set_det_crop_mode(const std::string& value) {
  _has_bits_[0] |= 0x00000010u;
  det_crop_mode_.Set(&::trtcaffe::V0LayerParameter::_i_give_permission_to_break_this_code_default_det_crop_mode_.get(), value, GetArena());
}
inline void V0LayerParameter::set_det_crop_mode(std::string&& value) {
  _has_bits_[0] |= 0x00000010u;
  det_crop_mode_.Set(
    &::trtcaffe::V0LayerParameter::_i_give_permission_to_break_this_code_default_det_crop_mode_.get(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:trtcaffe.V0LayerParameter.det_crop_mode)
}
inline void V0LayerParameter::set_det_crop_mode(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000010u;
  det_crop_mode_.Set(&::trtcaffe::V0LayerParameter::_i_give_permission_to_break_this_code_default_det_crop_mode_.get(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:trtcaffe.V0LayerParameter.det_crop_mode)
}
inline void V0LayerParameter::set_det_crop_mode(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000010u;
  det_crop_mode_.Set(&::trtcaffe::V0LayerParameter::_i_give_permission_to_break_this_code_default_det_crop_mode_.get(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:trtcaffe.V0LayerParameter.det_crop_mode)
}
inline std::string* V0LayerParameter::_internal_mutable_det_crop_mode() {
  _has_bits_[0] |= 0x00000010u;
  return det_crop_mode_.Mutable(&::trtcaffe::V0LayerParameter::_i_give_permission_to_break_this_code_default_det_crop_mode_.get(), GetArena());
}
inline std::string* V0LayerParameter::release_det_crop_mode() {
  // @@protoc_insertion_point(field_release:trtcaffe.V0LayerParameter.det_crop_mode)
  if (!_internal_has_det_crop_mode()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000010u;
  return det_crop_mode_.ReleaseNonDefault(&::trtcaffe::V0LayerParameter::_i_give_permission_to_break_this_code_default_det_crop_mode_.get(), GetArena());
}
inline void V0LayerParameter::set_allocated_det_crop_mode(std::string* det_crop_mode) {
  if (det_crop_mode != nullptr) {
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  det_crop_mode_.SetAllocated(&::trtcaffe::V0LayerParameter::_i_give_permission_to_break_this_code_default_det_crop_mode_.get(), det_crop_mode,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:trtcaffe.V0LayerParameter.det_crop_mode)
}
inline std::string* V0LayerParameter::unsafe_arena_release_det_crop_mode() {
  // @@protoc_insertion_point(field_unsafe_arena_release:trtcaffe.V0LayerParameter.det_crop_mode)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000010u;
  return det_crop_mode_.UnsafeArenaRelease(&::trtcaffe::V0LayerParameter::_i_give_permission_to_break_this_code_default_det_crop_mode_.get(),
      GetArena());
}
inline void V0LayerParameter::unsafe_arena_set_allocated_det_crop_mode(
    std::string* det_crop_mode) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (det_crop_mode != nullptr) {
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  det_crop_mode_.UnsafeArenaSetAllocated(&::trtcaffe::V0LayerParameter::_i_give_permission_to_break_this_code_default_det_crop_mode_.get(),
      det_crop_mode, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:trtcaffe.V0LayerParameter.det_crop_mode)
}

// optional int32 new_num = 60 [default = 0];
inline bool V0LayerParameter::_internal_has_new_num() const {
  bool value = (_has_bits_[0] & 0x00080000u) != 0;
  return value;
}
inline bool V0LayerParameter::has_new_num() const {
  return _internal_has_new_num();
}
inline void V0LayerParameter::clear_new_num() {
  new_num_ = 0;
  _has_bits_[0] &= ~0x00080000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 V0LayerParameter::_internal_new_num() const {
  return new_num_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 V0LayerParameter::new_num() const {
  // @@protoc_insertion_point(field_get:trtcaffe.V0LayerParameter.new_num)
  return _internal_new_num();
}
inline void V0LayerParameter::_internal_set_new_num(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00080000u;
  new_num_ = value;
}
inline void V0LayerParameter::set_new_num(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_new_num(value);
  // @@protoc_insertion_point(field_set:trtcaffe.V0LayerParameter.new_num)
}

// optional int32 new_channels = 61 [default = 0];
inline bool V0LayerParameter::_internal_has_new_channels() const {
  bool value = (_has_bits_[0] & 0x00100000u) != 0;
  return value;
}
inline bool V0LayerParameter::has_new_channels() const {
  return _internal_has_new_channels();
}
inline void V0LayerParameter::clear_new_channels() {
  new_channels_ = 0;
  _has_bits_[0] &= ~0x00100000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 V0LayerParameter::_internal_new_channels() const {
  return new_channels_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 V0LayerParameter::new_channels() const {
  // @@protoc_insertion_point(field_get:trtcaffe.V0LayerParameter.new_channels)
  return _internal_new_channels();
}
inline void V0LayerParameter::_internal_set_new_channels(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00100000u;
  new_channels_ = value;
}
inline void V0LayerParameter::set_new_channels(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_new_channels(value);
  // @@protoc_insertion_point(field_set:trtcaffe.V0LayerParameter.new_channels)
}

// optional int32 new_height = 62 [default = 0];
inline bool V0LayerParameter::_internal_has_new_height() const {
  bool value = (_has_bits_[0] & 0x00200000u) != 0;
  return value;
}
inline bool V0LayerParameter::has_new_height() const {
  return _internal_has_new_height();
}
inline void V0LayerParameter::clear_new_height() {
  new_height_ = 0;
  _has_bits_[0] &= ~0x00200000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 V0LayerParameter::_internal_new_height() const {
  return new_height_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 V0LayerParameter::new_height() const {
  // @@protoc_insertion_point(field_get:trtcaffe.V0LayerParameter.new_height)
  return _internal_new_height();
}
inline void V0LayerParameter::_internal_set_new_height(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00200000u;
  new_height_ = value;
}
inline void V0LayerParameter::set_new_height(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_new_height(value);
  // @@protoc_insertion_point(field_set:trtcaffe.V0LayerParameter.new_height)
}

// optional int32 new_width = 63 [default = 0];
inline bool V0LayerParameter::_internal_has_new_width() const {
  bool value = (_has_bits_[0] & 0x00004000u) != 0;
  return value;
}
inline bool V0LayerParameter::has_new_width() const {
  return _internal_has_new_width();
}
inline void V0LayerParameter::clear_new_width() {
  new_width_ = 0;
  _has_bits_[0] &= ~0x00004000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 V0LayerParameter::_internal_new_width() const {
  return new_width_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 V0LayerParameter::new_width() const {
  // @@protoc_insertion_point(field_get:trtcaffe.V0LayerParameter.new_width)
  return _internal_new_width();
}
inline void V0LayerParameter::_internal_set_new_width(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00004000u;
  new_width_ = value;
}
inline void V0LayerParameter::set_new_width(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_new_width(value);
  // @@protoc_insertion_point(field_set:trtcaffe.V0LayerParameter.new_width)
}

// optional bool shuffle_images = 64 [default = false];
inline bool V0LayerParameter::_internal_has_shuffle_images() const {
  bool value = (_has_bits_[0] & 0x00010000u) != 0;
  return value;
}
inline bool V0LayerParameter::has_shuffle_images() const {
  return _internal_has_shuffle_images();
}
inline void V0LayerParameter::clear_shuffle_images() {
  shuffle_images_ = false;
  _has_bits_[0] &= ~0x00010000u;
}
inline bool V0LayerParameter::_internal_shuffle_images() const {
  return shuffle_images_;
}
inline bool V0LayerParameter::shuffle_images() const {
  // @@protoc_insertion_point(field_get:trtcaffe.V0LayerParameter.shuffle_images)
  return _internal_shuffle_images();
}
inline void V0LayerParameter::_internal_set_shuffle_images(bool value) {
  _has_bits_[0] |= 0x00010000u;
  shuffle_images_ = value;
}
inline void V0LayerParameter::set_shuffle_images(bool value) {
  _internal_set_shuffle_images(value);
  // @@protoc_insertion_point(field_set:trtcaffe.V0LayerParameter.shuffle_images)
}

// optional uint32 concat_dim = 65 [default = 1];
inline bool V0LayerParameter::_internal_has_concat_dim() const {
  bool value = (_has_bits_[0] & 0x00400000u) != 0;
  return value;
}
inline bool V0LayerParameter::has_concat_dim() const {
  return _internal_has_concat_dim();
}
inline void V0LayerParameter::clear_concat_dim() {
  concat_dim_ = 1u;
  _has_bits_[0] &= ~0x00400000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 V0LayerParameter::_internal_concat_dim() const {
  return concat_dim_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 V0LayerParameter::concat_dim() const {
  // @@protoc_insertion_point(field_get:trtcaffe.V0LayerParameter.concat_dim)
  return _internal_concat_dim();
}
inline void V0LayerParameter::_internal_set_concat_dim(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00400000u;
  concat_dim_ = value;
}
inline void V0LayerParameter::set_concat_dim(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_concat_dim(value);
  // @@protoc_insertion_point(field_set:trtcaffe.V0LayerParameter.concat_dim)
}

// optional .trtcaffe.HDF5OutputParameter hdf5_output_param = 1001;
inline bool V0LayerParameter::_internal_has_hdf5_output_param() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  PROTOBUF_ASSUME(!value || hdf5_output_param_ != nullptr);
  return value;
}
inline bool V0LayerParameter::has_hdf5_output_param() const {
  return _internal_has_hdf5_output_param();
}
inline void V0LayerParameter::clear_hdf5_output_param() {
  if (hdf5_output_param_ != nullptr) hdf5_output_param_->Clear();
  _has_bits_[0] &= ~0x00000080u;
}
inline const ::trtcaffe::HDF5OutputParameter& V0LayerParameter::_internal_hdf5_output_param() const {
  const ::trtcaffe::HDF5OutputParameter* p = hdf5_output_param_;
  return p != nullptr ? *p : *reinterpret_cast<const ::trtcaffe::HDF5OutputParameter*>(
      &::trtcaffe::_HDF5OutputParameter_default_instance_);
}
inline const ::trtcaffe::HDF5OutputParameter& V0LayerParameter::hdf5_output_param() const {
  // @@protoc_insertion_point(field_get:trtcaffe.V0LayerParameter.hdf5_output_param)
  return _internal_hdf5_output_param();
}
inline void V0LayerParameter::unsafe_arena_set_allocated_hdf5_output_param(
    ::trtcaffe::HDF5OutputParameter* hdf5_output_param) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(hdf5_output_param_);
  }
  hdf5_output_param_ = hdf5_output_param;
  if (hdf5_output_param) {
    _has_bits_[0] |= 0x00000080u;
  } else {
    _has_bits_[0] &= ~0x00000080u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:trtcaffe.V0LayerParameter.hdf5_output_param)
}
inline ::trtcaffe::HDF5OutputParameter* V0LayerParameter::release_hdf5_output_param() {
  auto temp = unsafe_arena_release_hdf5_output_param();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::trtcaffe::HDF5OutputParameter* V0LayerParameter::unsafe_arena_release_hdf5_output_param() {
  // @@protoc_insertion_point(field_release:trtcaffe.V0LayerParameter.hdf5_output_param)
  _has_bits_[0] &= ~0x00000080u;
  ::trtcaffe::HDF5OutputParameter* temp = hdf5_output_param_;
  hdf5_output_param_ = nullptr;
  return temp;
}
inline ::trtcaffe::HDF5OutputParameter* V0LayerParameter::_internal_mutable_hdf5_output_param() {
  _has_bits_[0] |= 0x00000080u;
  if (hdf5_output_param_ == nullptr) {
    auto* p = CreateMaybeMessage<::trtcaffe::HDF5OutputParameter>(GetArena());
    hdf5_output_param_ = p;
  }
  return hdf5_output_param_;
}
inline ::trtcaffe::HDF5OutputParameter* V0LayerParameter::mutable_hdf5_output_param() {
  // @@protoc_insertion_point(field_mutable:trtcaffe.V0LayerParameter.hdf5_output_param)
  return _internal_mutable_hdf5_output_param();
}
inline void V0LayerParameter::set_allocated_hdf5_output_param(::trtcaffe::HDF5OutputParameter* hdf5_output_param) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete hdf5_output_param_;
  }
  if (hdf5_output_param) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(hdf5_output_param);
    if (message_arena != submessage_arena) {
      hdf5_output_param = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, hdf5_output_param, submessage_arena);
    }
    _has_bits_[0] |= 0x00000080u;
  } else {
    _has_bits_[0] &= ~0x00000080u;
  }
  hdf5_output_param_ = hdf5_output_param;
  // @@protoc_insertion_point(field_set_allocated:trtcaffe.V0LayerParameter.hdf5_output_param)
}

// -------------------------------------------------------------------

// PReLUParameter

// optional .trtcaffe.FillerParameter filler = 1;
inline bool PReLUParameter::_internal_has_filler() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || filler_ != nullptr);
  return value;
}
inline bool PReLUParameter::has_filler() const {
  return _internal_has_filler();
}
inline void PReLUParameter::clear_filler() {
  if (filler_ != nullptr) filler_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::trtcaffe::FillerParameter& PReLUParameter::_internal_filler() const {
  const ::trtcaffe::FillerParameter* p = filler_;
  return p != nullptr ? *p : *reinterpret_cast<const ::trtcaffe::FillerParameter*>(
      &::trtcaffe::_FillerParameter_default_instance_);
}
inline const ::trtcaffe::FillerParameter& PReLUParameter::filler() const {
  // @@protoc_insertion_point(field_get:trtcaffe.PReLUParameter.filler)
  return _internal_filler();
}
inline void PReLUParameter::unsafe_arena_set_allocated_filler(
    ::trtcaffe::FillerParameter* filler) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(filler_);
  }
  filler_ = filler;
  if (filler) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:trtcaffe.PReLUParameter.filler)
}
inline ::trtcaffe::FillerParameter* PReLUParameter::release_filler() {
  auto temp = unsafe_arena_release_filler();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::trtcaffe::FillerParameter* PReLUParameter::unsafe_arena_release_filler() {
  // @@protoc_insertion_point(field_release:trtcaffe.PReLUParameter.filler)
  _has_bits_[0] &= ~0x00000001u;
  ::trtcaffe::FillerParameter* temp = filler_;
  filler_ = nullptr;
  return temp;
}
inline ::trtcaffe::FillerParameter* PReLUParameter::_internal_mutable_filler() {
  _has_bits_[0] |= 0x00000001u;
  if (filler_ == nullptr) {
    auto* p = CreateMaybeMessage<::trtcaffe::FillerParameter>(GetArena());
    filler_ = p;
  }
  return filler_;
}
inline ::trtcaffe::FillerParameter* PReLUParameter::mutable_filler() {
  // @@protoc_insertion_point(field_mutable:trtcaffe.PReLUParameter.filler)
  return _internal_mutable_filler();
}
inline void PReLUParameter::set_allocated_filler(::trtcaffe::FillerParameter* filler) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete filler_;
  }
  if (filler) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(filler);
    if (message_arena != submessage_arena) {
      filler = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, filler, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  filler_ = filler;
  // @@protoc_insertion_point(field_set_allocated:trtcaffe.PReLUParameter.filler)
}

// optional bool channel_shared = 2 [default = false];
inline bool PReLUParameter::_internal_has_channel_shared() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool PReLUParameter::has_channel_shared() const {
  return _internal_has_channel_shared();
}
inline void PReLUParameter::clear_channel_shared() {
  channel_shared_ = false;
  _has_bits_[0] &= ~0x00000002u;
}
inline bool PReLUParameter::_internal_channel_shared() const {
  return channel_shared_;
}
inline bool PReLUParameter::channel_shared() const {
  // @@protoc_insertion_point(field_get:trtcaffe.PReLUParameter.channel_shared)
  return _internal_channel_shared();
}
inline void PReLUParameter::_internal_set_channel_shared(bool value) {
  _has_bits_[0] |= 0x00000002u;
  channel_shared_ = value;
}
inline void PReLUParameter::set_channel_shared(bool value) {
  _internal_set_channel_shared(value);
  // @@protoc_insertion_point(field_set:trtcaffe.PReLUParameter.channel_shared)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace trtcaffe

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::trtcaffe::FillerParameter_VarianceNorm> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::trtcaffe::FillerParameter_VarianceNorm>() {
  return ::trtcaffe::FillerParameter_VarianceNorm_descriptor();
}
template <> struct is_proto_enum< ::trtcaffe::SolverParameter_SnapshotFormat> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::trtcaffe::SolverParameter_SnapshotFormat>() {
  return ::trtcaffe::SolverParameter_SnapshotFormat_descriptor();
}
template <> struct is_proto_enum< ::trtcaffe::SolverParameter_SolverMode> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::trtcaffe::SolverParameter_SolverMode>() {
  return ::trtcaffe::SolverParameter_SolverMode_descriptor();
}
template <> struct is_proto_enum< ::trtcaffe::SolverParameter_SolverType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::trtcaffe::SolverParameter_SolverType>() {
  return ::trtcaffe::SolverParameter_SolverType_descriptor();
}
template <> struct is_proto_enum< ::trtcaffe::ParamSpec_DimCheckMode> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::trtcaffe::ParamSpec_DimCheckMode>() {
  return ::trtcaffe::ParamSpec_DimCheckMode_descriptor();
}
template <> struct is_proto_enum< ::trtcaffe::TransformationParameter_InterpolationAlgo> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::trtcaffe::TransformationParameter_InterpolationAlgo>() {
  return ::trtcaffe::TransformationParameter_InterpolationAlgo_descriptor();
}
template <> struct is_proto_enum< ::trtcaffe::LossParameter_NormalizationMode> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::trtcaffe::LossParameter_NormalizationMode>() {
  return ::trtcaffe::LossParameter_NormalizationMode_descriptor();
}
template <> struct is_proto_enum< ::trtcaffe::BatchNormParameter_Engine> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::trtcaffe::BatchNormParameter_Engine>() {
  return ::trtcaffe::BatchNormParameter_Engine_descriptor();
}
template <> struct is_proto_enum< ::trtcaffe::ConvolutionParameter_Engine> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::trtcaffe::ConvolutionParameter_Engine>() {
  return ::trtcaffe::ConvolutionParameter_Engine_descriptor();
}
template <> struct is_proto_enum< ::trtcaffe::ConvolutionParameter_CuDNNConvolutionAlgorithmSeeker> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::trtcaffe::ConvolutionParameter_CuDNNConvolutionAlgorithmSeeker>() {
  return ::trtcaffe::ConvolutionParameter_CuDNNConvolutionAlgorithmSeeker_descriptor();
}
template <> struct is_proto_enum< ::trtcaffe::DataParameter_DB> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::trtcaffe::DataParameter_DB>() {
  return ::trtcaffe::DataParameter_DB_descriptor();
}
template <> struct is_proto_enum< ::trtcaffe::ResizeParameter_Resize_mode> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::trtcaffe::ResizeParameter_Resize_mode>() {
  return ::trtcaffe::ResizeParameter_Resize_mode_descriptor();
}
template <> struct is_proto_enum< ::trtcaffe::ResizeParameter_Pad_mode> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::trtcaffe::ResizeParameter_Pad_mode>() {
  return ::trtcaffe::ResizeParameter_Pad_mode_descriptor();
}
template <> struct is_proto_enum< ::trtcaffe::ResizeParameter_Interp_mode> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::trtcaffe::ResizeParameter_Interp_mode>() {
  return ::trtcaffe::ResizeParameter_Interp_mode_descriptor();
}
template <> struct is_proto_enum< ::trtcaffe::DropoutParameter_Engine> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::trtcaffe::DropoutParameter_Engine>() {
  return ::trtcaffe::DropoutParameter_Engine_descriptor();
}
template <> struct is_proto_enum< ::trtcaffe::EltwiseParameter_EltwiseOp> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::trtcaffe::EltwiseParameter_EltwiseOp>() {
  return ::trtcaffe::EltwiseParameter_EltwiseOp_descriptor();
}
template <> struct is_proto_enum< ::trtcaffe::HingeLossParameter_Norm> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::trtcaffe::HingeLossParameter_Norm>() {
  return ::trtcaffe::HingeLossParameter_Norm_descriptor();
}
template <> struct is_proto_enum< ::trtcaffe::LRNParameter_NormRegion> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::trtcaffe::LRNParameter_NormRegion>() {
  return ::trtcaffe::LRNParameter_NormRegion_descriptor();
}
template <> struct is_proto_enum< ::trtcaffe::LRNParameter_Engine> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::trtcaffe::LRNParameter_Engine>() {
  return ::trtcaffe::LRNParameter_Engine_descriptor();
}
template <> struct is_proto_enum< ::trtcaffe::PoolingParameter_PoolMethod> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::trtcaffe::PoolingParameter_PoolMethod>() {
  return ::trtcaffe::PoolingParameter_PoolMethod_descriptor();
}
template <> struct is_proto_enum< ::trtcaffe::PoolingParameter_Engine> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::trtcaffe::PoolingParameter_Engine>() {
  return ::trtcaffe::PoolingParameter_Engine_descriptor();
}
template <> struct is_proto_enum< ::trtcaffe::PriorBoxParameter_CodeType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::trtcaffe::PriorBoxParameter_CodeType>() {
  return ::trtcaffe::PriorBoxParameter_CodeType_descriptor();
}
template <> struct is_proto_enum< ::trtcaffe::ReductionParameter_ReductionOp> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::trtcaffe::ReductionParameter_ReductionOp>() {
  return ::trtcaffe::ReductionParameter_ReductionOp_descriptor();
}
template <> struct is_proto_enum< ::trtcaffe::ReLUParameter_Engine> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::trtcaffe::ReLUParameter_Engine>() {
  return ::trtcaffe::ReLUParameter_Engine_descriptor();
}
template <> struct is_proto_enum< ::trtcaffe::SigmoidParameter_Engine> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::trtcaffe::SigmoidParameter_Engine>() {
  return ::trtcaffe::SigmoidParameter_Engine_descriptor();
}
template <> struct is_proto_enum< ::trtcaffe::SoftmaxParameter_Engine> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::trtcaffe::SoftmaxParameter_Engine>() {
  return ::trtcaffe::SoftmaxParameter_Engine_descriptor();
}
template <> struct is_proto_enum< ::trtcaffe::TanHParameter_Engine> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::trtcaffe::TanHParameter_Engine>() {
  return ::trtcaffe::TanHParameter_Engine_descriptor();
}
template <> struct is_proto_enum< ::trtcaffe::SPPParameter_PoolMethod> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::trtcaffe::SPPParameter_PoolMethod>() {
  return ::trtcaffe::SPPParameter_PoolMethod_descriptor();
}
template <> struct is_proto_enum< ::trtcaffe::SPPParameter_Engine> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::trtcaffe::SPPParameter_Engine>() {
  return ::trtcaffe::SPPParameter_Engine_descriptor();
}
template <> struct is_proto_enum< ::trtcaffe::V1LayerParameter_LayerType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::trtcaffe::V1LayerParameter_LayerType>() {
  return ::trtcaffe::V1LayerParameter_LayerType_descriptor();
}
template <> struct is_proto_enum< ::trtcaffe::V1LayerParameter_DimCheckMode> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::trtcaffe::V1LayerParameter_DimCheckMode>() {
  return ::trtcaffe::V1LayerParameter_DimCheckMode_descriptor();
}
template <> struct is_proto_enum< ::trtcaffe::V0LayerParameter_PoolMethod> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::trtcaffe::V0LayerParameter_PoolMethod>() {
  return ::trtcaffe::V0LayerParameter_PoolMethod_descriptor();
}
template <> struct is_proto_enum< ::trtcaffe::Type> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::trtcaffe::Type>() {
  return ::trtcaffe::Type_descriptor();
}
template <> struct is_proto_enum< ::trtcaffe::Phase> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::trtcaffe::Phase>() {
  return ::trtcaffe::Phase_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_trtcaffe_2eproto
